'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.5448
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetBaremes"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetBaremes
    Inherits Global.System.Data.DataSet
    
    Private tableMATERIEL As MATERIELDataTable
    
    Private tableTYPE_MATERIEL As TYPE_MATERIELDataTable
    
    Private tableBAREME As BAREMEDataTable
    
    Private tableBAREME_AFFICHAGE As BAREME_AFFICHAGEDataTable
    
    Private tableFACON_CULTURALE As FACON_CULTURALEDataTable
    
    Private tableBAREME_FORFAITAIRE As BAREME_FORFAITAIREDataTable
    
    Private tableBAREME_FORFAITAIRE_AFFICHAGE As BAREME_FORFAITAIRE_AFFICHAGEDataTable
    
    Private tableACTIF_PASSIF As ACTIF_PASSIFDataTable
    
    Private tableTYPE_PLAN_COMPTABLE As TYPE_PLAN_COMPTABLEDataTable
    
    Private tableFOURCHETTE_COMPTES As FOURCHETTE_COMPTESDataTable
    
    Private relationTYPE_MATERIELMATERIEL As Global.System.Data.DataRelation
    
    Private relationMATERIELBAREME As Global.System.Data.DataRelation
    
    Private relationMATERIELBAREME1 As Global.System.Data.DataRelation
    
    Private relationFACON_CULTURALEBAREME_FORFAITAIRE As Global.System.Data.DataRelation
    
    Private relationACTIF_PASSIFFOURCHETTE_COMPTE As Global.System.Data.DataRelation
    
    Private relationTYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MATERIEL")) Is Nothing) Then
                MyBase.Tables.Add(New MATERIELDataTable(ds.Tables("MATERIEL")))
            End If
            If (Not (ds.Tables("TYPE_MATERIEL")) Is Nothing) Then
                MyBase.Tables.Add(New TYPE_MATERIELDataTable(ds.Tables("TYPE_MATERIEL")))
            End If
            If (Not (ds.Tables("BAREME")) Is Nothing) Then
                MyBase.Tables.Add(New BAREMEDataTable(ds.Tables("BAREME")))
            End If
            If (Not (ds.Tables("BAREME_AFFICHAGE")) Is Nothing) Then
                MyBase.Tables.Add(New BAREME_AFFICHAGEDataTable(ds.Tables("BAREME_AFFICHAGE")))
            End If
            If (Not (ds.Tables("FACON_CULTURALE")) Is Nothing) Then
                MyBase.Tables.Add(New FACON_CULTURALEDataTable(ds.Tables("FACON_CULTURALE")))
            End If
            If (Not (ds.Tables("BAREME_FORFAITAIRE")) Is Nothing) Then
                MyBase.Tables.Add(New BAREME_FORFAITAIREDataTable(ds.Tables("BAREME_FORFAITAIRE")))
            End If
            If (Not (ds.Tables("BAREME_FORFAITAIRE_AFFICHAGE")) Is Nothing) Then
                MyBase.Tables.Add(New BAREME_FORFAITAIRE_AFFICHAGEDataTable(ds.Tables("BAREME_FORFAITAIRE_AFFICHAGE")))
            End If
            If (Not (ds.Tables("ACTIF_PASSIF")) Is Nothing) Then
                MyBase.Tables.Add(New ACTIF_PASSIFDataTable(ds.Tables("ACTIF_PASSIF")))
            End If
            If (Not (ds.Tables("TYPE_PLAN_COMPTABLE")) Is Nothing) Then
                MyBase.Tables.Add(New TYPE_PLAN_COMPTABLEDataTable(ds.Tables("TYPE_PLAN_COMPTABLE")))
            End If
            If (Not (ds.Tables("FOURCHETTE_COMPTES")) Is Nothing) Then
                MyBase.Tables.Add(New FOURCHETTE_COMPTESDataTable(ds.Tables("FOURCHETTE_COMPTES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MATERIEL() As MATERIELDataTable
        Get
            Return Me.tableMATERIEL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TYPE_MATERIEL() As TYPE_MATERIELDataTable
        Get
            Return Me.tableTYPE_MATERIEL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BAREME() As BAREMEDataTable
        Get
            Return Me.tableBAREME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BAREME_AFFICHAGE() As BAREME_AFFICHAGEDataTable
        Get
            Return Me.tableBAREME_AFFICHAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FACON_CULTURALE() As FACON_CULTURALEDataTable
        Get
            Return Me.tableFACON_CULTURALE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BAREME_FORFAITAIRE() As BAREME_FORFAITAIREDataTable
        Get
            Return Me.tableBAREME_FORFAITAIRE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BAREME_FORFAITAIRE_AFFICHAGE() As BAREME_FORFAITAIRE_AFFICHAGEDataTable
        Get
            Return Me.tableBAREME_FORFAITAIRE_AFFICHAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACTIF_PASSIF() As ACTIF_PASSIFDataTable
        Get
            Return Me.tableACTIF_PASSIF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TYPE_PLAN_COMPTABLE() As TYPE_PLAN_COMPTABLEDataTable
        Get
            Return Me.tableTYPE_PLAN_COMPTABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FOURCHETTE_COMPTES() As FOURCHETTE_COMPTESDataTable
        Get
            Return Me.tableFOURCHETTE_COMPTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetBaremes = CType(MyBase.Clone,DataSetBaremes)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MATERIEL")) Is Nothing) Then
                MyBase.Tables.Add(New MATERIELDataTable(ds.Tables("MATERIEL")))
            End If
            If (Not (ds.Tables("TYPE_MATERIEL")) Is Nothing) Then
                MyBase.Tables.Add(New TYPE_MATERIELDataTable(ds.Tables("TYPE_MATERIEL")))
            End If
            If (Not (ds.Tables("BAREME")) Is Nothing) Then
                MyBase.Tables.Add(New BAREMEDataTable(ds.Tables("BAREME")))
            End If
            If (Not (ds.Tables("BAREME_AFFICHAGE")) Is Nothing) Then
                MyBase.Tables.Add(New BAREME_AFFICHAGEDataTable(ds.Tables("BAREME_AFFICHAGE")))
            End If
            If (Not (ds.Tables("FACON_CULTURALE")) Is Nothing) Then
                MyBase.Tables.Add(New FACON_CULTURALEDataTable(ds.Tables("FACON_CULTURALE")))
            End If
            If (Not (ds.Tables("BAREME_FORFAITAIRE")) Is Nothing) Then
                MyBase.Tables.Add(New BAREME_FORFAITAIREDataTable(ds.Tables("BAREME_FORFAITAIRE")))
            End If
            If (Not (ds.Tables("BAREME_FORFAITAIRE_AFFICHAGE")) Is Nothing) Then
                MyBase.Tables.Add(New BAREME_FORFAITAIRE_AFFICHAGEDataTable(ds.Tables("BAREME_FORFAITAIRE_AFFICHAGE")))
            End If
            If (Not (ds.Tables("ACTIF_PASSIF")) Is Nothing) Then
                MyBase.Tables.Add(New ACTIF_PASSIFDataTable(ds.Tables("ACTIF_PASSIF")))
            End If
            If (Not (ds.Tables("TYPE_PLAN_COMPTABLE")) Is Nothing) Then
                MyBase.Tables.Add(New TYPE_PLAN_COMPTABLEDataTable(ds.Tables("TYPE_PLAN_COMPTABLE")))
            End If
            If (Not (ds.Tables("FOURCHETTE_COMPTES")) Is Nothing) Then
                MyBase.Tables.Add(New FOURCHETTE_COMPTESDataTable(ds.Tables("FOURCHETTE_COMPTES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMATERIEL = CType(MyBase.Tables("MATERIEL"),MATERIELDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMATERIEL) Is Nothing) Then
                Me.tableMATERIEL.InitVars
            End If
        End If
        Me.tableTYPE_MATERIEL = CType(MyBase.Tables("TYPE_MATERIEL"),TYPE_MATERIELDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTYPE_MATERIEL) Is Nothing) Then
                Me.tableTYPE_MATERIEL.InitVars
            End If
        End If
        Me.tableBAREME = CType(MyBase.Tables("BAREME"),BAREMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBAREME) Is Nothing) Then
                Me.tableBAREME.InitVars
            End If
        End If
        Me.tableBAREME_AFFICHAGE = CType(MyBase.Tables("BAREME_AFFICHAGE"),BAREME_AFFICHAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBAREME_AFFICHAGE) Is Nothing) Then
                Me.tableBAREME_AFFICHAGE.InitVars
            End If
        End If
        Me.tableFACON_CULTURALE = CType(MyBase.Tables("FACON_CULTURALE"),FACON_CULTURALEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFACON_CULTURALE) Is Nothing) Then
                Me.tableFACON_CULTURALE.InitVars
            End If
        End If
        Me.tableBAREME_FORFAITAIRE = CType(MyBase.Tables("BAREME_FORFAITAIRE"),BAREME_FORFAITAIREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBAREME_FORFAITAIRE) Is Nothing) Then
                Me.tableBAREME_FORFAITAIRE.InitVars
            End If
        End If
        Me.tableBAREME_FORFAITAIRE_AFFICHAGE = CType(MyBase.Tables("BAREME_FORFAITAIRE_AFFICHAGE"),BAREME_FORFAITAIRE_AFFICHAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBAREME_FORFAITAIRE_AFFICHAGE) Is Nothing) Then
                Me.tableBAREME_FORFAITAIRE_AFFICHAGE.InitVars
            End If
        End If
        Me.tableACTIF_PASSIF = CType(MyBase.Tables("ACTIF_PASSIF"),ACTIF_PASSIFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableACTIF_PASSIF) Is Nothing) Then
                Me.tableACTIF_PASSIF.InitVars
            End If
        End If
        Me.tableTYPE_PLAN_COMPTABLE = CType(MyBase.Tables("TYPE_PLAN_COMPTABLE"),TYPE_PLAN_COMPTABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTYPE_PLAN_COMPTABLE) Is Nothing) Then
                Me.tableTYPE_PLAN_COMPTABLE.InitVars
            End If
        End If
        Me.tableFOURCHETTE_COMPTES = CType(MyBase.Tables("FOURCHETTE_COMPTES"),FOURCHETTE_COMPTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFOURCHETTE_COMPTES) Is Nothing) Then
                Me.tableFOURCHETTE_COMPTES.InitVars
            End If
        End If
        Me.relationTYPE_MATERIELMATERIEL = Me.Relations("TYPE_MATERIELMATERIEL")
        Me.relationMATERIELBAREME = Me.Relations("MATERIELBAREME")
        Me.relationMATERIELBAREME1 = Me.Relations("MATERIELBAREME1")
        Me.relationFACON_CULTURALEBAREME_FORFAITAIRE = Me.Relations("FACON_CULTURALEBAREME_FORFAITAIRE")
        Me.relationACTIF_PASSIFFOURCHETTE_COMPTE = Me.Relations("ACTIF_PASSIFFOURCHETTE_COMPTE")
        Me.relationTYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE = Me.Relations("TYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetBaremes"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetBaremes.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMATERIEL = New MATERIELDataTable
        MyBase.Tables.Add(Me.tableMATERIEL)
        Me.tableTYPE_MATERIEL = New TYPE_MATERIELDataTable
        MyBase.Tables.Add(Me.tableTYPE_MATERIEL)
        Me.tableBAREME = New BAREMEDataTable
        MyBase.Tables.Add(Me.tableBAREME)
        Me.tableBAREME_AFFICHAGE = New BAREME_AFFICHAGEDataTable
        MyBase.Tables.Add(Me.tableBAREME_AFFICHAGE)
        Me.tableFACON_CULTURALE = New FACON_CULTURALEDataTable
        MyBase.Tables.Add(Me.tableFACON_CULTURALE)
        Me.tableBAREME_FORFAITAIRE = New BAREME_FORFAITAIREDataTable
        MyBase.Tables.Add(Me.tableBAREME_FORFAITAIRE)
        Me.tableBAREME_FORFAITAIRE_AFFICHAGE = New BAREME_FORFAITAIRE_AFFICHAGEDataTable
        MyBase.Tables.Add(Me.tableBAREME_FORFAITAIRE_AFFICHAGE)
        Me.tableACTIF_PASSIF = New ACTIF_PASSIFDataTable
        MyBase.Tables.Add(Me.tableACTIF_PASSIF)
        Me.tableTYPE_PLAN_COMPTABLE = New TYPE_PLAN_COMPTABLEDataTable
        MyBase.Tables.Add(Me.tableTYPE_PLAN_COMPTABLE)
        Me.tableFOURCHETTE_COMPTES = New FOURCHETTE_COMPTESDataTable
        MyBase.Tables.Add(Me.tableFOURCHETTE_COMPTES)
        Me.relationTYPE_MATERIELMATERIEL = New Global.System.Data.DataRelation("TYPE_MATERIELMATERIEL", New Global.System.Data.DataColumn() {Me.tableTYPE_MATERIEL.ID_TYPE_MATERIELColumn}, New Global.System.Data.DataColumn() {Me.tableMATERIEL.ID_TYPE_MATERIELColumn}, false)
        Me.Relations.Add(Me.relationTYPE_MATERIELMATERIEL)
        Me.relationMATERIELBAREME = New Global.System.Data.DataRelation("MATERIELBAREME", New Global.System.Data.DataColumn() {Me.tableMATERIEL.ID_MATERIELColumn}, New Global.System.Data.DataColumn() {Me.tableBAREME.ID_MATERIELColumn}, false)
        Me.Relations.Add(Me.relationMATERIELBAREME)
        Me.relationMATERIELBAREME1 = New Global.System.Data.DataRelation("MATERIELBAREME1", New Global.System.Data.DataColumn() {Me.tableMATERIEL.ID_MATERIELColumn}, New Global.System.Data.DataColumn() {Me.tableBAREME_AFFICHAGE.ID_MATERIELColumn}, false)
        Me.Relations.Add(Me.relationMATERIELBAREME1)
        Me.relationFACON_CULTURALEBAREME_FORFAITAIRE = New Global.System.Data.DataRelation("FACON_CULTURALEBAREME_FORFAITAIRE", New Global.System.Data.DataColumn() {Me.tableFACON_CULTURALE.ID_FACON_CULTURALEColumn}, New Global.System.Data.DataColumn() {Me.tableBAREME_FORFAITAIRE.ID_FACON_CULTURALEColumn}, false)
        Me.Relations.Add(Me.relationFACON_CULTURALEBAREME_FORFAITAIRE)
        Me.relationACTIF_PASSIFFOURCHETTE_COMPTE = New Global.System.Data.DataRelation("ACTIF_PASSIFFOURCHETTE_COMPTE", New Global.System.Data.DataColumn() {Me.tableACTIF_PASSIF.ID_ACTIF_PASSIFColumn}, New Global.System.Data.DataColumn() {Me.tableFOURCHETTE_COMPTES.ID_ACTIF_PASSIFColumn}, false)
        Me.Relations.Add(Me.relationACTIF_PASSIFFOURCHETTE_COMPTE)
        Me.relationTYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE = New Global.System.Data.DataRelation("TYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE", New Global.System.Data.DataColumn() {Me.tableTYPE_PLAN_COMPTABLE.ID_TYPE_PLAN_COMPTABLEColumn}, New Global.System.Data.DataColumn() {Me.tableFOURCHETTE_COMPTES.ID_TYPE_PLAN_COMPTABLEColumn}, false)
        Me.Relations.Add(Me.relationTYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMATERIEL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTYPE_MATERIEL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBAREME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBAREME_AFFICHAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFACON_CULTURALE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBAREME_FORFAITAIRE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBAREME_FORFAITAIRE_AFFICHAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeACTIF_PASSIF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTYPE_PLAN_COMPTABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFOURCHETTE_COMPTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetBaremes = New DataSetBaremes
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub MATERIELRowChangeEventHandler(ByVal sender As Object, ByVal e As MATERIELRowChangeEvent)
    
    Public Delegate Sub TYPE_MATERIELRowChangeEventHandler(ByVal sender As Object, ByVal e As TYPE_MATERIELRowChangeEvent)
    
    Public Delegate Sub BAREMERowChangeEventHandler(ByVal sender As Object, ByVal e As BAREMERowChangeEvent)
    
    Public Delegate Sub BAREME_AFFICHAGERowChangeEventHandler(ByVal sender As Object, ByVal e As BAREME_AFFICHAGERowChangeEvent)
    
    Public Delegate Sub FACON_CULTURALERowChangeEventHandler(ByVal sender As Object, ByVal e As FACON_CULTURALERowChangeEvent)
    
    Public Delegate Sub BAREME_FORFAITAIRERowChangeEventHandler(ByVal sender As Object, ByVal e As BAREME_FORFAITAIRERowChangeEvent)
    
    Public Delegate Sub BAREME_FORFAITAIRE_AFFICHAGERowChangeEventHandler(ByVal sender As Object, ByVal e As BAREME_FORFAITAIRE_AFFICHAGERowChangeEvent)
    
    Public Delegate Sub ACTIF_PASSIFRowChangeEventHandler(ByVal sender As Object, ByVal e As ACTIF_PASSIFRowChangeEvent)
    
    Public Delegate Sub TYPE_PLAN_COMPTABLERowChangeEventHandler(ByVal sender As Object, ByVal e As TYPE_PLAN_COMPTABLERowChangeEvent)
    
    Public Delegate Sub FOURCHETTE_COMPTESRowChangeEventHandler(ByVal sender As Object, ByVal e As FOURCHETTE_COMPTESRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MATERIELDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_MATERIEL As Global.System.Data.DataColumn
        
        Private columnLIBELLE_MATERIEL As Global.System.Data.DataColumn
        
        Private columnID_TYPE_MATERIEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MATERIEL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_MATERIELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_MATERIEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIBELLE_MATERIELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIBELLE_MATERIEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_TYPE_MATERIELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_TYPE_MATERIEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MATERIELRow
            Get
                Return CType(Me.Rows(index),MATERIELRow)
            End Get
        End Property
        
        Public Event MATERIELRowChanging As MATERIELRowChangeEventHandler
        
        Public Event MATERIELRowChanged As MATERIELRowChangeEventHandler
        
        Public Event MATERIELRowDeleting As MATERIELRowChangeEventHandler
        
        Public Event MATERIELRowDeleted As MATERIELRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMATERIELRow(ByVal row As MATERIELRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMATERIELRow(ByVal LIBELLE_MATERIEL As String, ByVal parentTYPE_MATERIELRowByTYPE_MATERIELMATERIEL As TYPE_MATERIELRow) As MATERIELRow
            Dim rowMATERIELRow As MATERIELRow = CType(Me.NewRow,MATERIELRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LIBELLE_MATERIEL, Nothing}
            If (Not (parentTYPE_MATERIELRowByTYPE_MATERIELMATERIEL) Is Nothing) Then
                columnValuesArray(2) = parentTYPE_MATERIELRowByTYPE_MATERIELMATERIEL(0)
            End If
            rowMATERIELRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMATERIELRow)
            Return rowMATERIELRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_MATERIEL(ByVal ID_MATERIEL As Integer) As MATERIELRow
            Return CType(Me.Rows.Find(New Object() {ID_MATERIEL}),MATERIELRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MATERIELDataTable = CType(MyBase.Clone,MATERIELDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MATERIELDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_MATERIEL = MyBase.Columns("ID_MATERIEL")
            Me.columnLIBELLE_MATERIEL = MyBase.Columns("LIBELLE_MATERIEL")
            Me.columnID_TYPE_MATERIEL = MyBase.Columns("ID_TYPE_MATERIEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_MATERIEL = New Global.System.Data.DataColumn("ID_MATERIEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_MATERIEL)
            Me.columnLIBELLE_MATERIEL = New Global.System.Data.DataColumn("LIBELLE_MATERIEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIBELLE_MATERIEL)
            Me.columnID_TYPE_MATERIEL = New Global.System.Data.DataColumn("ID_TYPE_MATERIEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_TYPE_MATERIEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_MATERIEL}, true))
            Me.columnID_MATERIEL.AutoIncrement = true
            Me.columnID_MATERIEL.AllowDBNull = false
            Me.columnID_MATERIEL.Unique = true
            Me.columnLIBELLE_MATERIEL.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMATERIELRow() As MATERIELRow
            Return CType(Me.NewRow,MATERIELRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MATERIELRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MATERIELRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MATERIELRowChangedEvent) Is Nothing) Then
                RaiseEvent MATERIELRowChanged(Me, New MATERIELRowChangeEvent(CType(e.Row,MATERIELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MATERIELRowChangingEvent) Is Nothing) Then
                RaiseEvent MATERIELRowChanging(Me, New MATERIELRowChangeEvent(CType(e.Row,MATERIELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MATERIELRowDeletedEvent) Is Nothing) Then
                RaiseEvent MATERIELRowDeleted(Me, New MATERIELRowChangeEvent(CType(e.Row,MATERIELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MATERIELRowDeletingEvent) Is Nothing) Then
                RaiseEvent MATERIELRowDeleting(Me, New MATERIELRowChangeEvent(CType(e.Row,MATERIELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMATERIELRow(ByVal row As MATERIELRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetBaremes = New DataSetBaremes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MATERIELDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TYPE_MATERIELDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_TYPE_MATERIEL As Global.System.Data.DataColumn
        
        Private columnCODE_TYPE_MATERIEL As Global.System.Data.DataColumn
        
        Private columnLIBELLE_TYPE_MATERIEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TYPE_MATERIEL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_TYPE_MATERIELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_TYPE_MATERIEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_TYPE_MATERIELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_TYPE_MATERIEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIBELLE_TYPE_MATERIELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIBELLE_TYPE_MATERIEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TYPE_MATERIELRow
            Get
                Return CType(Me.Rows(index),TYPE_MATERIELRow)
            End Get
        End Property
        
        Public Event TYPE_MATERIELRowChanging As TYPE_MATERIELRowChangeEventHandler
        
        Public Event TYPE_MATERIELRowChanged As TYPE_MATERIELRowChangeEventHandler
        
        Public Event TYPE_MATERIELRowDeleting As TYPE_MATERIELRowChangeEventHandler
        
        Public Event TYPE_MATERIELRowDeleted As TYPE_MATERIELRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTYPE_MATERIELRow(ByVal row As TYPE_MATERIELRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTYPE_MATERIELRow(ByVal CODE_TYPE_MATERIEL As String, ByVal LIBELLE_TYPE_MATERIEL As String) As TYPE_MATERIELRow
            Dim rowTYPE_MATERIELRow As TYPE_MATERIELRow = CType(Me.NewRow,TYPE_MATERIELRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CODE_TYPE_MATERIEL, LIBELLE_TYPE_MATERIEL}
            rowTYPE_MATERIELRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTYPE_MATERIELRow)
            Return rowTYPE_MATERIELRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_TYPE_MATERIEL(ByVal ID_TYPE_MATERIEL As Integer) As TYPE_MATERIELRow
            Return CType(Me.Rows.Find(New Object() {ID_TYPE_MATERIEL}),TYPE_MATERIELRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TYPE_MATERIELDataTable = CType(MyBase.Clone,TYPE_MATERIELDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TYPE_MATERIELDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_TYPE_MATERIEL = MyBase.Columns("ID_TYPE_MATERIEL")
            Me.columnCODE_TYPE_MATERIEL = MyBase.Columns("CODE_TYPE_MATERIEL")
            Me.columnLIBELLE_TYPE_MATERIEL = MyBase.Columns("LIBELLE_TYPE_MATERIEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_TYPE_MATERIEL = New Global.System.Data.DataColumn("ID_TYPE_MATERIEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_TYPE_MATERIEL)
            Me.columnCODE_TYPE_MATERIEL = New Global.System.Data.DataColumn("CODE_TYPE_MATERIEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_TYPE_MATERIEL)
            Me.columnLIBELLE_TYPE_MATERIEL = New Global.System.Data.DataColumn("LIBELLE_TYPE_MATERIEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIBELLE_TYPE_MATERIEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_TYPE_MATERIEL}, true))
            Me.columnID_TYPE_MATERIEL.AutoIncrement = true
            Me.columnID_TYPE_MATERIEL.AllowDBNull = false
            Me.columnID_TYPE_MATERIEL.Unique = true
            Me.columnCODE_TYPE_MATERIEL.MaxLength = 4
            Me.columnLIBELLE_TYPE_MATERIEL.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTYPE_MATERIELRow() As TYPE_MATERIELRow
            Return CType(Me.NewRow,TYPE_MATERIELRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TYPE_MATERIELRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TYPE_MATERIELRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TYPE_MATERIELRowChangedEvent) Is Nothing) Then
                RaiseEvent TYPE_MATERIELRowChanged(Me, New TYPE_MATERIELRowChangeEvent(CType(e.Row,TYPE_MATERIELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TYPE_MATERIELRowChangingEvent) Is Nothing) Then
                RaiseEvent TYPE_MATERIELRowChanging(Me, New TYPE_MATERIELRowChangeEvent(CType(e.Row,TYPE_MATERIELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TYPE_MATERIELRowDeletedEvent) Is Nothing) Then
                RaiseEvent TYPE_MATERIELRowDeleted(Me, New TYPE_MATERIELRowChangeEvent(CType(e.Row,TYPE_MATERIELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TYPE_MATERIELRowDeletingEvent) Is Nothing) Then
                RaiseEvent TYPE_MATERIELRowDeleting(Me, New TYPE_MATERIELRowChangeEvent(CType(e.Row,TYPE_MATERIELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTYPE_MATERIELRow(ByVal row As TYPE_MATERIELRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetBaremes = New DataSetBaremes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TYPE_MATERIELDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BAREMEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_BAREME As Global.System.Data.DataColumn
        
        Private columnANNEE_BAREME As Global.System.Data.DataColumn
        
        Private columnCOUT_TOTAL_PAR_HEURE As Global.System.Data.DataColumn
        
        Private columnID_MATERIEL As Global.System.Data.DataColumn
        
        Private columnINFO_COMPL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BAREME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_BAREMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_BAREME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANNEE_BAREMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANNEE_BAREME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COUT_TOTAL_PAR_HEUREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUT_TOTAL_PAR_HEURE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_MATERIELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_MATERIEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INFO_COMPLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINFO_COMPL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BAREMERow
            Get
                Return CType(Me.Rows(index),BAREMERow)
            End Get
        End Property
        
        Public Event BAREMERowChanging As BAREMERowChangeEventHandler
        
        Public Event BAREMERowChanged As BAREMERowChangeEventHandler
        
        Public Event BAREMERowDeleting As BAREMERowChangeEventHandler
        
        Public Event BAREMERowDeleted As BAREMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBAREMERow(ByVal row As BAREMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBAREMERow(ByVal ANNEE_BAREME As String, ByVal COUT_TOTAL_PAR_HEURE As Decimal, ByVal parentMATERIELRowByMATERIELBAREME As MATERIELRow, ByVal INFO_COMPL As String) As BAREMERow
            Dim rowBAREMERow As BAREMERow = CType(Me.NewRow,BAREMERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ANNEE_BAREME, COUT_TOTAL_PAR_HEURE, Nothing, INFO_COMPL}
            If (Not (parentMATERIELRowByMATERIELBAREME) Is Nothing) Then
                columnValuesArray(3) = parentMATERIELRowByMATERIELBAREME(0)
            End If
            rowBAREMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBAREMERow)
            Return rowBAREMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_BAREME(ByVal ID_BAREME As Integer) As BAREMERow
            Return CType(Me.Rows.Find(New Object() {ID_BAREME}),BAREMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BAREMEDataTable = CType(MyBase.Clone,BAREMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BAREMEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_BAREME = MyBase.Columns("ID_BAREME")
            Me.columnANNEE_BAREME = MyBase.Columns("ANNEE_BAREME")
            Me.columnCOUT_TOTAL_PAR_HEURE = MyBase.Columns("COUT_TOTAL_PAR_HEURE")
            Me.columnID_MATERIEL = MyBase.Columns("ID_MATERIEL")
            Me.columnINFO_COMPL = MyBase.Columns("INFO_COMPL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_BAREME = New Global.System.Data.DataColumn("ID_BAREME", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_BAREME)
            Me.columnANNEE_BAREME = New Global.System.Data.DataColumn("ANNEE_BAREME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANNEE_BAREME)
            Me.columnCOUT_TOTAL_PAR_HEURE = New Global.System.Data.DataColumn("COUT_TOTAL_PAR_HEURE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUT_TOTAL_PAR_HEURE)
            Me.columnID_MATERIEL = New Global.System.Data.DataColumn("ID_MATERIEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_MATERIEL)
            Me.columnINFO_COMPL = New Global.System.Data.DataColumn("INFO_COMPL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINFO_COMPL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_BAREME}, true))
            Me.columnID_BAREME.AutoIncrement = true
            Me.columnID_BAREME.AllowDBNull = false
            Me.columnID_BAREME.Unique = true
            Me.columnANNEE_BAREME.MaxLength = 4
            Me.columnINFO_COMPL.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBAREMERow() As BAREMERow
            Return CType(Me.NewRow,BAREMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BAREMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BAREMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BAREMERowChangedEvent) Is Nothing) Then
                RaiseEvent BAREMERowChanged(Me, New BAREMERowChangeEvent(CType(e.Row,BAREMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BAREMERowChangingEvent) Is Nothing) Then
                RaiseEvent BAREMERowChanging(Me, New BAREMERowChangeEvent(CType(e.Row,BAREMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BAREMERowDeletedEvent) Is Nothing) Then
                RaiseEvent BAREMERowDeleted(Me, New BAREMERowChangeEvent(CType(e.Row,BAREMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BAREMERowDeletingEvent) Is Nothing) Then
                RaiseEvent BAREMERowDeleting(Me, New BAREMERowChangeEvent(CType(e.Row,BAREMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBAREMERow(ByVal row As BAREMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetBaremes = New DataSetBaremes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BAREMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BAREME_AFFICHAGEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_MATERIEL As Global.System.Data.DataColumn
        
        Private columnCODE_TYPE_MATERIEL As Global.System.Data.DataColumn
        
        Private columnANNEE_BAREME As Global.System.Data.DataColumn
        
        Private columnCOUT_TOTAL_PAR_HEURE As Global.System.Data.DataColumn
        
        Private columnLibelleMateriel As Global.System.Data.DataColumn
        
        Private columnINFO_COMPL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BAREME_AFFICHAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_MATERIELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_MATERIEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_TYPE_MATERIELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_TYPE_MATERIEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANNEE_BAREMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANNEE_BAREME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COUT_TOTAL_PAR_HEUREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUT_TOTAL_PAR_HEURE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleMaterielColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelleMateriel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INFO_COMPLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINFO_COMPL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BAREME_AFFICHAGERow
            Get
                Return CType(Me.Rows(index),BAREME_AFFICHAGERow)
            End Get
        End Property
        
        Public Event BAREME_AFFICHAGERowChanging As BAREME_AFFICHAGERowChangeEventHandler
        
        Public Event BAREME_AFFICHAGERowChanged As BAREME_AFFICHAGERowChangeEventHandler
        
        Public Event BAREME_AFFICHAGERowDeleting As BAREME_AFFICHAGERowChangeEventHandler
        
        Public Event BAREME_AFFICHAGERowDeleted As BAREME_AFFICHAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBAREME_AFFICHAGERow(ByVal row As BAREME_AFFICHAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBAREME_AFFICHAGERow(ByVal CODE_TYPE_MATERIEL As String, ByVal ANNEE_BAREME As String, ByVal COUT_TOTAL_PAR_HEURE As Decimal, ByVal LibelleMateriel As String, ByVal INFO_COMPL As String) As BAREME_AFFICHAGERow
            Dim rowBAREME_AFFICHAGERow As BAREME_AFFICHAGERow = CType(Me.NewRow,BAREME_AFFICHAGERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CODE_TYPE_MATERIEL, ANNEE_BAREME, COUT_TOTAL_PAR_HEURE, LibelleMateriel, INFO_COMPL}
            rowBAREME_AFFICHAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBAREME_AFFICHAGERow)
            Return rowBAREME_AFFICHAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BAREME_AFFICHAGEDataTable = CType(MyBase.Clone,BAREME_AFFICHAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BAREME_AFFICHAGEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_MATERIEL = MyBase.Columns("ID_MATERIEL")
            Me.columnCODE_TYPE_MATERIEL = MyBase.Columns("CODE_TYPE_MATERIEL")
            Me.columnANNEE_BAREME = MyBase.Columns("ANNEE_BAREME")
            Me.columnCOUT_TOTAL_PAR_HEURE = MyBase.Columns("COUT_TOTAL_PAR_HEURE")
            Me.columnLibelleMateriel = MyBase.Columns("LibelleMateriel")
            Me.columnINFO_COMPL = MyBase.Columns("INFO_COMPL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_MATERIEL = New Global.System.Data.DataColumn("ID_MATERIEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_MATERIEL)
            Me.columnCODE_TYPE_MATERIEL = New Global.System.Data.DataColumn("CODE_TYPE_MATERIEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_TYPE_MATERIEL)
            Me.columnANNEE_BAREME = New Global.System.Data.DataColumn("ANNEE_BAREME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANNEE_BAREME)
            Me.columnCOUT_TOTAL_PAR_HEURE = New Global.System.Data.DataColumn("COUT_TOTAL_PAR_HEURE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUT_TOTAL_PAR_HEURE)
            Me.columnLibelleMateriel = New Global.System.Data.DataColumn("LibelleMateriel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelleMateriel)
            Me.columnINFO_COMPL = New Global.System.Data.DataColumn("INFO_COMPL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINFO_COMPL)
            Me.columnID_MATERIEL.AutoIncrement = true
            Me.columnCODE_TYPE_MATERIEL.MaxLength = 4
            Me.columnANNEE_BAREME.MaxLength = 4
            Me.columnINFO_COMPL.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBAREME_AFFICHAGERow() As BAREME_AFFICHAGERow
            Return CType(Me.NewRow,BAREME_AFFICHAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BAREME_AFFICHAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BAREME_AFFICHAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BAREME_AFFICHAGERowChangedEvent) Is Nothing) Then
                RaiseEvent BAREME_AFFICHAGERowChanged(Me, New BAREME_AFFICHAGERowChangeEvent(CType(e.Row,BAREME_AFFICHAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BAREME_AFFICHAGERowChangingEvent) Is Nothing) Then
                RaiseEvent BAREME_AFFICHAGERowChanging(Me, New BAREME_AFFICHAGERowChangeEvent(CType(e.Row,BAREME_AFFICHAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BAREME_AFFICHAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent BAREME_AFFICHAGERowDeleted(Me, New BAREME_AFFICHAGERowChangeEvent(CType(e.Row,BAREME_AFFICHAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BAREME_AFFICHAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent BAREME_AFFICHAGERowDeleting(Me, New BAREME_AFFICHAGERowChangeEvent(CType(e.Row,BAREME_AFFICHAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBAREME_AFFICHAGERow(ByVal row As BAREME_AFFICHAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetBaremes = New DataSetBaremes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BAREME_AFFICHAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FACON_CULTURALEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_FACON_CULTURALE As Global.System.Data.DataColumn
        
        Private columnLIBELLE_FACON_CULTURALE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FACON_CULTURALE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_FACON_CULTURALEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_FACON_CULTURALE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIBELLE_FACON_CULTURALEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIBELLE_FACON_CULTURALE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FACON_CULTURALERow
            Get
                Return CType(Me.Rows(index),FACON_CULTURALERow)
            End Get
        End Property
        
        Public Event FACON_CULTURALERowChanging As FACON_CULTURALERowChangeEventHandler
        
        Public Event FACON_CULTURALERowChanged As FACON_CULTURALERowChangeEventHandler
        
        Public Event FACON_CULTURALERowDeleting As FACON_CULTURALERowChangeEventHandler
        
        Public Event FACON_CULTURALERowDeleted As FACON_CULTURALERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFACON_CULTURALERow(ByVal row As FACON_CULTURALERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFACON_CULTURALERow(ByVal LIBELLE_FACON_CULTURALE As String) As FACON_CULTURALERow
            Dim rowFACON_CULTURALERow As FACON_CULTURALERow = CType(Me.NewRow,FACON_CULTURALERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LIBELLE_FACON_CULTURALE}
            rowFACON_CULTURALERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFACON_CULTURALERow)
            Return rowFACON_CULTURALERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_FACON_CULTURALE(ByVal ID_FACON_CULTURALE As Integer) As FACON_CULTURALERow
            Return CType(Me.Rows.Find(New Object() {ID_FACON_CULTURALE}),FACON_CULTURALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FACON_CULTURALEDataTable = CType(MyBase.Clone,FACON_CULTURALEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FACON_CULTURALEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_FACON_CULTURALE = MyBase.Columns("ID_FACON_CULTURALE")
            Me.columnLIBELLE_FACON_CULTURALE = MyBase.Columns("LIBELLE_FACON_CULTURALE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_FACON_CULTURALE = New Global.System.Data.DataColumn("ID_FACON_CULTURALE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_FACON_CULTURALE)
            Me.columnLIBELLE_FACON_CULTURALE = New Global.System.Data.DataColumn("LIBELLE_FACON_CULTURALE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIBELLE_FACON_CULTURALE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_FACON_CULTURALE}, true))
            Me.columnID_FACON_CULTURALE.AutoIncrement = true
            Me.columnID_FACON_CULTURALE.AllowDBNull = false
            Me.columnID_FACON_CULTURALE.Unique = true
            Me.columnLIBELLE_FACON_CULTURALE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFACON_CULTURALERow() As FACON_CULTURALERow
            Return CType(Me.NewRow,FACON_CULTURALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FACON_CULTURALERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FACON_CULTURALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FACON_CULTURALERowChangedEvent) Is Nothing) Then
                RaiseEvent FACON_CULTURALERowChanged(Me, New FACON_CULTURALERowChangeEvent(CType(e.Row,FACON_CULTURALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FACON_CULTURALERowChangingEvent) Is Nothing) Then
                RaiseEvent FACON_CULTURALERowChanging(Me, New FACON_CULTURALERowChangeEvent(CType(e.Row,FACON_CULTURALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FACON_CULTURALERowDeletedEvent) Is Nothing) Then
                RaiseEvent FACON_CULTURALERowDeleted(Me, New FACON_CULTURALERowChangeEvent(CType(e.Row,FACON_CULTURALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FACON_CULTURALERowDeletingEvent) Is Nothing) Then
                RaiseEvent FACON_CULTURALERowDeleting(Me, New FACON_CULTURALERowChangeEvent(CType(e.Row,FACON_CULTURALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFACON_CULTURALERow(ByVal row As FACON_CULTURALERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetBaremes = New DataSetBaremes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FACON_CULTURALEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BAREME_FORFAITAIREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_BAREME_FORFAITAIRE As Global.System.Data.DataColumn
        
        Private columnANNEE_BAREME_FORFAITAIRE As Global.System.Data.DataColumn
        
        Private columnVALEUR_FORFAITAIRE As Global.System.Data.DataColumn
        
        Private columnID_FACON_CULTURALE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BAREME_FORFAITAIRE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_BAREME_FORFAITAIREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_BAREME_FORFAITAIRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANNEE_BAREME_FORFAITAIREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANNEE_BAREME_FORFAITAIRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALEUR_FORFAITAIREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALEUR_FORFAITAIRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_FACON_CULTURALEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_FACON_CULTURALE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BAREME_FORFAITAIRERow
            Get
                Return CType(Me.Rows(index),BAREME_FORFAITAIRERow)
            End Get
        End Property
        
        Public Event BAREME_FORFAITAIRERowChanging As BAREME_FORFAITAIRERowChangeEventHandler
        
        Public Event BAREME_FORFAITAIRERowChanged As BAREME_FORFAITAIRERowChangeEventHandler
        
        Public Event BAREME_FORFAITAIRERowDeleting As BAREME_FORFAITAIRERowChangeEventHandler
        
        Public Event BAREME_FORFAITAIRERowDeleted As BAREME_FORFAITAIRERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBAREME_FORFAITAIRERow(ByVal row As BAREME_FORFAITAIRERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBAREME_FORFAITAIRERow(ByVal ANNEE_BAREME_FORFAITAIRE As String, ByVal VALEUR_FORFAITAIRE As Decimal, ByVal parentFACON_CULTURALERowByFACON_CULTURALEBAREME_FORFAITAIRE As FACON_CULTURALERow) As BAREME_FORFAITAIRERow
            Dim rowBAREME_FORFAITAIRERow As BAREME_FORFAITAIRERow = CType(Me.NewRow,BAREME_FORFAITAIRERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ANNEE_BAREME_FORFAITAIRE, VALEUR_FORFAITAIRE, Nothing}
            If (Not (parentFACON_CULTURALERowByFACON_CULTURALEBAREME_FORFAITAIRE) Is Nothing) Then
                columnValuesArray(3) = parentFACON_CULTURALERowByFACON_CULTURALEBAREME_FORFAITAIRE(0)
            End If
            rowBAREME_FORFAITAIRERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBAREME_FORFAITAIRERow)
            Return rowBAREME_FORFAITAIRERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_BAREME_FORFAITAIRE(ByVal ID_BAREME_FORFAITAIRE As Integer) As BAREME_FORFAITAIRERow
            Return CType(Me.Rows.Find(New Object() {ID_BAREME_FORFAITAIRE}),BAREME_FORFAITAIRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BAREME_FORFAITAIREDataTable = CType(MyBase.Clone,BAREME_FORFAITAIREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BAREME_FORFAITAIREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_BAREME_FORFAITAIRE = MyBase.Columns("ID_BAREME_FORFAITAIRE")
            Me.columnANNEE_BAREME_FORFAITAIRE = MyBase.Columns("ANNEE_BAREME_FORFAITAIRE")
            Me.columnVALEUR_FORFAITAIRE = MyBase.Columns("VALEUR_FORFAITAIRE")
            Me.columnID_FACON_CULTURALE = MyBase.Columns("ID_FACON_CULTURALE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_BAREME_FORFAITAIRE = New Global.System.Data.DataColumn("ID_BAREME_FORFAITAIRE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_BAREME_FORFAITAIRE)
            Me.columnANNEE_BAREME_FORFAITAIRE = New Global.System.Data.DataColumn("ANNEE_BAREME_FORFAITAIRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANNEE_BAREME_FORFAITAIRE)
            Me.columnVALEUR_FORFAITAIRE = New Global.System.Data.DataColumn("VALEUR_FORFAITAIRE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALEUR_FORFAITAIRE)
            Me.columnID_FACON_CULTURALE = New Global.System.Data.DataColumn("ID_FACON_CULTURALE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_FACON_CULTURALE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_BAREME_FORFAITAIRE}, true))
            Me.columnID_BAREME_FORFAITAIRE.AutoIncrement = true
            Me.columnID_BAREME_FORFAITAIRE.AllowDBNull = false
            Me.columnID_BAREME_FORFAITAIRE.Unique = true
            Me.columnANNEE_BAREME_FORFAITAIRE.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBAREME_FORFAITAIRERow() As BAREME_FORFAITAIRERow
            Return CType(Me.NewRow,BAREME_FORFAITAIRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BAREME_FORFAITAIRERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BAREME_FORFAITAIRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BAREME_FORFAITAIRERowChangedEvent) Is Nothing) Then
                RaiseEvent BAREME_FORFAITAIRERowChanged(Me, New BAREME_FORFAITAIRERowChangeEvent(CType(e.Row,BAREME_FORFAITAIRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BAREME_FORFAITAIRERowChangingEvent) Is Nothing) Then
                RaiseEvent BAREME_FORFAITAIRERowChanging(Me, New BAREME_FORFAITAIRERowChangeEvent(CType(e.Row,BAREME_FORFAITAIRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BAREME_FORFAITAIRERowDeletedEvent) Is Nothing) Then
                RaiseEvent BAREME_FORFAITAIRERowDeleted(Me, New BAREME_FORFAITAIRERowChangeEvent(CType(e.Row,BAREME_FORFAITAIRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BAREME_FORFAITAIRERowDeletingEvent) Is Nothing) Then
                RaiseEvent BAREME_FORFAITAIRERowDeleting(Me, New BAREME_FORFAITAIRERowChangeEvent(CType(e.Row,BAREME_FORFAITAIRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBAREME_FORFAITAIRERow(ByVal row As BAREME_FORFAITAIRERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetBaremes = New DataSetBaremes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BAREME_FORFAITAIREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BAREME_FORFAITAIRE_AFFICHAGEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLIBELLE_FACON_CULTURALE As Global.System.Data.DataColumn
        
        Private columnANNEE_BAREME_FORFAITAIRE As Global.System.Data.DataColumn
        
        Private columnVALEUR_FORFAITAIRE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BAREME_FORFAITAIRE_AFFICHAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIBELLE_FACON_CULTURALEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIBELLE_FACON_CULTURALE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANNEE_BAREME_FORFAITAIREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANNEE_BAREME_FORFAITAIRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALEUR_FORFAITAIREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALEUR_FORFAITAIRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BAREME_FORFAITAIRE_AFFICHAGERow
            Get
                Return CType(Me.Rows(index),BAREME_FORFAITAIRE_AFFICHAGERow)
            End Get
        End Property
        
        Public Event BAREME_FORFAITAIRE_AFFICHAGERowChanging As BAREME_FORFAITAIRE_AFFICHAGERowChangeEventHandler
        
        Public Event BAREME_FORFAITAIRE_AFFICHAGERowChanged As BAREME_FORFAITAIRE_AFFICHAGERowChangeEventHandler
        
        Public Event BAREME_FORFAITAIRE_AFFICHAGERowDeleting As BAREME_FORFAITAIRE_AFFICHAGERowChangeEventHandler
        
        Public Event BAREME_FORFAITAIRE_AFFICHAGERowDeleted As BAREME_FORFAITAIRE_AFFICHAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBAREME_FORFAITAIRE_AFFICHAGERow(ByVal row As BAREME_FORFAITAIRE_AFFICHAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBAREME_FORFAITAIRE_AFFICHAGERow(ByVal LIBELLE_FACON_CULTURALE As String, ByVal ANNEE_BAREME_FORFAITAIRE As String, ByVal VALEUR_FORFAITAIRE As Decimal) As BAREME_FORFAITAIRE_AFFICHAGERow
            Dim rowBAREME_FORFAITAIRE_AFFICHAGERow As BAREME_FORFAITAIRE_AFFICHAGERow = CType(Me.NewRow,BAREME_FORFAITAIRE_AFFICHAGERow)
            Dim columnValuesArray() As Object = New Object() {LIBELLE_FACON_CULTURALE, ANNEE_BAREME_FORFAITAIRE, VALEUR_FORFAITAIRE}
            rowBAREME_FORFAITAIRE_AFFICHAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBAREME_FORFAITAIRE_AFFICHAGERow)
            Return rowBAREME_FORFAITAIRE_AFFICHAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BAREME_FORFAITAIRE_AFFICHAGEDataTable = CType(MyBase.Clone,BAREME_FORFAITAIRE_AFFICHAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BAREME_FORFAITAIRE_AFFICHAGEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLIBELLE_FACON_CULTURALE = MyBase.Columns("LIBELLE_FACON_CULTURALE")
            Me.columnANNEE_BAREME_FORFAITAIRE = MyBase.Columns("ANNEE_BAREME_FORFAITAIRE")
            Me.columnVALEUR_FORFAITAIRE = MyBase.Columns("VALEUR_FORFAITAIRE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLIBELLE_FACON_CULTURALE = New Global.System.Data.DataColumn("LIBELLE_FACON_CULTURALE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIBELLE_FACON_CULTURALE)
            Me.columnANNEE_BAREME_FORFAITAIRE = New Global.System.Data.DataColumn("ANNEE_BAREME_FORFAITAIRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANNEE_BAREME_FORFAITAIRE)
            Me.columnVALEUR_FORFAITAIRE = New Global.System.Data.DataColumn("VALEUR_FORFAITAIRE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALEUR_FORFAITAIRE)
            Me.columnLIBELLE_FACON_CULTURALE.MaxLength = 255
            Me.columnANNEE_BAREME_FORFAITAIRE.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBAREME_FORFAITAIRE_AFFICHAGERow() As BAREME_FORFAITAIRE_AFFICHAGERow
            Return CType(Me.NewRow,BAREME_FORFAITAIRE_AFFICHAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BAREME_FORFAITAIRE_AFFICHAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BAREME_FORFAITAIRE_AFFICHAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BAREME_FORFAITAIRE_AFFICHAGERowChangedEvent) Is Nothing) Then
                RaiseEvent BAREME_FORFAITAIRE_AFFICHAGERowChanged(Me, New BAREME_FORFAITAIRE_AFFICHAGERowChangeEvent(CType(e.Row,BAREME_FORFAITAIRE_AFFICHAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BAREME_FORFAITAIRE_AFFICHAGERowChangingEvent) Is Nothing) Then
                RaiseEvent BAREME_FORFAITAIRE_AFFICHAGERowChanging(Me, New BAREME_FORFAITAIRE_AFFICHAGERowChangeEvent(CType(e.Row,BAREME_FORFAITAIRE_AFFICHAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BAREME_FORFAITAIRE_AFFICHAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent BAREME_FORFAITAIRE_AFFICHAGERowDeleted(Me, New BAREME_FORFAITAIRE_AFFICHAGERowChangeEvent(CType(e.Row,BAREME_FORFAITAIRE_AFFICHAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BAREME_FORFAITAIRE_AFFICHAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent BAREME_FORFAITAIRE_AFFICHAGERowDeleting(Me, New BAREME_FORFAITAIRE_AFFICHAGERowChangeEvent(CType(e.Row,BAREME_FORFAITAIRE_AFFICHAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBAREME_FORFAITAIRE_AFFICHAGERow(ByVal row As BAREME_FORFAITAIRE_AFFICHAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetBaremes = New DataSetBaremes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BAREME_FORFAITAIRE_AFFICHAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACTIF_PASSIFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_ACTIF_PASSIF As Global.System.Data.DataColumn
        
        Private columnCODE_ACTIF_PASSIF As Global.System.Data.DataColumn
        
        Private columnLIBELLE_ACTIF_PASSIF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACTIF_PASSIF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_ACTIF_PASSIFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIF_PASSIF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_ACTIF_PASSIFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_ACTIF_PASSIF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIBELLE_ACTIF_PASSIFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIBELLE_ACTIF_PASSIF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACTIF_PASSIFRow
            Get
                Return CType(Me.Rows(index),ACTIF_PASSIFRow)
            End Get
        End Property
        
        Public Event ACTIF_PASSIFRowChanging As ACTIF_PASSIFRowChangeEventHandler
        
        Public Event ACTIF_PASSIFRowChanged As ACTIF_PASSIFRowChangeEventHandler
        
        Public Event ACTIF_PASSIFRowDeleting As ACTIF_PASSIFRowChangeEventHandler
        
        Public Event ACTIF_PASSIFRowDeleted As ACTIF_PASSIFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddACTIF_PASSIFRow(ByVal row As ACTIF_PASSIFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddACTIF_PASSIFRow(ByVal CODE_ACTIF_PASSIF As String, ByVal LIBELLE_ACTIF_PASSIF As String) As ACTIF_PASSIFRow
            Dim rowACTIF_PASSIFRow As ACTIF_PASSIFRow = CType(Me.NewRow,ACTIF_PASSIFRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CODE_ACTIF_PASSIF, LIBELLE_ACTIF_PASSIF}
            rowACTIF_PASSIFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowACTIF_PASSIFRow)
            Return rowACTIF_PASSIFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_ACTIF_PASSIF(ByVal ID_ACTIF_PASSIF As Integer) As ACTIF_PASSIFRow
            Return CType(Me.Rows.Find(New Object() {ID_ACTIF_PASSIF}),ACTIF_PASSIFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACTIF_PASSIFDataTable = CType(MyBase.Clone,ACTIF_PASSIFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACTIF_PASSIFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_ACTIF_PASSIF = MyBase.Columns("ID_ACTIF_PASSIF")
            Me.columnCODE_ACTIF_PASSIF = MyBase.Columns("CODE_ACTIF_PASSIF")
            Me.columnLIBELLE_ACTIF_PASSIF = MyBase.Columns("LIBELLE_ACTIF_PASSIF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_ACTIF_PASSIF = New Global.System.Data.DataColumn("ID_ACTIF_PASSIF", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIF_PASSIF)
            Me.columnCODE_ACTIF_PASSIF = New Global.System.Data.DataColumn("CODE_ACTIF_PASSIF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_ACTIF_PASSIF)
            Me.columnLIBELLE_ACTIF_PASSIF = New Global.System.Data.DataColumn("LIBELLE_ACTIF_PASSIF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIBELLE_ACTIF_PASSIF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_ACTIF_PASSIF}, true))
            Me.columnID_ACTIF_PASSIF.AutoIncrement = true
            Me.columnID_ACTIF_PASSIF.AllowDBNull = false
            Me.columnID_ACTIF_PASSIF.Unique = true
            Me.columnCODE_ACTIF_PASSIF.MaxLength = 2
            Me.columnLIBELLE_ACTIF_PASSIF.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewACTIF_PASSIFRow() As ACTIF_PASSIFRow
            Return CType(Me.NewRow,ACTIF_PASSIFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACTIF_PASSIFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACTIF_PASSIFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACTIF_PASSIFRowChangedEvent) Is Nothing) Then
                RaiseEvent ACTIF_PASSIFRowChanged(Me, New ACTIF_PASSIFRowChangeEvent(CType(e.Row,ACTIF_PASSIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACTIF_PASSIFRowChangingEvent) Is Nothing) Then
                RaiseEvent ACTIF_PASSIFRowChanging(Me, New ACTIF_PASSIFRowChangeEvent(CType(e.Row,ACTIF_PASSIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACTIF_PASSIFRowDeletedEvent) Is Nothing) Then
                RaiseEvent ACTIF_PASSIFRowDeleted(Me, New ACTIF_PASSIFRowChangeEvent(CType(e.Row,ACTIF_PASSIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACTIF_PASSIFRowDeletingEvent) Is Nothing) Then
                RaiseEvent ACTIF_PASSIFRowDeleting(Me, New ACTIF_PASSIFRowChangeEvent(CType(e.Row,ACTIF_PASSIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveACTIF_PASSIFRow(ByVal row As ACTIF_PASSIFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetBaremes = New DataSetBaremes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACTIF_PASSIFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TYPE_PLAN_COMPTABLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_TYPE_PLAN_COMPTABLE As Global.System.Data.DataColumn
        
        Private columnCODE_TYPE_PLAN_COMPTABLE As Global.System.Data.DataColumn
        
        Private columnLIBELLE_TYPE_PLAN_COMPTABLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TYPE_PLAN_COMPTABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_TYPE_PLAN_COMPTABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_TYPE_PLAN_COMPTABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_TYPE_PLAN_COMPTABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_TYPE_PLAN_COMPTABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIBELLE_TYPE_PLAN_COMPTABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIBELLE_TYPE_PLAN_COMPTABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TYPE_PLAN_COMPTABLERow
            Get
                Return CType(Me.Rows(index),TYPE_PLAN_COMPTABLERow)
            End Get
        End Property
        
        Public Event TYPE_PLAN_COMPTABLERowChanging As TYPE_PLAN_COMPTABLERowChangeEventHandler
        
        Public Event TYPE_PLAN_COMPTABLERowChanged As TYPE_PLAN_COMPTABLERowChangeEventHandler
        
        Public Event TYPE_PLAN_COMPTABLERowDeleting As TYPE_PLAN_COMPTABLERowChangeEventHandler
        
        Public Event TYPE_PLAN_COMPTABLERowDeleted As TYPE_PLAN_COMPTABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTYPE_PLAN_COMPTABLERow(ByVal row As TYPE_PLAN_COMPTABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTYPE_PLAN_COMPTABLERow(ByVal CODE_TYPE_PLAN_COMPTABLE As String, ByVal LIBELLE_TYPE_PLAN_COMPTABLE As String) As TYPE_PLAN_COMPTABLERow
            Dim rowTYPE_PLAN_COMPTABLERow As TYPE_PLAN_COMPTABLERow = CType(Me.NewRow,TYPE_PLAN_COMPTABLERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CODE_TYPE_PLAN_COMPTABLE, LIBELLE_TYPE_PLAN_COMPTABLE}
            rowTYPE_PLAN_COMPTABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTYPE_PLAN_COMPTABLERow)
            Return rowTYPE_PLAN_COMPTABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_TYPE_PLAN_COMPTABLE(ByVal ID_TYPE_PLAN_COMPTABLE As Integer) As TYPE_PLAN_COMPTABLERow
            Return CType(Me.Rows.Find(New Object() {ID_TYPE_PLAN_COMPTABLE}),TYPE_PLAN_COMPTABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TYPE_PLAN_COMPTABLEDataTable = CType(MyBase.Clone,TYPE_PLAN_COMPTABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TYPE_PLAN_COMPTABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_TYPE_PLAN_COMPTABLE = MyBase.Columns("ID_TYPE_PLAN_COMPTABLE")
            Me.columnCODE_TYPE_PLAN_COMPTABLE = MyBase.Columns("CODE_TYPE_PLAN_COMPTABLE")
            Me.columnLIBELLE_TYPE_PLAN_COMPTABLE = MyBase.Columns("LIBELLE_TYPE_PLAN_COMPTABLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_TYPE_PLAN_COMPTABLE = New Global.System.Data.DataColumn("ID_TYPE_PLAN_COMPTABLE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_TYPE_PLAN_COMPTABLE)
            Me.columnCODE_TYPE_PLAN_COMPTABLE = New Global.System.Data.DataColumn("CODE_TYPE_PLAN_COMPTABLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_TYPE_PLAN_COMPTABLE)
            Me.columnLIBELLE_TYPE_PLAN_COMPTABLE = New Global.System.Data.DataColumn("LIBELLE_TYPE_PLAN_COMPTABLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIBELLE_TYPE_PLAN_COMPTABLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_TYPE_PLAN_COMPTABLE}, true))
            Me.columnID_TYPE_PLAN_COMPTABLE.AutoIncrement = true
            Me.columnID_TYPE_PLAN_COMPTABLE.AllowDBNull = false
            Me.columnID_TYPE_PLAN_COMPTABLE.Unique = true
            Me.columnCODE_TYPE_PLAN_COMPTABLE.MaxLength = 1
            Me.columnLIBELLE_TYPE_PLAN_COMPTABLE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTYPE_PLAN_COMPTABLERow() As TYPE_PLAN_COMPTABLERow
            Return CType(Me.NewRow,TYPE_PLAN_COMPTABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TYPE_PLAN_COMPTABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TYPE_PLAN_COMPTABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TYPE_PLAN_COMPTABLERowChangedEvent) Is Nothing) Then
                RaiseEvent TYPE_PLAN_COMPTABLERowChanged(Me, New TYPE_PLAN_COMPTABLERowChangeEvent(CType(e.Row,TYPE_PLAN_COMPTABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TYPE_PLAN_COMPTABLERowChangingEvent) Is Nothing) Then
                RaiseEvent TYPE_PLAN_COMPTABLERowChanging(Me, New TYPE_PLAN_COMPTABLERowChangeEvent(CType(e.Row,TYPE_PLAN_COMPTABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TYPE_PLAN_COMPTABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent TYPE_PLAN_COMPTABLERowDeleted(Me, New TYPE_PLAN_COMPTABLERowChangeEvent(CType(e.Row,TYPE_PLAN_COMPTABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TYPE_PLAN_COMPTABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent TYPE_PLAN_COMPTABLERowDeleting(Me, New TYPE_PLAN_COMPTABLERowChangeEvent(CType(e.Row,TYPE_PLAN_COMPTABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTYPE_PLAN_COMPTABLERow(ByVal row As TYPE_PLAN_COMPTABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetBaremes = New DataSetBaremes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TYPE_PLAN_COMPTABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FOURCHETTE_COMPTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_FOURCHETTE_COMPTE As Global.System.Data.DataColumn
        
        Private columnCOMPTE_DEB As Global.System.Data.DataColumn
        
        Private columnCOMPTE_FIN As Global.System.Data.DataColumn
        
        Private columnID_ACTIF_PASSIF As Global.System.Data.DataColumn
        
        Private columnPOSITION As Global.System.Data.DataColumn
        
        Private columnEST_DETAILLE As Global.System.Data.DataColumn
        
        Private columnID_TYPE_PLAN_COMPTABLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FOURCHETTE_COMPTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_FOURCHETTE_COMPTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_FOURCHETTE_COMPTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPTE_DEBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPTE_DEB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPTE_FINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPTE_FIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_ACTIF_PASSIFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIF_PASSIF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EST_DETAILLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEST_DETAILLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_TYPE_PLAN_COMPTABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_TYPE_PLAN_COMPTABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FOURCHETTE_COMPTESRow
            Get
                Return CType(Me.Rows(index),FOURCHETTE_COMPTESRow)
            End Get
        End Property
        
        Public Event FOURCHETTE_COMPTESRowChanging As FOURCHETTE_COMPTESRowChangeEventHandler
        
        Public Event FOURCHETTE_COMPTESRowChanged As FOURCHETTE_COMPTESRowChangeEventHandler
        
        Public Event FOURCHETTE_COMPTESRowDeleting As FOURCHETTE_COMPTESRowChangeEventHandler
        
        Public Event FOURCHETTE_COMPTESRowDeleted As FOURCHETTE_COMPTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFOURCHETTE_COMPTESRow(ByVal row As FOURCHETTE_COMPTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFOURCHETTE_COMPTESRow(ByVal COMPTE_DEB As String, ByVal COMPTE_FIN As String, ByVal parentACTIF_PASSIFRowByACTIF_PASSIFFOURCHETTE_COMPTE As ACTIF_PASSIFRow, ByVal POSITION As Integer, ByVal EST_DETAILLE As Boolean, ByVal parentTYPE_PLAN_COMPTABLERowByTYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE As TYPE_PLAN_COMPTABLERow) As FOURCHETTE_COMPTESRow
            Dim rowFOURCHETTE_COMPTESRow As FOURCHETTE_COMPTESRow = CType(Me.NewRow,FOURCHETTE_COMPTESRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, COMPTE_DEB, COMPTE_FIN, Nothing, POSITION, EST_DETAILLE, Nothing}
            If (Not (parentACTIF_PASSIFRowByACTIF_PASSIFFOURCHETTE_COMPTE) Is Nothing) Then
                columnValuesArray(3) = parentACTIF_PASSIFRowByACTIF_PASSIFFOURCHETTE_COMPTE(0)
            End If
            If (Not (parentTYPE_PLAN_COMPTABLERowByTYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE) Is Nothing) Then
                columnValuesArray(6) = parentTYPE_PLAN_COMPTABLERowByTYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE(0)
            End If
            rowFOURCHETTE_COMPTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFOURCHETTE_COMPTESRow)
            Return rowFOURCHETTE_COMPTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_FOURCHETTE_COMPTE(ByVal ID_FOURCHETTE_COMPTE As Integer) As FOURCHETTE_COMPTESRow
            Return CType(Me.Rows.Find(New Object() {ID_FOURCHETTE_COMPTE}),FOURCHETTE_COMPTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FOURCHETTE_COMPTESDataTable = CType(MyBase.Clone,FOURCHETTE_COMPTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FOURCHETTE_COMPTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_FOURCHETTE_COMPTE = MyBase.Columns("ID_FOURCHETTE_COMPTE")
            Me.columnCOMPTE_DEB = MyBase.Columns("COMPTE_DEB")
            Me.columnCOMPTE_FIN = MyBase.Columns("COMPTE_FIN")
            Me.columnID_ACTIF_PASSIF = MyBase.Columns("ID_ACTIF_PASSIF")
            Me.columnPOSITION = MyBase.Columns("POSITION")
            Me.columnEST_DETAILLE = MyBase.Columns("EST_DETAILLE")
            Me.columnID_TYPE_PLAN_COMPTABLE = MyBase.Columns("ID_TYPE_PLAN_COMPTABLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_FOURCHETTE_COMPTE = New Global.System.Data.DataColumn("ID_FOURCHETTE_COMPTE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_FOURCHETTE_COMPTE)
            Me.columnCOMPTE_DEB = New Global.System.Data.DataColumn("COMPTE_DEB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPTE_DEB)
            Me.columnCOMPTE_FIN = New Global.System.Data.DataColumn("COMPTE_FIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPTE_FIN)
            Me.columnID_ACTIF_PASSIF = New Global.System.Data.DataColumn("ID_ACTIF_PASSIF", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIF_PASSIF)
            Me.columnPOSITION = New Global.System.Data.DataColumn("POSITION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSITION)
            Me.columnEST_DETAILLE = New Global.System.Data.DataColumn("EST_DETAILLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEST_DETAILLE)
            Me.columnID_TYPE_PLAN_COMPTABLE = New Global.System.Data.DataColumn("ID_TYPE_PLAN_COMPTABLE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_TYPE_PLAN_COMPTABLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_FOURCHETTE_COMPTE}, true))
            Me.columnID_FOURCHETTE_COMPTE.AutoIncrement = true
            Me.columnID_FOURCHETTE_COMPTE.AllowDBNull = false
            Me.columnID_FOURCHETTE_COMPTE.Unique = true
            Me.columnCOMPTE_DEB.MaxLength = 8
            Me.columnCOMPTE_FIN.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFOURCHETTE_COMPTESRow() As FOURCHETTE_COMPTESRow
            Return CType(Me.NewRow,FOURCHETTE_COMPTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FOURCHETTE_COMPTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FOURCHETTE_COMPTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FOURCHETTE_COMPTESRowChangedEvent) Is Nothing) Then
                RaiseEvent FOURCHETTE_COMPTESRowChanged(Me, New FOURCHETTE_COMPTESRowChangeEvent(CType(e.Row,FOURCHETTE_COMPTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FOURCHETTE_COMPTESRowChangingEvent) Is Nothing) Then
                RaiseEvent FOURCHETTE_COMPTESRowChanging(Me, New FOURCHETTE_COMPTESRowChangeEvent(CType(e.Row,FOURCHETTE_COMPTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FOURCHETTE_COMPTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent FOURCHETTE_COMPTESRowDeleted(Me, New FOURCHETTE_COMPTESRowChangeEvent(CType(e.Row,FOURCHETTE_COMPTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FOURCHETTE_COMPTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent FOURCHETTE_COMPTESRowDeleting(Me, New FOURCHETTE_COMPTESRowChangeEvent(CType(e.Row,FOURCHETTE_COMPTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFOURCHETTE_COMPTESRow(ByVal row As FOURCHETTE_COMPTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetBaremes = New DataSetBaremes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FOURCHETTE_COMPTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MATERIELRow
        Inherits Global.System.Data.DataRow
        
        Private tableMATERIEL As MATERIELDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMATERIEL = CType(Me.Table,MATERIELDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_MATERIEL() As Integer
            Get
                Return CType(Me(Me.tableMATERIEL.ID_MATERIELColumn),Integer)
            End Get
            Set
                Me(Me.tableMATERIEL.ID_MATERIELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIBELLE_MATERIEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIEL.LIBELLE_MATERIELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LIBELLE_MATERIEL' dans la table 'MATERIEL' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIEL.LIBELLE_MATERIELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_TYPE_MATERIEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMATERIEL.ID_TYPE_MATERIELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ID_TYPE_MATERIEL' dans la table 'MATERIEL' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIEL.ID_TYPE_MATERIELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TYPE_MATERIELRow() As TYPE_MATERIELRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TYPE_MATERIELMATERIEL")),TYPE_MATERIELRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TYPE_MATERIELMATERIEL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIBELLE_MATERIELNull() As Boolean
            Return Me.IsNull(Me.tableMATERIEL.LIBELLE_MATERIELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIBELLE_MATERIELNull()
            Me(Me.tableMATERIEL.LIBELLE_MATERIELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_TYPE_MATERIELNull() As Boolean
            Return Me.IsNull(Me.tableMATERIEL.ID_TYPE_MATERIELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_TYPE_MATERIELNull()
            Me(Me.tableMATERIEL.ID_TYPE_MATERIELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetBAREMERows() As BAREMERow()
            If (Me.Table.ChildRelations("MATERIELBAREME") Is Nothing) Then
                Return New BAREMERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MATERIELBAREME")),BAREMERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetBAREME_AFFICHAGERows() As BAREME_AFFICHAGERow()
            If (Me.Table.ChildRelations("MATERIELBAREME1") Is Nothing) Then
                Return New BAREME_AFFICHAGERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MATERIELBAREME1")),BAREME_AFFICHAGERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TYPE_MATERIELRow
        Inherits Global.System.Data.DataRow
        
        Private tableTYPE_MATERIEL As TYPE_MATERIELDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTYPE_MATERIEL = CType(Me.Table,TYPE_MATERIELDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_TYPE_MATERIEL() As Integer
            Get
                Return CType(Me(Me.tableTYPE_MATERIEL.ID_TYPE_MATERIELColumn),Integer)
            End Get
            Set
                Me(Me.tableTYPE_MATERIEL.ID_TYPE_MATERIELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_TYPE_MATERIEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableTYPE_MATERIEL.CODE_TYPE_MATERIELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CODE_TYPE_MATERIEL' dans la table 'TYPE_MATERIEL' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTYPE_MATERIEL.CODE_TYPE_MATERIELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIBELLE_TYPE_MATERIEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableTYPE_MATERIEL.LIBELLE_TYPE_MATERIELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LIBELLE_TYPE_MATERIEL' dans la table 'TYPE_MATERIEL' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTYPE_MATERIEL.LIBELLE_TYPE_MATERIELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_TYPE_MATERIELNull() As Boolean
            Return Me.IsNull(Me.tableTYPE_MATERIEL.CODE_TYPE_MATERIELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_TYPE_MATERIELNull()
            Me(Me.tableTYPE_MATERIEL.CODE_TYPE_MATERIELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIBELLE_TYPE_MATERIELNull() As Boolean
            Return Me.IsNull(Me.tableTYPE_MATERIEL.LIBELLE_TYPE_MATERIELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIBELLE_TYPE_MATERIELNull()
            Me(Me.tableTYPE_MATERIEL.LIBELLE_TYPE_MATERIELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMATERIELRows() As MATERIELRow()
            If (Me.Table.ChildRelations("TYPE_MATERIELMATERIEL") Is Nothing) Then
                Return New MATERIELRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TYPE_MATERIELMATERIEL")),MATERIELRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BAREMERow
        Inherits Global.System.Data.DataRow
        
        Private tableBAREME As BAREMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBAREME = CType(Me.Table,BAREMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_BAREME() As Integer
            Get
                Return CType(Me(Me.tableBAREME.ID_BAREMEColumn),Integer)
            End Get
            Set
                Me(Me.tableBAREME.ID_BAREMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANNEE_BAREME() As String
            Get
                Try 
                    Return CType(Me(Me.tableBAREME.ANNEE_BAREMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ANNEE_BAREME' dans la table 'BAREME' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME.ANNEE_BAREMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COUT_TOTAL_PAR_HEURE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBAREME.COUT_TOTAL_PAR_HEUREColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COUT_TOTAL_PAR_HEURE' dans la table 'BAREME' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME.COUT_TOTAL_PAR_HEUREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_MATERIEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBAREME.ID_MATERIELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ID_MATERIEL' dans la table 'BAREME' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME.ID_MATERIELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INFO_COMPL() As String
            Get
                Try 
                    Return CType(Me(Me.tableBAREME.INFO_COMPLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INFO_COMPL' dans la table 'BAREME' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME.INFO_COMPLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MATERIELRow() As MATERIELRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MATERIELBAREME")),MATERIELRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MATERIELBAREME"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNEE_BAREMENull() As Boolean
            Return Me.IsNull(Me.tableBAREME.ANNEE_BAREMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNEE_BAREMENull()
            Me(Me.tableBAREME.ANNEE_BAREMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOUT_TOTAL_PAR_HEURENull() As Boolean
            Return Me.IsNull(Me.tableBAREME.COUT_TOTAL_PAR_HEUREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOUT_TOTAL_PAR_HEURENull()
            Me(Me.tableBAREME.COUT_TOTAL_PAR_HEUREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_MATERIELNull() As Boolean
            Return Me.IsNull(Me.tableBAREME.ID_MATERIELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_MATERIELNull()
            Me(Me.tableBAREME.ID_MATERIELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINFO_COMPLNull() As Boolean
            Return Me.IsNull(Me.tableBAREME.INFO_COMPLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINFO_COMPLNull()
            Me(Me.tableBAREME.INFO_COMPLColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BAREME_AFFICHAGERow
        Inherits Global.System.Data.DataRow
        
        Private tableBAREME_AFFICHAGE As BAREME_AFFICHAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBAREME_AFFICHAGE = CType(Me.Table,BAREME_AFFICHAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_MATERIEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_AFFICHAGE.ID_MATERIELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ID_MATERIEL' dans la table 'BAREME_AFFICHAGE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_AFFICHAGE.ID_MATERIELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_TYPE_MATERIEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_AFFICHAGE.CODE_TYPE_MATERIELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CODE_TYPE_MATERIEL' dans la table 'BAREME_AFFICHAGE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_AFFICHAGE.CODE_TYPE_MATERIELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANNEE_BAREME() As String
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_AFFICHAGE.ANNEE_BAREMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ANNEE_BAREME' dans la table 'BAREME_AFFICHAGE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_AFFICHAGE.ANNEE_BAREMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COUT_TOTAL_PAR_HEURE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_AFFICHAGE.COUT_TOTAL_PAR_HEUREColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COUT_TOTAL_PAR_HEURE' dans la table 'BAREME_AFFICHAGE'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_AFFICHAGE.COUT_TOTAL_PAR_HEUREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibelleMateriel() As String
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_AFFICHAGE.LibelleMaterielColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibelleMateriel' dans la table 'BAREME_AFFICHAGE' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_AFFICHAGE.LibelleMaterielColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INFO_COMPL() As String
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_AFFICHAGE.INFO_COMPLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INFO_COMPL' dans la table 'BAREME_AFFICHAGE' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_AFFICHAGE.INFO_COMPLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MATERIELRow() As MATERIELRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MATERIELBAREME1")),MATERIELRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MATERIELBAREME1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_MATERIELNull() As Boolean
            Return Me.IsNull(Me.tableBAREME_AFFICHAGE.ID_MATERIELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_MATERIELNull()
            Me(Me.tableBAREME_AFFICHAGE.ID_MATERIELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_TYPE_MATERIELNull() As Boolean
            Return Me.IsNull(Me.tableBAREME_AFFICHAGE.CODE_TYPE_MATERIELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_TYPE_MATERIELNull()
            Me(Me.tableBAREME_AFFICHAGE.CODE_TYPE_MATERIELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNEE_BAREMENull() As Boolean
            Return Me.IsNull(Me.tableBAREME_AFFICHAGE.ANNEE_BAREMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNEE_BAREMENull()
            Me(Me.tableBAREME_AFFICHAGE.ANNEE_BAREMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOUT_TOTAL_PAR_HEURENull() As Boolean
            Return Me.IsNull(Me.tableBAREME_AFFICHAGE.COUT_TOTAL_PAR_HEUREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOUT_TOTAL_PAR_HEURENull()
            Me(Me.tableBAREME_AFFICHAGE.COUT_TOTAL_PAR_HEUREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleMaterielNull() As Boolean
            Return Me.IsNull(Me.tableBAREME_AFFICHAGE.LibelleMaterielColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleMaterielNull()
            Me(Me.tableBAREME_AFFICHAGE.LibelleMaterielColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINFO_COMPLNull() As Boolean
            Return Me.IsNull(Me.tableBAREME_AFFICHAGE.INFO_COMPLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINFO_COMPLNull()
            Me(Me.tableBAREME_AFFICHAGE.INFO_COMPLColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FACON_CULTURALERow
        Inherits Global.System.Data.DataRow
        
        Private tableFACON_CULTURALE As FACON_CULTURALEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFACON_CULTURALE = CType(Me.Table,FACON_CULTURALEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_FACON_CULTURALE() As Integer
            Get
                Return CType(Me(Me.tableFACON_CULTURALE.ID_FACON_CULTURALEColumn),Integer)
            End Get
            Set
                Me(Me.tableFACON_CULTURALE.ID_FACON_CULTURALEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIBELLE_FACON_CULTURALE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFACON_CULTURALE.LIBELLE_FACON_CULTURALEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LIBELLE_FACON_CULTURALE' dans la table 'FACON_CULTURAL"& _ 
                            "E' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACON_CULTURALE.LIBELLE_FACON_CULTURALEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIBELLE_FACON_CULTURALENull() As Boolean
            Return Me.IsNull(Me.tableFACON_CULTURALE.LIBELLE_FACON_CULTURALEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIBELLE_FACON_CULTURALENull()
            Me(Me.tableFACON_CULTURALE.LIBELLE_FACON_CULTURALEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetBAREME_FORFAITAIRERows() As BAREME_FORFAITAIRERow()
            If (Me.Table.ChildRelations("FACON_CULTURALEBAREME_FORFAITAIRE") Is Nothing) Then
                Return New BAREME_FORFAITAIRERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FACON_CULTURALEBAREME_FORFAITAIRE")),BAREME_FORFAITAIRERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BAREME_FORFAITAIRERow
        Inherits Global.System.Data.DataRow
        
        Private tableBAREME_FORFAITAIRE As BAREME_FORFAITAIREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBAREME_FORFAITAIRE = CType(Me.Table,BAREME_FORFAITAIREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_BAREME_FORFAITAIRE() As Integer
            Get
                Return CType(Me(Me.tableBAREME_FORFAITAIRE.ID_BAREME_FORFAITAIREColumn),Integer)
            End Get
            Set
                Me(Me.tableBAREME_FORFAITAIRE.ID_BAREME_FORFAITAIREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANNEE_BAREME_FORFAITAIRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_FORFAITAIRE.ANNEE_BAREME_FORFAITAIREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ANNEE_BAREME_FORFAITAIRE' dans la table 'BAREME_FORFAI"& _ 
                            "TAIRE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_FORFAITAIRE.ANNEE_BAREME_FORFAITAIREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALEUR_FORFAITAIRE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_FORFAITAIRE.VALEUR_FORFAITAIREColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'VALEUR_FORFAITAIRE' dans la table 'BAREME_FORFAITAIRE'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_FORFAITAIRE.VALEUR_FORFAITAIREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_FACON_CULTURALE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_FORFAITAIRE.ID_FACON_CULTURALEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ID_FACON_CULTURALE' dans la table 'BAREME_FORFAITAIRE'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_FORFAITAIRE.ID_FACON_CULTURALEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FACON_CULTURALERow() As FACON_CULTURALERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FACON_CULTURALEBAREME_FORFAITAIRE")),FACON_CULTURALERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FACON_CULTURALEBAREME_FORFAITAIRE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNEE_BAREME_FORFAITAIRENull() As Boolean
            Return Me.IsNull(Me.tableBAREME_FORFAITAIRE.ANNEE_BAREME_FORFAITAIREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNEE_BAREME_FORFAITAIRENull()
            Me(Me.tableBAREME_FORFAITAIRE.ANNEE_BAREME_FORFAITAIREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALEUR_FORFAITAIRENull() As Boolean
            Return Me.IsNull(Me.tableBAREME_FORFAITAIRE.VALEUR_FORFAITAIREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALEUR_FORFAITAIRENull()
            Me(Me.tableBAREME_FORFAITAIRE.VALEUR_FORFAITAIREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_FACON_CULTURALENull() As Boolean
            Return Me.IsNull(Me.tableBAREME_FORFAITAIRE.ID_FACON_CULTURALEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_FACON_CULTURALENull()
            Me(Me.tableBAREME_FORFAITAIRE.ID_FACON_CULTURALEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BAREME_FORFAITAIRE_AFFICHAGERow
        Inherits Global.System.Data.DataRow
        
        Private tableBAREME_FORFAITAIRE_AFFICHAGE As BAREME_FORFAITAIRE_AFFICHAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBAREME_FORFAITAIRE_AFFICHAGE = CType(Me.Table,BAREME_FORFAITAIRE_AFFICHAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIBELLE_FACON_CULTURALE() As String
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.LIBELLE_FACON_CULTURALEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LIBELLE_FACON_CULTURALE' dans la table 'BAREME_FORFAIT"& _ 
                            "AIRE_AFFICHAGE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.LIBELLE_FACON_CULTURALEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANNEE_BAREME_FORFAITAIRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.ANNEE_BAREME_FORFAITAIREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ANNEE_BAREME_FORFAITAIRE' dans la table 'BAREME_FORFAI"& _ 
                            "TAIRE_AFFICHAGE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.ANNEE_BAREME_FORFAITAIREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALEUR_FORFAITAIRE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.VALEUR_FORFAITAIREColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'VALEUR_FORFAITAIRE' dans la table 'BAREME_FORFAITAIRE_"& _ 
                            "AFFICHAGE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.VALEUR_FORFAITAIREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIBELLE_FACON_CULTURALENull() As Boolean
            Return Me.IsNull(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.LIBELLE_FACON_CULTURALEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIBELLE_FACON_CULTURALENull()
            Me(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.LIBELLE_FACON_CULTURALEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNEE_BAREME_FORFAITAIRENull() As Boolean
            Return Me.IsNull(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.ANNEE_BAREME_FORFAITAIREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNEE_BAREME_FORFAITAIRENull()
            Me(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.ANNEE_BAREME_FORFAITAIREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALEUR_FORFAITAIRENull() As Boolean
            Return Me.IsNull(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.VALEUR_FORFAITAIREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALEUR_FORFAITAIRENull()
            Me(Me.tableBAREME_FORFAITAIRE_AFFICHAGE.VALEUR_FORFAITAIREColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ACTIF_PASSIFRow
        Inherits Global.System.Data.DataRow
        
        Private tableACTIF_PASSIF As ACTIF_PASSIFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACTIF_PASSIF = CType(Me.Table,ACTIF_PASSIFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_ACTIF_PASSIF() As Integer
            Get
                Return CType(Me(Me.tableACTIF_PASSIF.ID_ACTIF_PASSIFColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIF_PASSIF.ID_ACTIF_PASSIFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_ACTIF_PASSIF() As String
            Get
                Try 
                    Return CType(Me(Me.tableACTIF_PASSIF.CODE_ACTIF_PASSIFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CODE_ACTIF_PASSIF' dans la table 'ACTIF_PASSIF' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableACTIF_PASSIF.CODE_ACTIF_PASSIFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIBELLE_ACTIF_PASSIF() As String
            Get
                Try 
                    Return CType(Me(Me.tableACTIF_PASSIF.LIBELLE_ACTIF_PASSIFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LIBELLE_ACTIF_PASSIF' dans la table 'ACTIF_PASSIF' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACTIF_PASSIF.LIBELLE_ACTIF_PASSIFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_ACTIF_PASSIFNull() As Boolean
            Return Me.IsNull(Me.tableACTIF_PASSIF.CODE_ACTIF_PASSIFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_ACTIF_PASSIFNull()
            Me(Me.tableACTIF_PASSIF.CODE_ACTIF_PASSIFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIBELLE_ACTIF_PASSIFNull() As Boolean
            Return Me.IsNull(Me.tableACTIF_PASSIF.LIBELLE_ACTIF_PASSIFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIBELLE_ACTIF_PASSIFNull()
            Me(Me.tableACTIF_PASSIF.LIBELLE_ACTIF_PASSIFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFOURCHETTE_COMPTESRows() As FOURCHETTE_COMPTESRow()
            If (Me.Table.ChildRelations("ACTIF_PASSIFFOURCHETTE_COMPTE") Is Nothing) Then
                Return New FOURCHETTE_COMPTESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ACTIF_PASSIFFOURCHETTE_COMPTE")),FOURCHETTE_COMPTESRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TYPE_PLAN_COMPTABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableTYPE_PLAN_COMPTABLE As TYPE_PLAN_COMPTABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTYPE_PLAN_COMPTABLE = CType(Me.Table,TYPE_PLAN_COMPTABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_TYPE_PLAN_COMPTABLE() As Integer
            Get
                Return CType(Me(Me.tableTYPE_PLAN_COMPTABLE.ID_TYPE_PLAN_COMPTABLEColumn),Integer)
            End Get
            Set
                Me(Me.tableTYPE_PLAN_COMPTABLE.ID_TYPE_PLAN_COMPTABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_TYPE_PLAN_COMPTABLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTYPE_PLAN_COMPTABLE.CODE_TYPE_PLAN_COMPTABLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CODE_TYPE_PLAN_COMPTABLE' dans la table 'TYPE_PLAN_COM"& _ 
                            "PTABLE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTYPE_PLAN_COMPTABLE.CODE_TYPE_PLAN_COMPTABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIBELLE_TYPE_PLAN_COMPTABLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTYPE_PLAN_COMPTABLE.LIBELLE_TYPE_PLAN_COMPTABLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LIBELLE_TYPE_PLAN_COMPTABLE' dans la table 'TYPE_PLAN_"& _ 
                            "COMPTABLE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTYPE_PLAN_COMPTABLE.LIBELLE_TYPE_PLAN_COMPTABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_TYPE_PLAN_COMPTABLENull() As Boolean
            Return Me.IsNull(Me.tableTYPE_PLAN_COMPTABLE.CODE_TYPE_PLAN_COMPTABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_TYPE_PLAN_COMPTABLENull()
            Me(Me.tableTYPE_PLAN_COMPTABLE.CODE_TYPE_PLAN_COMPTABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIBELLE_TYPE_PLAN_COMPTABLENull() As Boolean
            Return Me.IsNull(Me.tableTYPE_PLAN_COMPTABLE.LIBELLE_TYPE_PLAN_COMPTABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIBELLE_TYPE_PLAN_COMPTABLENull()
            Me(Me.tableTYPE_PLAN_COMPTABLE.LIBELLE_TYPE_PLAN_COMPTABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFOURCHETTE_COMPTESRows() As FOURCHETTE_COMPTESRow()
            If (Me.Table.ChildRelations("TYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE") Is Nothing) Then
                Return New FOURCHETTE_COMPTESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE")),FOURCHETTE_COMPTESRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FOURCHETTE_COMPTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableFOURCHETTE_COMPTES As FOURCHETTE_COMPTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFOURCHETTE_COMPTES = CType(Me.Table,FOURCHETTE_COMPTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_FOURCHETTE_COMPTE() As Integer
            Get
                Return CType(Me(Me.tableFOURCHETTE_COMPTES.ID_FOURCHETTE_COMPTEColumn),Integer)
            End Get
            Set
                Me(Me.tableFOURCHETTE_COMPTES.ID_FOURCHETTE_COMPTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPTE_DEB() As String
            Get
                Try 
                    Return CType(Me(Me.tableFOURCHETTE_COMPTES.COMPTE_DEBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COMPTE_DEB' dans la table 'FOURCHETTE_COMPTES' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFOURCHETTE_COMPTES.COMPTE_DEBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPTE_FIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableFOURCHETTE_COMPTES.COMPTE_FINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COMPTE_FIN' dans la table 'FOURCHETTE_COMPTES' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFOURCHETTE_COMPTES.COMPTE_FINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_ACTIF_PASSIF() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFOURCHETTE_COMPTES.ID_ACTIF_PASSIFColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ID_ACTIF_PASSIF' dans la table 'FOURCHETTE_COMPTES' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFOURCHETTE_COMPTES.ID_ACTIF_PASSIFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSITION() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFOURCHETTE_COMPTES.POSITIONColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'POSITION' dans la table 'FOURCHETTE_COMPTES' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableFOURCHETTE_COMPTES.POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EST_DETAILLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFOURCHETTE_COMPTES.EST_DETAILLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'EST_DETAILLE' dans la table 'FOURCHETTE_COMPTES' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFOURCHETTE_COMPTES.EST_DETAILLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_TYPE_PLAN_COMPTABLE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFOURCHETTE_COMPTES.ID_TYPE_PLAN_COMPTABLEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ID_TYPE_PLAN_COMPTABLE' dans la table 'FOURCHETTE_COMP"& _ 
                            "TES' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFOURCHETTE_COMPTES.ID_TYPE_PLAN_COMPTABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTIF_PASSIFRow() As ACTIF_PASSIFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ACTIF_PASSIFFOURCHETTE_COMPTE")),ACTIF_PASSIFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ACTIF_PASSIFFOURCHETTE_COMPTE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TYPE_PLAN_COMPTABLERow() As TYPE_PLAN_COMPTABLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE")),TYPE_PLAN_COMPTABLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TYPE_PLAN_COMPTABLEFOURCHETTE_COMPTE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMPTE_DEBNull() As Boolean
            Return Me.IsNull(Me.tableFOURCHETTE_COMPTES.COMPTE_DEBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMPTE_DEBNull()
            Me(Me.tableFOURCHETTE_COMPTES.COMPTE_DEBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMPTE_FINNull() As Boolean
            Return Me.IsNull(Me.tableFOURCHETTE_COMPTES.COMPTE_FINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMPTE_FINNull()
            Me(Me.tableFOURCHETTE_COMPTES.COMPTE_FINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_ACTIF_PASSIFNull() As Boolean
            Return Me.IsNull(Me.tableFOURCHETTE_COMPTES.ID_ACTIF_PASSIFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_ACTIF_PASSIFNull()
            Me(Me.tableFOURCHETTE_COMPTES.ID_ACTIF_PASSIFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOSITIONNull() As Boolean
            Return Me.IsNull(Me.tableFOURCHETTE_COMPTES.POSITIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOSITIONNull()
            Me(Me.tableFOURCHETTE_COMPTES.POSITIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEST_DETAILLENull() As Boolean
            Return Me.IsNull(Me.tableFOURCHETTE_COMPTES.EST_DETAILLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEST_DETAILLENull()
            Me(Me.tableFOURCHETTE_COMPTES.EST_DETAILLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_TYPE_PLAN_COMPTABLENull() As Boolean
            Return Me.IsNull(Me.tableFOURCHETTE_COMPTES.ID_TYPE_PLAN_COMPTABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_TYPE_PLAN_COMPTABLENull()
            Me(Me.tableFOURCHETTE_COMPTES.ID_TYPE_PLAN_COMPTABLEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MATERIELRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MATERIELRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MATERIELRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MATERIELRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TYPE_MATERIELRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TYPE_MATERIELRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TYPE_MATERIELRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TYPE_MATERIELRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BAREMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BAREMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BAREMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BAREMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BAREME_AFFICHAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BAREME_AFFICHAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BAREME_AFFICHAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BAREME_AFFICHAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FACON_CULTURALERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FACON_CULTURALERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FACON_CULTURALERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FACON_CULTURALERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BAREME_FORFAITAIRERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BAREME_FORFAITAIRERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BAREME_FORFAITAIRERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BAREME_FORFAITAIRERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BAREME_FORFAITAIRE_AFFICHAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BAREME_FORFAITAIRE_AFFICHAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BAREME_FORFAITAIRE_AFFICHAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BAREME_FORFAITAIRE_AFFICHAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ACTIF_PASSIFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACTIF_PASSIFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ACTIF_PASSIFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ACTIF_PASSIFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TYPE_PLAN_COMPTABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TYPE_PLAN_COMPTABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TYPE_PLAN_COMPTABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TYPE_PLAN_COMPTABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FOURCHETTE_COMPTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FOURCHETTE_COMPTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FOURCHETTE_COMPTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FOURCHETTE_COMPTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetBaremesTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MATERIELTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MATERIEL"
            tableMapping.ColumnMappings.Add("ID_MATERIEL", "ID_MATERIEL")
            tableMapping.ColumnMappings.Add("LIBELLE_MATERIEL", "LIBELLE_MATERIEL")
            tableMapping.ColumnMappings.Add("ID_TYPE_MATERIEL", "ID_TYPE_MATERIEL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MATERIEL` WHERE ((`ID_MATERIEL` = ?) AND ((? = 1 AND `LIBELLE_MATERI"& _ 
                "EL` IS NULL) OR (`LIBELLE_MATERIEL` = ?)) AND ((? = 1 AND `ID_TYPE_MATERIEL` IS "& _ 
                "NULL) OR (`ID_TYPE_MATERIEL` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LIBELLE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_MATERIEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LIBELLE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ID_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MATERIEL` (`LIBELLE_MATERIEL`, `ID_TYPE_MATERIEL`) VALUES (?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MATERIEL` SET `LIBELLE_MATERIEL` = ?, `ID_TYPE_MATERIEL` = ? WHERE ((`ID_"& _ 
                "MATERIEL` = ?) AND ((? = 1 AND `LIBELLE_MATERIEL` IS NULL) OR (`LIBELLE_MATERIEL"& _ 
                "` = ?)) AND ((? = 1 AND `ID_TYPE_MATERIEL` IS NULL) OR (`ID_TYPE_MATERIEL` = ?))"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LIBELLE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_MATERIEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LIBELLE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ID_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.BaremesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_MATERIEL, LIBELLE_MATERIEL, ID_TYPE_MATERIEL FROM MATERIEL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID_MATERIEL, LIBELLE_MATERIEL, ID_TYPE_MATERIEL FROM MATERIEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (ID_M"& _ 
                "ATERIEL = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ID_MATERIEL, LIBELLE_MATERIEL, ID_TYPE_MATERIEL FROM MATERIEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (ID_T"& _ 
                "YPE_MATERIEL = ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ID_MATERIEL, LIBELLE_MATERIEL, ID_TYPE_MATERIEL FROM MATERIEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (LIBE"& _ 
                "LLE_MATERIEL = ?)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_MATERIEL", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetBaremes.MATERIELDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetBaremes.MATERIELDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetBaremes.MATERIELDataTable = New DataSetBaremes.MATERIELDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_MATERIEL(ByVal dataTable As DataSetBaremes.MATERIELDataTable, ByVal ID_MATERIEL As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_MATERIEL,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_MATERIEL(ByVal ID_MATERIEL As Integer) As DataSetBaremes.MATERIELDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_MATERIEL,Integer)
            Dim dataTable As DataSetBaremes.MATERIELDataTable = New DataSetBaremes.MATERIELDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_TYPE_MATERIEL(ByVal dataTable As DataSetBaremes.MATERIELDataTable, ByVal ID_TYPE_MATERIEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ID_TYPE_MATERIEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_TYPE_MATERIEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_TYPE_MATERIEL(ByVal ID_TYPE_MATERIEL As Global.System.Nullable(Of Integer)) As DataSetBaremes.MATERIELDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ID_TYPE_MATERIEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_TYPE_MATERIEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetBaremes.MATERIELDataTable = New DataSetBaremes.MATERIELDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLIBELLE_MATERIEL(ByVal dataTable As DataSetBaremes.MATERIELDataTable, ByVal LIBELLE_MATERIEL As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (LIBELLE_MATERIEL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LIBELLE_MATERIEL,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLIBELLE_MATERIEL(ByVal LIBELLE_MATERIEL As String) As DataSetBaremes.MATERIELDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (LIBELLE_MATERIEL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LIBELLE_MATERIEL,String)
            End If
            Dim dataTable As DataSetBaremes.MATERIELDataTable = New DataSetBaremes.MATERIELDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetBaremes.MATERIELDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetBaremes) As Integer
            Return Me.Adapter.Update(dataSet, "MATERIEL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_MATERIEL As Integer, ByVal Original_LIBELLE_MATERIEL As String, ByVal Original_ID_TYPE_MATERIEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_MATERIEL,Integer)
            If (Original_LIBELLE_MATERIEL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LIBELLE_MATERIEL,String)
            End If
            If (Original_ID_TYPE_MATERIEL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ID_TYPE_MATERIEL.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LIBELLE_MATERIEL As String, ByVal ID_TYPE_MATERIEL As Global.System.Nullable(Of Integer)) As Integer
            If (LIBELLE_MATERIEL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LIBELLE_MATERIEL,String)
            End If
            If (ID_TYPE_MATERIEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_TYPE_MATERIEL.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LIBELLE_MATERIEL As String, ByVal ID_TYPE_MATERIEL As Global.System.Nullable(Of Integer), ByVal Original_ID_MATERIEL As Integer, ByVal Original_LIBELLE_MATERIEL As String, ByVal Original_ID_TYPE_MATERIEL As Global.System.Nullable(Of Integer)) As Integer
            If (LIBELLE_MATERIEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LIBELLE_MATERIEL,String)
            End If
            If (ID_TYPE_MATERIEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ID_TYPE_MATERIEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID_MATERIEL,Integer)
            If (Original_LIBELLE_MATERIEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_LIBELLE_MATERIEL,String)
            End If
            If (Original_ID_TYPE_MATERIEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID_TYPE_MATERIEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TYPE_MATERIELTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TYPE_MATERIEL"
            tableMapping.ColumnMappings.Add("ID_TYPE_MATERIEL", "ID_TYPE_MATERIEL")
            tableMapping.ColumnMappings.Add("CODE_TYPE_MATERIEL", "CODE_TYPE_MATERIEL")
            tableMapping.ColumnMappings.Add("LIBELLE_TYPE_MATERIEL", "LIBELLE_TYPE_MATERIEL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `TYPE_MATERIEL` WHERE ((`ID_TYPE_MATERIEL` = ?) AND ((? = 1 AND `CODE"& _ 
                "_TYPE_MATERIEL` IS NULL) OR (`CODE_TYPE_MATERIEL` = ?)) AND ((? = 1 AND `LIBELLE"& _ 
                "_TYPE_MATERIEL` IS NULL) OR (`LIBELLE_TYPE_MATERIEL` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LIBELLE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LIBELLE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `TYPE_MATERIEL` (`CODE_TYPE_MATERIEL`, `LIBELLE_TYPE_MATERIEL`) VALUE"& _ 
                "S (?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `TYPE_MATERIEL` SET `CODE_TYPE_MATERIEL` = ?, `LIBELLE_TYPE_MATERIEL` = ? "& _ 
                "WHERE ((`ID_TYPE_MATERIEL` = ?) AND ((? = 1 AND `CODE_TYPE_MATERIEL` IS NULL) OR"& _ 
                " (`CODE_TYPE_MATERIEL` = ?)) AND ((? = 1 AND `LIBELLE_TYPE_MATERIEL` IS NULL) OR"& _ 
                " (`LIBELLE_TYPE_MATERIEL` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LIBELLE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LIBELLE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.BaremesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_TYPE_MATERIEL, CODE_TYPE_MATERIEL, LIBELLE_TYPE_MATERIEL FROM TYPE_MATE"& _ 
                "RIEL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID_TYPE_MATERIEL, CODE_TYPE_MATERIEL, LIBELLE_TYPE_MATERIEL FROM TYPE_MATE"& _ 
                "RIEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (CODE_TYPE_MATERIEL = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ID_TYPE_MATERIEL, CODE_TYPE_MATERIEL, LIBELLE_TYPE_MATERIEL FROM TYPE_MATE"& _ 
                "RIEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (ID_TYPE_MATERIEL = ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetBaremes.TYPE_MATERIELDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetBaremes.TYPE_MATERIELDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetBaremes.TYPE_MATERIELDataTable = New DataSetBaremes.TYPE_MATERIELDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCODE_TYPE_MATERIEL(ByVal dataTable As DataSetBaremes.TYPE_MATERIELDataTable, ByVal CODE_TYPE_MATERIEL As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CODE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODE_TYPE_MATERIEL,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCODE_TYPE_MATERIEL(ByVal CODE_TYPE_MATERIEL As String) As DataSetBaremes.TYPE_MATERIELDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CODE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODE_TYPE_MATERIEL,String)
            End If
            Dim dataTable As DataSetBaremes.TYPE_MATERIELDataTable = New DataSetBaremes.TYPE_MATERIELDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_TYPE_MATERIEL(ByVal dataTable As DataSetBaremes.TYPE_MATERIELDataTable, ByVal ID_TYPE_MATERIEL As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_TYPE_MATERIEL,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_TYPE_MATERIEL(ByVal ID_TYPE_MATERIEL As Integer) As DataSetBaremes.TYPE_MATERIELDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_TYPE_MATERIEL,Integer)
            Dim dataTable As DataSetBaremes.TYPE_MATERIELDataTable = New DataSetBaremes.TYPE_MATERIELDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetBaremes.TYPE_MATERIELDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetBaremes) As Integer
            Return Me.Adapter.Update(dataSet, "TYPE_MATERIEL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_TYPE_MATERIEL As Integer, ByVal Original_CODE_TYPE_MATERIEL As String, ByVal Original_LIBELLE_TYPE_MATERIEL As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_TYPE_MATERIEL,Integer)
            If (Original_CODE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CODE_TYPE_MATERIEL,String)
            End If
            If (Original_LIBELLE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LIBELLE_TYPE_MATERIEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODE_TYPE_MATERIEL As String, ByVal LIBELLE_TYPE_MATERIEL As String) As Integer
            If (CODE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODE_TYPE_MATERIEL,String)
            End If
            If (LIBELLE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LIBELLE_TYPE_MATERIEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODE_TYPE_MATERIEL As String, ByVal LIBELLE_TYPE_MATERIEL As String, ByVal Original_ID_TYPE_MATERIEL As Integer, ByVal Original_CODE_TYPE_MATERIEL As String, ByVal Original_LIBELLE_TYPE_MATERIEL As String) As Integer
            If (CODE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODE_TYPE_MATERIEL,String)
            End If
            If (LIBELLE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LIBELLE_TYPE_MATERIEL,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID_TYPE_MATERIEL,Integer)
            If (Original_CODE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CODE_TYPE_MATERIEL,String)
            End If
            If (Original_LIBELLE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_LIBELLE_TYPE_MATERIEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BAREMETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BAREME"
            tableMapping.ColumnMappings.Add("ID_BAREME", "ID_BAREME")
            tableMapping.ColumnMappings.Add("ANNEE_BAREME", "ANNEE_BAREME")
            tableMapping.ColumnMappings.Add("COUT_TOTAL_PAR_HEURE", "COUT_TOTAL_PAR_HEURE")
            tableMapping.ColumnMappings.Add("ID_MATERIEL", "ID_MATERIEL")
            tableMapping.ColumnMappings.Add("INFO_COMPL", "INFO_COMPL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `BAREME` WHERE ((`ID_BAREME` = ?) AND ((? = 1 AND `ANNEE_BAREME` IS N"& _ 
                "ULL) OR (`ANNEE_BAREME` = ?)) AND ((? = 1 AND `COUT_TOTAL_PAR_HEURE` IS NULL) OR"& _ 
                " (`COUT_TOTAL_PAR_HEURE` = ?)) AND ((? = 1 AND `ID_MATERIEL` IS NULL) OR (`ID_MA"& _ 
                "TERIEL` = ?)) AND ((? = 1 AND `INFO_COMPL` IS NULL) OR (`INFO_COMPL` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_BAREME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_BAREME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ANNEE_BAREME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ANNEE_BAREME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COUT_TOTAL_PAR_HEURE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUT_TOTAL_PAR_HEURE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COUT_TOTAL_PAR_HEURE", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUT_TOTAL_PAR_HEURE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ID_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_MATERIEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_INFO_COMPL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INFO_COMPL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INFO_COMPL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INFO_COMPL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `BAREME` (`ANNEE_BAREME`, `COUT_TOTAL_PAR_HEURE`, `ID_MATERIEL`, `INF"& _ 
                "O_COMPL`) VALUES (?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ANNEE_BAREME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COUT_TOTAL_PAR_HEURE", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUT_TOTAL_PAR_HEURE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INFO_COMPL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INFO_COMPL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `BAREME` SET `ANNEE_BAREME` = ?, `COUT_TOTAL_PAR_HEURE` = ?, `ID_MATERIEL`"& _ 
                " = ?, `INFO_COMPL` = ? WHERE ((`ID_BAREME` = ?) AND ((? = 1 AND `ANNEE_BAREME` I"& _ 
                "S NULL) OR (`ANNEE_BAREME` = ?)) AND ((? = 1 AND `COUT_TOTAL_PAR_HEURE` IS NULL)"& _ 
                " OR (`COUT_TOTAL_PAR_HEURE` = ?)) AND ((? = 1 AND `ID_MATERIEL` IS NULL) OR (`ID"& _ 
                "_MATERIEL` = ?)) AND ((? = 1 AND `INFO_COMPL` IS NULL) OR (`INFO_COMPL` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ANNEE_BAREME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COUT_TOTAL_PAR_HEURE", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUT_TOTAL_PAR_HEURE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INFO_COMPL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INFO_COMPL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_BAREME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_BAREME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ANNEE_BAREME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ANNEE_BAREME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COUT_TOTAL_PAR_HEURE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUT_TOTAL_PAR_HEURE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COUT_TOTAL_PAR_HEURE", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUT_TOTAL_PAR_HEURE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ID_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_MATERIEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_MATERIEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_INFO_COMPL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INFO_COMPL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INFO_COMPL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INFO_COMPL", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.BaremesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID_BAREME, ANNEE_BAREME, COUT_TOTAL_PAR_HEURE, ID_MATERIEL, INFO_CO"& _ 
                "MPL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            BAREME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ANNEE_BAREME, COUT_TOTAL_PAR_HEURE, ID_BAREME, ID_MATERIEL, INFO_COMPL FRO"& _ 
                "M BAREME WHERE (ANNEE_BAREME = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ANNEE_BAREME", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ANNEE_BAREME, COUT_TOTAL_PAR_HEURE, ID_BAREME, ID_MATERIEL, INFO_COMPL FRO"& _ 
                "M BAREME WHERE (ID_BAREME = ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_BAREME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_BAREME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ANNEE_BAREME, COUT_TOTAL_PAR_HEURE, ID_BAREME, ID_MATERIEL, INFO_COMPL FRO"& _ 
                "M BAREME WHERE (ID_MATERIEL = ?)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_MATERIEL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetBaremes.BAREMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetBaremes.BAREMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetBaremes.BAREMEDataTable = New DataSetBaremes.BAREMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByANNEE_BAREME(ByVal dataTable As DataSetBaremes.BAREMEDataTable, ByVal ANNEE_BAREME As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ANNEE_BAREME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ANNEE_BAREME,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByANNEE_BAREME(ByVal ANNEE_BAREME As String) As DataSetBaremes.BAREMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ANNEE_BAREME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ANNEE_BAREME,String)
            End If
            Dim dataTable As DataSetBaremes.BAREMEDataTable = New DataSetBaremes.BAREMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_BAREME(ByVal dataTable As DataSetBaremes.BAREMEDataTable, ByVal ID_BAREME As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_BAREME,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_BAREME(ByVal ID_BAREME As Integer) As DataSetBaremes.BAREMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_BAREME,Integer)
            Dim dataTable As DataSetBaremes.BAREMEDataTable = New DataSetBaremes.BAREMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_MATERIEL(ByVal dataTable As DataSetBaremes.BAREMEDataTable, ByVal ID_MATERIEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (ID_MATERIEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_MATERIEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_MATERIEL(ByVal ID_MATERIEL As Global.System.Nullable(Of Integer)) As DataSetBaremes.BAREMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (ID_MATERIEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_MATERIEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetBaremes.BAREMEDataTable = New DataSetBaremes.BAREMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetBaremes.BAREMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetBaremes) As Integer
            Return Me.Adapter.Update(dataSet, "BAREME")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_BAREME As Integer, ByVal Original_ANNEE_BAREME As String, ByVal Original_COUT_TOTAL_PAR_HEURE As Global.System.Nullable(Of Decimal), ByVal Original_ID_MATERIEL As Global.System.Nullable(Of Integer), ByVal Original_INFO_COMPL As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_BAREME,Integer)
            If (Original_ANNEE_BAREME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ANNEE_BAREME,String)
            End If
            If (Original_COUT_TOTAL_PAR_HEURE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_COUT_TOTAL_PAR_HEURE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_MATERIEL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ID_MATERIEL.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_INFO_COMPL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_INFO_COMPL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ANNEE_BAREME As String, ByVal COUT_TOTAL_PAR_HEURE As Global.System.Nullable(Of Decimal), ByVal ID_MATERIEL As Global.System.Nullable(Of Integer), ByVal INFO_COMPL As String) As Integer
            If (ANNEE_BAREME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ANNEE_BAREME,String)
            End If
            If (COUT_TOTAL_PAR_HEURE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(COUT_TOTAL_PAR_HEURE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_MATERIEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID_MATERIEL.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (INFO_COMPL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(INFO_COMPL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ANNEE_BAREME As String, ByVal COUT_TOTAL_PAR_HEURE As Global.System.Nullable(Of Decimal), ByVal ID_MATERIEL As Global.System.Nullable(Of Integer), ByVal INFO_COMPL As String, ByVal Original_ID_BAREME As Integer, ByVal Original_ANNEE_BAREME As String, ByVal Original_COUT_TOTAL_PAR_HEURE As Global.System.Nullable(Of Decimal), ByVal Original_ID_MATERIEL As Global.System.Nullable(Of Integer), ByVal Original_INFO_COMPL As String) As Integer
            If (ANNEE_BAREME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ANNEE_BAREME,String)
            End If
            If (COUT_TOTAL_PAR_HEURE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COUT_TOTAL_PAR_HEURE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_MATERIEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID_MATERIEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (INFO_COMPL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(INFO_COMPL,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID_BAREME,Integer)
            If (Original_ANNEE_BAREME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ANNEE_BAREME,String)
            End If
            If (Original_COUT_TOTAL_PAR_HEURE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_COUT_TOTAL_PAR_HEURE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_MATERIEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID_MATERIEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_INFO_COMPL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_INFO_COMPL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BAREME_AFFICHAGETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BAREME_AFFICHAGE"
            tableMapping.ColumnMappings.Add("ID_MATERIEL", "ID_MATERIEL")
            tableMapping.ColumnMappings.Add("CODE_TYPE_MATERIEL", "CODE_TYPE_MATERIEL")
            tableMapping.ColumnMappings.Add("ANNEE_BAREME", "ANNEE_BAREME")
            tableMapping.ColumnMappings.Add("COUT_TOTAL_PAR_HEURE", "COUT_TOTAL_PAR_HEURE")
            tableMapping.ColumnMappings.Add("INFO_COMPL", "INFO_COMPL")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.BaremesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        MATERIEL.ID_MATERIEL, TYPE_MATERIEL.CODE_TYPE_MATERIEL, BAREME.ANNE"& _ 
                "E_BAREME, BAREME.COUT_TOTAL_PAR_HEURE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BAREME.INFO_CO"& _ 
                "MPL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            (TYPE_MATERIEL INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (MATERI"& _ 
                "EL INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BAREME ON MATERIEL.ID_MATERIEL = BAREME."& _ 
                "ID_MATERIEL) ON TYPE_MATERIEL.ID_TYPE_MATERIEL = MATERIEL.ID_TYPE_MATERIEL)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        MATERIEL.ID_MATERIEL, TYPE_MATERIEL.CODE_TYPE_MATERIEL, BAREME.ANNE"& _ 
                "E_BAREME, BAREME.COUT_TOTAL_PAR_HEURE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BAREME.INFO_CO"& _ 
                "MPL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            (TYPE_MATERIEL RIGHT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ("& _ 
                "MATERIEL INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BAREME ON MATERIEL.ID_MATERIEL = B"& _ 
                "AREME.ID_MATERIEL) ON TYPE_MATERIEL.ID_TYPE_MATERIEL = MATERIEL.ID_TYPE_MATERIEL"& _ 
                ")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (BAREME.ANNEE_BAREME = ?) AND (TYPE_MATERIEL.CODE_TYPE_MATERIEL "& _ 
                "= ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ANNEE_BAREME", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODE_TYPE_MATERIEL", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_MATERIEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetBaremes.BAREME_AFFICHAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetBaremes.BAREME_AFFICHAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetBaremes.BAREME_AFFICHAGEDataTable = New DataSetBaremes.BAREME_AFFICHAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByANNEE_BAREMEEtCODE_TYPE_MATERIEL(ByVal dataTable As DataSetBaremes.BAREME_AFFICHAGEDataTable, ByVal ANNEE_BAREME As String, ByVal CODE_TYPE_MATERIEL As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ANNEE_BAREME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ANNEE_BAREME,String)
            End If
            If (CODE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CODE_TYPE_MATERIEL,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByANNEE_BAREMEEtCODE_TYPE_MATERIEL(ByVal ANNEE_BAREME As String, ByVal CODE_TYPE_MATERIEL As String) As DataSetBaremes.BAREME_AFFICHAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ANNEE_BAREME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ANNEE_BAREME,String)
            End If
            If (CODE_TYPE_MATERIEL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CODE_TYPE_MATERIEL,String)
            End If
            Dim dataTable As DataSetBaremes.BAREME_AFFICHAGEDataTable = New DataSetBaremes.BAREME_AFFICHAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FACON_CULTURALETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FACON_CULTURALE"
            tableMapping.ColumnMappings.Add("ID_FACON_CULTURALE", "ID_FACON_CULTURALE")
            tableMapping.ColumnMappings.Add("LIBELLE_FACON_CULTURALE", "LIBELLE_FACON_CULTURALE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `FACON_CULTURALE` WHERE ((`ID_FACON_CULTURALE` = ?) AND ((? = 1 AND `"& _ 
                "LIBELLE_FACON_CULTURALE` IS NULL) OR (`LIBELLE_FACON_CULTURALE` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FACON_CULTURALE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LIBELLE_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_FACON_CULTURALE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LIBELLE_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_FACON_CULTURALE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `FACON_CULTURALE` (`LIBELLE_FACON_CULTURALE`) VALUES (?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_FACON_CULTURALE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `FACON_CULTURALE` SET `LIBELLE_FACON_CULTURALE` = ? WHERE ((`ID_FACON_CULT"& _ 
                "URALE` = ?) AND ((? = 1 AND `LIBELLE_FACON_CULTURALE` IS NULL) OR (`LIBELLE_FACO"& _ 
                "N_CULTURALE` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_FACON_CULTURALE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FACON_CULTURALE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LIBELLE_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_FACON_CULTURALE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LIBELLE_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_FACON_CULTURALE", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.BaremesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_FACON_CULTURALE, LIBELLE_FACON_CULTURALE FROM FACON_CULTURALE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID_FACON_CULTURALE, LIBELLE_FACON_CULTURALE FROM FACON_CULTURALE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (I"& _ 
                "D_FACON_CULTURALE = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FACON_CULTURALE", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetBaremes.FACON_CULTURALEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetBaremes.FACON_CULTURALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetBaremes.FACON_CULTURALEDataTable = New DataSetBaremes.FACON_CULTURALEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_FACON_CULTURALE(ByVal dataTable As DataSetBaremes.FACON_CULTURALEDataTable, ByVal ID_FACON_CULTURALE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_FACON_CULTURALE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_FACON_CULTURALE(ByVal ID_FACON_CULTURALE As Integer) As DataSetBaremes.FACON_CULTURALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_FACON_CULTURALE,Integer)
            Dim dataTable As DataSetBaremes.FACON_CULTURALEDataTable = New DataSetBaremes.FACON_CULTURALEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetBaremes.FACON_CULTURALEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetBaremes) As Integer
            Return Me.Adapter.Update(dataSet, "FACON_CULTURALE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_FACON_CULTURALE As Integer, ByVal Original_LIBELLE_FACON_CULTURALE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_FACON_CULTURALE,Integer)
            If (Original_LIBELLE_FACON_CULTURALE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LIBELLE_FACON_CULTURALE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LIBELLE_FACON_CULTURALE As String) As Integer
            If (LIBELLE_FACON_CULTURALE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LIBELLE_FACON_CULTURALE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LIBELLE_FACON_CULTURALE As String, ByVal Original_ID_FACON_CULTURALE As Integer, ByVal Original_LIBELLE_FACON_CULTURALE As String) As Integer
            If (LIBELLE_FACON_CULTURALE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LIBELLE_FACON_CULTURALE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_ID_FACON_CULTURALE,Integer)
            If (Original_LIBELLE_FACON_CULTURALE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_LIBELLE_FACON_CULTURALE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BAREME_FORFAITAIRETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BAREME_FORFAITAIRE"
            tableMapping.ColumnMappings.Add("ID_BAREME_FORFAITAIRE", "ID_BAREME_FORFAITAIRE")
            tableMapping.ColumnMappings.Add("ANNEE_BAREME_FORFAITAIRE", "ANNEE_BAREME_FORFAITAIRE")
            tableMapping.ColumnMappings.Add("VALEUR_FORFAITAIRE", "VALEUR_FORFAITAIRE")
            tableMapping.ColumnMappings.Add("ID_FACON_CULTURALE", "ID_FACON_CULTURALE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `BAREME_FORFAITAIRE` WHERE ((`ID_BAREME_FORFAITAIRE` = ?) AND ((? = 1"& _ 
                " AND `ANNEE_BAREME_FORFAITAIRE` IS NULL) OR (`ANNEE_BAREME_FORFAITAIRE` = ?)) AN"& _ 
                "D ((? = 1 AND `VALEUR_FORFAITAIRE` IS NULL) OR (`VALEUR_FORFAITAIRE` = ?)) AND ("& _ 
                "(? = 1 AND `ID_FACON_CULTURALE` IS NULL) OR (`ID_FACON_CULTURALE` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ANNEE_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ANNEE_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_VALEUR_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VALEUR_FORFAITAIRE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_VALEUR_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VALEUR_FORFAITAIRE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ID_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FACON_CULTURALE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FACON_CULTURALE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `BAREME_FORFAITAIRE` (`ANNEE_BAREME_FORFAITAIRE`, `VALEUR_FORFAITAIRE"& _ 
                "`, `ID_FACON_CULTURALE`) VALUES (?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ANNEE_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("VALEUR_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VALEUR_FORFAITAIRE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FACON_CULTURALE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `BAREME_FORFAITAIRE` SET `ANNEE_BAREME_FORFAITAIRE` = ?, `VALEUR_FORFAITAI"& _ 
                "RE` = ?, `ID_FACON_CULTURALE` = ? WHERE ((`ID_BAREME_FORFAITAIRE` = ?) AND ((? ="& _ 
                " 1 AND `ANNEE_BAREME_FORFAITAIRE` IS NULL) OR (`ANNEE_BAREME_FORFAITAIRE` = ?)) "& _ 
                "AND ((? = 1 AND `VALEUR_FORFAITAIRE` IS NULL) OR (`VALEUR_FORFAITAIRE` = ?)) AND"& _ 
                " ((? = 1 AND `ID_FACON_CULTURALE` IS NULL) OR (`ID_FACON_CULTURALE` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ANNEE_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("VALEUR_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VALEUR_FORFAITAIRE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FACON_CULTURALE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ANNEE_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ANNEE_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_VALEUR_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VALEUR_FORFAITAIRE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_VALEUR_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VALEUR_FORFAITAIRE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ID_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FACON_CULTURALE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FACON_CULTURALE", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.BaremesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_BAREME_FORFAITAIRE, ANNEE_BAREME_FORFAITAIRE, VALEUR_FORFAITAIRE, ID_FA"& _ 
                "CON_CULTURALE FROM BAREME_FORFAITAIRE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID_BAREME_FORFAITAIRE, ANNEE_BAREME_FORFAITAIRE, VALEUR_FORFAITAIRE"& _ 
                ", ID_FACON_CULTURALE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            BAREME_FORFAITAIRE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ANNEE_BA"& _ 
                "REME_FORFAITAIRE = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ANNEE_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ID_BAREME_FORFAITAIRE, ANNEE_BAREME_FORFAITAIRE, VALEUR_FORFAITAIRE, ID_FA"& _ 
                "CON_CULTURALE FROM BAREME_FORFAITAIRE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (ID_BAREME_FORFAITAIRE = ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ID_BAREME_FORFAITAIRE, ANNEE_BAREME_FORFAITAIRE, VALEUR_FORFAITAIRE, ID_FA"& _ 
                "CON_CULTURALE FROM BAREME_FORFAITAIRE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (ID_FACON_CULTURALE = ?)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_FACON_CULTURALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FACON_CULTURALE", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetBaremes.BAREME_FORFAITAIREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetBaremes.BAREME_FORFAITAIREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetBaremes.BAREME_FORFAITAIREDataTable = New DataSetBaremes.BAREME_FORFAITAIREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByANNEE_BAREME_FORFAITAIRE(ByVal dataTable As DataSetBaremes.BAREME_FORFAITAIREDataTable, ByVal ANNEE_BAREME_FORFAITAIRE As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ANNEE_BAREME_FORFAITAIRE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ANNEE_BAREME_FORFAITAIRE,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByANNEE_BAREME_FORFAITAIRE(ByVal ANNEE_BAREME_FORFAITAIRE As String) As DataSetBaremes.BAREME_FORFAITAIREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ANNEE_BAREME_FORFAITAIRE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ANNEE_BAREME_FORFAITAIRE,String)
            End If
            Dim dataTable As DataSetBaremes.BAREME_FORFAITAIREDataTable = New DataSetBaremes.BAREME_FORFAITAIREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_BAREME_FORFAITAIRE(ByVal dataTable As DataSetBaremes.BAREME_FORFAITAIREDataTable, ByVal ID_BAREME_FORFAITAIRE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_BAREME_FORFAITAIRE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_BAREME_FORFAITAIRE(ByVal ID_BAREME_FORFAITAIRE As Integer) As DataSetBaremes.BAREME_FORFAITAIREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_BAREME_FORFAITAIRE,Integer)
            Dim dataTable As DataSetBaremes.BAREME_FORFAITAIREDataTable = New DataSetBaremes.BAREME_FORFAITAIREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_FACON_CULTURALE(ByVal dataTable As DataSetBaremes.BAREME_FORFAITAIREDataTable, ByVal ID_FACON_CULTURALE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (ID_FACON_CULTURALE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_FACON_CULTURALE.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_FACON_CULTURALE(ByVal ID_FACON_CULTURALE As Global.System.Nullable(Of Integer)) As DataSetBaremes.BAREME_FORFAITAIREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (ID_FACON_CULTURALE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_FACON_CULTURALE.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetBaremes.BAREME_FORFAITAIREDataTable = New DataSetBaremes.BAREME_FORFAITAIREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetBaremes.BAREME_FORFAITAIREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetBaremes) As Integer
            Return Me.Adapter.Update(dataSet, "BAREME_FORFAITAIRE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_BAREME_FORFAITAIRE As Integer, ByVal Original_ANNEE_BAREME_FORFAITAIRE As String, ByVal Original_VALEUR_FORFAITAIRE As Global.System.Nullable(Of Decimal), ByVal Original_ID_FACON_CULTURALE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_BAREME_FORFAITAIRE,Integer)
            If (Original_ANNEE_BAREME_FORFAITAIRE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ANNEE_BAREME_FORFAITAIRE,String)
            End If
            If (Original_VALEUR_FORFAITAIRE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_VALEUR_FORFAITAIRE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_FACON_CULTURALE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ID_FACON_CULTURALE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ANNEE_BAREME_FORFAITAIRE As String, ByVal VALEUR_FORFAITAIRE As Global.System.Nullable(Of Decimal), ByVal ID_FACON_CULTURALE As Global.System.Nullable(Of Integer)) As Integer
            If (ANNEE_BAREME_FORFAITAIRE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ANNEE_BAREME_FORFAITAIRE,String)
            End If
            If (VALEUR_FORFAITAIRE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(VALEUR_FORFAITAIRE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_FACON_CULTURALE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID_FACON_CULTURALE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ANNEE_BAREME_FORFAITAIRE As String, ByVal VALEUR_FORFAITAIRE As Global.System.Nullable(Of Decimal), ByVal ID_FACON_CULTURALE As Global.System.Nullable(Of Integer), ByVal Original_ID_BAREME_FORFAITAIRE As Integer, ByVal Original_ANNEE_BAREME_FORFAITAIRE As String, ByVal Original_VALEUR_FORFAITAIRE As Global.System.Nullable(Of Decimal), ByVal Original_ID_FACON_CULTURALE As Global.System.Nullable(Of Integer)) As Integer
            If (ANNEE_BAREME_FORFAITAIRE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ANNEE_BAREME_FORFAITAIRE,String)
            End If
            If (VALEUR_FORFAITAIRE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(VALEUR_FORFAITAIRE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_FACON_CULTURALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID_FACON_CULTURALE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ID_BAREME_FORFAITAIRE,Integer)
            If (Original_ANNEE_BAREME_FORFAITAIRE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ANNEE_BAREME_FORFAITAIRE,String)
            End If
            If (Original_VALEUR_FORFAITAIRE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_VALEUR_FORFAITAIRE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_FACON_CULTURALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ID_FACON_CULTURALE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BAREME_FORFAITAIRE_AFFICHAGETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BAREME_FORFAITAIRE_AFFICHAGE"
            tableMapping.ColumnMappings.Add("LIBELLE_FACON_CULTURALE", "LIBELLE_FACON_CULTURALE")
            tableMapping.ColumnMappings.Add("ANNEE_BAREME_FORFAITAIRE", "ANNEE_BAREME_FORFAITAIRE")
            tableMapping.ColumnMappings.Add("VALEUR_FORFAITAIRE", "VALEUR_FORFAITAIRE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.BaremesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        FACON_CULTURALE.LIBELLE_FACON_CULTURALE, BAREME_FORFAITAIRE.ANNEE_B"& _ 
                "AREME_FORFAITAIRE, BAREME_FORFAITAIRE.VALEUR_FORFAITAIRE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            (FACON"& _ 
                "_CULTURALE INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BAREME_FORFAITAIRE ON FACON_CULT"& _ 
                "URALE.ID_FACON_CULTURALE = BAREME_FORFAITAIRE.ID_FACON_CULTURALE)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        FACON_CULTURALE.LIBELLE_FACON_CULTURALE, BAREME_FORFAITAIRE.ANNEE_B"& _ 
                "AREME_FORFAITAIRE, BAREME_FORFAITAIRE.VALEUR_FORFAITAIRE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            (FACON"& _ 
                "_CULTURALE INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BAREME_FORFAITAIRE ON FACON_CULT"& _ 
                "URALE.ID_FACON_CULTURALE = BAREME_FORFAITAIRE.ID_FACON_CULTURALE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (ANNEE_"& _ 
                "BAREME_FORFAITAIRE = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ANNEE_BAREME_FORFAITAIRE", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ANNEE_BAREME_FORFAITAIRE", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetBaremes.BAREME_FORFAITAIRE_AFFICHAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetBaremes.BAREME_FORFAITAIRE_AFFICHAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetBaremes.BAREME_FORFAITAIRE_AFFICHAGEDataTable = New DataSetBaremes.BAREME_FORFAITAIRE_AFFICHAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByANNEE_BAREME_FORFAITAIRE(ByVal dataTable As DataSetBaremes.BAREME_FORFAITAIRE_AFFICHAGEDataTable, ByVal ANNEE_BAREME_FORFAITAIRE As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ANNEE_BAREME_FORFAITAIRE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ANNEE_BAREME_FORFAITAIRE,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByANNEE_BAREME_FORFAITAIRE(ByVal ANNEE_BAREME_FORFAITAIRE As String) As DataSetBaremes.BAREME_FORFAITAIRE_AFFICHAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ANNEE_BAREME_FORFAITAIRE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ANNEE_BAREME_FORFAITAIRE,String)
            End If
            Dim dataTable As DataSetBaremes.BAREME_FORFAITAIRE_AFFICHAGEDataTable = New DataSetBaremes.BAREME_FORFAITAIRE_AFFICHAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACTIF_PASSIFTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACTIF_PASSIF"
            tableMapping.ColumnMappings.Add("ID_ACTIF_PASSIF", "ID_ACTIF_PASSIF")
            tableMapping.ColumnMappings.Add("CODE_ACTIF_PASSIF", "CODE_ACTIF_PASSIF")
            tableMapping.ColumnMappings.Add("LIBELLE_ACTIF_PASSIF", "LIBELLE_ACTIF_PASSIF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `ACTIF_PASSIF` WHERE ((`ID_ACTIF_PASSIF` = ?) AND ((? = 1 AND `CODE_A"& _ 
                "CTIF_PASSIF` IS NULL) OR (`CODE_ACTIF_PASSIF` = ?)) AND ((? = 1 AND `LIBELLE_ACT"& _ 
                "IF_PASSIF` IS NULL) OR (`LIBELLE_ACTIF_PASSIF` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LIBELLE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LIBELLE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ACTIF_PASSIF` (`CODE_ACTIF_PASSIF`, `LIBELLE_ACTIF_PASSIF`) VALUES ("& _ 
                "?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `ACTIF_PASSIF` SET `CODE_ACTIF_PASSIF` = ?, `LIBELLE_ACTIF_PASSIF` = ? WHE"& _ 
                "RE ((`ID_ACTIF_PASSIF` = ?) AND ((? = 1 AND `CODE_ACTIF_PASSIF` IS NULL) OR (`CO"& _ 
                "DE_ACTIF_PASSIF` = ?)) AND ((? = 1 AND `LIBELLE_ACTIF_PASSIF` IS NULL) OR (`LIBE"& _ 
                "LLE_ACTIF_PASSIF` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LIBELLE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LIBELLE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.BaremesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIF_PASSIF, CODE_ACTIF_PASSIF, LIBELLE_ACTIF_PASSIF FROM ACTIF_PASSIF"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID_ACTIF_PASSIF, CODE_ACTIF_PASSIF, LIBELLE_ACTIF_PASSIF FROM ACTIF_PASSIF"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (CODE_ACTIF_PASSIF = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODE_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.WChar, 2, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ID_ACTIF_PASSIF, CODE_ACTIF_PASSIF, LIBELLE_ACTIF_PASSIF FROM ACTIF_PASSIF"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (ID_ACTIF_PASSIF = ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetBaremes.ACTIF_PASSIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetBaremes.ACTIF_PASSIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetBaremes.ACTIF_PASSIFDataTable = New DataSetBaremes.ACTIF_PASSIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCODE_ACTIF_PASSIF(ByVal dataTable As DataSetBaremes.ACTIF_PASSIFDataTable, ByVal CODE_ACTIF_PASSIF As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CODE_ACTIF_PASSIF Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODE_ACTIF_PASSIF,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCODE_ACTIF_PASSIF(ByVal CODE_ACTIF_PASSIF As String) As DataSetBaremes.ACTIF_PASSIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CODE_ACTIF_PASSIF Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODE_ACTIF_PASSIF,String)
            End If
            Dim dataTable As DataSetBaremes.ACTIF_PASSIFDataTable = New DataSetBaremes.ACTIF_PASSIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_ACTIF_PASSIF(ByVal dataTable As DataSetBaremes.ACTIF_PASSIFDataTable, ByVal ID_ACTIF_PASSIF As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_ACTIF_PASSIF,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_ACTIF_PASSIF(ByVal ID_ACTIF_PASSIF As Integer) As DataSetBaremes.ACTIF_PASSIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_ACTIF_PASSIF,Integer)
            Dim dataTable As DataSetBaremes.ACTIF_PASSIFDataTable = New DataSetBaremes.ACTIF_PASSIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetBaremes.ACTIF_PASSIFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetBaremes) As Integer
            Return Me.Adapter.Update(dataSet, "ACTIF_PASSIF")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_ACTIF_PASSIF As Integer, ByVal Original_CODE_ACTIF_PASSIF As String, ByVal Original_LIBELLE_ACTIF_PASSIF As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_ACTIF_PASSIF,Integer)
            If (Original_CODE_ACTIF_PASSIF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CODE_ACTIF_PASSIF,String)
            End If
            If (Original_LIBELLE_ACTIF_PASSIF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LIBELLE_ACTIF_PASSIF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODE_ACTIF_PASSIF As String, ByVal LIBELLE_ACTIF_PASSIF As String) As Integer
            If (CODE_ACTIF_PASSIF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODE_ACTIF_PASSIF,String)
            End If
            If (LIBELLE_ACTIF_PASSIF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LIBELLE_ACTIF_PASSIF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODE_ACTIF_PASSIF As String, ByVal LIBELLE_ACTIF_PASSIF As String, ByVal Original_ID_ACTIF_PASSIF As Integer, ByVal Original_CODE_ACTIF_PASSIF As String, ByVal Original_LIBELLE_ACTIF_PASSIF As String) As Integer
            If (CODE_ACTIF_PASSIF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODE_ACTIF_PASSIF,String)
            End If
            If (LIBELLE_ACTIF_PASSIF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LIBELLE_ACTIF_PASSIF,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID_ACTIF_PASSIF,Integer)
            If (Original_CODE_ACTIF_PASSIF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CODE_ACTIF_PASSIF,String)
            End If
            If (Original_LIBELLE_ACTIF_PASSIF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_LIBELLE_ACTIF_PASSIF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TYPE_PLAN_COMPTABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TYPE_PLAN_COMPTABLE"
            tableMapping.ColumnMappings.Add("ID_TYPE_PLAN_COMPTABLE", "ID_TYPE_PLAN_COMPTABLE")
            tableMapping.ColumnMappings.Add("CODE_TYPE_PLAN_COMPTABLE", "CODE_TYPE_PLAN_COMPTABLE")
            tableMapping.ColumnMappings.Add("LIBELLE_TYPE_PLAN_COMPTABLE", "LIBELLE_TYPE_PLAN_COMPTABLE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `TYPE_PLAN_COMPTABLE` WHERE ((`ID_TYPE_PLAN_COMPTABLE` = ?) AND ((? ="& _ 
                " 1 AND `CODE_TYPE_PLAN_COMPTABLE` IS NULL) OR (`CODE_TYPE_PLAN_COMPTABLE` = ?)) "& _ 
                "AND ((? = 1 AND `LIBELLE_TYPE_PLAN_COMPTABLE` IS NULL) OR (`LIBELLE_TYPE_PLAN_CO"& _ 
                "MPTABLE` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `TYPE_PLAN_COMPTABLE` (`CODE_TYPE_PLAN_COMPTABLE`, `LIBELLE_TYPE_PLAN"& _ 
                "_COMPTABLE`) VALUES (?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `TYPE_PLAN_COMPTABLE` SET `CODE_TYPE_PLAN_COMPTABLE` = ?, `LIBELLE_TYPE_PL"& _ 
                "AN_COMPTABLE` = ? WHERE ((`ID_TYPE_PLAN_COMPTABLE` = ?) AND ((? = 1 AND `CODE_TY"& _ 
                "PE_PLAN_COMPTABLE` IS NULL) OR (`CODE_TYPE_PLAN_COMPTABLE` = ?)) AND ((? = 1 AND"& _ 
                " `LIBELLE_TYPE_PLAN_COMPTABLE` IS NULL) OR (`LIBELLE_TYPE_PLAN_COMPTABLE` = ?)))"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LIBELLE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.BaremesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_TYPE_PLAN_COMPTABLE, CODE_TYPE_PLAN_COMPTABLE, LIBELLE_TYPE_PLAN_COMPTA"& _ 
                "BLE FROM TYPE_PLAN_COMPTABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID_TYPE_PLAN_COMPTABLE, CODE_TYPE_PLAN_COMPTABLE, LIBELLE_TYPE_PLAN_COMPTA"& _ 
                "BLE FROM TYPE_PLAN_COMPTABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (CODE_TYPE_PLAN_COMPTABLE = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.WChar, 1, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODE_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ID_TYPE_PLAN_COMPTABLE, CODE_TYPE_PLAN_COMPTABLE, LIBELLE_TYPE_PLAN_COMPTA"& _ 
                "BLE FROM TYPE_PLAN_COMPTABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (ID_TYPE_PLAN_COMPTABLE = ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable = New DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCODE_TYPE_PLAN_COMPTABLE(ByVal dataTable As DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable, ByVal CODE_TYPE_PLAN_COMPTABLE As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CODE_TYPE_PLAN_COMPTABLE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODE_TYPE_PLAN_COMPTABLE,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCODE_TYPE_PLAN_COMPTABLE(ByVal CODE_TYPE_PLAN_COMPTABLE As String) As DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CODE_TYPE_PLAN_COMPTABLE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODE_TYPE_PLAN_COMPTABLE,String)
            End If
            Dim dataTable As DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable = New DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_TYPE_PLAN_COMPTABLE(ByVal dataTable As DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable, ByVal ID_TYPE_PLAN_COMPTABLE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_TYPE_PLAN_COMPTABLE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_TYPE_PLAN_COMPTABLE(ByVal ID_TYPE_PLAN_COMPTABLE As Integer) As DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_TYPE_PLAN_COMPTABLE,Integer)
            Dim dataTable As DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable = New DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetBaremes.TYPE_PLAN_COMPTABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetBaremes) As Integer
            Return Me.Adapter.Update(dataSet, "TYPE_PLAN_COMPTABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_TYPE_PLAN_COMPTABLE As Integer, ByVal Original_CODE_TYPE_PLAN_COMPTABLE As String, ByVal Original_LIBELLE_TYPE_PLAN_COMPTABLE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_TYPE_PLAN_COMPTABLE,Integer)
            If (Original_CODE_TYPE_PLAN_COMPTABLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CODE_TYPE_PLAN_COMPTABLE,String)
            End If
            If (Original_LIBELLE_TYPE_PLAN_COMPTABLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LIBELLE_TYPE_PLAN_COMPTABLE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODE_TYPE_PLAN_COMPTABLE As String, ByVal LIBELLE_TYPE_PLAN_COMPTABLE As String) As Integer
            If (CODE_TYPE_PLAN_COMPTABLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODE_TYPE_PLAN_COMPTABLE,String)
            End If
            If (LIBELLE_TYPE_PLAN_COMPTABLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LIBELLE_TYPE_PLAN_COMPTABLE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODE_TYPE_PLAN_COMPTABLE As String, ByVal LIBELLE_TYPE_PLAN_COMPTABLE As String, ByVal Original_ID_TYPE_PLAN_COMPTABLE As Integer, ByVal Original_CODE_TYPE_PLAN_COMPTABLE As String, ByVal Original_LIBELLE_TYPE_PLAN_COMPTABLE As String) As Integer
            If (CODE_TYPE_PLAN_COMPTABLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODE_TYPE_PLAN_COMPTABLE,String)
            End If
            If (LIBELLE_TYPE_PLAN_COMPTABLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LIBELLE_TYPE_PLAN_COMPTABLE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID_TYPE_PLAN_COMPTABLE,Integer)
            If (Original_CODE_TYPE_PLAN_COMPTABLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CODE_TYPE_PLAN_COMPTABLE,String)
            End If
            If (Original_LIBELLE_TYPE_PLAN_COMPTABLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_LIBELLE_TYPE_PLAN_COMPTABLE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FOURCHETTE_COMPTESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FOURCHETTE_COMPTES"
            tableMapping.ColumnMappings.Add("ID_FOURCHETTE_COMPTE", "ID_FOURCHETTE_COMPTE")
            tableMapping.ColumnMappings.Add("COMPTE_DEB", "COMPTE_DEB")
            tableMapping.ColumnMappings.Add("COMPTE_FIN", "COMPTE_FIN")
            tableMapping.ColumnMappings.Add("ID_ACTIF_PASSIF", "ID_ACTIF_PASSIF")
            tableMapping.ColumnMappings.Add("POSITION", "POSITION")
            tableMapping.ColumnMappings.Add("EST_DETAILLE", "EST_DETAILLE")
            tableMapping.ColumnMappings.Add("ID_TYPE_PLAN_COMPTABLE", "ID_TYPE_PLAN_COMPTABLE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `FOURCHETTE_COMPTES` WHERE ((`ID_FOURCHETTE_COMPTE` = ?) AND ((? = 1 "& _ 
                "AND `COMPTE_DEB` IS NULL) OR (`COMPTE_DEB` = ?)) AND ((? = 1 AND `COMPTE_FIN` IS"& _ 
                " NULL) OR (`COMPTE_FIN` = ?)) AND ((? = 1 AND `ID_ACTIF_PASSIF` IS NULL) OR (`ID"& _ 
                "_ACTIF_PASSIF` = ?)) AND ((? = 1 AND `POSITION` IS NULL) OR (`POSITION` = ?)) AN"& _ 
                "D ((? = 1 AND `EST_DETAILLE` IS NULL) OR (`EST_DETAILLE` = ?)) AND ((? = 1 AND `"& _ 
                "ID_TYPE_PLAN_COMPTABLE` IS NULL) OR (`ID_TYPE_PLAN_COMPTABLE` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_FOURCHETTE_COMPTE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FOURCHETTE_COMPTE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COMPTE_DEB", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_DEB", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COMPTE_DEB", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_DEB", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COMPTE_FIN", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_FIN", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COMPTE_FIN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_FIN", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ID_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_POSITION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSITION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_POSITION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSITION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EST_DETAILLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "EST_DETAILLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EST_DETAILLE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "EST_DETAILLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ID_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `FOURCHETTE_COMPTES` (`COMPTE_DEB`, `COMPTE_FIN`, `ID_ACTIF_PASSIF`, "& _ 
                "`POSITION`, `EST_DETAILLE`, `ID_TYPE_PLAN_COMPTABLE`) VALUES (?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COMPTE_DEB", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_DEB", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COMPTE_FIN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_FIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("POSITION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSITION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EST_DETAILLE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "EST_DETAILLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `FOURCHETTE_COMPTES` SET `COMPTE_DEB` = ?, `COMPTE_FIN` = ?, `ID_ACTIF_PAS"& _ 
                "SIF` = ?, `POSITION` = ?, `EST_DETAILLE` = ?, `ID_TYPE_PLAN_COMPTABLE` = ? WHERE"& _ 
                " ((`ID_FOURCHETTE_COMPTE` = ?) AND ((? = 1 AND `COMPTE_DEB` IS NULL) OR (`COMPTE"& _ 
                "_DEB` = ?)) AND ((? = 1 AND `COMPTE_FIN` IS NULL) OR (`COMPTE_FIN` = ?)) AND ((?"& _ 
                " = 1 AND `ID_ACTIF_PASSIF` IS NULL) OR (`ID_ACTIF_PASSIF` = ?)) AND ((? = 1 AND "& _ 
                "`POSITION` IS NULL) OR (`POSITION` = ?)) AND ((? = 1 AND `EST_DETAILLE` IS NULL)"& _ 
                " OR (`EST_DETAILLE` = ?)) AND ((? = 1 AND `ID_TYPE_PLAN_COMPTABLE` IS NULL) OR ("& _ 
                "`ID_TYPE_PLAN_COMPTABLE` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COMPTE_DEB", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_DEB", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COMPTE_FIN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_FIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("POSITION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSITION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EST_DETAILLE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "EST_DETAILLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_FOURCHETTE_COMPTE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FOURCHETTE_COMPTE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COMPTE_DEB", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_DEB", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COMPTE_DEB", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_DEB", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COMPTE_FIN", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_FIN", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COMPTE_FIN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_FIN", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ID_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_ACTIF_PASSIF", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_ACTIF_PASSIF", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_POSITION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSITION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_POSITION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSITION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EST_DETAILLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "EST_DETAILLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EST_DETAILLE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "EST_DETAILLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ID_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.BaremesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID_FOURCHETTE_COMPTE, COMPTE_DEB, COMPTE_FIN, ID_ACTIF_PASSIF, [POS"& _ 
                "ITION], EST_DETAILLE, ID_TYPE_PLAN_COMPTABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            FOURCHETTE_COMPTES"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID_FOURCHETTE_COMPTE, COMPTE_DEB, COMPTE_FIN, ID_ACTIF_PASSIF, [POS"& _ 
                "ITION], EST_DETAILLE, ID_TYPE_PLAN_COMPTABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            FOURCHETTE_COMPTES"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (COMPTE_DEB <= ?) AND (COMPTE_FIN >= ?) AND (ID_TYPE_PLAN_COMPTAB"& _ 
                "LE = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COMPTE_DEB", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_DEB", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COMPTE_FIN", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COMPTE_FIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_TYPE_PLAN_COMPTABLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_TYPE_PLAN_COMPTABLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        ID_FOURCHETTE_COMPTE, COMPTE_DEB, COMPTE_FIN, ID_ACTIF_PASSIF, [POS"& _ 
                "ITION], EST_DETAILLE, ID_TYPE_PLAN_COMPTABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            FOURCHETTE_COMPTES"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (ID_FOURCHETTE_COMPTE = ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID_FOURCHETTE_COMPTE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID_FOURCHETTE_COMPTE", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetBaremes.FOURCHETTE_COMPTESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetBaremes.FOURCHETTE_COMPTESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetBaremes.FOURCHETTE_COMPTESDataTable = New DataSetBaremes.FOURCHETTE_COMPTESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCOMPTE_DEBEtCOMPTE_FINEtID_TYPE_PLAN_COMPTABLE(ByVal dataTable As DataSetBaremes.FOURCHETTE_COMPTESDataTable, ByVal COMPTE_DEB As String, ByVal COMPTE_FIN As String, ByVal ID_TYPE_PLAN_COMPTABLE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (COMPTE_DEB Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COMPTE_DEB,String)
            End If
            If (COMPTE_FIN Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COMPTE_FIN,String)
            End If
            If (ID_TYPE_PLAN_COMPTABLE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ID_TYPE_PLAN_COMPTABLE.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCOMPTE_DEBEtCOMPTE_FINEtID_TYPE_PLAN_COMPTABLE(ByVal COMPTE_DEB As String, ByVal COMPTE_FIN As String, ByVal ID_TYPE_PLAN_COMPTABLE As Global.System.Nullable(Of Integer)) As DataSetBaremes.FOURCHETTE_COMPTESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (COMPTE_DEB Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COMPTE_DEB,String)
            End If
            If (COMPTE_FIN Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COMPTE_FIN,String)
            End If
            If (ID_TYPE_PLAN_COMPTABLE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ID_TYPE_PLAN_COMPTABLE.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetBaremes.FOURCHETTE_COMPTESDataTable = New DataSetBaremes.FOURCHETTE_COMPTESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID_FOURCHETTE_COMPTE(ByVal dataTable As DataSetBaremes.FOURCHETTE_COMPTESDataTable, ByVal ID_FOURCHETTE_COMPTE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_FOURCHETTE_COMPTE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID_FOURCHETTE_COMPTE(ByVal ID_FOURCHETTE_COMPTE As Integer) As DataSetBaremes.FOURCHETTE_COMPTESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_FOURCHETTE_COMPTE,Integer)
            Dim dataTable As DataSetBaremes.FOURCHETTE_COMPTESDataTable = New DataSetBaremes.FOURCHETTE_COMPTESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetBaremes.FOURCHETTE_COMPTESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetBaremes) As Integer
            Return Me.Adapter.Update(dataSet, "FOURCHETTE_COMPTES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_FOURCHETTE_COMPTE As Integer, ByVal Original_COMPTE_DEB As String, ByVal Original_COMPTE_FIN As String, ByVal Original_ID_ACTIF_PASSIF As Global.System.Nullable(Of Integer), ByVal Original_POSITION As Global.System.Nullable(Of Integer), ByVal Original_EST_DETAILLE As Boolean, ByVal Original_ID_TYPE_PLAN_COMPTABLE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_FOURCHETTE_COMPTE,Integer)
            If (Original_COMPTE_DEB Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_COMPTE_DEB,String)
            End If
            If (Original_COMPTE_FIN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_COMPTE_FIN,String)
            End If
            If (Original_ID_ACTIF_PASSIF.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ID_ACTIF_PASSIF.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_POSITION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_POSITION.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_EST_DETAILLE,Boolean)
            If (Original_ID_TYPE_PLAN_COMPTABLE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ID_TYPE_PLAN_COMPTABLE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COMPTE_DEB As String, ByVal COMPTE_FIN As String, ByVal ID_ACTIF_PASSIF As Global.System.Nullable(Of Integer), ByVal POSITION As Global.System.Nullable(Of Integer), ByVal EST_DETAILLE As Boolean, ByVal ID_TYPE_PLAN_COMPTABLE As Global.System.Nullable(Of Integer)) As Integer
            If (COMPTE_DEB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(COMPTE_DEB,String)
            End If
            If (COMPTE_FIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(COMPTE_FIN,String)
            End If
            If (ID_ACTIF_PASSIF.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID_ACTIF_PASSIF.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (POSITION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(POSITION.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(EST_DETAILLE,Boolean)
            If (ID_TYPE_PLAN_COMPTABLE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ID_TYPE_PLAN_COMPTABLE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COMPTE_DEB As String, ByVal COMPTE_FIN As String, ByVal ID_ACTIF_PASSIF As Global.System.Nullable(Of Integer), ByVal POSITION As Global.System.Nullable(Of Integer), ByVal EST_DETAILLE As Boolean, ByVal ID_TYPE_PLAN_COMPTABLE As Global.System.Nullable(Of Integer), ByVal Original_ID_FOURCHETTE_COMPTE As Integer, ByVal Original_COMPTE_DEB As String, ByVal Original_COMPTE_FIN As String, ByVal Original_ID_ACTIF_PASSIF As Global.System.Nullable(Of Integer), ByVal Original_POSITION As Global.System.Nullable(Of Integer), ByVal Original_EST_DETAILLE As Boolean, ByVal Original_ID_TYPE_PLAN_COMPTABLE As Global.System.Nullable(Of Integer)) As Integer
            If (COMPTE_DEB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COMPTE_DEB,String)
            End If
            If (COMPTE_FIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COMPTE_FIN,String)
            End If
            If (ID_ACTIF_PASSIF.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID_ACTIF_PASSIF.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (POSITION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(POSITION.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(EST_DETAILLE,Boolean)
            If (ID_TYPE_PLAN_COMPTABLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_TYPE_PLAN_COMPTABLE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID_FOURCHETTE_COMPTE,Integer)
            If (Original_COMPTE_DEB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_COMPTE_DEB,String)
            End If
            If (Original_COMPTE_FIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_COMPTE_FIN,String)
            End If
            If (Original_ID_ACTIF_PASSIF.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ID_ACTIF_PASSIF.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_POSITION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_POSITION.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_EST_DETAILLE,Boolean)
            If (Original_ID_TYPE_PLAN_COMPTABLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ID_TYPE_PLAN_COMPTABLE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
