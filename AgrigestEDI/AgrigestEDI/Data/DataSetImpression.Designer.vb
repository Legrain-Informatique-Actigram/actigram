'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.5448
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetImpression"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetImpression
    Inherits Global.System.Data.DataSet
    
    Private tableSOLDES As SOLDESDataTable
    
    Private tableImpAnnexesTiers As ImpAnnexesTiersDataTable
    
    Private tableImpListeInv As ImpListeInvDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SOLDES")) Is Nothing) Then
                MyBase.Tables.Add(New SOLDESDataTable(ds.Tables("SOLDES")))
            End If
            If (Not (ds.Tables("ImpAnnexesTiers")) Is Nothing) Then
                MyBase.Tables.Add(New ImpAnnexesTiersDataTable(ds.Tables("ImpAnnexesTiers")))
            End If
            If (Not (ds.Tables("ImpListeInv")) Is Nothing) Then
                MyBase.Tables.Add(New ImpListeInvDataTable(ds.Tables("ImpListeInv")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SOLDES() As SOLDESDataTable
        Get
            Return Me.tableSOLDES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImpAnnexesTiers() As ImpAnnexesTiersDataTable
        Get
            Return Me.tableImpAnnexesTiers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImpListeInv() As ImpListeInvDataTable
        Get
            Return Me.tableImpListeInv
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetImpression = CType(MyBase.Clone,DataSetImpression)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SOLDES")) Is Nothing) Then
                MyBase.Tables.Add(New SOLDESDataTable(ds.Tables("SOLDES")))
            End If
            If (Not (ds.Tables("ImpAnnexesTiers")) Is Nothing) Then
                MyBase.Tables.Add(New ImpAnnexesTiersDataTable(ds.Tables("ImpAnnexesTiers")))
            End If
            If (Not (ds.Tables("ImpListeInv")) Is Nothing) Then
                MyBase.Tables.Add(New ImpListeInvDataTable(ds.Tables("ImpListeInv")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSOLDES = CType(MyBase.Tables("SOLDES"),SOLDESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSOLDES) Is Nothing) Then
                Me.tableSOLDES.InitVars
            End If
        End If
        Me.tableImpAnnexesTiers = CType(MyBase.Tables("ImpAnnexesTiers"),ImpAnnexesTiersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImpAnnexesTiers) Is Nothing) Then
                Me.tableImpAnnexesTiers.InitVars
            End If
        End If
        Me.tableImpListeInv = CType(MyBase.Tables("ImpListeInv"),ImpListeInvDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImpListeInv) Is Nothing) Then
                Me.tableImpListeInv.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetImpression"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetImpression.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSOLDES = New SOLDESDataTable
        MyBase.Tables.Add(Me.tableSOLDES)
        Me.tableImpAnnexesTiers = New ImpAnnexesTiersDataTable
        MyBase.Tables.Add(Me.tableImpAnnexesTiers)
        Me.tableImpListeInv = New ImpListeInvDataTable
        MyBase.Tables.Add(Me.tableImpListeInv)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSOLDES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImpAnnexesTiers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImpListeInv() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetImpression = New DataSetImpression
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub SOLDESRowChangeEventHandler(ByVal sender As Object, ByVal e As SOLDESRowChangeEvent)
    
    Public Delegate Sub ImpAnnexesTiersRowChangeEventHandler(ByVal sender As Object, ByVal e As ImpAnnexesTiersRowChangeEvent)
    
    Public Delegate Sub ImpListeInvRowChangeEventHandler(ByVal sender As Object, ByVal e As ImpListeInvRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SOLDESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMCpt As Global.System.Data.DataColumn
        
        Private columnSOLDE_D As Global.System.Data.DataColumn
        
        Private columnSOLDE_C As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SOLDES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SOLDE_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOLDE_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SOLDE_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOLDE_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SOLDESRow
            Get
                Return CType(Me.Rows(index),SOLDESRow)
            End Get
        End Property
        
        Public Event SOLDESRowChanging As SOLDESRowChangeEventHandler
        
        Public Event SOLDESRowChanged As SOLDESRowChangeEventHandler
        
        Public Event SOLDESRowDeleting As SOLDESRowChangeEventHandler
        
        Public Event SOLDESRowDeleted As SOLDESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSOLDESRow(ByVal row As SOLDESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSOLDESRow(ByVal MCpt As String, ByVal SOLDE_D As Decimal, ByVal SOLDE_C As Decimal) As SOLDESRow
            Dim rowSOLDESRow As SOLDESRow = CType(Me.NewRow,SOLDESRow)
            Dim columnValuesArray() As Object = New Object() {MCpt, SOLDE_D, SOLDE_C}
            rowSOLDESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSOLDESRow)
            Return rowSOLDESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SOLDESDataTable = CType(MyBase.Clone,SOLDESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SOLDESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMCpt = MyBase.Columns("MCpt")
            Me.columnSOLDE_D = MyBase.Columns("SOLDE_D")
            Me.columnSOLDE_C = MyBase.Columns("SOLDE_C")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMCpt = New Global.System.Data.DataColumn("MCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCpt)
            Me.columnSOLDE_D = New Global.System.Data.DataColumn("SOLDE_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOLDE_D)
            Me.columnSOLDE_C = New Global.System.Data.DataColumn("SOLDE_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOLDE_C)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSOLDESRow() As SOLDESRow
            Return CType(Me.NewRow,SOLDESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SOLDESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SOLDESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SOLDESRowChangedEvent) Is Nothing) Then
                RaiseEvent SOLDESRowChanged(Me, New SOLDESRowChangeEvent(CType(e.Row,SOLDESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SOLDESRowChangingEvent) Is Nothing) Then
                RaiseEvent SOLDESRowChanging(Me, New SOLDESRowChangeEvent(CType(e.Row,SOLDESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SOLDESRowDeletedEvent) Is Nothing) Then
                RaiseEvent SOLDESRowDeleted(Me, New SOLDESRowChangeEvent(CType(e.Row,SOLDESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SOLDESRowDeletingEvent) Is Nothing) Then
                RaiseEvent SOLDESRowDeleting(Me, New SOLDESRowChangeEvent(CType(e.Row,SOLDESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSOLDESRow(ByVal row As SOLDESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetImpression = New DataSetImpression
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SOLDESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImpAnnexesTiersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMDossier As Global.System.Data.DataColumn
        
        Private columnMPiece As Global.System.Data.DataColumn
        
        Private columnMDate As Global.System.Data.DataColumn
        
        Private columnMCpt As Global.System.Data.DataColumn
        
        Private columnCLib As Global.System.Data.DataColumn
        
        Private columnLLib As Global.System.Data.DataColumn
        
        Private columnMMtDeb As Global.System.Data.DataColumn
        
        Private columnMMtCre As Global.System.Data.DataColumn
        
        Private columnEType As Global.System.Data.DataColumn
        
        Private columnCOMPTE_DEB As Global.System.Data.DataColumn
        
        Private columnCOMPTE_FIN As Global.System.Data.DataColumn
        
        Private columnSOLDE_CPT As Global.System.Data.DataColumn
        
        Private columnCODE_ACTIF_PASSIF As Global.System.Data.DataColumn
        
        Private columnPOSITION As Global.System.Data.DataColumn
        
        Private columnEST_DETAILLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImpAnnexesTiers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MPieceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMPiece
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MMtDebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMMtDeb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MMtCreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMMtCre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ETypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPTE_DEBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPTE_DEB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPTE_FINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPTE_FIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SOLDE_CPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOLDE_CPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_ACTIF_PASSIFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_ACTIF_PASSIF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EST_DETAILLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEST_DETAILLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImpAnnexesTiersRow
            Get
                Return CType(Me.Rows(index),ImpAnnexesTiersRow)
            End Get
        End Property
        
        Public Event ImpAnnexesTiersRowChanging As ImpAnnexesTiersRowChangeEventHandler
        
        Public Event ImpAnnexesTiersRowChanged As ImpAnnexesTiersRowChangeEventHandler
        
        Public Event ImpAnnexesTiersRowDeleting As ImpAnnexesTiersRowChangeEventHandler
        
        Public Event ImpAnnexesTiersRowDeleted As ImpAnnexesTiersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImpAnnexesTiersRow(ByVal row As ImpAnnexesTiersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImpAnnexesTiersRow(ByVal MDossier As String, ByVal MPiece As Integer, ByVal MDate As Date, ByVal MCpt As String, ByVal CLib As String, ByVal LLib As String, ByVal MMtDeb As Decimal, ByVal MMtCre As Decimal, ByVal EType As String, ByVal COMPTE_DEB As String, ByVal COMPTE_FIN As String, ByVal SOLDE_CPT As Decimal, ByVal CODE_ACTIF_PASSIF As String, ByVal POSITION As Integer, ByVal EST_DETAILLE As Boolean) As ImpAnnexesTiersRow
            Dim rowImpAnnexesTiersRow As ImpAnnexesTiersRow = CType(Me.NewRow,ImpAnnexesTiersRow)
            Dim columnValuesArray() As Object = New Object() {MDossier, MPiece, MDate, MCpt, CLib, LLib, MMtDeb, MMtCre, EType, COMPTE_DEB, COMPTE_FIN, SOLDE_CPT, CODE_ACTIF_PASSIF, POSITION, EST_DETAILLE}
            rowImpAnnexesTiersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImpAnnexesTiersRow)
            Return rowImpAnnexesTiersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImpAnnexesTiersDataTable = CType(MyBase.Clone,ImpAnnexesTiersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImpAnnexesTiersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMDossier = MyBase.Columns("MDossier")
            Me.columnMPiece = MyBase.Columns("MPiece")
            Me.columnMDate = MyBase.Columns("MDate")
            Me.columnMCpt = MyBase.Columns("MCpt")
            Me.columnCLib = MyBase.Columns("CLib")
            Me.columnLLib = MyBase.Columns("LLib")
            Me.columnMMtDeb = MyBase.Columns("MMtDeb")
            Me.columnMMtCre = MyBase.Columns("MMtCre")
            Me.columnEType = MyBase.Columns("EType")
            Me.columnCOMPTE_DEB = MyBase.Columns("COMPTE_DEB")
            Me.columnCOMPTE_FIN = MyBase.Columns("COMPTE_FIN")
            Me.columnSOLDE_CPT = MyBase.Columns("SOLDE_CPT")
            Me.columnCODE_ACTIF_PASSIF = MyBase.Columns("CODE_ACTIF_PASSIF")
            Me.columnPOSITION = MyBase.Columns("POSITION")
            Me.columnEST_DETAILLE = MyBase.Columns("EST_DETAILLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMDossier = New Global.System.Data.DataColumn("MDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMDossier)
            Me.columnMPiece = New Global.System.Data.DataColumn("MPiece", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMPiece)
            Me.columnMDate = New Global.System.Data.DataColumn("MDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMDate)
            Me.columnMCpt = New Global.System.Data.DataColumn("MCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCpt)
            Me.columnCLib = New Global.System.Data.DataColumn("CLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLib)
            Me.columnLLib = New Global.System.Data.DataColumn("LLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLLib)
            Me.columnMMtDeb = New Global.System.Data.DataColumn("MMtDeb", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMMtDeb)
            Me.columnMMtCre = New Global.System.Data.DataColumn("MMtCre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMMtCre)
            Me.columnEType = New Global.System.Data.DataColumn("EType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEType)
            Me.columnCOMPTE_DEB = New Global.System.Data.DataColumn("COMPTE_DEB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPTE_DEB)
            Me.columnCOMPTE_FIN = New Global.System.Data.DataColumn("COMPTE_FIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPTE_FIN)
            Me.columnSOLDE_CPT = New Global.System.Data.DataColumn("SOLDE_CPT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOLDE_CPT)
            Me.columnCODE_ACTIF_PASSIF = New Global.System.Data.DataColumn("CODE_ACTIF_PASSIF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_ACTIF_PASSIF)
            Me.columnPOSITION = New Global.System.Data.DataColumn("POSITION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSITION)
            Me.columnEST_DETAILLE = New Global.System.Data.DataColumn("EST_DETAILLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEST_DETAILLE)
            Me.columnMDossier.MaxLength = 8
            Me.columnMCpt.MaxLength = 8
            Me.columnCLib.MaxLength = 30
            Me.columnLLib.MaxLength = 55
            Me.columnEType.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImpAnnexesTiersRow() As ImpAnnexesTiersRow
            Return CType(Me.NewRow,ImpAnnexesTiersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImpAnnexesTiersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImpAnnexesTiersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImpAnnexesTiersRowChangedEvent) Is Nothing) Then
                RaiseEvent ImpAnnexesTiersRowChanged(Me, New ImpAnnexesTiersRowChangeEvent(CType(e.Row,ImpAnnexesTiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImpAnnexesTiersRowChangingEvent) Is Nothing) Then
                RaiseEvent ImpAnnexesTiersRowChanging(Me, New ImpAnnexesTiersRowChangeEvent(CType(e.Row,ImpAnnexesTiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImpAnnexesTiersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImpAnnexesTiersRowDeleted(Me, New ImpAnnexesTiersRowChangeEvent(CType(e.Row,ImpAnnexesTiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImpAnnexesTiersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImpAnnexesTiersRowDeleting(Me, New ImpAnnexesTiersRowChangeEvent(CType(e.Row,ImpAnnexesTiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImpAnnexesTiersRow(ByVal row As ImpAnnexesTiersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetImpression = New DataSetImpression
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImpAnnexesTiersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImpListeInvDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnINVGDossier As Global.System.Data.DataColumn
        
        Private columnINVGCode As Global.System.Data.DataColumn
        
        Private columnINVGLib As Global.System.Data.DataColumn
        
        Private columnINVGOrdre As Global.System.Data.DataColumn
        
        Private columnINVLLig As Global.System.Data.DataColumn
        
        Private columnINVLQte As Global.System.Data.DataColumn
        
        Private columnINVLPrixUnit As Global.System.Data.DataColumn
        
        Private columnINVGUnite As Global.System.Data.DataColumn
        
        Private columnINVLLib As Global.System.Data.DataColumn
        
        Private columnINVGTypeInventaire As Global.System.Data.DataColumn
        
        Private columnINVGDecote As Global.System.Data.DataColumn
        
        Private columnINVGCpt As Global.System.Data.DataColumn
        
        Private columnINVGActi As Global.System.Data.DataColumn
        
        Private columnINVLCoutOutil As Global.System.Data.DataColumn
        
        Private columnINVLCoutTracteur As Global.System.Data.DataColumn
        
        Private columnINVLTempsH As Global.System.Data.DataColumn
        
        Private columnINVLTempsMin As Global.System.Data.DataColumn
        
        Private columnINVLNbHa As Global.System.Data.DataColumn
        
        Private columnINVLValPdtenTerre As Global.System.Data.DataColumn
        
        Private columnINVLValFaconcult As Global.System.Data.DataColumn
        
        Private columnINVLMtDeb As Global.System.Data.DataColumn
        
        Private columnINVLMtCre As Global.System.Data.DataColumn
        
        Private columnOrdreTypeInventaire As Global.System.Data.DataColumn
        
        Private columnLibelleTypeInventaire As Global.System.Data.DataColumn
        
        Private columnINVLOrdre As Global.System.Data.DataColumn
        
        Private columnINVLValForfaitaire As Global.System.Data.DataColumn
        
        Private columnINVLNbPass As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImpListeInv"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVGDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVGDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVGCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVGCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVGLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVGLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVGOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVGOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLLigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLLig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLQteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLQte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLPrixUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLPrixUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVGUniteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVGUnite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVGTypeInventaireColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVGTypeInventaire
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVGDecoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVGDecote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVGCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVGCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVGActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVGActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLCoutOutilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLCoutOutil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLCoutTracteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLCoutTracteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLTempsHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLTempsH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLTempsMinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLTempsMin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLNbHaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLNbHa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLValPdtenTerreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLValPdtenTerre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLValFaconcultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLValFaconcult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLMtDebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLMtDeb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLMtCreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLMtCre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdreTypeInventaireColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdreTypeInventaire
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleTypeInventaireColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelleTypeInventaire
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLValForfaitaireColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLValForfaitaire
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVLNbPassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVLNbPass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImpListeInvRow
            Get
                Return CType(Me.Rows(index),ImpListeInvRow)
            End Get
        End Property
        
        Public Event ImpListeInvRowChanging As ImpListeInvRowChangeEventHandler
        
        Public Event ImpListeInvRowChanged As ImpListeInvRowChangeEventHandler
        
        Public Event ImpListeInvRowDeleting As ImpListeInvRowChangeEventHandler
        
        Public Event ImpListeInvRowDeleted As ImpListeInvRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImpListeInvRow(ByVal row As ImpListeInvRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImpListeInvRow( _
                    ByVal INVGDossier As String,  _
                    ByVal INVGCode As Integer,  _
                    ByVal INVGLib As String,  _
                    ByVal INVGOrdre As Integer,  _
                    ByVal INVLLig As Integer,  _
                    ByVal INVLQte As Decimal,  _
                    ByVal INVLPrixUnit As Decimal,  _
                    ByVal INVGUnite As String,  _
                    ByVal INVLLib As String,  _
                    ByVal INVGTypeInventaire As String,  _
                    ByVal INVGDecote As Decimal,  _
                    ByVal INVGCpt As String,  _
                    ByVal INVGActi As String,  _
                    ByVal INVLCoutOutil As Decimal,  _
                    ByVal INVLCoutTracteur As Decimal,  _
                    ByVal INVLTempsH As Integer,  _
                    ByVal INVLTempsMin As Integer,  _
                    ByVal INVLNbHa As Decimal,  _
                    ByVal INVLValPdtenTerre As Decimal,  _
                    ByVal INVLValFaconcult As Decimal,  _
                    ByVal INVLMtDeb As Decimal,  _
                    ByVal INVLMtCre As Decimal,  _
                    ByVal OrdreTypeInventaire As Integer,  _
                    ByVal LibelleTypeInventaire As String,  _
                    ByVal INVLOrdre As Integer,  _
                    ByVal INVLValForfaitaire As Decimal,  _
                    ByVal INVLNbPass As Integer) As ImpListeInvRow
            Dim rowImpListeInvRow As ImpListeInvRow = CType(Me.NewRow,ImpListeInvRow)
            Dim columnValuesArray() As Object = New Object() {INVGDossier, INVGCode, INVGLib, INVGOrdre, INVLLig, INVLQte, INVLPrixUnit, INVGUnite, INVLLib, INVGTypeInventaire, INVGDecote, INVGCpt, INVGActi, INVLCoutOutil, INVLCoutTracteur, INVLTempsH, INVLTempsMin, INVLNbHa, INVLValPdtenTerre, INVLValFaconcult, INVLMtDeb, INVLMtCre, OrdreTypeInventaire, LibelleTypeInventaire, INVLOrdre, INVLValForfaitaire, INVLNbPass}
            rowImpListeInvRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImpListeInvRow)
            Return rowImpListeInvRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImpListeInvDataTable = CType(MyBase.Clone,ImpListeInvDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImpListeInvDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINVGDossier = MyBase.Columns("INVGDossier")
            Me.columnINVGCode = MyBase.Columns("INVGCode")
            Me.columnINVGLib = MyBase.Columns("INVGLib")
            Me.columnINVGOrdre = MyBase.Columns("INVGOrdre")
            Me.columnINVLLig = MyBase.Columns("INVLLig")
            Me.columnINVLQte = MyBase.Columns("INVLQte")
            Me.columnINVLPrixUnit = MyBase.Columns("INVLPrixUnit")
            Me.columnINVGUnite = MyBase.Columns("INVGUnite")
            Me.columnINVLLib = MyBase.Columns("INVLLib")
            Me.columnINVGTypeInventaire = MyBase.Columns("INVGTypeInventaire")
            Me.columnINVGDecote = MyBase.Columns("INVGDecote")
            Me.columnINVGCpt = MyBase.Columns("INVGCpt")
            Me.columnINVGActi = MyBase.Columns("INVGActi")
            Me.columnINVLCoutOutil = MyBase.Columns("INVLCoutOutil")
            Me.columnINVLCoutTracteur = MyBase.Columns("INVLCoutTracteur")
            Me.columnINVLTempsH = MyBase.Columns("INVLTempsH")
            Me.columnINVLTempsMin = MyBase.Columns("INVLTempsMin")
            Me.columnINVLNbHa = MyBase.Columns("INVLNbHa")
            Me.columnINVLValPdtenTerre = MyBase.Columns("INVLValPdtenTerre")
            Me.columnINVLValFaconcult = MyBase.Columns("INVLValFaconcult")
            Me.columnINVLMtDeb = MyBase.Columns("INVLMtDeb")
            Me.columnINVLMtCre = MyBase.Columns("INVLMtCre")
            Me.columnOrdreTypeInventaire = MyBase.Columns("OrdreTypeInventaire")
            Me.columnLibelleTypeInventaire = MyBase.Columns("LibelleTypeInventaire")
            Me.columnINVLOrdre = MyBase.Columns("INVLOrdre")
            Me.columnINVLValForfaitaire = MyBase.Columns("INVLValForfaitaire")
            Me.columnINVLNbPass = MyBase.Columns("INVLNbPass")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINVGDossier = New Global.System.Data.DataColumn("INVGDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVGDossier)
            Me.columnINVGCode = New Global.System.Data.DataColumn("INVGCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVGCode)
            Me.columnINVGLib = New Global.System.Data.DataColumn("INVGLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVGLib)
            Me.columnINVGOrdre = New Global.System.Data.DataColumn("INVGOrdre", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVGOrdre)
            Me.columnINVLLig = New Global.System.Data.DataColumn("INVLLig", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLLig)
            Me.columnINVLQte = New Global.System.Data.DataColumn("INVLQte", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLQte)
            Me.columnINVLPrixUnit = New Global.System.Data.DataColumn("INVLPrixUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLPrixUnit)
            Me.columnINVGUnite = New Global.System.Data.DataColumn("INVGUnite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVGUnite)
            Me.columnINVLLib = New Global.System.Data.DataColumn("INVLLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLLib)
            Me.columnINVGTypeInventaire = New Global.System.Data.DataColumn("INVGTypeInventaire", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVGTypeInventaire)
            Me.columnINVGDecote = New Global.System.Data.DataColumn("INVGDecote", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVGDecote)
            Me.columnINVGCpt = New Global.System.Data.DataColumn("INVGCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVGCpt)
            Me.columnINVGActi = New Global.System.Data.DataColumn("INVGActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVGActi)
            Me.columnINVLCoutOutil = New Global.System.Data.DataColumn("INVLCoutOutil", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLCoutOutil)
            Me.columnINVLCoutTracteur = New Global.System.Data.DataColumn("INVLCoutTracteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLCoutTracteur)
            Me.columnINVLTempsH = New Global.System.Data.DataColumn("INVLTempsH", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLTempsH)
            Me.columnINVLTempsMin = New Global.System.Data.DataColumn("INVLTempsMin", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLTempsMin)
            Me.columnINVLNbHa = New Global.System.Data.DataColumn("INVLNbHa", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLNbHa)
            Me.columnINVLValPdtenTerre = New Global.System.Data.DataColumn("INVLValPdtenTerre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLValPdtenTerre)
            Me.columnINVLValFaconcult = New Global.System.Data.DataColumn("INVLValFaconcult", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLValFaconcult)
            Me.columnINVLMtDeb = New Global.System.Data.DataColumn("INVLMtDeb", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLMtDeb)
            Me.columnINVLMtCre = New Global.System.Data.DataColumn("INVLMtCre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLMtCre)
            Me.columnOrdreTypeInventaire = New Global.System.Data.DataColumn("OrdreTypeInventaire", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdreTypeInventaire)
            Me.columnLibelleTypeInventaire = New Global.System.Data.DataColumn("LibelleTypeInventaire", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelleTypeInventaire)
            Me.columnINVLOrdre = New Global.System.Data.DataColumn("INVLOrdre", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLOrdre)
            Me.columnINVLValForfaitaire = New Global.System.Data.DataColumn("INVLValForfaitaire", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLValForfaitaire)
            Me.columnINVLNbPass = New Global.System.Data.DataColumn("INVLNbPass", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVLNbPass)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImpListeInvRow() As ImpListeInvRow
            Return CType(Me.NewRow,ImpListeInvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImpListeInvRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImpListeInvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImpListeInvRowChangedEvent) Is Nothing) Then
                RaiseEvent ImpListeInvRowChanged(Me, New ImpListeInvRowChangeEvent(CType(e.Row,ImpListeInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImpListeInvRowChangingEvent) Is Nothing) Then
                RaiseEvent ImpListeInvRowChanging(Me, New ImpListeInvRowChangeEvent(CType(e.Row,ImpListeInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImpListeInvRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImpListeInvRowDeleted(Me, New ImpListeInvRowChangeEvent(CType(e.Row,ImpListeInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImpListeInvRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImpListeInvRowDeleting(Me, New ImpListeInvRowChangeEvent(CType(e.Row,ImpListeInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImpListeInvRow(ByVal row As ImpListeInvRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetImpression = New DataSetImpression
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImpListeInvDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SOLDESRow
        Inherits Global.System.Data.DataRow
        
        Private tableSOLDES As SOLDESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSOLDES = CType(Me.Table,SOLDESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableSOLDES.MCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MCpt' dans la table 'SOLDES' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSOLDES.MCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SOLDE_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSOLDES.SOLDE_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SOLDE_D' dans la table 'SOLDES' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSOLDES.SOLDE_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SOLDE_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSOLDES.SOLDE_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SOLDE_C' dans la table 'SOLDES' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSOLDES.SOLDE_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMCptNull() As Boolean
            Return Me.IsNull(Me.tableSOLDES.MCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMCptNull()
            Me(Me.tableSOLDES.MCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSOLDE_DNull() As Boolean
            Return Me.IsNull(Me.tableSOLDES.SOLDE_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSOLDE_DNull()
            Me(Me.tableSOLDES.SOLDE_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSOLDE_CNull() As Boolean
            Return Me.IsNull(Me.tableSOLDES.SOLDE_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSOLDE_CNull()
            Me(Me.tableSOLDES.SOLDE_CColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImpAnnexesTiersRow
        Inherits Global.System.Data.DataRow
        
        Private tableImpAnnexesTiers As ImpAnnexesTiersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImpAnnexesTiers = CType(Me.Table,ImpAnnexesTiersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.MDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MDossier' dans la table 'ImpAnnexesTiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.MDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MPiece() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.MPieceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MPiece' dans la table 'ImpAnnexesTiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.MPieceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.MDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MDate' dans la table 'ImpAnnexesTiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.MDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.MCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MCpt' dans la table 'ImpAnnexesTiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.MCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.CLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CLib' dans la table 'ImpAnnexesTiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.CLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.LLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LLib' dans la table 'ImpAnnexesTiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.LLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MMtDeb() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.MMtDebColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MMtDeb' dans la table 'ImpAnnexesTiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.MMtDebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MMtCre() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.MMtCreColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MMtCre' dans la table 'ImpAnnexesTiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.MMtCreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EType() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.ETypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'EType' dans la table 'ImpAnnexesTiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.ETypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPTE_DEB() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.COMPTE_DEBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COMPTE_DEB' dans la table 'ImpAnnexesTiers' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.COMPTE_DEBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPTE_FIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.COMPTE_FINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COMPTE_FIN' dans la table 'ImpAnnexesTiers' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.COMPTE_FINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SOLDE_CPT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.SOLDE_CPTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SOLDE_CPT' dans la table 'ImpAnnexesTiers' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.SOLDE_CPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_ACTIF_PASSIF() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.CODE_ACTIF_PASSIFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CODE_ACTIF_PASSIF' dans la table 'ImpAnnexesTiers' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.CODE_ACTIF_PASSIFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSITION() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.POSITIONColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'POSITION' dans la table 'ImpAnnexesTiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EST_DETAILLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableImpAnnexesTiers.EST_DETAILLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'EST_DETAILLE' dans la table 'ImpAnnexesTiers' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAnnexesTiers.EST_DETAILLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMDossierNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.MDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMDossierNull()
            Me(Me.tableImpAnnexesTiers.MDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMPieceNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.MPieceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMPieceNull()
            Me(Me.tableImpAnnexesTiers.MPieceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMDateNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.MDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMDateNull()
            Me(Me.tableImpAnnexesTiers.MDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMCptNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.MCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMCptNull()
            Me(Me.tableImpAnnexesTiers.MCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLibNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.CLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLibNull()
            Me(Me.tableImpAnnexesTiers.CLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLLibNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.LLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLLibNull()
            Me(Me.tableImpAnnexesTiers.LLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMMtDebNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.MMtDebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMMtDebNull()
            Me(Me.tableImpAnnexesTiers.MMtDebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMMtCreNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.MMtCreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMMtCreNull()
            Me(Me.tableImpAnnexesTiers.MMtCreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsETypeNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.ETypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetETypeNull()
            Me(Me.tableImpAnnexesTiers.ETypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMPTE_DEBNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.COMPTE_DEBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMPTE_DEBNull()
            Me(Me.tableImpAnnexesTiers.COMPTE_DEBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMPTE_FINNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.COMPTE_FINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMPTE_FINNull()
            Me(Me.tableImpAnnexesTiers.COMPTE_FINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSOLDE_CPTNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.SOLDE_CPTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSOLDE_CPTNull()
            Me(Me.tableImpAnnexesTiers.SOLDE_CPTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_ACTIF_PASSIFNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.CODE_ACTIF_PASSIFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_ACTIF_PASSIFNull()
            Me(Me.tableImpAnnexesTiers.CODE_ACTIF_PASSIFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOSITIONNull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.POSITIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOSITIONNull()
            Me(Me.tableImpAnnexesTiers.POSITIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEST_DETAILLENull() As Boolean
            Return Me.IsNull(Me.tableImpAnnexesTiers.EST_DETAILLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEST_DETAILLENull()
            Me(Me.tableImpAnnexesTiers.EST_DETAILLEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImpListeInvRow
        Inherits Global.System.Data.DataRow
        
        Private tableImpListeInv As ImpListeInvDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImpListeInv = CType(Me.Table,ImpListeInvDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVGDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVGDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVGDossier' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVGDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVGCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVGCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVGCode' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVGCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVGLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVGLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVGLib' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVGLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVGOrdre() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVGOrdreColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVGOrdre' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVGOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLLig() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLLigColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLLig' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLLigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLQte() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLQteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLQte' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLQteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLPrixUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLPrixUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLPrixUnit' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLPrixUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVGUnite() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVGUniteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVGUnite' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVGUniteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLLib' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVGTypeInventaire() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVGTypeInventaireColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVGTypeInventaire' dans la table 'ImpListeInv' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVGTypeInventaireColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVGDecote() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVGDecoteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVGDecote' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVGDecoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVGCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVGCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVGCpt' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVGCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVGActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVGActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVGActi' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVGActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLCoutOutil() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLCoutOutilColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLCoutOutil' dans la table 'ImpListeInv' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLCoutOutilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLCoutTracteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLCoutTracteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLCoutTracteur' dans la table 'ImpListeInv' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLCoutTracteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLTempsH() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLTempsHColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLTempsH' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLTempsHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLTempsMin() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLTempsMinColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLTempsMin' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLTempsMinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLNbHa() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLNbHaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLNbHa' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLNbHaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLValPdtenTerre() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLValPdtenTerreColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLValPdtenTerre' dans la table 'ImpListeInv' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLValPdtenTerreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLValFaconcult() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLValFaconcultColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLValFaconcult' dans la table 'ImpListeInv' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLValFaconcultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLMtDeb() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLMtDebColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLMtDeb' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLMtDebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLMtCre() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLMtCreColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLMtCre' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLMtCreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrdreTypeInventaire() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.OrdreTypeInventaireColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'OrdreTypeInventaire' dans la table 'ImpListeInv' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.OrdreTypeInventaireColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibelleTypeInventaire() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.LibelleTypeInventaireColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibelleTypeInventaire' dans la table 'ImpListeInv' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.LibelleTypeInventaireColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLOrdre() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLOrdreColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLOrdre' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLValForfaitaire() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLValForfaitaireColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLValForfaitaire' dans la table 'ImpListeInv' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLValForfaitaireColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVLNbPass() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImpListeInv.INVLNbPassColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INVLNbPass' dans la table 'ImpListeInv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpListeInv.INVLNbPassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVGDossierNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVGDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVGDossierNull()
            Me(Me.tableImpListeInv.INVGDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVGCodeNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVGCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVGCodeNull()
            Me(Me.tableImpListeInv.INVGCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVGLibNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVGLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVGLibNull()
            Me(Me.tableImpListeInv.INVGLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVGOrdreNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVGOrdreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVGOrdreNull()
            Me(Me.tableImpListeInv.INVGOrdreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLLigNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLLigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLLigNull()
            Me(Me.tableImpListeInv.INVLLigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLQteNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLQteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLQteNull()
            Me(Me.tableImpListeInv.INVLQteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLPrixUnitNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLPrixUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLPrixUnitNull()
            Me(Me.tableImpListeInv.INVLPrixUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVGUniteNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVGUniteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVGUniteNull()
            Me(Me.tableImpListeInv.INVGUniteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLLibNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLLibNull()
            Me(Me.tableImpListeInv.INVLLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVGTypeInventaireNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVGTypeInventaireColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVGTypeInventaireNull()
            Me(Me.tableImpListeInv.INVGTypeInventaireColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVGDecoteNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVGDecoteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVGDecoteNull()
            Me(Me.tableImpListeInv.INVGDecoteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVGCptNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVGCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVGCptNull()
            Me(Me.tableImpListeInv.INVGCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVGActiNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVGActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVGActiNull()
            Me(Me.tableImpListeInv.INVGActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLCoutOutilNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLCoutOutilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLCoutOutilNull()
            Me(Me.tableImpListeInv.INVLCoutOutilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLCoutTracteurNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLCoutTracteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLCoutTracteurNull()
            Me(Me.tableImpListeInv.INVLCoutTracteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLTempsHNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLTempsHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLTempsHNull()
            Me(Me.tableImpListeInv.INVLTempsHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLTempsMinNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLTempsMinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLTempsMinNull()
            Me(Me.tableImpListeInv.INVLTempsMinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLNbHaNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLNbHaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLNbHaNull()
            Me(Me.tableImpListeInv.INVLNbHaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLValPdtenTerreNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLValPdtenTerreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLValPdtenTerreNull()
            Me(Me.tableImpListeInv.INVLValPdtenTerreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLValFaconcultNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLValFaconcultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLValFaconcultNull()
            Me(Me.tableImpListeInv.INVLValFaconcultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLMtDebNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLMtDebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLMtDebNull()
            Me(Me.tableImpListeInv.INVLMtDebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLMtCreNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLMtCreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLMtCreNull()
            Me(Me.tableImpListeInv.INVLMtCreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdreTypeInventaireNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.OrdreTypeInventaireColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdreTypeInventaireNull()
            Me(Me.tableImpListeInv.OrdreTypeInventaireColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleTypeInventaireNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.LibelleTypeInventaireColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleTypeInventaireNull()
            Me(Me.tableImpListeInv.LibelleTypeInventaireColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLOrdreNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLOrdreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLOrdreNull()
            Me(Me.tableImpListeInv.INVLOrdreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLValForfaitaireNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLValForfaitaireColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLValForfaitaireNull()
            Me(Me.tableImpListeInv.INVLValForfaitaireColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVLNbPassNull() As Boolean
            Return Me.IsNull(Me.tableImpListeInv.INVLNbPassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVLNbPassNull()
            Me(Me.tableImpListeInv.INVLNbPassColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SOLDESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SOLDESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SOLDESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SOLDESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImpAnnexesTiersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImpAnnexesTiersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImpAnnexesTiersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImpAnnexesTiersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImpListeInvRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImpListeInvRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImpListeInvRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImpListeInvRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetImpressionTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SOLDESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SOLDES"
            tableMapping.ColumnMappings.Add("SOLDE_D", "SOLDE_D")
            tableMapping.ColumnMappings.Add("SOLDE_C", "SOLDE_C")
            tableMapping.ColumnMappings.Add("MCpt", "MCpt")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        SUM(MMtDeb) AS SOLDE_D, SUM(MMtCre) AS SOLDE_C, MCpt"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         "& _ 
                "   Mouvements"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY MCpt"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        SUM(MMtDeb) AS SOLDE_D, SUM(MMtCre) AS SOLDE_C, MCpt"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         "& _ 
                "   Mouvements"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (MDossier = ?)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY MCpt"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetImpression.SOLDESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetImpression.SOLDESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetImpression.SOLDESDataTable = New DataSetImpression.SOLDESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByMDossier(ByVal dataTable As DataSetImpression.SOLDESDataTable, ByVal MDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMDossier(ByVal MDossier As String) As DataSetImpression.SOLDESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MDossier,String)
            End If
            Dim dataTable As DataSetImpression.SOLDESDataTable = New DataSetImpression.SOLDESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ImpAnnexesTiersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ImpAnnexesTiers"
            tableMapping.ColumnMappings.Add("MDossier", "MDossier")
            tableMapping.ColumnMappings.Add("MPiece", "MPiece")
            tableMapping.ColumnMappings.Add("MDate", "MDate")
            tableMapping.ColumnMappings.Add("MCpt", "MCpt")
            tableMapping.ColumnMappings.Add("CLib", "CLib")
            tableMapping.ColumnMappings.Add("LLib", "LLib")
            tableMapping.ColumnMappings.Add("MMtDeb", "MMtDeb")
            tableMapping.ColumnMappings.Add("MMtCre", "MMtCre")
            tableMapping.ColumnMappings.Add("EType", "EType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Mouvements.MDossier, Mouvements.MPiece, Mouvements.MDate, Mouvement"& _ 
                "s.MCpt, Comptes.CLib, Lignes.LLib, Mouvements.MMtDeb, Mouvements.MMtCre, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Exploitations.EType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ((Comptes RIGHT OUTER J"& _ 
                "OIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         PlanComptable ON Comptes.CDossier = PlanComptable."& _ 
                "PlDossier AND Comptes.CCpt = PlanComptable.PlCpt) RIGHT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             (((Lignes INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Mouvements ON Lignes"& _ 
                ".LLig = Mouvements.MLig AND Lignes.LDate = Mouvements.MDate AND Lignes.LPiece = "& _ 
                "Mouvements.MPiece AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Lignes.LDossier = Mouvements.MD"& _ 
                "ossier) INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Dossiers ON Mouvements.MDossier = D"& _ 
                "ossiers.DDossier) INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Exploitations ON Dossiers"& _ 
                ".DExpl = Exploitations.EExpl) ON PlanComptable.PlDossier = Mouvements.MDossier A"& _ 
                "ND PlanComptable.PlCpt = Mouvements.MCpt AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         PlanComp"& _ 
                "table.PlActi = Mouvements.MActi)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Mouvements.MCpt <> '48800000') A"& _ 
                "ND (Mouvements.MLettrage IS NULL OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Mouvements.MLettra"& _ 
                "ge = '')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Mouvements.MCpt, Mouvements.MDate, Mouvements.MPiece"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Mouvements.MDossier, Mouvements.MPiece, Mouvements.MDate, Mouvement"& _ 
                "s.MCpt, Comptes.CLib, Lignes.LLib, Mouvements.MMtDeb, Mouvements.MMtCre, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Exploitations.EType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ((Comptes RIGHT OUTER J"& _ 
                "OIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         PlanComptable ON Comptes.CDossier = PlanComptable."& _ 
                "PlDossier AND Comptes.CCpt = PlanComptable.PlCpt) RIGHT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             (((Lignes INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Mouvements ON Lignes"& _ 
                ".LLig = Mouvements.MLig AND Lignes.LDate = Mouvements.MDate AND Lignes.LPiece = "& _ 
                "Mouvements.MPiece AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Lignes.LDossier = Mouvements.MD"& _ 
                "ossier) INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Dossiers ON Mouvements.MDossier = D"& _ 
                "ossiers.DDossier) INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Exploitations ON Dossiers"& _ 
                ".DExpl = Exploitations.EExpl) ON PlanComptable.PlDossier = Mouvements.MDossier A"& _ 
                "ND PlanComptable.PlCpt = Mouvements.MCpt AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         PlanComp"& _ 
                "table.PlActi = Mouvements.MActi)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Mouvements.MCpt <> '48800000') A"& _ 
                "ND (Mouvements.MLettrage IS NULL OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Mouvements.MLettra"& _ 
                "ge = '') AND (Mouvements.MDossier = ?) AND (Mouvements.MDate >= ?) AND (Mouvemen"& _ 
                "ts.MDate <= ?)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Mouvements.MCpt, Mouvements.MDate, Mouvements.MPiece"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MDate", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MDate1", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetImpression.ImpAnnexesTiersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetImpression.ImpAnnexesTiersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetImpression.ImpAnnexesTiersDataTable = New DataSetImpression.ImpAnnexesTiersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByMDossierEtMDate(ByVal dataTable As DataSetImpression.ImpAnnexesTiersDataTable, ByVal MDossier As String, ByVal MDate As Global.System.Nullable(Of Date), ByVal MDate1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MDossier,String)
            End If
            If (MDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MDate1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(MDate1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMDossierEtMDate(ByVal MDossier As String, ByVal MDate As Global.System.Nullable(Of Date), ByVal MDate1 As Global.System.Nullable(Of Date)) As DataSetImpression.ImpAnnexesTiersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MDossier,String)
            End If
            If (MDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MDate1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(MDate1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetImpression.ImpAnnexesTiersDataTable = New DataSetImpression.ImpAnnexesTiersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
