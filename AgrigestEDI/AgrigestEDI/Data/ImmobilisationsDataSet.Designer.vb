'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.5446
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ImmobilisationsDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ImmobilisationsDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablePlanComptable As PlanComptableDataTable
    
    Private tableActivites As ActivitesDataTable
    
    Private tableImmobilisations As ImmobilisationsDataTable
    
    Private tableDossiers As DossiersDataTable
    
    Private tableComptes As ComptesDataTable
    
    Private tableSommeDeImmobilisations As SommeDeImmobilisationsDataTable
    
    Private tableImmobilisationsImpression As ImmobilisationsImpressionDataTable
    
    Private relationActivitesPlanComptable As Global.System.Data.DataRelation
    
    Private relationPlanComptableImmobilisations As Global.System.Data.DataRelation
    
    Private relationComptesPlanComptable As Global.System.Data.DataRelation
    
    Private relationDossiersComptes As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PlanComptable")) Is Nothing) Then
                MyBase.Tables.Add(New PlanComptableDataTable(ds.Tables("PlanComptable")))
            End If
            If (Not (ds.Tables("Activites")) Is Nothing) Then
                MyBase.Tables.Add(New ActivitesDataTable(ds.Tables("Activites")))
            End If
            If (Not (ds.Tables("Immobilisations")) Is Nothing) Then
                MyBase.Tables.Add(New ImmobilisationsDataTable(ds.Tables("Immobilisations")))
            End If
            If (Not (ds.Tables("Dossiers")) Is Nothing) Then
                MyBase.Tables.Add(New DossiersDataTable(ds.Tables("Dossiers")))
            End If
            If (Not (ds.Tables("Comptes")) Is Nothing) Then
                MyBase.Tables.Add(New ComptesDataTable(ds.Tables("Comptes")))
            End If
            If (Not (ds.Tables("SommeDeImmobilisations")) Is Nothing) Then
                MyBase.Tables.Add(New SommeDeImmobilisationsDataTable(ds.Tables("SommeDeImmobilisations")))
            End If
            If (Not (ds.Tables("ImmobilisationsImpression")) Is Nothing) Then
                MyBase.Tables.Add(New ImmobilisationsImpressionDataTable(ds.Tables("ImmobilisationsImpression")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PlanComptable() As PlanComptableDataTable
        Get
            Return Me.tablePlanComptable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Activites() As ActivitesDataTable
        Get
            Return Me.tableActivites
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Immobilisations() As ImmobilisationsDataTable
        Get
            Return Me.tableImmobilisations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dossiers() As DossiersDataTable
        Get
            Return Me.tableDossiers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Comptes() As ComptesDataTable
        Get
            Return Me.tableComptes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SommeDeImmobilisations() As SommeDeImmobilisationsDataTable
        Get
            Return Me.tableSommeDeImmobilisations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImmobilisationsImpression() As ImmobilisationsImpressionDataTable
        Get
            Return Me.tableImmobilisationsImpression
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ImmobilisationsDataSet = CType(MyBase.Clone,ImmobilisationsDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PlanComptable")) Is Nothing) Then
                MyBase.Tables.Add(New PlanComptableDataTable(ds.Tables("PlanComptable")))
            End If
            If (Not (ds.Tables("Activites")) Is Nothing) Then
                MyBase.Tables.Add(New ActivitesDataTable(ds.Tables("Activites")))
            End If
            If (Not (ds.Tables("Immobilisations")) Is Nothing) Then
                MyBase.Tables.Add(New ImmobilisationsDataTable(ds.Tables("Immobilisations")))
            End If
            If (Not (ds.Tables("Dossiers")) Is Nothing) Then
                MyBase.Tables.Add(New DossiersDataTable(ds.Tables("Dossiers")))
            End If
            If (Not (ds.Tables("Comptes")) Is Nothing) Then
                MyBase.Tables.Add(New ComptesDataTable(ds.Tables("Comptes")))
            End If
            If (Not (ds.Tables("SommeDeImmobilisations")) Is Nothing) Then
                MyBase.Tables.Add(New SommeDeImmobilisationsDataTable(ds.Tables("SommeDeImmobilisations")))
            End If
            If (Not (ds.Tables("ImmobilisationsImpression")) Is Nothing) Then
                MyBase.Tables.Add(New ImmobilisationsImpressionDataTable(ds.Tables("ImmobilisationsImpression")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePlanComptable = CType(MyBase.Tables("PlanComptable"),PlanComptableDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanComptable) Is Nothing) Then
                Me.tablePlanComptable.InitVars
            End If
        End If
        Me.tableActivites = CType(MyBase.Tables("Activites"),ActivitesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableActivites) Is Nothing) Then
                Me.tableActivites.InitVars
            End If
        End If
        Me.tableImmobilisations = CType(MyBase.Tables("Immobilisations"),ImmobilisationsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImmobilisations) Is Nothing) Then
                Me.tableImmobilisations.InitVars
            End If
        End If
        Me.tableDossiers = CType(MyBase.Tables("Dossiers"),DossiersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDossiers) Is Nothing) Then
                Me.tableDossiers.InitVars
            End If
        End If
        Me.tableComptes = CType(MyBase.Tables("Comptes"),ComptesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableComptes) Is Nothing) Then
                Me.tableComptes.InitVars
            End If
        End If
        Me.tableSommeDeImmobilisations = CType(MyBase.Tables("SommeDeImmobilisations"),SommeDeImmobilisationsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSommeDeImmobilisations) Is Nothing) Then
                Me.tableSommeDeImmobilisations.InitVars
            End If
        End If
        Me.tableImmobilisationsImpression = CType(MyBase.Tables("ImmobilisationsImpression"),ImmobilisationsImpressionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImmobilisationsImpression) Is Nothing) Then
                Me.tableImmobilisationsImpression.InitVars
            End If
        End If
        Me.relationActivitesPlanComptable = Me.Relations("ActivitesPlanComptable")
        Me.relationPlanComptableImmobilisations = Me.Relations("PlanComptableImmobilisations")
        Me.relationComptesPlanComptable = Me.Relations("ComptesPlanComptable")
        Me.relationDossiersComptes = Me.Relations("DossiersComptes")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ImmobilisationsDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ImmobilisationsDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePlanComptable = New PlanComptableDataTable
        MyBase.Tables.Add(Me.tablePlanComptable)
        Me.tableActivites = New ActivitesDataTable
        MyBase.Tables.Add(Me.tableActivites)
        Me.tableImmobilisations = New ImmobilisationsDataTable
        MyBase.Tables.Add(Me.tableImmobilisations)
        Me.tableDossiers = New DossiersDataTable
        MyBase.Tables.Add(Me.tableDossiers)
        Me.tableComptes = New ComptesDataTable
        MyBase.Tables.Add(Me.tableComptes)
        Me.tableSommeDeImmobilisations = New SommeDeImmobilisationsDataTable
        MyBase.Tables.Add(Me.tableSommeDeImmobilisations)
        Me.tableImmobilisationsImpression = New ImmobilisationsImpressionDataTable
        MyBase.Tables.Add(Me.tableImmobilisationsImpression)
        Me.relationActivitesPlanComptable = New Global.System.Data.DataRelation("ActivitesPlanComptable", New Global.System.Data.DataColumn() {Me.tableActivites.ADossierColumn, Me.tableActivites.AActiColumn}, New Global.System.Data.DataColumn() {Me.tablePlanComptable.PlDossierColumn, Me.tablePlanComptable.PlActiColumn}, false)
        Me.Relations.Add(Me.relationActivitesPlanComptable)
        Me.relationPlanComptableImmobilisations = New Global.System.Data.DataRelation("PlanComptableImmobilisations", New Global.System.Data.DataColumn() {Me.tablePlanComptable.PlDossierColumn, Me.tablePlanComptable.PlCptColumn, Me.tablePlanComptable.PlActiColumn}, New Global.System.Data.DataColumn() {Me.tableImmobilisations.IDossierColumn, Me.tableImmobilisations.ICptColumn, Me.tableImmobilisations.IActiColumn}, false)
        Me.Relations.Add(Me.relationPlanComptableImmobilisations)
        Me.relationComptesPlanComptable = New Global.System.Data.DataRelation("ComptesPlanComptable", New Global.System.Data.DataColumn() {Me.tableComptes.CDossierColumn, Me.tableComptes.CCptColumn}, New Global.System.Data.DataColumn() {Me.tablePlanComptable.PlDossierColumn, Me.tablePlanComptable.PlCptColumn}, false)
        Me.Relations.Add(Me.relationComptesPlanComptable)
        Me.relationDossiersComptes = New Global.System.Data.DataRelation("DossiersComptes", New Global.System.Data.DataColumn() {Me.tableDossiers.DDossierColumn}, New Global.System.Data.DataColumn() {Me.tableComptes.CDossierColumn}, false)
        Me.Relations.Add(Me.relationDossiersComptes)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanComptable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeActivites() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImmobilisations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDossiers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeComptes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSommeDeImmobilisations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImmobilisationsImpression() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ImmobilisationsDataSet = New ImmobilisationsDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PlanComptableRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanComptableRowChangeEvent)
    
    Public Delegate Sub ActivitesRowChangeEventHandler(ByVal sender As Object, ByVal e As ActivitesRowChangeEvent)
    
    Public Delegate Sub ImmobilisationsRowChangeEventHandler(ByVal sender As Object, ByVal e As ImmobilisationsRowChangeEvent)
    
    Public Delegate Sub DossiersRowChangeEventHandler(ByVal sender As Object, ByVal e As DossiersRowChangeEvent)
    
    Public Delegate Sub ComptesRowChangeEventHandler(ByVal sender As Object, ByVal e As ComptesRowChangeEvent)
    
    Public Delegate Sub SommeDeImmobilisationsRowChangeEventHandler(ByVal sender As Object, ByVal e As SommeDeImmobilisationsRowChangeEvent)
    
    Public Delegate Sub ImmobilisationsImpressionRowChangeEventHandler(ByVal sender As Object, ByVal e As ImmobilisationsImpressionRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PlanComptableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPlDossier As Global.System.Data.DataColumn
        
        Private columnPlCpt As Global.System.Data.DataColumn
        
        Private columnPlActi As Global.System.Data.DataColumn
        
        Private columnPlLib As Global.System.Data.DataColumn
        
        Private columnPlRepG_C As Global.System.Data.DataColumn
        
        Private columnPlRepG_D As Global.System.Data.DataColumn
        
        Private columnPlRepG_U1 As Global.System.Data.DataColumn
        
        Private columnPlRepG_U2 As Global.System.Data.DataColumn
        
        Private columnPlRepA_C As Global.System.Data.DataColumn
        
        Private columnPlRepA_D As Global.System.Data.DataColumn
        
        Private columnPlRepA_U1 As Global.System.Data.DataColumn
        
        Private columnPlRepA_U2 As Global.System.Data.DataColumn
        
        Private columnPlSoldeG_C As Global.System.Data.DataColumn
        
        Private columnPlSoldeG_D As Global.System.Data.DataColumn
        
        Private columnPlSoldeG_U1 As Global.System.Data.DataColumn
        
        Private columnPlSoldeG_U2 As Global.System.Data.DataColumn
        
        Private columnPlSoldeA_C As Global.System.Data.DataColumn
        
        Private columnPlSoldeA_D As Global.System.Data.DataColumn
        
        Private columnPlSoldeA_U1 As Global.System.Data.DataColumn
        
        Private columnPlSoldeA_U2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PlanComptable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepG_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepG_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepG_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepG_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepG_U1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepG_U1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepG_U2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepG_U2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepA_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepA_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepA_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepA_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepA_U1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepA_U1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepA_U2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepA_U2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeG_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeG_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeG_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeG_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeG_U1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeG_U1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeG_U2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeG_U2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeA_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeA_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeA_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeA_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeA_U1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeA_U1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeA_U2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeA_U2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PlanComptableRow
            Get
                Return CType(Me.Rows(index),PlanComptableRow)
            End Get
        End Property
        
        Public Event PlanComptableRowChanging As PlanComptableRowChangeEventHandler
        
        Public Event PlanComptableRowChanged As PlanComptableRowChangeEventHandler
        
        Public Event PlanComptableRowDeleting As PlanComptableRowChangeEventHandler
        
        Public Event PlanComptableRowDeleted As PlanComptableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPlanComptableRow(ByVal row As PlanComptableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanComptableRow( _
                    ByVal PlDossier As String,  _
                    ByVal PlCpt As String,  _
                    ByVal PlActi As String,  _
                    ByVal PlLib As String,  _
                    ByVal PlRepG_C As Decimal,  _
                    ByVal PlRepG_D As Decimal,  _
                    ByVal PlRepG_U1 As Decimal,  _
                    ByVal PlRepG_U2 As Decimal,  _
                    ByVal PlRepA_C As Decimal,  _
                    ByVal PlRepA_D As Decimal,  _
                    ByVal PlRepA_U1 As Decimal,  _
                    ByVal PlRepA_U2 As Decimal,  _
                    ByVal PlSoldeG_C As Decimal,  _
                    ByVal PlSoldeG_D As Decimal,  _
                    ByVal PlSoldeG_U1 As Decimal,  _
                    ByVal PlSoldeG_U2 As Decimal,  _
                    ByVal PlSoldeA_C As Decimal,  _
                    ByVal PlSoldeA_D As Decimal,  _
                    ByVal PlSoldeA_U1 As Decimal,  _
                    ByVal PlSoldeA_U2 As Decimal) As PlanComptableRow
            Dim rowPlanComptableRow As PlanComptableRow = CType(Me.NewRow,PlanComptableRow)
            Dim columnValuesArray() As Object = New Object() {PlDossier, PlCpt, PlActi, PlLib, PlRepG_C, PlRepG_D, PlRepG_U1, PlRepG_U2, PlRepA_C, PlRepA_D, PlRepA_U1, PlRepA_U2, PlSoldeG_C, PlSoldeG_D, PlSoldeG_U1, PlSoldeG_U2, PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, PlSoldeA_U2}
            rowPlanComptableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanComptableRow)
            Return rowPlanComptableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPlDossierPlCptPlActi(ByVal PlDossier As String, ByVal PlCpt As String, ByVal PlActi As String) As PlanComptableRow
            Return CType(Me.Rows.Find(New Object() {PlDossier, PlCpt, PlActi}),PlanComptableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PlanComptableDataTable = CType(MyBase.Clone,PlanComptableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PlanComptableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPlDossier = MyBase.Columns("PlDossier")
            Me.columnPlCpt = MyBase.Columns("PlCpt")
            Me.columnPlActi = MyBase.Columns("PlActi")
            Me.columnPlLib = MyBase.Columns("PlLib")
            Me.columnPlRepG_C = MyBase.Columns("PlRepG_C")
            Me.columnPlRepG_D = MyBase.Columns("PlRepG_D")
            Me.columnPlRepG_U1 = MyBase.Columns("PlRepG_U1")
            Me.columnPlRepG_U2 = MyBase.Columns("PlRepG_U2")
            Me.columnPlRepA_C = MyBase.Columns("PlRepA_C")
            Me.columnPlRepA_D = MyBase.Columns("PlRepA_D")
            Me.columnPlRepA_U1 = MyBase.Columns("PlRepA_U1")
            Me.columnPlRepA_U2 = MyBase.Columns("PlRepA_U2")
            Me.columnPlSoldeG_C = MyBase.Columns("PlSoldeG_C")
            Me.columnPlSoldeG_D = MyBase.Columns("PlSoldeG_D")
            Me.columnPlSoldeG_U1 = MyBase.Columns("PlSoldeG_U1")
            Me.columnPlSoldeG_U2 = MyBase.Columns("PlSoldeG_U2")
            Me.columnPlSoldeA_C = MyBase.Columns("PlSoldeA_C")
            Me.columnPlSoldeA_D = MyBase.Columns("PlSoldeA_D")
            Me.columnPlSoldeA_U1 = MyBase.Columns("PlSoldeA_U1")
            Me.columnPlSoldeA_U2 = MyBase.Columns("PlSoldeA_U2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPlDossier = New Global.System.Data.DataColumn("PlDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlDossier)
            Me.columnPlCpt = New Global.System.Data.DataColumn("PlCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlCpt)
            Me.columnPlActi = New Global.System.Data.DataColumn("PlActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlActi)
            Me.columnPlLib = New Global.System.Data.DataColumn("PlLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlLib)
            Me.columnPlRepG_C = New Global.System.Data.DataColumn("PlRepG_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepG_C)
            Me.columnPlRepG_D = New Global.System.Data.DataColumn("PlRepG_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepG_D)
            Me.columnPlRepG_U1 = New Global.System.Data.DataColumn("PlRepG_U1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepG_U1)
            Me.columnPlRepG_U2 = New Global.System.Data.DataColumn("PlRepG_U2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepG_U2)
            Me.columnPlRepA_C = New Global.System.Data.DataColumn("PlRepA_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepA_C)
            Me.columnPlRepA_D = New Global.System.Data.DataColumn("PlRepA_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepA_D)
            Me.columnPlRepA_U1 = New Global.System.Data.DataColumn("PlRepA_U1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepA_U1)
            Me.columnPlRepA_U2 = New Global.System.Data.DataColumn("PlRepA_U2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepA_U2)
            Me.columnPlSoldeG_C = New Global.System.Data.DataColumn("PlSoldeG_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeG_C)
            Me.columnPlSoldeG_D = New Global.System.Data.DataColumn("PlSoldeG_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeG_D)
            Me.columnPlSoldeG_U1 = New Global.System.Data.DataColumn("PlSoldeG_U1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeG_U1)
            Me.columnPlSoldeG_U2 = New Global.System.Data.DataColumn("PlSoldeG_U2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeG_U2)
            Me.columnPlSoldeA_C = New Global.System.Data.DataColumn("PlSoldeA_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeA_C)
            Me.columnPlSoldeA_D = New Global.System.Data.DataColumn("PlSoldeA_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeA_D)
            Me.columnPlSoldeA_U1 = New Global.System.Data.DataColumn("PlSoldeA_U1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeA_U1)
            Me.columnPlSoldeA_U2 = New Global.System.Data.DataColumn("PlSoldeA_U2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeA_U2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPlDossier, Me.columnPlCpt, Me.columnPlActi}, true))
            Me.columnPlDossier.AllowDBNull = false
            Me.columnPlDossier.MaxLength = 8
            Me.columnPlCpt.AllowDBNull = false
            Me.columnPlCpt.MaxLength = 8
            Me.columnPlActi.AllowDBNull = false
            Me.columnPlActi.MaxLength = 4
            Me.columnPlLib.MaxLength = 55
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPlanComptableRow() As PlanComptableRow
            Return CType(Me.NewRow,PlanComptableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PlanComptableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PlanComptableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanComptableRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanComptableRowChanged(Me, New PlanComptableRowChangeEvent(CType(e.Row,PlanComptableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanComptableRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanComptableRowChanging(Me, New PlanComptableRowChangeEvent(CType(e.Row,PlanComptableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanComptableRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanComptableRowDeleted(Me, New PlanComptableRowChangeEvent(CType(e.Row,PlanComptableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanComptableRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanComptableRowDeleting(Me, New PlanComptableRowChangeEvent(CType(e.Row,PlanComptableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePlanComptableRow(ByVal row As PlanComptableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImmobilisationsDataSet = New ImmobilisationsDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PlanComptableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ActivitesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnADossier As Global.System.Data.DataColumn
        
        Private columnAActi As Global.System.Data.DataColumn
        
        Private columnALib As Global.System.Data.DataColumn
        
        Private columnAQte As Global.System.Data.DataColumn
        
        Private columnAUnit As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Activites"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AQteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAQte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ActivitesRow
            Get
                Return CType(Me.Rows(index),ActivitesRow)
            End Get
        End Property
        
        Public Event ActivitesRowChanging As ActivitesRowChangeEventHandler
        
        Public Event ActivitesRowChanged As ActivitesRowChangeEventHandler
        
        Public Event ActivitesRowDeleting As ActivitesRowChangeEventHandler
        
        Public Event ActivitesRowDeleted As ActivitesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddActivitesRow(ByVal row As ActivitesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddActivitesRow(ByVal ADossier As String, ByVal AActi As String, ByVal ALib As String, ByVal AQte As Single, ByVal AUnit As String) As ActivitesRow
            Dim rowActivitesRow As ActivitesRow = CType(Me.NewRow,ActivitesRow)
            Dim columnValuesArray() As Object = New Object() {ADossier, AActi, ALib, AQte, AUnit}
            rowActivitesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowActivitesRow)
            Return rowActivitesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByADossierAActi(ByVal ADossier As String, ByVal AActi As String) As ActivitesRow
            Return CType(Me.Rows.Find(New Object() {ADossier, AActi}),ActivitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ActivitesDataTable = CType(MyBase.Clone,ActivitesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ActivitesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnADossier = MyBase.Columns("ADossier")
            Me.columnAActi = MyBase.Columns("AActi")
            Me.columnALib = MyBase.Columns("ALib")
            Me.columnAQte = MyBase.Columns("AQte")
            Me.columnAUnit = MyBase.Columns("AUnit")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnADossier = New Global.System.Data.DataColumn("ADossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADossier)
            Me.columnAActi = New Global.System.Data.DataColumn("AActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAActi)
            Me.columnALib = New Global.System.Data.DataColumn("ALib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALib)
            Me.columnAQte = New Global.System.Data.DataColumn("AQte", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAQte)
            Me.columnAUnit = New Global.System.Data.DataColumn("AUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUnit)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnADossier, Me.columnAActi}, true))
            Me.columnADossier.AllowDBNull = false
            Me.columnADossier.MaxLength = 8
            Me.columnAActi.AllowDBNull = false
            Me.columnAActi.MaxLength = 4
            Me.columnALib.MaxLength = 20
            Me.columnAUnit.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewActivitesRow() As ActivitesRow
            Return CType(Me.NewRow,ActivitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ActivitesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ActivitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ActivitesRowChangedEvent) Is Nothing) Then
                RaiseEvent ActivitesRowChanged(Me, New ActivitesRowChangeEvent(CType(e.Row,ActivitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ActivitesRowChangingEvent) Is Nothing) Then
                RaiseEvent ActivitesRowChanging(Me, New ActivitesRowChangeEvent(CType(e.Row,ActivitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ActivitesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ActivitesRowDeleted(Me, New ActivitesRowChangeEvent(CType(e.Row,ActivitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ActivitesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ActivitesRowDeleting(Me, New ActivitesRowChangeEvent(CType(e.Row,ActivitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveActivitesRow(ByVal row As ActivitesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImmobilisationsDataSet = New ImmobilisationsDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ActivitesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImmobilisationsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIDossier As Global.System.Data.DataColumn
        
        Private columnICpt As Global.System.Data.DataColumn
        
        Private columnIActi As Global.System.Data.DataColumn
        
        Private columnIOrdre As Global.System.Data.DataColumn
        
        Private columnILib As Global.System.Data.DataColumn
        
        Private columnILib2 As Global.System.Data.DataColumn
        
        Private columnILib3 As Global.System.Data.DataColumn
        
        Private columnILib4 As Global.System.Data.DataColumn
        
        Private columnIDtAcquis As Global.System.Data.DataColumn
        
        Private columnIValAcquis As Global.System.Data.DataColumn
        
        Private columnITypAmt As Global.System.Data.DataColumn
        
        Private columnICoeff As Global.System.Data.DataColumn
        
        Private columnIDuree As Global.System.Data.DataColumn
        
        Private columnIDtCess As Global.System.Data.DataColumn
        
        Private columnIValCess As Global.System.Data.DataColumn
        
        Private columnIPlusValLg As Global.System.Data.DataColumn
        
        Private columnIPlusValCt As Global.System.Data.DataColumn
        
        Private columnIValForf As Global.System.Data.DataColumn
        
        Private columnIDtForf As Global.System.Data.DataColumn
        
        Private columnIAmtCumTot As Global.System.Data.DataColumn
        
        Private columnIAmtCumLin As Global.System.Data.DataColumn
        
        Private columnIAmtExTot As Global.System.Data.DataColumn
        
        Private columnIAmtExLin As Global.System.Data.DataColumn
        
        Private columnIAmtExMin As Global.System.Data.DataColumn
        
        Private columnIAmtExMax As Global.System.Data.DataColumn
        
        Private columnITva As Global.System.Data.DataColumn
        
        Private columnIValResid As Global.System.Data.DataColumn
        
        Private columnIDureeResid As Global.System.Data.DataColumn
        
        Private columnIValVenale As Global.System.Data.DataColumn
        
        Private columnIValLeasing As Global.System.Data.DataColumn
        
        Private columnIDerogatoire As Global.System.Data.DataColumn
        
        Private columnIPassCpta As Global.System.Data.DataColumn
        
        Private columnINCompo As Global.System.Data.DataColumn
        
        Private columnITauxL As Global.System.Data.DataColumn
        
        Private columnITauxD As Global.System.Data.DataColumn
        
        Private columnIDureeRest As Global.System.Data.DataColumn
        
        Private columnIAnnDDeb As Global.System.Data.DataColumn
        
        Private columnIValNetFisc As Global.System.Data.DataColumn
        
        Private columnIMode As Global.System.Data.DataColumn
        
        Private columnIOrdreImmoPrinc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Immobilisations"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILib2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILib3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILib4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITypAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITypAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICoeffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICoeff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDuree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtCessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtCess
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValCessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValCess
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPlusValLgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPlusValLg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPlusValCtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPlusValCt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtCumTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtCumTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtCumLinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtCumLin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExLinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExLin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExMinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExMin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDureeResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValVenaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValVenale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValLeasingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValLeasing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDerogatoireColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDerogatoire
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPassCptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPassCpta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INCompoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINCompo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITauxLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITauxL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITauxDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITauxD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeRestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDureeRest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAnnDDebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAnnDDeb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValNetFiscColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValNetFisc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IModeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOrdreImmoPrincColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOrdreImmoPrinc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImmobilisationsRow
            Get
                Return CType(Me.Rows(index),ImmobilisationsRow)
            End Get
        End Property
        
        Public Event ImmobilisationsRowChanging As ImmobilisationsRowChangeEventHandler
        
        Public Event ImmobilisationsRowChanged As ImmobilisationsRowChangeEventHandler
        
        Public Event ImmobilisationsRowDeleting As ImmobilisationsRowChangeEventHandler
        
        Public Event ImmobilisationsRowDeleted As ImmobilisationsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImmobilisationsRow(ByVal row As ImmobilisationsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImmobilisationsRow( _
                    ByVal IDossier As String,  _
                    ByVal ICpt As String,  _
                    ByVal IActi As String,  _
                    ByVal IOrdre As Short,  _
                    ByVal ILib As String,  _
                    ByVal ILib2 As String,  _
                    ByVal ILib3 As String,  _
                    ByVal ILib4 As String,  _
                    ByVal IDtAcquis As Date,  _
                    ByVal IValAcquis As Decimal,  _
                    ByVal ITypAmt As String,  _
                    ByVal ICoeff As Decimal,  _
                    ByVal IDuree As Short,  _
                    ByVal IDtCess As Date,  _
                    ByVal IValCess As Decimal,  _
                    ByVal IPlusValLg As Decimal,  _
                    ByVal IPlusValCt As Decimal,  _
                    ByVal IValForf As Decimal,  _
                    ByVal IDtForf As Date,  _
                    ByVal IAmtCumTot As Decimal,  _
                    ByVal IAmtCumLin As Decimal,  _
                    ByVal IAmtExTot As Decimal,  _
                    ByVal IAmtExLin As Decimal,  _
                    ByVal IAmtExMin As Decimal,  _
                    ByVal IAmtExMax As Decimal,  _
                    ByVal ITva As Decimal,  _
                    ByVal IValResid As Decimal,  _
                    ByVal IDureeResid As Short,  _
                    ByVal IValVenale As Decimal,  _
                    ByVal IValLeasing As Decimal,  _
                    ByVal IDerogatoire As String,  _
                    ByVal IPassCpta As String,  _
                    ByVal INCompo As Short,  _
                    ByVal ITauxL As Decimal,  _
                    ByVal ITauxD As Decimal,  _
                    ByVal IDureeRest As Short,  _
                    ByVal IAnnDDeb As Short,  _
                    ByVal IValNetFisc As Decimal,  _
                    ByVal IMode As Byte,  _
                    ByVal IOrdreImmoPrinc As Short) As ImmobilisationsRow
            Dim rowImmobilisationsRow As ImmobilisationsRow = CType(Me.NewRow,ImmobilisationsRow)
            Dim columnValuesArray() As Object = New Object() {IDossier, ICpt, IActi, IOrdre, ILib, ILib2, ILib3, ILib4, IDtAcquis, IValAcquis, ITypAmt, ICoeff, IDuree, IDtCess, IValCess, IPlusValLg, IPlusValCt, IValForf, IDtForf, IAmtCumTot, IAmtCumLin, IAmtExTot, IAmtExLin, IAmtExMin, IAmtExMax, ITva, IValResid, IDureeResid, IValVenale, IValLeasing, IDerogatoire, IPassCpta, INCompo, ITauxL, ITauxD, IDureeRest, IAnnDDeb, IValNetFisc, IMode, IOrdreImmoPrinc}
            rowImmobilisationsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImmobilisationsRow)
            Return rowImmobilisationsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDossierICptIActiIOrdre(ByVal IDossier As String, ByVal ICpt As String, ByVal IActi As String, ByVal IOrdre As Short) As ImmobilisationsRow
            Return CType(Me.Rows.Find(New Object() {IDossier, ICpt, IActi, IOrdre}),ImmobilisationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImmobilisationsDataTable = CType(MyBase.Clone,ImmobilisationsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImmobilisationsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDossier = MyBase.Columns("IDossier")
            Me.columnICpt = MyBase.Columns("ICpt")
            Me.columnIActi = MyBase.Columns("IActi")
            Me.columnIOrdre = MyBase.Columns("IOrdre")
            Me.columnILib = MyBase.Columns("ILib")
            Me.columnILib2 = MyBase.Columns("ILib2")
            Me.columnILib3 = MyBase.Columns("ILib3")
            Me.columnILib4 = MyBase.Columns("ILib4")
            Me.columnIDtAcquis = MyBase.Columns("IDtAcquis")
            Me.columnIValAcquis = MyBase.Columns("IValAcquis")
            Me.columnITypAmt = MyBase.Columns("ITypAmt")
            Me.columnICoeff = MyBase.Columns("ICoeff")
            Me.columnIDuree = MyBase.Columns("IDuree")
            Me.columnIDtCess = MyBase.Columns("IDtCess")
            Me.columnIValCess = MyBase.Columns("IValCess")
            Me.columnIPlusValLg = MyBase.Columns("IPlusValLg")
            Me.columnIPlusValCt = MyBase.Columns("IPlusValCt")
            Me.columnIValForf = MyBase.Columns("IValForf")
            Me.columnIDtForf = MyBase.Columns("IDtForf")
            Me.columnIAmtCumTot = MyBase.Columns("IAmtCumTot")
            Me.columnIAmtCumLin = MyBase.Columns("IAmtCumLin")
            Me.columnIAmtExTot = MyBase.Columns("IAmtExTot")
            Me.columnIAmtExLin = MyBase.Columns("IAmtExLin")
            Me.columnIAmtExMin = MyBase.Columns("IAmtExMin")
            Me.columnIAmtExMax = MyBase.Columns("IAmtExMax")
            Me.columnITva = MyBase.Columns("ITva")
            Me.columnIValResid = MyBase.Columns("IValResid")
            Me.columnIDureeResid = MyBase.Columns("IDureeResid")
            Me.columnIValVenale = MyBase.Columns("IValVenale")
            Me.columnIValLeasing = MyBase.Columns("IValLeasing")
            Me.columnIDerogatoire = MyBase.Columns("IDerogatoire")
            Me.columnIPassCpta = MyBase.Columns("IPassCpta")
            Me.columnINCompo = MyBase.Columns("INCompo")
            Me.columnITauxL = MyBase.Columns("ITauxL")
            Me.columnITauxD = MyBase.Columns("ITauxD")
            Me.columnIDureeRest = MyBase.Columns("IDureeRest")
            Me.columnIAnnDDeb = MyBase.Columns("IAnnDDeb")
            Me.columnIValNetFisc = MyBase.Columns("IValNetFisc")
            Me.columnIMode = MyBase.Columns("IMode")
            Me.columnIOrdreImmoPrinc = MyBase.Columns("IOrdreImmoPrinc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDossier = New Global.System.Data.DataColumn("IDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDossier)
            Me.columnICpt = New Global.System.Data.DataColumn("ICpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICpt)
            Me.columnIActi = New Global.System.Data.DataColumn("IActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIActi)
            Me.columnIOrdre = New Global.System.Data.DataColumn("IOrdre", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOrdre)
            Me.columnILib = New Global.System.Data.DataColumn("ILib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib)
            Me.columnILib2 = New Global.System.Data.DataColumn("ILib2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib2)
            Me.columnILib3 = New Global.System.Data.DataColumn("ILib3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib3)
            Me.columnILib4 = New Global.System.Data.DataColumn("ILib4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib4)
            Me.columnIDtAcquis = New Global.System.Data.DataColumn("IDtAcquis", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtAcquis)
            Me.columnIValAcquis = New Global.System.Data.DataColumn("IValAcquis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValAcquis)
            Me.columnITypAmt = New Global.System.Data.DataColumn("ITypAmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITypAmt)
            Me.columnICoeff = New Global.System.Data.DataColumn("ICoeff", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICoeff)
            Me.columnIDuree = New Global.System.Data.DataColumn("IDuree", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDuree)
            Me.columnIDtCess = New Global.System.Data.DataColumn("IDtCess", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtCess)
            Me.columnIValCess = New Global.System.Data.DataColumn("IValCess", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValCess)
            Me.columnIPlusValLg = New Global.System.Data.DataColumn("IPlusValLg", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPlusValLg)
            Me.columnIPlusValCt = New Global.System.Data.DataColumn("IPlusValCt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPlusValCt)
            Me.columnIValForf = New Global.System.Data.DataColumn("IValForf", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValForf)
            Me.columnIDtForf = New Global.System.Data.DataColumn("IDtForf", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtForf)
            Me.columnIAmtCumTot = New Global.System.Data.DataColumn("IAmtCumTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtCumTot)
            Me.columnIAmtCumLin = New Global.System.Data.DataColumn("IAmtCumLin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtCumLin)
            Me.columnIAmtExTot = New Global.System.Data.DataColumn("IAmtExTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExTot)
            Me.columnIAmtExLin = New Global.System.Data.DataColumn("IAmtExLin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExLin)
            Me.columnIAmtExMin = New Global.System.Data.DataColumn("IAmtExMin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExMin)
            Me.columnIAmtExMax = New Global.System.Data.DataColumn("IAmtExMax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExMax)
            Me.columnITva = New Global.System.Data.DataColumn("ITva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITva)
            Me.columnIValResid = New Global.System.Data.DataColumn("IValResid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValResid)
            Me.columnIDureeResid = New Global.System.Data.DataColumn("IDureeResid", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDureeResid)
            Me.columnIValVenale = New Global.System.Data.DataColumn("IValVenale", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValVenale)
            Me.columnIValLeasing = New Global.System.Data.DataColumn("IValLeasing", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValLeasing)
            Me.columnIDerogatoire = New Global.System.Data.DataColumn("IDerogatoire", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDerogatoire)
            Me.columnIPassCpta = New Global.System.Data.DataColumn("IPassCpta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPassCpta)
            Me.columnINCompo = New Global.System.Data.DataColumn("INCompo", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINCompo)
            Me.columnITauxL = New Global.System.Data.DataColumn("ITauxL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITauxL)
            Me.columnITauxD = New Global.System.Data.DataColumn("ITauxD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITauxD)
            Me.columnIDureeRest = New Global.System.Data.DataColumn("IDureeRest", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDureeRest)
            Me.columnIAnnDDeb = New Global.System.Data.DataColumn("IAnnDDeb", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAnnDDeb)
            Me.columnIValNetFisc = New Global.System.Data.DataColumn("IValNetFisc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValNetFisc)
            Me.columnIMode = New Global.System.Data.DataColumn("IMode", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMode)
            Me.columnIOrdreImmoPrinc = New Global.System.Data.DataColumn("IOrdreImmoPrinc", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOrdreImmoPrinc)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDossier, Me.columnICpt, Me.columnIActi, Me.columnIOrdre}, true))
            Me.columnIDossier.AllowDBNull = false
            Me.columnIDossier.MaxLength = 8
            Me.columnICpt.AllowDBNull = false
            Me.columnICpt.MaxLength = 8
            Me.columnIActi.AllowDBNull = false
            Me.columnIActi.MaxLength = 4
            Me.columnIOrdre.AllowDBNull = false
            Me.columnILib.MaxLength = 35
            Me.columnILib2.MaxLength = 15
            Me.columnILib3.MaxLength = 20
            Me.columnILib4.MaxLength = 20
            Me.columnITypAmt.MaxLength = 1
            Me.columnIDerogatoire.MaxLength = 1
            Me.columnIPassCpta.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImmobilisationsRow() As ImmobilisationsRow
            Return CType(Me.NewRow,ImmobilisationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImmobilisationsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImmobilisationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImmobilisationsRowChangedEvent) Is Nothing) Then
                RaiseEvent ImmobilisationsRowChanged(Me, New ImmobilisationsRowChangeEvent(CType(e.Row,ImmobilisationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImmobilisationsRowChangingEvent) Is Nothing) Then
                RaiseEvent ImmobilisationsRowChanging(Me, New ImmobilisationsRowChangeEvent(CType(e.Row,ImmobilisationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImmobilisationsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImmobilisationsRowDeleted(Me, New ImmobilisationsRowChangeEvent(CType(e.Row,ImmobilisationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImmobilisationsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImmobilisationsRowDeleting(Me, New ImmobilisationsRowChangeEvent(CType(e.Row,ImmobilisationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImmobilisationsRow(ByVal row As ImmobilisationsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImmobilisationsDataSet = New ImmobilisationsDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImmobilisationsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DossiersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDDossier As Global.System.Data.DataColumn
        
        Private columnDExpl As Global.System.Data.DataColumn
        
        Private columnDDtDebEx As Global.System.Data.DataColumn
        
        Private columnDDtFinEx As Global.System.Data.DataColumn
        
        Private columnDDtArrete As Global.System.Data.DataColumn
        
        Private columnDBqCpt As Global.System.Data.DataColumn
        
        Private columnDBqVal As Global.System.Data.DataColumn
        
        Private columnDBqFolio1 As Global.System.Data.DataColumn
        
        Private columnDCptOuvert As Global.System.Data.DataColumn
        
        Private columnDComptesReportsDetaillesCloture As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dossiers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DExplColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDExpl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDtDebExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDtDebEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDtFinExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDtFinEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDtArreteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDtArrete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBqCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBqCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBqValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBqVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBqFolio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBqFolio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DCptOuvertColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDCptOuvert
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DComptesReportsDetaillesClotureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDComptesReportsDetaillesCloture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DossiersRow
            Get
                Return CType(Me.Rows(index),DossiersRow)
            End Get
        End Property
        
        Public Event DossiersRowChanging As DossiersRowChangeEventHandler
        
        Public Event DossiersRowChanged As DossiersRowChangeEventHandler
        
        Public Event DossiersRowDeleting As DossiersRowChangeEventHandler
        
        Public Event DossiersRowDeleted As DossiersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDossiersRow(ByVal row As DossiersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDossiersRow(ByVal DDossier As String, ByVal DExpl As String, ByVal DDtDebEx As Date, ByVal DDtFinEx As Date, ByVal DDtArrete As Date, ByVal DBqCpt As String, ByVal DBqVal As Decimal, ByVal DBqFolio1 As Short, ByVal DCptOuvert As Integer, ByVal DComptesReportsDetaillesCloture As String) As DossiersRow
            Dim rowDossiersRow As DossiersRow = CType(Me.NewRow,DossiersRow)
            Dim columnValuesArray() As Object = New Object() {DDossier, DExpl, DDtDebEx, DDtFinEx, DDtArrete, DBqCpt, DBqVal, DBqFolio1, DCptOuvert, DComptesReportsDetaillesCloture}
            rowDossiersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDossiersRow)
            Return rowDossiersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDDossier(ByVal DDossier As String) As DossiersRow
            Return CType(Me.Rows.Find(New Object() {DDossier}),DossiersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DossiersDataTable = CType(MyBase.Clone,DossiersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DossiersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDDossier = MyBase.Columns("DDossier")
            Me.columnDExpl = MyBase.Columns("DExpl")
            Me.columnDDtDebEx = MyBase.Columns("DDtDebEx")
            Me.columnDDtFinEx = MyBase.Columns("DDtFinEx")
            Me.columnDDtArrete = MyBase.Columns("DDtArrete")
            Me.columnDBqCpt = MyBase.Columns("DBqCpt")
            Me.columnDBqVal = MyBase.Columns("DBqVal")
            Me.columnDBqFolio1 = MyBase.Columns("DBqFolio1")
            Me.columnDCptOuvert = MyBase.Columns("DCptOuvert")
            Me.columnDComptesReportsDetaillesCloture = MyBase.Columns("DComptesReportsDetaillesCloture")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDDossier = New Global.System.Data.DataColumn("DDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDossier)
            Me.columnDExpl = New Global.System.Data.DataColumn("DExpl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDExpl)
            Me.columnDDtDebEx = New Global.System.Data.DataColumn("DDtDebEx", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDtDebEx)
            Me.columnDDtFinEx = New Global.System.Data.DataColumn("DDtFinEx", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDtFinEx)
            Me.columnDDtArrete = New Global.System.Data.DataColumn("DDtArrete", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDtArrete)
            Me.columnDBqCpt = New Global.System.Data.DataColumn("DBqCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBqCpt)
            Me.columnDBqVal = New Global.System.Data.DataColumn("DBqVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBqVal)
            Me.columnDBqFolio1 = New Global.System.Data.DataColumn("DBqFolio1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBqFolio1)
            Me.columnDCptOuvert = New Global.System.Data.DataColumn("DCptOuvert", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDCptOuvert)
            Me.columnDComptesReportsDetaillesCloture = New Global.System.Data.DataColumn("DComptesReportsDetaillesCloture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDComptesReportsDetaillesCloture)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDDossier}, true))
            Me.columnDDossier.AllowDBNull = false
            Me.columnDDossier.Unique = true
            Me.columnDDossier.MaxLength = 8
            Me.columnDExpl.MaxLength = 6
            Me.columnDBqCpt.MaxLength = 8
            Me.columnDComptesReportsDetaillesCloture.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDossiersRow() As DossiersRow
            Return CType(Me.NewRow,DossiersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DossiersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DossiersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DossiersRowChangedEvent) Is Nothing) Then
                RaiseEvent DossiersRowChanged(Me, New DossiersRowChangeEvent(CType(e.Row,DossiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DossiersRowChangingEvent) Is Nothing) Then
                RaiseEvent DossiersRowChanging(Me, New DossiersRowChangeEvent(CType(e.Row,DossiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DossiersRowDeletedEvent) Is Nothing) Then
                RaiseEvent DossiersRowDeleted(Me, New DossiersRowChangeEvent(CType(e.Row,DossiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DossiersRowDeletingEvent) Is Nothing) Then
                RaiseEvent DossiersRowDeleting(Me, New DossiersRowChangeEvent(CType(e.Row,DossiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDossiersRow(ByVal row As DossiersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImmobilisationsDataSet = New ImmobilisationsDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DossiersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComptesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCDossier As Global.System.Data.DataColumn
        
        Private columnCCpt As Global.System.Data.DataColumn
        
        Private columnCLib As Global.System.Data.DataColumn
        
        Private columnCU1 As Global.System.Data.DataColumn
        
        Private columnCU2 As Global.System.Data.DataColumn
        
        Private columnCCptContre As Global.System.Data.DataColumn
        
        Private columnC_DC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Comptes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCptContreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCptContre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property C_DCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnC_DC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComptesRow
            Get
                Return CType(Me.Rows(index),ComptesRow)
            End Get
        End Property
        
        Public Event ComptesRowChanging As ComptesRowChangeEventHandler
        
        Public Event ComptesRowChanged As ComptesRowChangeEventHandler
        
        Public Event ComptesRowDeleting As ComptesRowChangeEventHandler
        
        Public Event ComptesRowDeleted As ComptesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComptesRow(ByVal row As ComptesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComptesRow(ByVal parentDossiersRowByDossiersComptes As DossiersRow, ByVal CCpt As String, ByVal CLib As String, ByVal CU1 As String, ByVal CU2 As String, ByVal CCptContre As String, ByVal C_DC As String) As ComptesRow
            Dim rowComptesRow As ComptesRow = CType(Me.NewRow,ComptesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CCpt, CLib, CU1, CU2, CCptContre, C_DC}
            If (Not (parentDossiersRowByDossiersComptes) Is Nothing) Then
                columnValuesArray(0) = parentDossiersRowByDossiersComptes(0)
            End If
            rowComptesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowComptesRow)
            Return rowComptesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDossierCCpt(ByVal CDossier As String, ByVal CCpt As String) As ComptesRow
            Return CType(Me.Rows.Find(New Object() {CDossier, CCpt}),ComptesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ComptesDataTable = CType(MyBase.Clone,ComptesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ComptesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDossier = MyBase.Columns("CDossier")
            Me.columnCCpt = MyBase.Columns("CCpt")
            Me.columnCLib = MyBase.Columns("CLib")
            Me.columnCU1 = MyBase.Columns("CU1")
            Me.columnCU2 = MyBase.Columns("CU2")
            Me.columnCCptContre = MyBase.Columns("CCptContre")
            Me.columnC_DC = MyBase.Columns("C_DC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDossier = New Global.System.Data.DataColumn("CDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDossier)
            Me.columnCCpt = New Global.System.Data.DataColumn("CCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCpt)
            Me.columnCLib = New Global.System.Data.DataColumn("CLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLib)
            Me.columnCU1 = New Global.System.Data.DataColumn("CU1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCU1)
            Me.columnCU2 = New Global.System.Data.DataColumn("CU2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCU2)
            Me.columnCCptContre = New Global.System.Data.DataColumn("CCptContre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCptContre)
            Me.columnC_DC = New Global.System.Data.DataColumn("C_DC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnC_DC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCDossier, Me.columnCCpt}, true))
            Me.columnCDossier.AllowDBNull = false
            Me.columnCDossier.MaxLength = 8
            Me.columnCCpt.AllowDBNull = false
            Me.columnCCpt.MaxLength = 8
            Me.columnCLib.MaxLength = 30
            Me.columnCU1.MaxLength = 2
            Me.columnCU2.MaxLength = 2
            Me.columnCCptContre.MaxLength = 8
            Me.columnC_DC.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComptesRow() As ComptesRow
            Return CType(Me.NewRow,ComptesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ComptesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ComptesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComptesRowChangedEvent) Is Nothing) Then
                RaiseEvent ComptesRowChanged(Me, New ComptesRowChangeEvent(CType(e.Row,ComptesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComptesRowChangingEvent) Is Nothing) Then
                RaiseEvent ComptesRowChanging(Me, New ComptesRowChangeEvent(CType(e.Row,ComptesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComptesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ComptesRowDeleted(Me, New ComptesRowChangeEvent(CType(e.Row,ComptesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComptesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ComptesRowDeleting(Me, New ComptesRowChangeEvent(CType(e.Row,ComptesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComptesRow(ByVal row As ComptesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImmobilisationsDataSet = New ImmobilisationsDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComptesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SommeDeImmobilisationsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnICpt As Global.System.Data.DataColumn
        
        Private columnSommeDeIValAcquis As Global.System.Data.DataColumn
        
        Private columnSommeDeIAmtExTot As Global.System.Data.DataColumn
        
        Private columnSommeDeIAmtCumTot As Global.System.Data.DataColumn
        
        Private columnSommeDeIValResid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SommeDeImmobilisations"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SommeDeIValAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSommeDeIValAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SommeDeIAmtExTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSommeDeIAmtExTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SommeDeIAmtCumTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSommeDeIAmtCumTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SommeDeIValResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSommeDeIValResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SommeDeImmobilisationsRow
            Get
                Return CType(Me.Rows(index),SommeDeImmobilisationsRow)
            End Get
        End Property
        
        Public Event SommeDeImmobilisationsRowChanging As SommeDeImmobilisationsRowChangeEventHandler
        
        Public Event SommeDeImmobilisationsRowChanged As SommeDeImmobilisationsRowChangeEventHandler
        
        Public Event SommeDeImmobilisationsRowDeleting As SommeDeImmobilisationsRowChangeEventHandler
        
        Public Event SommeDeImmobilisationsRowDeleted As SommeDeImmobilisationsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSommeDeImmobilisationsRow(ByVal row As SommeDeImmobilisationsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSommeDeImmobilisationsRow(ByVal ICpt As String, ByVal SommeDeIValAcquis As Decimal, ByVal SommeDeIAmtExTot As Decimal, ByVal SommeDeIAmtCumTot As Decimal, ByVal SommeDeIValResid As Decimal) As SommeDeImmobilisationsRow
            Dim rowSommeDeImmobilisationsRow As SommeDeImmobilisationsRow = CType(Me.NewRow,SommeDeImmobilisationsRow)
            Dim columnValuesArray() As Object = New Object() {ICpt, SommeDeIValAcquis, SommeDeIAmtExTot, SommeDeIAmtCumTot, SommeDeIValResid}
            rowSommeDeImmobilisationsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSommeDeImmobilisationsRow)
            Return rowSommeDeImmobilisationsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SommeDeImmobilisationsDataTable = CType(MyBase.Clone,SommeDeImmobilisationsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SommeDeImmobilisationsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICpt = MyBase.Columns("ICpt")
            Me.columnSommeDeIValAcquis = MyBase.Columns("SommeDeIValAcquis")
            Me.columnSommeDeIAmtExTot = MyBase.Columns("SommeDeIAmtExTot")
            Me.columnSommeDeIAmtCumTot = MyBase.Columns("SommeDeIAmtCumTot")
            Me.columnSommeDeIValResid = MyBase.Columns("SommeDeIValResid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICpt = New Global.System.Data.DataColumn("ICpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICpt)
            Me.columnSommeDeIValAcquis = New Global.System.Data.DataColumn("SommeDeIValAcquis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSommeDeIValAcquis)
            Me.columnSommeDeIAmtExTot = New Global.System.Data.DataColumn("SommeDeIAmtExTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSommeDeIAmtExTot)
            Me.columnSommeDeIAmtCumTot = New Global.System.Data.DataColumn("SommeDeIAmtCumTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSommeDeIAmtCumTot)
            Me.columnSommeDeIValResid = New Global.System.Data.DataColumn("SommeDeIValResid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSommeDeIValResid)
            Me.columnICpt.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSommeDeImmobilisationsRow() As SommeDeImmobilisationsRow
            Return CType(Me.NewRow,SommeDeImmobilisationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SommeDeImmobilisationsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SommeDeImmobilisationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SommeDeImmobilisationsRowChangedEvent) Is Nothing) Then
                RaiseEvent SommeDeImmobilisationsRowChanged(Me, New SommeDeImmobilisationsRowChangeEvent(CType(e.Row,SommeDeImmobilisationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SommeDeImmobilisationsRowChangingEvent) Is Nothing) Then
                RaiseEvent SommeDeImmobilisationsRowChanging(Me, New SommeDeImmobilisationsRowChangeEvent(CType(e.Row,SommeDeImmobilisationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SommeDeImmobilisationsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SommeDeImmobilisationsRowDeleted(Me, New SommeDeImmobilisationsRowChangeEvent(CType(e.Row,SommeDeImmobilisationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SommeDeImmobilisationsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SommeDeImmobilisationsRowDeleting(Me, New SommeDeImmobilisationsRowChangeEvent(CType(e.Row,SommeDeImmobilisationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSommeDeImmobilisationsRow(ByVal row As SommeDeImmobilisationsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImmobilisationsDataSet = New ImmobilisationsDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SommeDeImmobilisationsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImmobilisationsImpressionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnExploit As Global.System.Data.DataColumn
        
        Private columnDDossier As Global.System.Data.DataColumn
        
        Private columnDateExDeb As Global.System.Data.DataColumn
        
        Private columnDateFinEx As Global.System.Data.DataColumn
        
        Private columnCpt As Global.System.Data.DataColumn
        
        Private columnAct As Global.System.Data.DataColumn
        
        Private columnOrdre As Global.System.Data.DataColumn
        
        Private columnLib As Global.System.Data.DataColumn
        
        Private columnDtAcquis As Global.System.Data.DataColumn
        
        Private columnValAcquis As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnTauxL As Global.System.Data.DataColumn
        
        Private columnTauxD As Global.System.Data.DataColumn
        
        Private columnCoeff As Global.System.Data.DataColumn
        
        Private columnDuree As Global.System.Data.DataColumn
        
        Private columnValDebEx As Global.System.Data.DataColumn
        
        Private columnAmortEx As Global.System.Data.DataColumn
        
        Private columnDtCession As Global.System.Data.DataColumn
        
        Private columnValCession As Global.System.Data.DataColumn
        
        Private columnPlusValLg As Global.System.Data.DataColumn
        
        Private columnPlusValCt As Global.System.Data.DataColumn
        
        Private columnValForf As Global.System.Data.DataColumn
        
        Private columnDtForf As Global.System.Data.DataColumn
        
        Private columnAmtCumTot As Global.System.Data.DataColumn
        
        Private columnDureeResid As Global.System.Data.DataColumn
        
        Private columnValVenale As Global.System.Data.DataColumn
        
        Private columnValNetFisc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImmobilisationsImpression"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExploitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExploit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExDebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExDeb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFinExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFinEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DtAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDtAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TauxLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTauxL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TauxDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTauxD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoeffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoeff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DureeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDuree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValDebExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValDebEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmortExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmortEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DtCessionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDtCession
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValCessionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValCession
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlusValLgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlusValLg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlusValCtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlusValCt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DtForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDtForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmtCumTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmtCumTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DureeResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDureeResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValVenaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValVenale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValNetFiscColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValNetFisc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImmobilisationsImpressionRow
            Get
                Return CType(Me.Rows(index),ImmobilisationsImpressionRow)
            End Get
        End Property
        
        Public Event ImmobilisationsImpressionRowChanging As ImmobilisationsImpressionRowChangeEventHandler
        
        Public Event ImmobilisationsImpressionRowChanged As ImmobilisationsImpressionRowChangeEventHandler
        
        Public Event ImmobilisationsImpressionRowDeleting As ImmobilisationsImpressionRowChangeEventHandler
        
        Public Event ImmobilisationsImpressionRowDeleted As ImmobilisationsImpressionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImmobilisationsImpressionRow(ByVal row As ImmobilisationsImpressionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImmobilisationsImpressionRow( _
                    ByVal Exploit As String,  _
                    ByVal DDossier As String,  _
                    ByVal DateExDeb As Date,  _
                    ByVal DateFinEx As Date,  _
                    ByVal Cpt As String,  _
                    ByVal Act As String,  _
                    ByVal Ordre As Short,  _
                    ByVal _Lib As String,  _
                    ByVal DtAcquis As Date,  _
                    ByVal ValAcquis As Decimal,  _
                    ByVal Type As String,  _
                    ByVal TauxL As Decimal,  _
                    ByVal TauxD As Decimal,  _
                    ByVal Coeff As Decimal,  _
                    ByVal Duree As Short,  _
                    ByVal ValDebEx As Decimal,  _
                    ByVal AmortEx As Decimal,  _
                    ByVal DtCession As Date,  _
                    ByVal ValCession As Decimal,  _
                    ByVal PlusValLg As Decimal,  _
                    ByVal PlusValCt As Decimal,  _
                    ByVal ValForf As Decimal,  _
                    ByVal DtForf As Date,  _
                    ByVal AmtCumTot As Decimal,  _
                    ByVal DureeResid As Short,  _
                    ByVal ValVenale As Decimal,  _
                    ByVal ValNetFisc As Decimal) As ImmobilisationsImpressionRow
            Dim rowImmobilisationsImpressionRow As ImmobilisationsImpressionRow = CType(Me.NewRow,ImmobilisationsImpressionRow)
            Dim columnValuesArray() As Object = New Object() {Exploit, DDossier, DateExDeb, DateFinEx, Cpt, Act, Ordre, _Lib, DtAcquis, ValAcquis, Type, TauxL, TauxD, Coeff, Duree, ValDebEx, AmortEx, DtCession, ValCession, PlusValLg, PlusValCt, ValForf, DtForf, AmtCumTot, DureeResid, ValVenale, ValNetFisc}
            rowImmobilisationsImpressionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImmobilisationsImpressionRow)
            Return rowImmobilisationsImpressionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImmobilisationsImpressionDataTable = CType(MyBase.Clone,ImmobilisationsImpressionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImmobilisationsImpressionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnExploit = MyBase.Columns("Exploit")
            Me.columnDDossier = MyBase.Columns("DDossier")
            Me.columnDateExDeb = MyBase.Columns("DateExDeb")
            Me.columnDateFinEx = MyBase.Columns("DateFinEx")
            Me.columnCpt = MyBase.Columns("Cpt")
            Me.columnAct = MyBase.Columns("Act")
            Me.columnOrdre = MyBase.Columns("Ordre")
            Me.columnLib = MyBase.Columns("Lib")
            Me.columnDtAcquis = MyBase.Columns("DtAcquis")
            Me.columnValAcquis = MyBase.Columns("ValAcquis")
            Me.columnType = MyBase.Columns("Type")
            Me.columnTauxL = MyBase.Columns("TauxL")
            Me.columnTauxD = MyBase.Columns("TauxD")
            Me.columnCoeff = MyBase.Columns("Coeff")
            Me.columnDuree = MyBase.Columns("Duree")
            Me.columnValDebEx = MyBase.Columns("ValDebEx")
            Me.columnAmortEx = MyBase.Columns("AmortEx")
            Me.columnDtCession = MyBase.Columns("DtCession")
            Me.columnValCession = MyBase.Columns("ValCession")
            Me.columnPlusValLg = MyBase.Columns("PlusValLg")
            Me.columnPlusValCt = MyBase.Columns("PlusValCt")
            Me.columnValForf = MyBase.Columns("ValForf")
            Me.columnDtForf = MyBase.Columns("DtForf")
            Me.columnAmtCumTot = MyBase.Columns("AmtCumTot")
            Me.columnDureeResid = MyBase.Columns("DureeResid")
            Me.columnValVenale = MyBase.Columns("ValVenale")
            Me.columnValNetFisc = MyBase.Columns("ValNetFisc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnExploit = New Global.System.Data.DataColumn("Exploit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExploit)
            Me.columnDDossier = New Global.System.Data.DataColumn("DDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDossier)
            Me.columnDateExDeb = New Global.System.Data.DataColumn("DateExDeb", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExDeb)
            Me.columnDateFinEx = New Global.System.Data.DataColumn("DateFinEx", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFinEx)
            Me.columnCpt = New Global.System.Data.DataColumn("Cpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCpt)
            Me.columnAct = New Global.System.Data.DataColumn("Act", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAct)
            Me.columnOrdre = New Global.System.Data.DataColumn("Ordre", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdre)
            Me.columnLib = New Global.System.Data.DataColumn("Lib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnLib.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "LibColumn")
            Me.columnLib.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLib")
            Me.columnLib.ExtendedProperties.Add("Generator_UserColumnName", "Lib")
            MyBase.Columns.Add(Me.columnLib)
            Me.columnDtAcquis = New Global.System.Data.DataColumn("DtAcquis", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDtAcquis)
            Me.columnValAcquis = New Global.System.Data.DataColumn("ValAcquis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValAcquis)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnTauxL = New Global.System.Data.DataColumn("TauxL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTauxL)
            Me.columnTauxD = New Global.System.Data.DataColumn("TauxD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTauxD)
            Me.columnCoeff = New Global.System.Data.DataColumn("Coeff", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoeff)
            Me.columnDuree = New Global.System.Data.DataColumn("Duree", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDuree)
            Me.columnValDebEx = New Global.System.Data.DataColumn("ValDebEx", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValDebEx)
            Me.columnAmortEx = New Global.System.Data.DataColumn("AmortEx", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmortEx)
            Me.columnDtCession = New Global.System.Data.DataColumn("DtCession", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDtCession)
            Me.columnValCession = New Global.System.Data.DataColumn("ValCession", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValCession)
            Me.columnPlusValLg = New Global.System.Data.DataColumn("PlusValLg", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlusValLg)
            Me.columnPlusValCt = New Global.System.Data.DataColumn("PlusValCt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlusValCt)
            Me.columnValForf = New Global.System.Data.DataColumn("ValForf", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValForf)
            Me.columnDtForf = New Global.System.Data.DataColumn("DtForf", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDtForf)
            Me.columnAmtCumTot = New Global.System.Data.DataColumn("AmtCumTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmtCumTot)
            Me.columnDureeResid = New Global.System.Data.DataColumn("DureeResid", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDureeResid)
            Me.columnValVenale = New Global.System.Data.DataColumn("ValVenale", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValVenale)
            Me.columnValNetFisc = New Global.System.Data.DataColumn("ValNetFisc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValNetFisc)
            Me.columnExploit.MaxLength = 6
            Me.columnDDossier.MaxLength = 8
            Me.columnCpt.MaxLength = 8
            Me.columnAct.MaxLength = 4
            Me.columnLib.MaxLength = 35
            Me.columnType.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImmobilisationsImpressionRow() As ImmobilisationsImpressionRow
            Return CType(Me.NewRow,ImmobilisationsImpressionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImmobilisationsImpressionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImmobilisationsImpressionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImmobilisationsImpressionRowChangedEvent) Is Nothing) Then
                RaiseEvent ImmobilisationsImpressionRowChanged(Me, New ImmobilisationsImpressionRowChangeEvent(CType(e.Row,ImmobilisationsImpressionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImmobilisationsImpressionRowChangingEvent) Is Nothing) Then
                RaiseEvent ImmobilisationsImpressionRowChanging(Me, New ImmobilisationsImpressionRowChangeEvent(CType(e.Row,ImmobilisationsImpressionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImmobilisationsImpressionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImmobilisationsImpressionRowDeleted(Me, New ImmobilisationsImpressionRowChangeEvent(CType(e.Row,ImmobilisationsImpressionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImmobilisationsImpressionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImmobilisationsImpressionRowDeleting(Me, New ImmobilisationsImpressionRowChangeEvent(CType(e.Row,ImmobilisationsImpressionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImmobilisationsImpressionRow(ByVal row As ImmobilisationsImpressionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImmobilisationsDataSet = New ImmobilisationsDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImmobilisationsImpressionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PlanComptableRow
        Inherits Global.System.Data.DataRow
        
        Private tablePlanComptable As PlanComptableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanComptable = CType(Me.Table,PlanComptableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlDossier() As String
            Get
                Return CType(Me(Me.tablePlanComptable.PlDossierColumn),String)
            End Get
            Set
                Me(Me.tablePlanComptable.PlDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlCpt() As String
            Get
                Return CType(Me(Me.tablePlanComptable.PlCptColumn),String)
            End Get
            Set
                Me(Me.tablePlanComptable.PlCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlActi() As String
            Get
                Return CType(Me(Me.tablePlanComptable.PlActiColumn),String)
            End Get
            Set
                Me(Me.tablePlanComptable.PlActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlLib() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlLib' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepG_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepG_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepG_C' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepG_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepG_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepG_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepG_D' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepG_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepG_U1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepG_U1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepG_U1' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepG_U1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepG_U2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepG_U2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepG_U2' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepG_U2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepA_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepA_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepA_C' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepA_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepA_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepA_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepA_D' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepA_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepA_U1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepA_U1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepA_U1' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepA_U1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepA_U2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepA_U2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepA_U2' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepA_U2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeG_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeG_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeG_C' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeG_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeG_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeG_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeG_D' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeG_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeG_U1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeG_U1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeG_U1' dans la table 'PlanComptable' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeG_U1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeG_U2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeG_U2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeG_U2' dans la table 'PlanComptable' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeG_U2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeA_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeA_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeA_C' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeA_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeA_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeA_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeA_D' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeA_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeA_U1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeA_U1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeA_U1' dans la table 'PlanComptable' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeA_U1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeA_U2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeA_U2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeA_U2' dans la table 'PlanComptable' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeA_U2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActivitesRowParent() As ActivitesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ActivitesPlanComptable")),ActivitesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ActivitesPlanComptable"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComptesRowParent() As ComptesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ComptesPlanComptable")),ComptesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ComptesPlanComptable"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlLibNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlLibNull()
            Me(Me.tablePlanComptable.PlLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepG_CNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepG_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepG_CNull()
            Me(Me.tablePlanComptable.PlRepG_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepG_DNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepG_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepG_DNull()
            Me(Me.tablePlanComptable.PlRepG_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepG_U1Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepG_U1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepG_U1Null()
            Me(Me.tablePlanComptable.PlRepG_U1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepG_U2Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepG_U2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepG_U2Null()
            Me(Me.tablePlanComptable.PlRepG_U2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepA_CNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepA_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepA_CNull()
            Me(Me.tablePlanComptable.PlRepA_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepA_DNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepA_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepA_DNull()
            Me(Me.tablePlanComptable.PlRepA_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepA_U1Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepA_U1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepA_U1Null()
            Me(Me.tablePlanComptable.PlRepA_U1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepA_U2Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepA_U2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepA_U2Null()
            Me(Me.tablePlanComptable.PlRepA_U2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeG_CNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeG_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeG_CNull()
            Me(Me.tablePlanComptable.PlSoldeG_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeG_DNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeG_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeG_DNull()
            Me(Me.tablePlanComptable.PlSoldeG_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeG_U1Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeG_U1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeG_U1Null()
            Me(Me.tablePlanComptable.PlSoldeG_U1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeG_U2Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeG_U2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeG_U2Null()
            Me(Me.tablePlanComptable.PlSoldeG_U2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeA_CNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeA_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeA_CNull()
            Me(Me.tablePlanComptable.PlSoldeA_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeA_DNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeA_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeA_DNull()
            Me(Me.tablePlanComptable.PlSoldeA_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeA_U1Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeA_U1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeA_U1Null()
            Me(Me.tablePlanComptable.PlSoldeA_U1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeA_U2Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeA_U2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeA_U2Null()
            Me(Me.tablePlanComptable.PlSoldeA_U2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetImmobilisationsRows() As ImmobilisationsRow()
            If (Me.Table.ChildRelations("PlanComptableImmobilisations") Is Nothing) Then
                Return New ImmobilisationsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanComptableImmobilisations")),ImmobilisationsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ActivitesRow
        Inherits Global.System.Data.DataRow
        
        Private tableActivites As ActivitesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableActivites = CType(Me.Table,ActivitesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADossier() As String
            Get
                Return CType(Me(Me.tableActivites.ADossierColumn),String)
            End Get
            Set
                Me(Me.tableActivites.ADossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AActi() As String
            Get
                Return CType(Me(Me.tableActivites.AActiColumn),String)
            End Get
            Set
                Me(Me.tableActivites.AActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALib() As String
            Get
                Try 
                    Return CType(Me(Me.tableActivites.ALibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ALib' dans la table 'Activites' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivites.ALibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AQte() As Single
            Get
                Try 
                    Return CType(Me(Me.tableActivites.AQteColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AQte' dans la table 'Activites' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivites.AQteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableActivites.AUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AUnit' dans la table 'Activites' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivites.AUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALibNull() As Boolean
            Return Me.IsNull(Me.tableActivites.ALibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALibNull()
            Me(Me.tableActivites.ALibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAQteNull() As Boolean
            Return Me.IsNull(Me.tableActivites.AQteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAQteNull()
            Me(Me.tableActivites.AQteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUnitNull() As Boolean
            Return Me.IsNull(Me.tableActivites.AUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUnitNull()
            Me(Me.tableActivites.AUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPlanComptableRows() As PlanComptableRow()
            If (Me.Table.ChildRelations("ActivitesPlanComptable") Is Nothing) Then
                Return New PlanComptableRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ActivitesPlanComptable")),PlanComptableRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImmobilisationsRow
        Inherits Global.System.Data.DataRow
        
        Private tableImmobilisations As ImmobilisationsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImmobilisations = CType(Me.Table,ImmobilisationsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDossier() As String
            Get
                Return CType(Me(Me.tableImmobilisations.IDossierColumn),String)
            End Get
            Set
                Me(Me.tableImmobilisations.IDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICpt() As String
            Get
                Return CType(Me(Me.tableImmobilisations.ICptColumn),String)
            End Get
            Set
                Me(Me.tableImmobilisations.ICptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IActi() As String
            Get
                Return CType(Me(Me.tableImmobilisations.IActiColumn),String)
            End Get
            Set
                Me(Me.tableImmobilisations.IActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOrdre() As Short
            Get
                Return CType(Me(Me.tableImmobilisations.IOrdreColumn),Short)
            End Get
            Set
                Me(Me.tableImmobilisations.IOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.ILibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.ILibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib2() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.ILib2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib2' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.ILib2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib3() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.ILib3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib3' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.ILib3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib4() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.ILib4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib4' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.ILib4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtAcquis() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IDtAcquisColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtAcquis' dans la table 'Immobilisations' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IDtAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValAcquis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IValAcquisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValAcquis' dans la table 'Immobilisations' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IValAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITypAmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.ITypAmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITypAmt' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.ITypAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICoeff() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.ICoeffColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICoeff' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.ICoeffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDuree() As Short
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IDureeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDuree' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IDureeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtCess() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IDtCessColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtCess' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IDtCessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValCess() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IValCessColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValCess' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IValCessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPlusValLg() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IPlusValLgColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPlusValLg' dans la table 'Immobilisations' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IPlusValLgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPlusValCt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IPlusValCtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPlusValCt' dans la table 'Immobilisations' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IPlusValCtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValForf() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IValForfColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValForf' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IValForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtForf() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IDtForfColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtForf' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IDtForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtCumTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IAmtCumTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtCumTot' dans la table 'Immobilisations' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IAmtCumTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtCumLin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IAmtCumLinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtCumLin' dans la table 'Immobilisations' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IAmtCumLinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IAmtExTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExTot' dans la table 'Immobilisations' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IAmtExTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExLin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IAmtExLinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExLin' dans la table 'Immobilisations' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IAmtExLinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExMin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IAmtExMinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExMin' dans la table 'Immobilisations' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IAmtExMinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExMax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IAmtExMaxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExMax' dans la table 'Immobilisations' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IAmtExMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.ITvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITva' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.ITvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValResid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IValResidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValResid' dans la table 'Immobilisations' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IValResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDureeResid() As Short
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IDureeResidColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDureeResid' dans la table 'Immobilisations' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IDureeResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValVenale() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IValVenaleColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValVenale' dans la table 'Immobilisations' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IValVenaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValLeasing() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IValLeasingColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValLeasing' dans la table 'Immobilisations' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IValLeasingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDerogatoire() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IDerogatoireColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDerogatoire' dans la table 'Immobilisations' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IDerogatoireColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPassCpta() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IPassCptaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPassCpta' dans la table 'Immobilisations' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IPassCptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INCompo() As Short
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.INCompoColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INCompo' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.INCompoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITauxL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.ITauxLColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITauxL' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.ITauxLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITauxD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.ITauxDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITauxD' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.ITauxDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDureeRest() As Short
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IDureeRestColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDureeRest' dans la table 'Immobilisations' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IDureeRestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAnnDDeb() As Short
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IAnnDDebColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAnnDDeb' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IAnnDDebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValNetFisc() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IValNetFiscColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValNetFisc' dans la table 'Immobilisations' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IValNetFiscColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMode() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IModeColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IMode' dans la table 'Immobilisations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IModeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOrdreImmoPrinc() As Short
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisations.IOrdreImmoPrincColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IOrdreImmoPrinc' dans la table 'Immobilisations' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisations.IOrdreImmoPrincColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanComptableRowParent() As PlanComptableRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanComptableImmobilisations")),PlanComptableRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanComptableImmobilisations"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILibNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.ILibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILibNull()
            Me(Me.tableImmobilisations.ILibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILib2Null() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.ILib2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILib2Null()
            Me(Me.tableImmobilisations.ILib2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILib3Null() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.ILib3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILib3Null()
            Me(Me.tableImmobilisations.ILib3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILib4Null() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.ILib4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILib4Null()
            Me(Me.tableImmobilisations.ILib4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IDtAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtAcquisNull()
            Me(Me.tableImmobilisations.IDtAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IValAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValAcquisNull()
            Me(Me.tableImmobilisations.IValAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITypAmtNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.ITypAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITypAmtNull()
            Me(Me.tableImmobilisations.ITypAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICoeffNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.ICoeffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICoeffNull()
            Me(Me.tableImmobilisations.ICoeffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IDureeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeNull()
            Me(Me.tableImmobilisations.IDureeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtCessNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IDtCessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtCessNull()
            Me(Me.tableImmobilisations.IDtCessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValCessNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IValCessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValCessNull()
            Me(Me.tableImmobilisations.IValCessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPlusValLgNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IPlusValLgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPlusValLgNull()
            Me(Me.tableImmobilisations.IPlusValLgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPlusValCtNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IPlusValCtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPlusValCtNull()
            Me(Me.tableImmobilisations.IPlusValCtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValForfNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IValForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValForfNull()
            Me(Me.tableImmobilisations.IValForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtForfNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IDtForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtForfNull()
            Me(Me.tableImmobilisations.IDtForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtCumTotNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IAmtCumTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtCumTotNull()
            Me(Me.tableImmobilisations.IAmtCumTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtCumLinNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IAmtCumLinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtCumLinNull()
            Me(Me.tableImmobilisations.IAmtCumLinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExTotNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IAmtExTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExTotNull()
            Me(Me.tableImmobilisations.IAmtExTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExLinNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IAmtExLinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExLinNull()
            Me(Me.tableImmobilisations.IAmtExLinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExMinNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IAmtExMinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExMinNull()
            Me(Me.tableImmobilisations.IAmtExMinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExMaxNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IAmtExMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExMaxNull()
            Me(Me.tableImmobilisations.IAmtExMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITvaNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.ITvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITvaNull()
            Me(Me.tableImmobilisations.ITvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValResidNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IValResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValResidNull()
            Me(Me.tableImmobilisations.IValResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeResidNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IDureeResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeResidNull()
            Me(Me.tableImmobilisations.IDureeResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValVenaleNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IValVenaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValVenaleNull()
            Me(Me.tableImmobilisations.IValVenaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValLeasingNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IValLeasingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValLeasingNull()
            Me(Me.tableImmobilisations.IValLeasingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDerogatoireNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IDerogatoireColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDerogatoireNull()
            Me(Me.tableImmobilisations.IDerogatoireColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPassCptaNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IPassCptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPassCptaNull()
            Me(Me.tableImmobilisations.IPassCptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINCompoNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.INCompoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINCompoNull()
            Me(Me.tableImmobilisations.INCompoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITauxLNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.ITauxLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITauxLNull()
            Me(Me.tableImmobilisations.ITauxLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITauxDNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.ITauxDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITauxDNull()
            Me(Me.tableImmobilisations.ITauxDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeRestNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IDureeRestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeRestNull()
            Me(Me.tableImmobilisations.IDureeRestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAnnDDebNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IAnnDDebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAnnDDebNull()
            Me(Me.tableImmobilisations.IAnnDDebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValNetFiscNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IValNetFiscColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValNetFiscNull()
            Me(Me.tableImmobilisations.IValNetFiscColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIModeNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IModeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIModeNull()
            Me(Me.tableImmobilisations.IModeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOrdreImmoPrincNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisations.IOrdreImmoPrincColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOrdreImmoPrincNull()
            Me(Me.tableImmobilisations.IOrdreImmoPrincColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DossiersRow
        Inherits Global.System.Data.DataRow
        
        Private tableDossiers As DossiersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDossiers = CType(Me.Table,DossiersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDossier() As String
            Get
                Return CType(Me(Me.tableDossiers.DDossierColumn),String)
            End Get
            Set
                Me(Me.tableDossiers.DDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DExpl() As String
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DExplColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DExpl' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DExplColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDtDebEx() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DDtDebExColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DDtDebEx' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DDtDebExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDtFinEx() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DDtFinExColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DDtFinEx' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DDtFinExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDtArrete() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DDtArreteColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DDtArrete' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DDtArreteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBqCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DBqCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DBqCpt' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DBqCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBqVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DBqValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DBqVal' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DBqValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBqFolio1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DBqFolio1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DBqFolio1' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DBqFolio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DCptOuvert() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DCptOuvertColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DCptOuvert' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DCptOuvertColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DComptesReportsDetaillesCloture() As String
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DComptesReportsDetaillesClotureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DComptesReportsDetaillesCloture' dans la table 'Dossie"& _ 
                            "rs' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DComptesReportsDetaillesClotureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDExplNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DExplColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDExplNull()
            Me(Me.tableDossiers.DExplColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDDtDebExNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DDtDebExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDDtDebExNull()
            Me(Me.tableDossiers.DDtDebExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDDtFinExNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DDtFinExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDDtFinExNull()
            Me(Me.tableDossiers.DDtFinExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDDtArreteNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DDtArreteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDDtArreteNull()
            Me(Me.tableDossiers.DDtArreteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBqCptNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DBqCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBqCptNull()
            Me(Me.tableDossiers.DBqCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBqValNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DBqValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBqValNull()
            Me(Me.tableDossiers.DBqValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBqFolio1Null() As Boolean
            Return Me.IsNull(Me.tableDossiers.DBqFolio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBqFolio1Null()
            Me(Me.tableDossiers.DBqFolio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDCptOuvertNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DCptOuvertColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDCptOuvertNull()
            Me(Me.tableDossiers.DCptOuvertColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDComptesReportsDetaillesClotureNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DComptesReportsDetaillesClotureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDComptesReportsDetaillesClotureNull()
            Me(Me.tableDossiers.DComptesReportsDetaillesClotureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetComptesRows() As ComptesRow()
            If (Me.Table.ChildRelations("DossiersComptes") Is Nothing) Then
                Return New ComptesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("DossiersComptes")),ComptesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComptesRow
        Inherits Global.System.Data.DataRow
        
        Private tableComptes As ComptesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableComptes = CType(Me.Table,ComptesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDossier() As String
            Get
                Return CType(Me(Me.tableComptes.CDossierColumn),String)
            End Get
            Set
                Me(Me.tableComptes.CDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCpt() As String
            Get
                Return CType(Me(Me.tableComptes.CCptColumn),String)
            End Get
            Set
                Me(Me.tableComptes.CCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CLib' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CU1() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CU1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CU1' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CU2() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CU2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CU2' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCptContre() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CCptContreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CCptContre' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CCptContreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property C_DC() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.C_DCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'C_DC' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.C_DCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DossiersRow() As DossiersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DossiersComptes")),DossiersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DossiersComptes"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLibNull() As Boolean
            Return Me.IsNull(Me.tableComptes.CLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLibNull()
            Me(Me.tableComptes.CLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCU1Null() As Boolean
            Return Me.IsNull(Me.tableComptes.CU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCU1Null()
            Me(Me.tableComptes.CU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCU2Null() As Boolean
            Return Me.IsNull(Me.tableComptes.CU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCU2Null()
            Me(Me.tableComptes.CU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCptContreNull() As Boolean
            Return Me.IsNull(Me.tableComptes.CCptContreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCptContreNull()
            Me(Me.tableComptes.CCptContreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsC_DCNull() As Boolean
            Return Me.IsNull(Me.tableComptes.C_DCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetC_DCNull()
            Me(Me.tableComptes.C_DCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPlanComptableRows() As PlanComptableRow()
            If (Me.Table.ChildRelations("ComptesPlanComptable") Is Nothing) Then
                Return New PlanComptableRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ComptesPlanComptable")),PlanComptableRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SommeDeImmobilisationsRow
        Inherits Global.System.Data.DataRow
        
        Private tableSommeDeImmobilisations As SommeDeImmobilisationsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSommeDeImmobilisations = CType(Me.Table,SommeDeImmobilisationsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableSommeDeImmobilisations.ICptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICpt' dans la table 'SommeDeImmobilisations' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSommeDeImmobilisations.ICptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SommeDeIValAcquis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSommeDeImmobilisations.SommeDeIValAcquisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SommeDeIValAcquis' dans la table 'SommeDeImmobilisatio"& _ 
                            "ns' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSommeDeImmobilisations.SommeDeIValAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SommeDeIAmtExTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSommeDeImmobilisations.SommeDeIAmtExTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SommeDeIAmtExTot' dans la table 'SommeDeImmobilisation"& _ 
                            "s' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSommeDeImmobilisations.SommeDeIAmtExTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SommeDeIAmtCumTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSommeDeImmobilisations.SommeDeIAmtCumTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SommeDeIAmtCumTot' dans la table 'SommeDeImmobilisatio"& _ 
                            "ns' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSommeDeImmobilisations.SommeDeIAmtCumTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SommeDeIValResid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSommeDeImmobilisations.SommeDeIValResidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SommeDeIValResid' dans la table 'SommeDeImmobilisation"& _ 
                            "s' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSommeDeImmobilisations.SommeDeIValResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICptNull() As Boolean
            Return Me.IsNull(Me.tableSommeDeImmobilisations.ICptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICptNull()
            Me(Me.tableSommeDeImmobilisations.ICptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSommeDeIValAcquisNull() As Boolean
            Return Me.IsNull(Me.tableSommeDeImmobilisations.SommeDeIValAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSommeDeIValAcquisNull()
            Me(Me.tableSommeDeImmobilisations.SommeDeIValAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSommeDeIAmtExTotNull() As Boolean
            Return Me.IsNull(Me.tableSommeDeImmobilisations.SommeDeIAmtExTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSommeDeIAmtExTotNull()
            Me(Me.tableSommeDeImmobilisations.SommeDeIAmtExTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSommeDeIAmtCumTotNull() As Boolean
            Return Me.IsNull(Me.tableSommeDeImmobilisations.SommeDeIAmtCumTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSommeDeIAmtCumTotNull()
            Me(Me.tableSommeDeImmobilisations.SommeDeIAmtCumTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSommeDeIValResidNull() As Boolean
            Return Me.IsNull(Me.tableSommeDeImmobilisations.SommeDeIValResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSommeDeIValResidNull()
            Me(Me.tableSommeDeImmobilisations.SommeDeIValResidColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImmobilisationsImpressionRow
        Inherits Global.System.Data.DataRow
        
        Private tableImmobilisationsImpression As ImmobilisationsImpressionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImmobilisationsImpression = CType(Me.Table,ImmobilisationsImpressionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Exploit() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.ExploitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Exploit' dans la table 'ImmobilisationsImpression' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.ExploitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.DDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DDossier' dans la table 'ImmobilisationsImpression' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.DDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExDeb() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.DateExDebColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateExDeb' dans la table 'ImmobilisationsImpression' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.DateExDebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFinEx() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.DateFinExColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateFinEx' dans la table 'ImmobilisationsImpression' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.DateFinExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.CptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Cpt' dans la table 'ImmobilisationsImpression' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.CptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Act() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.ActColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Act' dans la table 'ImmobilisationsImpression' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.ActColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ordre() As Short
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.OrdreColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Ordre' dans la table 'ImmobilisationsImpression' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.OrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Lib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.LibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Lib' dans la table 'ImmobilisationsImpression' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.LibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DtAcquis() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.DtAcquisColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DtAcquis' dans la table 'ImmobilisationsImpression' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.DtAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValAcquis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.ValAcquisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ValAcquis' dans la table 'ImmobilisationsImpression' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.ValAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Type' dans la table 'ImmobilisationsImpression' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TauxL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.TauxLColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TauxL' dans la table 'ImmobilisationsImpression' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.TauxLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TauxD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.TauxDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TauxD' dans la table 'ImmobilisationsImpression' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.TauxDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Coeff() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.CoeffColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Coeff' dans la table 'ImmobilisationsImpression' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.CoeffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Duree() As Short
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.DureeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Duree' dans la table 'ImmobilisationsImpression' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.DureeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValDebEx() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.ValDebExColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ValDebEx' dans la table 'ImmobilisationsImpression' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.ValDebExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmortEx() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.AmortExColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AmortEx' dans la table 'ImmobilisationsImpression' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.AmortExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DtCession() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.DtCessionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DtCession' dans la table 'ImmobilisationsImpression' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.DtCessionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValCession() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.ValCessionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ValCession' dans la table 'ImmobilisationsImpression' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.ValCessionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlusValLg() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.PlusValLgColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlusValLg' dans la table 'ImmobilisationsImpression' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.PlusValLgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlusValCt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.PlusValCtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlusValCt' dans la table 'ImmobilisationsImpression' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.PlusValCtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValForf() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.ValForfColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ValForf' dans la table 'ImmobilisationsImpression' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.ValForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DtForf() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.DtForfColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DtForf' dans la table 'ImmobilisationsImpression' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.DtForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmtCumTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.AmtCumTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AmtCumTot' dans la table 'ImmobilisationsImpression' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.AmtCumTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DureeResid() As Short
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.DureeResidColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DureeResid' dans la table 'ImmobilisationsImpression' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.DureeResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValVenale() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.ValVenaleColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ValVenale' dans la table 'ImmobilisationsImpression' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.ValVenaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValNetFisc() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmobilisationsImpression.ValNetFiscColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ValNetFisc' dans la table 'ImmobilisationsImpression' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmobilisationsImpression.ValNetFiscColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExploitNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.ExploitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExploitNull()
            Me(Me.tableImmobilisationsImpression.ExploitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDDossierNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.DDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDDossierNull()
            Me(Me.tableImmobilisationsImpression.DDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExDebNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.DateExDebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExDebNull()
            Me(Me.tableImmobilisationsImpression.DateExDebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFinExNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.DateFinExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFinExNull()
            Me(Me.tableImmobilisationsImpression.DateFinExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCptNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.CptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCptNull()
            Me(Me.tableImmobilisationsImpression.CptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.ActColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActNull()
            Me(Me.tableImmobilisationsImpression.ActColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdreNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.OrdreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdreNull()
            Me(Me.tableImmobilisationsImpression.OrdreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_LibNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.LibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_LibNull()
            Me(Me.tableImmobilisationsImpression.LibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDtAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.DtAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDtAcquisNull()
            Me(Me.tableImmobilisationsImpression.DtAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.ValAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValAcquisNull()
            Me(Me.tableImmobilisationsImpression.ValAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableImmobilisationsImpression.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTauxLNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.TauxLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTauxLNull()
            Me(Me.tableImmobilisationsImpression.TauxLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTauxDNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.TauxDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTauxDNull()
            Me(Me.tableImmobilisationsImpression.TauxDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoeffNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.CoeffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoeffNull()
            Me(Me.tableImmobilisationsImpression.CoeffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDureeNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.DureeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDureeNull()
            Me(Me.tableImmobilisationsImpression.DureeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValDebExNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.ValDebExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValDebExNull()
            Me(Me.tableImmobilisationsImpression.ValDebExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmortExNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.AmortExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmortExNull()
            Me(Me.tableImmobilisationsImpression.AmortExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDtCessionNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.DtCessionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDtCessionNull()
            Me(Me.tableImmobilisationsImpression.DtCessionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValCessionNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.ValCessionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValCessionNull()
            Me(Me.tableImmobilisationsImpression.ValCessionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlusValLgNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.PlusValLgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlusValLgNull()
            Me(Me.tableImmobilisationsImpression.PlusValLgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlusValCtNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.PlusValCtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlusValCtNull()
            Me(Me.tableImmobilisationsImpression.PlusValCtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValForfNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.ValForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValForfNull()
            Me(Me.tableImmobilisationsImpression.ValForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDtForfNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.DtForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDtForfNull()
            Me(Me.tableImmobilisationsImpression.DtForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmtCumTotNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.AmtCumTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmtCumTotNull()
            Me(Me.tableImmobilisationsImpression.AmtCumTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDureeResidNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.DureeResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDureeResidNull()
            Me(Me.tableImmobilisationsImpression.DureeResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValVenaleNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.ValVenaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValVenaleNull()
            Me(Me.tableImmobilisationsImpression.ValVenaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValNetFiscNull() As Boolean
            Return Me.IsNull(Me.tableImmobilisationsImpression.ValNetFiscColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValNetFiscNull()
            Me(Me.tableImmobilisationsImpression.ValNetFiscColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PlanComptableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PlanComptableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PlanComptableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PlanComptableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ActivitesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ActivitesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ActivitesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ActivitesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImmobilisationsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImmobilisationsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImmobilisationsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImmobilisationsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DossiersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DossiersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DossiersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DossiersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComptesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ComptesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComptesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComptesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SommeDeImmobilisationsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SommeDeImmobilisationsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SommeDeImmobilisationsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SommeDeImmobilisationsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImmobilisationsImpressionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImmobilisationsImpressionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImmobilisationsImpressionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImmobilisationsImpressionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ImmobilisationsDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PlanComptableTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PlanComptable"
            tableMapping.ColumnMappings.Add("PlDossier", "PlDossier")
            tableMapping.ColumnMappings.Add("PlCpt", "PlCpt")
            tableMapping.ColumnMappings.Add("PlActi", "PlActi")
            tableMapping.ColumnMappings.Add("PlLib", "PlLib")
            tableMapping.ColumnMappings.Add("PlRepG_C", "PlRepG_C")
            tableMapping.ColumnMappings.Add("PlRepG_D", "PlRepG_D")
            tableMapping.ColumnMappings.Add("PlRepG_U1", "PlRepG_U1")
            tableMapping.ColumnMappings.Add("PlRepG_U2", "PlRepG_U2")
            tableMapping.ColumnMappings.Add("PlRepA_C", "PlRepA_C")
            tableMapping.ColumnMappings.Add("PlRepA_D", "PlRepA_D")
            tableMapping.ColumnMappings.Add("PlRepA_U1", "PlRepA_U1")
            tableMapping.ColumnMappings.Add("PlRepA_U2", "PlRepA_U2")
            tableMapping.ColumnMappings.Add("PlSoldeG_C", "PlSoldeG_C")
            tableMapping.ColumnMappings.Add("PlSoldeG_D", "PlSoldeG_D")
            tableMapping.ColumnMappings.Add("PlSoldeG_U1", "PlSoldeG_U1")
            tableMapping.ColumnMappings.Add("PlSoldeG_U2", "PlSoldeG_U2")
            tableMapping.ColumnMappings.Add("PlSoldeA_C", "PlSoldeA_C")
            tableMapping.ColumnMappings.Add("PlSoldeA_D", "PlSoldeA_D")
            tableMapping.ColumnMappings.Add("PlSoldeA_U1", "PlSoldeA_U1")
            tableMapping.ColumnMappings.Add("PlSoldeA_U2", "PlSoldeA_U2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PlanComptable` WHERE ((`PlDossier` = ?) AND (`PlCpt` = ?) AND (`PlAc"& _ 
                "ti` = ?) AND ((? = 1 AND `PlLib` IS NULL) OR (`PlLib` = ?)) AND ((? = 1 AND `PlR"& _ 
                "epG_C` IS NULL) OR (`PlRepG_C` = ?)) AND ((? = 1 AND `PlRepG_D` IS NULL) OR (`Pl"& _ 
                "RepG_D` = ?)) AND ((? = 1 AND `PlRepG_U1` IS NULL) OR (`PlRepG_U1` = ?)) AND ((?"& _ 
                " = 1 AND `PlRepG_U2` IS NULL) OR (`PlRepG_U2` = ?)) AND ((? = 1 AND `PlRepA_C` I"& _ 
                "S NULL) OR (`PlRepA_C` = ?)) AND ((? = 1 AND `PlRepA_D` IS NULL) OR (`PlRepA_D` "& _ 
                "= ?)) AND ((? = 1 AND `PlRepA_U1` IS NULL) OR (`PlRepA_U1` = ?)) AND ((? = 1 AND"& _ 
                " `PlRepA_U2` IS NULL) OR (`PlRepA_U2` = ?)) AND ((? = 1 AND `PlSoldeG_C` IS NULL"& _ 
                ") OR (`PlSoldeG_C` = ?)) AND ((? = 1 AND `PlSoldeG_D` IS NULL) OR (`PlSoldeG_D` "& _ 
                "= ?)) AND ((? = 1 AND `PlSoldeG_U1` IS NULL) OR (`PlSoldeG_U1` = ?)) AND ((? = 1"& _ 
                " AND `PlSoldeG_U2` IS NULL) OR (`PlSoldeG_U2` = ?)) AND ((? = 1 AND `PlSoldeA_C`"& _ 
                " IS NULL) OR (`PlSoldeA_C` = ?)) AND ((? = 1 AND `PlSoldeA_D` IS NULL) OR (`PlSo"& _ 
                "ldeA_D` = ?)) AND ((? = 1 AND `PlSoldeA_U1` IS NULL) OR (`PlSoldeA_U1` = ?)) AND"& _ 
                " ((? = 1 AND `PlSoldeA_U2` IS NULL) OR (`PlSoldeA_U2` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlLib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlLib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlLib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepG_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepG_D", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_D", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_D", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepG_U1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepG_U2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepA_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepA_D", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_D", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_D", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepA_U1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepA_U2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeG_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeG_D", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_D", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_D", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeG_U1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeG_U2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeA_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeA_D", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_D", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_D", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeA_U1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeA_U2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PlanComptable` (`PlDossier`, `PlCpt`, `PlActi`, `PlLib`, `PlRepG_C`,"& _ 
                " `PlRepG_D`, `PlRepG_U1`, `PlRepG_U2`, `PlRepA_C`, `PlRepA_D`, `PlRepA_U1`, `PlR"& _ 
                "epA_U2`, `PlSoldeG_C`, `PlSoldeG_D`, `PlSoldeG_U1`, `PlSoldeG_U2`, `PlSoldeA_C`,"& _ 
                " `PlSoldeA_D`, `PlSoldeA_U1`, `PlSoldeA_U2`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `PlanComptable` SET `PlDossier` = ?, `PlCpt` = ?, `PlActi` = ?, `PlLib` = "& _ 
                "?, `PlRepG_C` = ?, `PlRepG_D` = ?, `PlRepG_U1` = ?, `PlRepG_U2` = ?, `PlRepA_C` "& _ 
                "= ?, `PlRepA_D` = ?, `PlRepA_U1` = ?, `PlRepA_U2` = ?, `PlSoldeG_C` = ?, `PlSold"& _ 
                "eG_D` = ?, `PlSoldeG_U1` = ?, `PlSoldeG_U2` = ?, `PlSoldeA_C` = ?, `PlSoldeA_D` "& _ 
                "= ?, `PlSoldeA_U1` = ?, `PlSoldeA_U2` = ? WHERE ((`PlDossier` = ?) AND (`PlCpt` "& _ 
                "= ?) AND (`PlActi` = ?) AND ((? = 1 AND `PlLib` IS NULL) OR (`PlLib` = ?)) AND ("& _ 
                "(? = 1 AND `PlRepG_C` IS NULL) OR (`PlRepG_C` = ?)) AND ((? = 1 AND `PlRepG_D` I"& _ 
                "S NULL) OR (`PlRepG_D` = ?)) AND ((? = 1 AND `PlRepG_U1` IS NULL) OR (`PlRepG_U1"& _ 
                "` = ?)) AND ((? = 1 AND `PlRepG_U2` IS NULL) OR (`PlRepG_U2` = ?)) AND ((? = 1 A"& _ 
                "ND `PlRepA_C` IS NULL) OR (`PlRepA_C` = ?)) AND ((? = 1 AND `PlRepA_D` IS NULL) "& _ 
                "OR (`PlRepA_D` = ?)) AND ((? = 1 AND `PlRepA_U1` IS NULL) OR (`PlRepA_U1` = ?)) "& _ 
                "AND ((? = 1 AND `PlRepA_U2` IS NULL) OR (`PlRepA_U2` = ?)) AND ((? = 1 AND `PlSo"& _ 
                "ldeG_C` IS NULL) OR (`PlSoldeG_C` = ?)) AND ((? = 1 AND `PlSoldeG_D` IS NULL) OR"& _ 
                " (`PlSoldeG_D` = ?)) AND ((? = 1 AND `PlSoldeG_U1` IS NULL) OR (`PlSoldeG_U1` = "& _ 
                "?)) AND ((? = 1 AND `PlSoldeG_U2` IS NULL) OR (`PlSoldeG_U2` = ?)) AND ((? = 1 A"& _ 
                "ND `PlSoldeA_C` IS NULL) OR (`PlSoldeA_C` = ?)) AND ((? = 1 AND `PlSoldeA_D` IS "& _ 
                "NULL) OR (`PlSoldeA_D` = ?)) AND ((? = 1 AND `PlSoldeA_U1` IS NULL) OR (`PlSolde"& _ 
                "A_U1` = ?)) AND ((? = 1 AND `PlSoldeA_U2` IS NULL) OR (`PlSoldeA_U2` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlLib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlLib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlLib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepG_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepG_D", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_D", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_D", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepG_U1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepG_U2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepG_U2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepA_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepA_D", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_D", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_D", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepA_U1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlRepA_U2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlRepA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlRepA_U2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeG_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeG_D", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_D", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_D", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeG_U1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeG_U2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeG_U2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeA_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeA_D", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_D", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_D", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeA_U1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PlSoldeA_U2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlSoldeA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlSoldeA_U2", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PlDossier, PlCpt, PlActi, PlLib, PlRepG_C, PlRepG_D, PlRepG_U1, PlRepG_U2,"& _ 
                " PlRepA_C, PlRepA_D, PlRepA_U1, PlRepA_U2, PlSoldeG_C, PlSoldeG_D, PlSoldeG_U1, "& _ 
                "PlSoldeG_U2, PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, PlSoldeA_U2 FROM PlanComptable"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PlDossier, PlCpt, PlActi, PlLib, PlRepG_C, PlRepG_D, PlRepG_U1, PlRepG_U2,"& _ 
                " PlRepA_C, PlRepA_D, PlRepA_U1, PlRepA_U2, PlSoldeG_C, PlSoldeG_D, PlSoldeG_U1, "& _ 
                "PlSoldeG_U2, PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, PlSoldeA_U2 FROM PlanComptable"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (PlDossier = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImmobilisationsDataSet.PlanComptableDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImmobilisationsDataSet.PlanComptableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImmobilisationsDataSet.PlanComptableDataTable = New ImmobilisationsDataSet.PlanComptableDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPlDossier(ByVal dataTable As ImmobilisationsDataSet.PlanComptableDataTable, ByVal PlDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PlDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPlDossier(ByVal PlDossier As String) As ImmobilisationsDataSet.PlanComptableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PlDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            Dim dataTable As ImmobilisationsDataSet.PlanComptableDataTable = New ImmobilisationsDataSet.PlanComptableDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ImmobilisationsDataSet.PlanComptableDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ImmobilisationsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PlanComptable")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_PlDossier As String,  _
                    ByVal Original_PlCpt As String,  _
                    ByVal Original_PlActi As String,  _
                    ByVal Original_PlLib As String,  _
                    ByVal Original_PlRepG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_U2 As Global.System.Nullable(Of Decimal)) As Integer
            If (Original_PlDossier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PlDossier,String)
            End If
            If (Original_PlCpt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PlCpt,String)
            End If
            If (Original_PlActi Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PlActi,String)
            End If
            If (Original_PlLib Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PlLib,String)
            End If
            If (Original_PlRepG_C.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PlRepG_C.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepG_D.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PlRepG_D.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepG_U1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PlRepG_U1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepG_U2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PlRepG_U2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepA_C.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_PlRepA_C.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepA_D.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_PlRepA_D.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepA_U1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_PlRepA_U1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepA_U2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PlRepA_U2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeG_C.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_PlSoldeG_C.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeG_D.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_PlSoldeG_D.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeG_U1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_PlSoldeG_U1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeG_U2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PlSoldeG_U2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeA_C.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_PlSoldeA_C.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeA_D.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_PlSoldeA_D.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeA_U1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_PlSoldeA_U1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeA_U2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_PlSoldeA_U2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PlDossier As String,  _
                    ByVal PlCpt As String,  _
                    ByVal PlActi As String,  _
                    ByVal PlLib As String,  _
                    ByVal PlRepG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_U2 As Global.System.Nullable(Of Decimal)) As Integer
            If (PlDossier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            If (PlCpt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PlCpt,String)
            End If
            If (PlActi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PlActi,String)
            End If
            If (PlLib Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PlLib,String)
            End If
            If (PlRepG_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PlRepG_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_D.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PlRepG_D.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_U1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PlRepG_U1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_U2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PlRepG_U2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PlRepA_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_D.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PlRepA_D.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_U1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PlRepA_U1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_U2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PlRepA_U2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PlSoldeG_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_D.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PlSoldeG_D.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_U1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PlSoldeG_U1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_U2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PlSoldeG_U2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PlSoldeA_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_D.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PlSoldeA_D.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_U1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PlSoldeA_U1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_U2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PlSoldeA_U2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PlDossier As String,  _
                    ByVal PlCpt As String,  _
                    ByVal PlActi As String,  _
                    ByVal PlLib As String,  _
                    ByVal PlRepG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlDossier As String,  _
                    ByVal Original_PlCpt As String,  _
                    ByVal Original_PlActi As String,  _
                    ByVal Original_PlLib As String,  _
                    ByVal Original_PlRepG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_U2 As Global.System.Nullable(Of Decimal)) As Integer
            If (PlDossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            If (PlCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PlCpt,String)
            End If
            If (PlActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PlActi,String)
            End If
            If (PlLib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PlLib,String)
            End If
            If (PlRepG_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PlRepG_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PlRepG_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PlRepG_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PlRepG_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PlRepA_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PlRepA_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PlRepA_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PlRepA_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PlSoldeG_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PlSoldeG_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PlSoldeG_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PlSoldeG_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(PlSoldeA_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(PlSoldeA_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(PlSoldeA_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(PlSoldeA_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_PlDossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_PlDossier,String)
            End If
            If (Original_PlCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_PlCpt,String)
            End If
            If (Original_PlActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_PlActi,String)
            End If
            If (Original_PlLib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_PlLib,String)
            End If
            If (Original_PlRepG_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_PlRepG_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepG_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_PlRepG_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepG_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_PlRepG_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepG_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_PlRepG_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepA_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_PlRepA_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepA_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_PlRepA_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepA_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_PlRepA_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_PlRepA_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_PlRepA_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeG_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_PlSoldeG_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeG_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_PlSoldeG_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeG_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_PlSoldeG_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeG_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_PlSoldeG_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeA_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_PlSoldeA_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeA_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_PlSoldeA_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeA_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_PlSoldeA_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_PlSoldeA_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_PlSoldeA_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PlLib As String,  _
                    ByVal PlRepG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlDossier As String,  _
                    ByVal Original_PlCpt As String,  _
                    ByVal Original_PlActi As String,  _
                    ByVal Original_PlLib As String,  _
                    ByVal Original_PlRepG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlRepA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlSoldeA_U2 As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_PlDossier, Original_PlCpt, Original_PlActi, PlLib, PlRepG_C, PlRepG_D, PlRepG_U1, PlRepG_U2, PlRepA_C, PlRepA_D, PlRepA_U1, PlRepA_U2, PlSoldeG_C, PlSoldeG_D, PlSoldeG_U1, PlSoldeG_U2, PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, PlSoldeA_U2, Original_PlDossier, Original_PlCpt, Original_PlActi, Original_PlLib, Original_PlRepG_C, Original_PlRepG_D, Original_PlRepG_U1, Original_PlRepG_U2, Original_PlRepA_C, Original_PlRepA_D, Original_PlRepA_U1, Original_PlRepA_U2, Original_PlSoldeG_C, Original_PlSoldeG_D, Original_PlSoldeG_U1, Original_PlSoldeG_U2, Original_PlSoldeA_C, Original_PlSoldeA_D, Original_PlSoldeA_U1, Original_PlSoldeA_U2)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ActivitesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Activites"
            tableMapping.ColumnMappings.Add("ADossier", "ADossier")
            tableMapping.ColumnMappings.Add("AActi", "AActi")
            tableMapping.ColumnMappings.Add("ALib", "ALib")
            tableMapping.ColumnMappings.Add("AQte", "AQte")
            tableMapping.ColumnMappings.Add("AUnit", "AUnit")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Activites` WHERE ((`ADossier` = ?) AND (`AActi` = ?) AND ((? = 1 AND"& _ 
                " `ALib` IS NULL) OR (`ALib` = ?)) AND ((? = 1 AND `AQte` IS NULL) OR (`AQte` = ?"& _ 
                ")) AND ((? = 1 AND `AUnit` IS NULL) OR (`AUnit` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ADossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ALib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ALib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ALib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ALib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AQte", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AQte", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AQte", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AQte", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AUnit", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AUnit", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AUnit", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AUnit", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Activites` (`ADossier`, `AActi`, `ALib`, `AQte`, `AUnit`) VALUES (?,"& _ 
                " ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ADossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ALib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ALib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AQte", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AQte", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AUnit", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AUnit", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Activites` SET `ADossier` = ?, `AActi` = ?, `ALib` = ?, `AQte` = ?, `AUni"& _ 
                "t` = ? WHERE ((`ADossier` = ?) AND (`AActi` = ?) AND ((? = 1 AND `ALib` IS NULL)"& _ 
                " OR (`ALib` = ?)) AND ((? = 1 AND `AQte` IS NULL) OR (`AQte` = ?)) AND ((? = 1 A"& _ 
                "ND `AUnit` IS NULL) OR (`AUnit` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ADossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ALib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ALib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AQte", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AQte", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AUnit", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AUnit", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ADossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ALib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ALib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ALib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ALib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AQte", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AQte", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AQte", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AQte", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AUnit", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AUnit", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AUnit", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AUnit", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ADossier, AActi, ALib, AQte, AUnit FROM Activites"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ADossier, AActi, ALib, AQte, AUnit FROM Activites"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (ADossier = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ADossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImmobilisationsDataSet.ActivitesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImmobilisationsDataSet.ActivitesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImmobilisationsDataSet.ActivitesDataTable = New ImmobilisationsDataSet.ActivitesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByADossier(ByVal dataTable As ImmobilisationsDataSet.ActivitesDataTable, ByVal ADossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ADossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ADossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByADossier(ByVal ADossier As String) As ImmobilisationsDataSet.ActivitesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ADossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ADossier,String)
            End If
            Dim dataTable As ImmobilisationsDataSet.ActivitesDataTable = New ImmobilisationsDataSet.ActivitesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ImmobilisationsDataSet.ActivitesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ImmobilisationsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Activites")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ADossier As String, ByVal Original_AActi As String, ByVal Original_ALib As String, ByVal Original_AQte As Global.System.Nullable(Of Single), ByVal Original_AUnit As String) As Integer
            If (Original_ADossier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ADossier,String)
            End If
            If (Original_AActi Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_AActi,String)
            End If
            If (Original_ALib Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ALib,String)
            End If
            If (Original_AQte.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_AQte.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_AUnit Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_AUnit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ADossier As String, ByVal AActi As String, ByVal ALib As String, ByVal AQte As Global.System.Nullable(Of Single), ByVal AUnit As String) As Integer
            If (ADossier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ADossier,String)
            End If
            If (AActi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AActi,String)
            End If
            If (ALib Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ALib,String)
            End If
            If (AQte.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AQte.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AUnit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AUnit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ADossier As String, ByVal AActi As String, ByVal ALib As String, ByVal AQte As Global.System.Nullable(Of Single), ByVal AUnit As String, ByVal Original_ADossier As String, ByVal Original_AActi As String, ByVal Original_ALib As String, ByVal Original_AQte As Global.System.Nullable(Of Single), ByVal Original_AUnit As String) As Integer
            If (ADossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ADossier,String)
            End If
            If (AActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(AActi,String)
            End If
            If (ALib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ALib,String)
            End If
            If (AQte.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AQte.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AUnit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AUnit,String)
            End If
            If (Original_ADossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ADossier,String)
            End If
            If (Original_AActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_AActi,String)
            End If
            If (Original_ALib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ALib,String)
            End If
            If (Original_AQte.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_AQte.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_AUnit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_AUnit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ALib As String, ByVal AQte As Global.System.Nullable(Of Single), ByVal AUnit As String, ByVal Original_ADossier As String, ByVal Original_AActi As String, ByVal Original_ALib As String, ByVal Original_AQte As Global.System.Nullable(Of Single), ByVal Original_AUnit As String) As Integer
            Return Me.Update(Original_ADossier, Original_AActi, ALib, AQte, AUnit, Original_ADossier, Original_AActi, Original_ALib, Original_AQte, Original_AUnit)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ImmobilisationsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Immobilisations"
            tableMapping.ColumnMappings.Add("IDossier", "IDossier")
            tableMapping.ColumnMappings.Add("ICpt", "ICpt")
            tableMapping.ColumnMappings.Add("IActi", "IActi")
            tableMapping.ColumnMappings.Add("IOrdre", "IOrdre")
            tableMapping.ColumnMappings.Add("ILib", "ILib")
            tableMapping.ColumnMappings.Add("ILib2", "ILib2")
            tableMapping.ColumnMappings.Add("ILib3", "ILib3")
            tableMapping.ColumnMappings.Add("ILib4", "ILib4")
            tableMapping.ColumnMappings.Add("IDtAcquis", "IDtAcquis")
            tableMapping.ColumnMappings.Add("IValAcquis", "IValAcquis")
            tableMapping.ColumnMappings.Add("ITypAmt", "ITypAmt")
            tableMapping.ColumnMappings.Add("ICoeff", "ICoeff")
            tableMapping.ColumnMappings.Add("IDuree", "IDuree")
            tableMapping.ColumnMappings.Add("IDtCess", "IDtCess")
            tableMapping.ColumnMappings.Add("IValCess", "IValCess")
            tableMapping.ColumnMappings.Add("IPlusValLg", "IPlusValLg")
            tableMapping.ColumnMappings.Add("IPlusValCt", "IPlusValCt")
            tableMapping.ColumnMappings.Add("IValForf", "IValForf")
            tableMapping.ColumnMappings.Add("IDtForf", "IDtForf")
            tableMapping.ColumnMappings.Add("IAmtCumTot", "IAmtCumTot")
            tableMapping.ColumnMappings.Add("IAmtCumLin", "IAmtCumLin")
            tableMapping.ColumnMappings.Add("IAmtExTot", "IAmtExTot")
            tableMapping.ColumnMappings.Add("IAmtExLin", "IAmtExLin")
            tableMapping.ColumnMappings.Add("IAmtExMin", "IAmtExMin")
            tableMapping.ColumnMappings.Add("IAmtExMax", "IAmtExMax")
            tableMapping.ColumnMappings.Add("ITva", "ITva")
            tableMapping.ColumnMappings.Add("IValResid", "IValResid")
            tableMapping.ColumnMappings.Add("IDureeResid", "IDureeResid")
            tableMapping.ColumnMappings.Add("IValVenale", "IValVenale")
            tableMapping.ColumnMappings.Add("IValLeasing", "IValLeasing")
            tableMapping.ColumnMappings.Add("IDerogatoire", "IDerogatoire")
            tableMapping.ColumnMappings.Add("IPassCpta", "IPassCpta")
            tableMapping.ColumnMappings.Add("INCompo", "INCompo")
            tableMapping.ColumnMappings.Add("ITauxL", "ITauxL")
            tableMapping.ColumnMappings.Add("ITauxD", "ITauxD")
            tableMapping.ColumnMappings.Add("IDureeRest", "IDureeRest")
            tableMapping.ColumnMappings.Add("IAnnDDeb", "IAnnDDeb")
            tableMapping.ColumnMappings.Add("IValNetFisc", "IValNetFisc")
            tableMapping.ColumnMappings.Add("IMode", "IMode")
            tableMapping.ColumnMappings.Add("IOrdreImmoPrinc", "IOrdreImmoPrinc")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Immobilisations` WHERE ((`IDossier` = ?) AND (`ICpt` = ?) AND (`IAct"& _ 
                "i` = ?) AND (`IOrdre` = ?) AND ((? = 1 AND `ILib` IS NULL) OR (`ILib` = ?)) AND "& _ 
                "((? = 1 AND `ILib2` IS NULL) OR (`ILib2` = ?)) AND ((? = 1 AND `ILib3` IS NULL) "& _ 
                "OR (`ILib3` = ?)) AND ((? = 1 AND `ILib4` IS NULL) OR (`ILib4` = ?)) AND ((? = 1"& _ 
                " AND `IDtAcquis` IS NULL) OR (`IDtAcquis` = ?)) AND ((? = 1 AND `IValAcquis` IS "& _ 
                "NULL) OR (`IValAcquis` = ?)) AND ((? = 1 AND `ITypAmt` IS NULL) OR (`ITypAmt` = "& _ 
                "?)) AND ((? = 1 AND `ICoeff` IS NULL) OR (`ICoeff` = ?)) AND ((? = 1 AND `IDuree"& _ 
                "` IS NULL) OR (`IDuree` = ?)) AND ((? = 1 AND `IDtCess` IS NULL) OR (`IDtCess` ="& _ 
                " ?)) AND ((? = 1 AND `IValCess` IS NULL) OR (`IValCess` = ?)) AND ((? = 1 AND `I"& _ 
                "PlusValLg` IS NULL) OR (`IPlusValLg` = ?)) AND ((? = 1 AND `IPlusValCt` IS NULL)"& _ 
                " OR (`IPlusValCt` = ?)) AND ((? = 1 AND `IValForf` IS NULL) OR (`IValForf` = ?))"& _ 
                " AND ((? = 1 AND `IDtForf` IS NULL) OR (`IDtForf` = ?)) AND ((? = 1 AND `IAmtCum"& _ 
                "Tot` IS NULL) OR (`IAmtCumTot` = ?)) AND ((? = 1 AND `IAmtCumLin` IS NULL) OR (`"& _ 
                "IAmtCumLin` = ?)) AND ((? = 1 AND `IAmtExTot` IS NULL) OR (`IAmtExTot` = ?)) AND"& _ 
                " ((? = 1 AND `IAmtExLin` IS NULL) OR (`IAmtExLin` = ?)) AND ((? = 1 AND `IAmtExM"& _ 
                "in` IS NULL) OR (`IAmtExMin` = ?)) AND ((? = 1 AND `IAmtExMax` IS NULL) OR (`IAm"& _ 
                "tExMax` = ?)) AND ((? = 1 AND `ITva` IS NULL) OR (`ITva` = ?)) AND ((? = 1 AND `"& _ 
                "IValResid` IS NULL) OR (`IValResid` = ?)) AND ((? = 1 AND `IDureeResid` IS NULL)"& _ 
                " OR (`IDureeResid` = ?)) AND ((? = 1 AND `IValVenale` IS NULL) OR (`IValVenale` "& _ 
                "= ?)) AND ((? = 1 AND `IValLeasing` IS NULL) OR (`IValLeasing` = ?)) AND ((? = 1"& _ 
                " AND `IDerogatoire` IS NULL) OR (`IDerogatoire` = ?)) AND ((? = 1 AND `IPassCpta"& _ 
                "` IS NULL) OR (`IPassCpta` = ?)) AND ((? = 1 AND `INCompo` IS NULL) OR (`INCompo"& _ 
                "` = ?)) AND ((? = 1 AND `ITauxL` IS NULL) OR (`ITauxL` = ?)) AND ((? = 1 AND `IT"& _ 
                "auxD` IS NULL) OR (`ITauxD` = ?)) AND ((? = 1 AND `IDureeRest` IS NULL) OR (`IDu"& _ 
                "reeRest` = ?)) AND ((? = 1 AND `IAnnDDeb` IS NULL) OR (`IAnnDDeb` = ?)) AND ((? "& _ 
                "= 1 AND `IValNetFisc` IS NULL) OR (`IValNetFisc` = ?)) AND ((? = 1 AND `IMode` I"& _ 
                "S NULL) OR (`IMode` = ?)) AND ((? = 1 AND `IOrdreImmoPrinc` IS NULL) OR (`IOrdre"& _ 
                "ImmoPrinc` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ICpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IOrdre", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ILib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ILib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ILib2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ILib2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ILib3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ILib3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ILib4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ILib4", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDtAcquis", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtAcquis", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDtAcquis", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtAcquis", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValAcquis", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValAcquis", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValAcquis", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValAcquis", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ITypAmt", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITypAmt", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ITypAmt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITypAmt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ICoeff", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICoeff", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ICoeff", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICoeff", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDuree", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDuree", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDuree", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDuree", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDtCess", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtCess", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDtCess", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtCess", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValCess", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValCess", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValCess", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValCess", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IPlusValLg", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValLg", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IPlusValLg", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValLg", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IPlusValCt", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValCt", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IPlusValCt", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValCt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValForf", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValForf", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValForf", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValForf", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDtForf", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtForf", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDtForf", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtForf", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtCumTot", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumTot", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtCumTot", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumTot", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtCumLin", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumLin", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtCumLin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumLin", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtExTot", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExTot", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtExTot", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExTot", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtExLin", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExLin", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtExLin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExLin", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtExMin", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMin", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtExMin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMin", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtExMax", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMax", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtExMax", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMax", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ITva", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITva", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ITva", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITva", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValResid", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValResid", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValResid", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValResid", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDureeResid", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeResid", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDureeResid", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeResid", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValVenale", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValVenale", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValVenale", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValVenale", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValLeasing", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValLeasing", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValLeasing", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValLeasing", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDerogatoire", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDerogatoire", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDerogatoire", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDerogatoire", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IPassCpta", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPassCpta", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IPassCpta", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPassCpta", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_INCompo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INCompo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INCompo", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INCompo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ITauxL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ITauxL", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ITauxD", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxD", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ITauxD", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDureeRest", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeRest", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDureeRest", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeRest", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAnnDDeb", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAnnDDeb", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAnnDDeb", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAnnDDeb", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValNetFisc", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValNetFisc", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValNetFisc", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValNetFisc", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IMode", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IMode", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IMode", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IMode", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IOrdreImmoPrinc", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdreImmoPrinc", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IOrdreImmoPrinc", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdreImmoPrinc", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Immobilisations` (`IDossier`, `ICpt`, `IActi`, `IOrdre`, `ILib`, `IL"& _ 
                "ib2`, `ILib3`, `ILib4`, `IDtAcquis`, `IValAcquis`, `ITypAmt`, `ICoeff`, `IDuree`"& _ 
                ", `IDtCess`, `IValCess`, `IPlusValLg`, `IPlusValCt`, `IValForf`, `IDtForf`, `IAm"& _ 
                "tCumTot`, `IAmtCumLin`, `IAmtExTot`, `IAmtExLin`, `IAmtExMin`, `IAmtExMax`, `ITv"& _ 
                "a`, `IValResid`, `IDureeResid`, `IValVenale`, `IValLeasing`, `IDerogatoire`, `IP"& _ 
                "assCpta`, `INCompo`, `ITauxL`, `ITauxD`, `IDureeRest`, `IAnnDDeb`, `IValNetFisc`"& _ 
                ", `IMode`, `IOrdreImmoPrinc`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ICpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IOrdre", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ILib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ILib2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ILib3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ILib4", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDtAcquis", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtAcquis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValAcquis", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValAcquis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ITypAmt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITypAmt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ICoeff", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICoeff", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDuree", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDuree", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDtCess", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtCess", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValCess", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValCess", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IPlusValLg", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValLg", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IPlusValCt", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValCt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValForf", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValForf", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDtForf", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtForf", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtCumTot", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumTot", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtCumLin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumLin", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtExTot", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExTot", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtExLin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExLin", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtExMin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMin", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtExMax", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMax", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ITva", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITva", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValResid", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValResid", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDureeResid", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeResid", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValVenale", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValVenale", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValLeasing", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValLeasing", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDerogatoire", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDerogatoire", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IPassCpta", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPassCpta", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INCompo", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INCompo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ITauxL", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ITauxD", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDureeRest", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeRest", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAnnDDeb", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAnnDDeb", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValNetFisc", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValNetFisc", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IMode", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IMode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IOrdreImmoPrinc", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdreImmoPrinc", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Immobilisations` SET `IDossier` = ?, `ICpt` = ?, `IActi` = ?, `IOrdre` = "& _ 
                "?, `ILib` = ?, `ILib2` = ?, `ILib3` = ?, `ILib4` = ?, `IDtAcquis` = ?, `IValAcqu"& _ 
                "is` = ?, `ITypAmt` = ?, `ICoeff` = ?, `IDuree` = ?, `IDtCess` = ?, `IValCess` = "& _ 
                "?, `IPlusValLg` = ?, `IPlusValCt` = ?, `IValForf` = ?, `IDtForf` = ?, `IAmtCumTo"& _ 
                "t` = ?, `IAmtCumLin` = ?, `IAmtExTot` = ?, `IAmtExLin` = ?, `IAmtExMin` = ?, `IA"& _ 
                "mtExMax` = ?, `ITva` = ?, `IValResid` = ?, `IDureeResid` = ?, `IValVenale` = ?, "& _ 
                "`IValLeasing` = ?, `IDerogatoire` = ?, `IPassCpta` = ?, `INCompo` = ?, `ITauxL` "& _ 
                "= ?, `ITauxD` = ?, `IDureeRest` = ?, `IAnnDDeb` = ?, `IValNetFisc` = ?, `IMode` "& _ 
                "= ?, `IOrdreImmoPrinc` = ? WHERE ((`IDossier` = ?) AND (`ICpt` = ?) AND (`IActi`"& _ 
                " = ?) AND (`IOrdre` = ?) AND ((? = 1 AND `ILib` IS NULL) OR (`ILib` = ?)) AND (("& _ 
                "? = 1 AND `ILib2` IS NULL) OR (`ILib2` = ?)) AND ((? = 1 AND `ILib3` IS NULL) OR"& _ 
                " (`ILib3` = ?)) AND ((? = 1 AND `ILib4` IS NULL) OR (`ILib4` = ?)) AND ((? = 1 A"& _ 
                "ND `IDtAcquis` IS NULL) OR (`IDtAcquis` = ?)) AND ((? = 1 AND `IValAcquis` IS NU"& _ 
                "LL) OR (`IValAcquis` = ?)) AND ((? = 1 AND `ITypAmt` IS NULL) OR (`ITypAmt` = ?)"& _ 
                ") AND ((? = 1 AND `ICoeff` IS NULL) OR (`ICoeff` = ?)) AND ((? = 1 AND `IDuree` "& _ 
                "IS NULL) OR (`IDuree` = ?)) AND ((? = 1 AND `IDtCess` IS NULL) OR (`IDtCess` = ?"& _ 
                ")) AND ((? = 1 AND `IValCess` IS NULL) OR (`IValCess` = ?)) AND ((? = 1 AND `IPl"& _ 
                "usValLg` IS NULL) OR (`IPlusValLg` = ?)) AND ((? = 1 AND `IPlusValCt` IS NULL) O"& _ 
                "R (`IPlusValCt` = ?)) AND ((? = 1 AND `IValForf` IS NULL) OR (`IValForf` = ?)) A"& _ 
                "ND ((? = 1 AND `IDtForf` IS NULL) OR (`IDtForf` = ?)) AND ((? = 1 AND `IAmtCumTo"& _ 
                "t` IS NULL) OR (`IAmtCumTot` = ?)) AND ((? = 1 AND `IAmtCumLin` IS NULL) OR (`IA"& _ 
                "mtCumLin` = ?)) AND ((? = 1 AND `IAmtExTot` IS NULL) OR (`IAmtExTot` = ?)) AND ("& _ 
                "(? = 1 AND `IAmtExLin` IS NULL) OR (`IAmtExLin` = ?)) AND ((? = 1 AND `IAmtExMin"& _ 
                "` IS NULL) OR (`IAmtExMin` = ?)) AND ((? = 1 AND `IAmtExMax` IS NULL) OR (`IAmtE"& _ 
                "xMax` = ?)) AND ((? = 1 AND `ITva` IS NULL) OR (`ITva` = ?)) AND ((? = 1 AND `IV"& _ 
                "alResid` IS NULL) OR (`IValResid` = ?)) AND ((? = 1 AND `IDureeResid` IS NULL) O"& _ 
                "R (`IDureeResid` = ?)) AND ((? = 1 AND `IValVenale` IS NULL) OR (`IValVenale` = "& _ 
                "?)) AND ((? = 1 AND `IValLeasing` IS NULL) OR (`IValLeasing` = ?)) AND ((? = 1 A"& _ 
                "ND `IDerogatoire` IS NULL) OR (`IDerogatoire` = ?)) AND ((? = 1 AND `IPassCpta` "& _ 
                "IS NULL) OR (`IPassCpta` = ?)) AND ((? = 1 AND `INCompo` IS NULL) OR (`INCompo` "& _ 
                "= ?)) AND ((? = 1 AND `ITauxL` IS NULL) OR (`ITauxL` = ?)) AND ((? = 1 AND `ITau"& _ 
                "xD` IS NULL) OR (`ITauxD` = ?)) AND ((? = 1 AND `IDureeRest` IS NULL) OR (`IDure"& _ 
                "eRest` = ?)) AND ((? = 1 AND `IAnnDDeb` IS NULL) OR (`IAnnDDeb` = ?)) AND ((? = "& _ 
                "1 AND `IValNetFisc` IS NULL) OR (`IValNetFisc` = ?)) AND ((? = 1 AND `IMode` IS "& _ 
                "NULL) OR (`IMode` = ?)) AND ((? = 1 AND `IOrdreImmoPrinc` IS NULL) OR (`IOrdreIm"& _ 
                "moPrinc` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ICpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IOrdre", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ILib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ILib2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ILib3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ILib4", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDtAcquis", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtAcquis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValAcquis", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValAcquis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ITypAmt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITypAmt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ICoeff", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICoeff", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDuree", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDuree", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDtCess", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtCess", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValCess", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValCess", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IPlusValLg", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValLg", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IPlusValCt", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValCt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValForf", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValForf", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDtForf", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtForf", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtCumTot", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumTot", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtCumLin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumLin", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtExTot", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExTot", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtExLin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExLin", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtExMin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMin", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAmtExMax", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMax", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ITva", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITva", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValResid", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValResid", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDureeResid", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeResid", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValVenale", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValVenale", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValLeasing", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValLeasing", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDerogatoire", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDerogatoire", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IPassCpta", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPassCpta", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INCompo", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INCompo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ITauxL", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ITauxD", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDureeRest", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeRest", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IAnnDDeb", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAnnDDeb", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IValNetFisc", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValNetFisc", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IMode", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IMode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IOrdreImmoPrinc", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdreImmoPrinc", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ICpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IOrdre", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ILib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ILib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ILib2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ILib2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ILib3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ILib3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ILib4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ILib4", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ILib4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDtAcquis", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtAcquis", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDtAcquis", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtAcquis", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValAcquis", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValAcquis", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValAcquis", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValAcquis", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ITypAmt", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITypAmt", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ITypAmt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITypAmt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ICoeff", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICoeff", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ICoeff", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICoeff", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDuree", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDuree", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDuree", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDuree", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDtCess", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtCess", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDtCess", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtCess", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValCess", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValCess", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValCess", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValCess", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IPlusValLg", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValLg", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IPlusValLg", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValLg", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IPlusValCt", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValCt", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IPlusValCt", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPlusValCt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValForf", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValForf", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValForf", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValForf", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDtForf", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtForf", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDtForf", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDtForf", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtCumTot", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumTot", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtCumTot", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumTot", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtCumLin", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumLin", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtCumLin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtCumLin", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtExTot", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExTot", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtExTot", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExTot", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtExLin", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExLin", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtExLin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExLin", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtExMin", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMin", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtExMin", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMin", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAmtExMax", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMax", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAmtExMax", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAmtExMax", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ITva", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITva", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ITva", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITva", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValResid", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValResid", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValResid", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValResid", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDureeResid", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeResid", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDureeResid", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeResid", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValVenale", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValVenale", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValVenale", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValVenale", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValLeasing", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValLeasing", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValLeasing", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValLeasing", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDerogatoire", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDerogatoire", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDerogatoire", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDerogatoire", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IPassCpta", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPassCpta", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IPassCpta", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IPassCpta", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_INCompo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INCompo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INCompo", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INCompo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ITauxL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ITauxL", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ITauxD", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxD", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ITauxD", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ITauxD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IDureeRest", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeRest", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IDureeRest", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDureeRest", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IAnnDDeb", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAnnDDeb", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IAnnDDeb", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IAnnDDeb", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IValNetFisc", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValNetFisc", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IValNetFisc", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IValNetFisc", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IMode", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IMode", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IMode", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IMode", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IOrdreImmoPrinc", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdreImmoPrinc", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IOrdreImmoPrinc", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdreImmoPrinc", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        IDossier, ICpt, IActi, IOrdre, ILib, ILib2, ILib3, ILib4, IDtAcquis"& _ 
                ", IValAcquis, ITypAmt, ICoeff, IDuree, IDtCess, IValCess, IPlusValLg, IPlusValCt"& _ 
                ", IValForf, IDtForf, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         IAmtCumTot, IAmtCumLin, IAmtExTo"& _ 
                "t, IAmtExLin, IAmtExMin, IAmtExMax, ITva, IValResid, IDureeResid, IValVenale, IV"& _ 
                "alLeasing, IDerogatoire, IPassCpta, INCompo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ITauxL, "& _ 
                "ITauxD, IDureeRest, IAnnDDeb, IValNetFisc, IMode, IOrdreImmoPrinc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         "& _ 
                "   Immobilisations"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM Immobilisations"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (IDossier = ?) AND (ICpt = ?) AND (IAct"& _ 
                "i = ?) AND (IOrdre = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ICpt", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IActi", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IOrdre", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT IActi, IAmtCumLin, IAmtCumTot, IAmtExLin, IAmtExMax, IAmtExMin, IAmtExTot,"& _ 
                " IAnnDDeb, ICoeff, ICpt, IDerogatoire, IDossier, IDtAcquis, IDtCess, IDtForf, ID"& _ 
                "uree, IDureeResid, IDureeRest, ILib, ILib2, ILib3, ILib4, IMode, INCompo, IOrdre"& _ 
                ", IOrdreImmoPrinc, IPassCpta, IPlusValCt, IPlusValLg, ITauxD, ITauxL, ITva, ITyp"& _ 
                "Amt, IValAcquis, IValCess, IValForf, IValLeasing, IValNetFisc, IValResid, IValVe"& _ 
                "nale FROM Immobilisations WHERE (IDossier = ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT IActi, IAmtCumLin, IAmtCumTot, IAmtExLin, IAmtExMax, IAmtExMin, IAmtExTot,"& _ 
                " IAnnDDeb, ICoeff, ICpt, IDerogatoire, IDossier, IDtAcquis, IDtCess, IDtForf, ID"& _ 
                "uree, IDureeResid, IDureeRest, ILib, ILib2, ILib3, ILib4, IMode, INCompo, IOrdre"& _ 
                ", IOrdreImmoPrinc, IPassCpta, IPlusValCt, IPlusValLg, ITauxD, ITauxL, ITva, ITyp"& _ 
                "Amt, IValAcquis, IValCess, IValForf, IValLeasing, IValNetFisc, IValResid, IValVe"& _ 
                "nale FROM Immobilisations WHERE (IDossier = ?) AND (ICpt = ?) AND (IActi = ?) AN"& _ 
                "D (IOrdre = ?)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ICpt", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IActi", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IOrdre", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IOrdre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(4) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT        MAX(IDtForf) AS MAXIDtForf"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Immobilisations"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "       (IDossier = ?)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(5) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT        MAX(IOrdre) AS MAXIOrdre"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Immobilisations"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   "& _ 
                "     (IDossier = ?) AND (ICpt = ?) AND (IActi = ?)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ICpt", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ICpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IActi", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImmobilisationsDataSet.ImmobilisationsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImmobilisationsDataSet.ImmobilisationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImmobilisationsDataSet.ImmobilisationsDataTable = New ImmobilisationsDataSet.ImmobilisationsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByIDossier(ByVal dataTable As ImmobilisationsDataSet.ImmobilisationsDataTable, ByVal IDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (IDossier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDossier")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByIDossier(ByVal IDossier As String) As ImmobilisationsDataSet.ImmobilisationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (IDossier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDossier")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDossier,String)
            End If
            Dim dataTable As ImmobilisationsDataSet.ImmobilisationsDataTable = New ImmobilisationsDataSet.ImmobilisationsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByIDossier_ICpt_IActi_IOrdre(ByVal dataTable As ImmobilisationsDataSet.ImmobilisationsDataTable, ByVal IDossier As String, ByVal ICpt As String, ByVal IActi As String, ByVal IOrdre As Short) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (IDossier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDossier")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDossier,String)
            End If
            If (ICpt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICpt")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ICpt,String)
            End If
            If (IActi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IActi")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IActi,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(IOrdre,Short)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByIDossier_ICpt_IActi_IOrdre(ByVal IDossier As String, ByVal ICpt As String, ByVal IActi As String, ByVal IOrdre As Short) As ImmobilisationsDataSet.ImmobilisationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (IDossier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDossier")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDossier,String)
            End If
            If (ICpt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICpt")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ICpt,String)
            End If
            If (IActi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IActi")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IActi,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(IOrdre,Short)
            Dim dataTable As ImmobilisationsDataSet.ImmobilisationsDataTable = New ImmobilisationsDataSet.ImmobilisationsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ImmobilisationsDataSet.ImmobilisationsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ImmobilisationsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Immobilisations")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_IDossier As String,  _
                    ByVal Original_ICpt As String,  _
                    ByVal Original_IActi As String,  _
                    ByVal Original_IOrdre As Global.System.Nullable(Of Short),  _
                    ByVal Original_ILib As String,  _
                    ByVal Original_ILib2 As String,  _
                    ByVal Original_ILib3 As String,  _
                    ByVal Original_ILib4 As String,  _
                    ByVal Original_IDtAcquis As Global.System.Nullable(Of Date),  _
                    ByVal Original_IValAcquis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITypAmt As String,  _
                    ByVal Original_ICoeff As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDuree As Global.System.Nullable(Of Short),  _
                    ByVal Original_IDtCess As Global.System.Nullable(Of Date),  _
                    ByVal Original_IValCess As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPlusValLg As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPlusValCt As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IValForf As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDtForf As Global.System.Nullable(Of Date),  _
                    ByVal Original_IAmtCumTot As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtCumLin As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExTot As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExLin As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExMin As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExMax As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IValResid As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDureeResid As Global.System.Nullable(Of Short),  _
                    ByVal Original_IValVenale As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IValLeasing As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDerogatoire As String,  _
                    ByVal Original_IPassCpta As String,  _
                    ByVal Original_INCompo As Global.System.Nullable(Of Short),  _
                    ByVal Original_ITauxL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITauxD As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDureeRest As Global.System.Nullable(Of Short),  _
                    ByVal Original_IAnnDDeb As Global.System.Nullable(Of Short),  _
                    ByVal Original_IValNetFisc As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IMode As Global.System.Nullable(Of Byte),  _
                    ByVal Original_IOrdreImmoPrinc As Global.System.Nullable(Of Short)) As Integer
            If (Original_IDossier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDossier,String)
            End If
            If (Original_ICpt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ICpt,String)
            End If
            If (Original_IActi Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IActi,String)
            End If
            If (Original_IOrdre.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IOrdre.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_ILib Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ILib,String)
            End If
            If (Original_ILib2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ILib2,String)
            End If
            If (Original_ILib3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ILib3,String)
            End If
            If (Original_ILib4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ILib4,String)
            End If
            If (Original_IDtAcquis.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_IDtAcquis.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_IValAcquis.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_IValAcquis.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_ITypAmt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_ITypAmt,String)
            End If
            If (Original_ICoeff.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ICoeff.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_IDuree.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_IDuree.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_IDtCess.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_IDtCess.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_IValCess.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_IValCess.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_IPlusValLg.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_IPlusValLg.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_IPlusValCt.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_IPlusValCt.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_IValForf.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_IValForf.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_IDtForf.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_IDtForf.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtCumTot.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_IAmtCumTot.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtCumLin.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_IAmtCumLin.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtExTot.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_IAmtExTot.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtExLin.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_IAmtExLin.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtExMin.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_IAmtExMin.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtExMax.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_IAmtExMax.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_ITva.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_ITva.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_IValResid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_IValResid.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_IDureeResid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_IDureeResid.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_IValVenale.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(Original_IValVenale.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_IValLeasing.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_IValLeasing.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_IDerogatoire Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_IDerogatoire,String)
            End If
            If (Original_IPassCpta Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_IPassCpta,String)
            End If
            If (Original_INCompo.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_INCompo.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_ITauxL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_ITauxL.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_ITauxD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_ITauxD.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_IDureeRest.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_IDureeRest.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_IAnnDDeb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(Original_IAnnDDeb.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_IValNetFisc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(Original_IValNetFisc.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_IMode.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(Original_IMode.Value,Byte)
            Else
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_IOrdreImmoPrinc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(Original_IOrdreImmoPrinc.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal IDossier As String,  _
                    ByVal ICpt As String,  _
                    ByVal IActi As String,  _
                    ByVal IOrdre As Global.System.Nullable(Of Short),  _
                    ByVal ILib As String,  _
                    ByVal ILib2 As String,  _
                    ByVal ILib3 As String,  _
                    ByVal ILib4 As String,  _
                    ByVal IDtAcquis As Global.System.Nullable(Of Date),  _
                    ByVal IValAcquis As Global.System.Nullable(Of Decimal),  _
                    ByVal ITypAmt As String,  _
                    ByVal ICoeff As Global.System.Nullable(Of Decimal),  _
                    ByVal IDuree As Global.System.Nullable(Of Short),  _
                    ByVal IDtCess As Global.System.Nullable(Of Date),  _
                    ByVal IValCess As Global.System.Nullable(Of Decimal),  _
                    ByVal IPlusValLg As Global.System.Nullable(Of Decimal),  _
                    ByVal IPlusValCt As Global.System.Nullable(Of Decimal),  _
                    ByVal IValForf As Global.System.Nullable(Of Decimal),  _
                    ByVal IDtForf As Global.System.Nullable(Of Date),  _
                    ByVal IAmtCumTot As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtCumLin As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExTot As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExLin As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExMin As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExMax As Global.System.Nullable(Of Decimal),  _
                    ByVal ITva As Global.System.Nullable(Of Decimal),  _
                    ByVal IValResid As Global.System.Nullable(Of Decimal),  _
                    ByVal IDureeResid As Global.System.Nullable(Of Short),  _
                    ByVal IValVenale As Global.System.Nullable(Of Decimal),  _
                    ByVal IValLeasing As Global.System.Nullable(Of Decimal),  _
                    ByVal IDerogatoire As String,  _
                    ByVal IPassCpta As String,  _
                    ByVal INCompo As Global.System.Nullable(Of Short),  _
                    ByVal ITauxL As Global.System.Nullable(Of Decimal),  _
                    ByVal ITauxD As Global.System.Nullable(Of Decimal),  _
                    ByVal IDureeRest As Global.System.Nullable(Of Short),  _
                    ByVal IAnnDDeb As Global.System.Nullable(Of Short),  _
                    ByVal IValNetFisc As Global.System.Nullable(Of Decimal),  _
                    ByVal IMode As Global.System.Nullable(Of Byte),  _
                    ByVal IOrdreImmoPrinc As Global.System.Nullable(Of Short)) As Integer
            If (IDossier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDossier,String)
            End If
            If (ICpt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ICpt,String)
            End If
            If (IActi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IActi,String)
            End If
            If (IOrdre.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IOrdre.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ILib Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ILib,String)
            End If
            If (ILib2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ILib2,String)
            End If
            If (ILib3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ILib3,String)
            End If
            If (ILib4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ILib4,String)
            End If
            If (IDtAcquis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IDtAcquis.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IValAcquis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IValAcquis.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ITypAmt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ITypAmt,String)
            End If
            If (ICoeff.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ICoeff.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (IDuree.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(IDuree.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IDtCess.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(IDtCess.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (IValCess.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(IValCess.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (IPlusValLg.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(IPlusValLg.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (IPlusValCt.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(IPlusValCt.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (IValForf.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(IValForf.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (IDtForf.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(IDtForf.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (IAmtCumTot.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(IAmtCumTot.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (IAmtCumLin.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(IAmtCumLin.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (IAmtExTot.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(IAmtExTot.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (IAmtExLin.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(IAmtExLin.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (IAmtExMin.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(IAmtExMin.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (IAmtExMax.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(IAmtExMax.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (ITva.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(ITva.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (IValResid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(IValResid.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (IDureeResid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(IDureeResid.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (IValVenale.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(IValVenale.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (IValLeasing.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(IValLeasing.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (IDerogatoire Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(IDerogatoire,String)
            End If
            If (IPassCpta Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(IPassCpta,String)
            End If
            If (INCompo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(INCompo.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (ITauxL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(ITauxL.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ITauxD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(ITauxD.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (IDureeRest.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(IDureeRest.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (IAnnDDeb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(IAnnDDeb.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (IValNetFisc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(IValNetFisc.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (IMode.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(IMode.Value,Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (IOrdreImmoPrinc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(IOrdreImmoPrinc.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IDossier As String,  _
                    ByVal ICpt As String,  _
                    ByVal IActi As String,  _
                    ByVal IOrdre As Global.System.Nullable(Of Short),  _
                    ByVal ILib As String,  _
                    ByVal ILib2 As String,  _
                    ByVal ILib3 As String,  _
                    ByVal ILib4 As String,  _
                    ByVal IDtAcquis As Global.System.Nullable(Of Date),  _
                    ByVal IValAcquis As Global.System.Nullable(Of Decimal),  _
                    ByVal ITypAmt As String,  _
                    ByVal ICoeff As Global.System.Nullable(Of Decimal),  _
                    ByVal IDuree As Global.System.Nullable(Of Short),  _
                    ByVal IDtCess As Global.System.Nullable(Of Date),  _
                    ByVal IValCess As Global.System.Nullable(Of Decimal),  _
                    ByVal IPlusValLg As Global.System.Nullable(Of Decimal),  _
                    ByVal IPlusValCt As Global.System.Nullable(Of Decimal),  _
                    ByVal IValForf As Global.System.Nullable(Of Decimal),  _
                    ByVal IDtForf As Global.System.Nullable(Of Date),  _
                    ByVal IAmtCumTot As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtCumLin As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExTot As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExLin As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExMin As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExMax As Global.System.Nullable(Of Decimal),  _
                    ByVal ITva As Global.System.Nullable(Of Decimal),  _
                    ByVal IValResid As Global.System.Nullable(Of Decimal),  _
                    ByVal IDureeResid As Global.System.Nullable(Of Short),  _
                    ByVal IValVenale As Global.System.Nullable(Of Decimal),  _
                    ByVal IValLeasing As Global.System.Nullable(Of Decimal),  _
                    ByVal IDerogatoire As String,  _
                    ByVal IPassCpta As String,  _
                    ByVal INCompo As Global.System.Nullable(Of Short),  _
                    ByVal ITauxL As Global.System.Nullable(Of Decimal),  _
                    ByVal ITauxD As Global.System.Nullable(Of Decimal),  _
                    ByVal IDureeRest As Global.System.Nullable(Of Short),  _
                    ByVal IAnnDDeb As Global.System.Nullable(Of Short),  _
                    ByVal IValNetFisc As Global.System.Nullable(Of Decimal),  _
                    ByVal IMode As Global.System.Nullable(Of Byte),  _
                    ByVal IOrdreImmoPrinc As Global.System.Nullable(Of Short),  _
                    ByVal Original_IDossier As String,  _
                    ByVal Original_ICpt As String,  _
                    ByVal Original_IActi As String,  _
                    ByVal Original_IOrdre As Global.System.Nullable(Of Short),  _
                    ByVal Original_ILib As String,  _
                    ByVal Original_ILib2 As String,  _
                    ByVal Original_ILib3 As String,  _
                    ByVal Original_ILib4 As String,  _
                    ByVal Original_IDtAcquis As Global.System.Nullable(Of Date),  _
                    ByVal Original_IValAcquis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITypAmt As String,  _
                    ByVal Original_ICoeff As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDuree As Global.System.Nullable(Of Short),  _
                    ByVal Original_IDtCess As Global.System.Nullable(Of Date),  _
                    ByVal Original_IValCess As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPlusValLg As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPlusValCt As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IValForf As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDtForf As Global.System.Nullable(Of Date),  _
                    ByVal Original_IAmtCumTot As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtCumLin As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExTot As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExLin As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExMin As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExMax As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IValResid As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDureeResid As Global.System.Nullable(Of Short),  _
                    ByVal Original_IValVenale As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IValLeasing As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDerogatoire As String,  _
                    ByVal Original_IPassCpta As String,  _
                    ByVal Original_INCompo As Global.System.Nullable(Of Short),  _
                    ByVal Original_ITauxL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITauxD As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDureeRest As Global.System.Nullable(Of Short),  _
                    ByVal Original_IAnnDDeb As Global.System.Nullable(Of Short),  _
                    ByVal Original_IValNetFisc As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IMode As Global.System.Nullable(Of Byte),  _
                    ByVal Original_IOrdreImmoPrinc As Global.System.Nullable(Of Short)) As Integer
            If (IDossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDossier,String)
            End If
            If (ICpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ICpt,String)
            End If
            If (IActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IActi,String)
            End If
            If (IOrdre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IOrdre.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ILib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ILib,String)
            End If
            If (ILib2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ILib2,String)
            End If
            If (ILib3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ILib3,String)
            End If
            If (ILib4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ILib4,String)
            End If
            If (IDtAcquis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(IDtAcquis.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IValAcquis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IValAcquis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ITypAmt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ITypAmt,String)
            End If
            If (ICoeff.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ICoeff.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (IDuree.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(IDuree.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IDtCess.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(IDtCess.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (IValCess.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(IValCess.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (IPlusValLg.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(IPlusValLg.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (IPlusValCt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(IPlusValCt.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (IValForf.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(IValForf.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (IDtForf.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(IDtForf.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (IAmtCumTot.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(IAmtCumTot.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (IAmtCumLin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(IAmtCumLin.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (IAmtExTot.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(IAmtExTot.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (IAmtExLin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(IAmtExLin.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (IAmtExMin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(IAmtExMin.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (IAmtExMax.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(IAmtExMax.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (ITva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(ITva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (IValResid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(IValResid.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (IDureeResid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(IDureeResid.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (IValVenale.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(IValVenale.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (IValLeasing.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(IValLeasing.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (IDerogatoire Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(IDerogatoire,String)
            End If
            If (IPassCpta Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(IPassCpta,String)
            End If
            If (INCompo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(INCompo.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (ITauxL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(ITauxL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ITauxD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(ITauxD.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (IDureeRest.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(IDureeRest.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (IAnnDDeb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(IAnnDDeb.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (IValNetFisc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(IValNetFisc.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (IMode.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(IMode.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (IOrdreImmoPrinc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(IOrdreImmoPrinc.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_IDossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_IDossier,String)
            End If
            If (Original_ICpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_ICpt,String)
            End If
            If (Original_IActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_IActi,String)
            End If
            If (Original_IOrdre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_IOrdre.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_ILib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_ILib,String)
            End If
            If (Original_ILib2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_ILib2,String)
            End If
            If (Original_ILib3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_ILib3,String)
            End If
            If (Original_ILib4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_ILib4,String)
            End If
            If (Original_IDtAcquis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_IDtAcquis.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_IValAcquis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_IValAcquis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_ITypAmt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_ITypAmt,String)
            End If
            If (Original_ICoeff.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_ICoeff.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_IDuree.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_IDuree.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_IDtCess.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_IDtCess.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_IValCess.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_IValCess.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_IPlusValLg.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_IPlusValLg.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_IPlusValCt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_IPlusValCt.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_IValForf.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_IValForf.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_IDtForf.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_IDtForf.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtCumTot.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_IAmtCumTot.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtCumLin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_IAmtCumLin.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtExTot.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_IAmtExTot.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtExLin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_IAmtExLin.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtExMin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_IAmtExMin.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (Original_IAmtExMax.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_IAmtExMax.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original_ITva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_ITva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original_IValResid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_IValResid.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (Original_IDureeResid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_IDureeResid.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (Original_IValVenale.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_IValVenale.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (Original_IValLeasing.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_IValLeasing.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            If (Original_IDerogatoire Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_IDerogatoire,String)
            End If
            If (Original_IPassCpta Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_IPassCpta,String)
            End If
            If (Original_INCompo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_INCompo.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = Global.System.DBNull.Value
            End If
            If (Original_ITauxL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_ITauxL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = Global.System.DBNull.Value
            End If
            If (Original_ITauxD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_ITauxD.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_IDureeRest.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(Original_IDureeRest.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = Global.System.DBNull.Value
            End If
            If (Original_IAnnDDeb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_IAnnDDeb.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = Global.System.DBNull.Value
            End If
            If (Original_IValNetFisc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_IValNetFisc.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            End If
            If (Original_IMode.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_IMode.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            If (Original_IOrdreImmoPrinc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_IOrdreImmoPrinc.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ILib As String,  _
                    ByVal ILib2 As String,  _
                    ByVal ILib3 As String,  _
                    ByVal ILib4 As String,  _
                    ByVal IDtAcquis As Global.System.Nullable(Of Date),  _
                    ByVal IValAcquis As Global.System.Nullable(Of Decimal),  _
                    ByVal ITypAmt As String,  _
                    ByVal ICoeff As Global.System.Nullable(Of Decimal),  _
                    ByVal IDuree As Global.System.Nullable(Of Short),  _
                    ByVal IDtCess As Global.System.Nullable(Of Date),  _
                    ByVal IValCess As Global.System.Nullable(Of Decimal),  _
                    ByVal IPlusValLg As Global.System.Nullable(Of Decimal),  _
                    ByVal IPlusValCt As Global.System.Nullable(Of Decimal),  _
                    ByVal IValForf As Global.System.Nullable(Of Decimal),  _
                    ByVal IDtForf As Global.System.Nullable(Of Date),  _
                    ByVal IAmtCumTot As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtCumLin As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExTot As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExLin As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExMin As Global.System.Nullable(Of Decimal),  _
                    ByVal IAmtExMax As Global.System.Nullable(Of Decimal),  _
                    ByVal ITva As Global.System.Nullable(Of Decimal),  _
                    ByVal IValResid As Global.System.Nullable(Of Decimal),  _
                    ByVal IDureeResid As Global.System.Nullable(Of Short),  _
                    ByVal IValVenale As Global.System.Nullable(Of Decimal),  _
                    ByVal IValLeasing As Global.System.Nullable(Of Decimal),  _
                    ByVal IDerogatoire As String,  _
                    ByVal IPassCpta As String,  _
                    ByVal INCompo As Global.System.Nullable(Of Short),  _
                    ByVal ITauxL As Global.System.Nullable(Of Decimal),  _
                    ByVal ITauxD As Global.System.Nullable(Of Decimal),  _
                    ByVal IDureeRest As Global.System.Nullable(Of Short),  _
                    ByVal IAnnDDeb As Global.System.Nullable(Of Short),  _
                    ByVal IValNetFisc As Global.System.Nullable(Of Decimal),  _
                    ByVal IMode As Global.System.Nullable(Of Byte),  _
                    ByVal IOrdreImmoPrinc As Global.System.Nullable(Of Short),  _
                    ByVal Original_IDossier As String,  _
                    ByVal Original_ICpt As String,  _
                    ByVal Original_IActi As String,  _
                    ByVal Original_IOrdre As Global.System.Nullable(Of Short),  _
                    ByVal Original_ILib As String,  _
                    ByVal Original_ILib2 As String,  _
                    ByVal Original_ILib3 As String,  _
                    ByVal Original_ILib4 As String,  _
                    ByVal Original_IDtAcquis As Global.System.Nullable(Of Date),  _
                    ByVal Original_IValAcquis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITypAmt As String,  _
                    ByVal Original_ICoeff As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDuree As Global.System.Nullable(Of Short),  _
                    ByVal Original_IDtCess As Global.System.Nullable(Of Date),  _
                    ByVal Original_IValCess As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPlusValLg As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPlusValCt As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IValForf As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDtForf As Global.System.Nullable(Of Date),  _
                    ByVal Original_IAmtCumTot As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtCumLin As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExTot As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExLin As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExMin As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IAmtExMax As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IValResid As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDureeResid As Global.System.Nullable(Of Short),  _
                    ByVal Original_IValVenale As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IValLeasing As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDerogatoire As String,  _
                    ByVal Original_IPassCpta As String,  _
                    ByVal Original_INCompo As Global.System.Nullable(Of Short),  _
                    ByVal Original_ITauxL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITauxD As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IDureeRest As Global.System.Nullable(Of Short),  _
                    ByVal Original_IAnnDDeb As Global.System.Nullable(Of Short),  _
                    ByVal Original_IValNetFisc As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IMode As Global.System.Nullable(Of Byte),  _
                    ByVal Original_IOrdreImmoPrinc As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_IDossier, Original_ICpt, Original_IActi, Original_IOrdre, ILib, ILib2, ILib3, ILib4, IDtAcquis, IValAcquis, ITypAmt, ICoeff, IDuree, IDtCess, IValCess, IPlusValLg, IPlusValCt, IValForf, IDtForf, IAmtCumTot, IAmtCumLin, IAmtExTot, IAmtExLin, IAmtExMin, IAmtExMax, ITva, IValResid, IDureeResid, IValVenale, IValLeasing, IDerogatoire, IPassCpta, INCompo, ITauxL, ITauxD, IDureeRest, IAnnDDeb, IValNetFisc, IMode, IOrdreImmoPrinc, Original_IDossier, Original_ICpt, Original_IActi, Original_IOrdre, Original_ILib, Original_ILib2, Original_ILib3, Original_ILib4, Original_IDtAcquis, Original_IValAcquis, Original_ITypAmt, Original_ICoeff, Original_IDuree, Original_IDtCess, Original_IValCess, Original_IPlusValLg, Original_IPlusValCt, Original_IValForf, Original_IDtForf, Original_IAmtCumTot, Original_IAmtCumLin, Original_IAmtExTot, Original_IAmtExLin, Original_IAmtExMin, Original_IAmtExMax, Original_ITva, Original_IValResid, Original_IDureeResid, Original_IValVenale, Original_IValLeasing, Original_IDerogatoire, Original_IPassCpta, Original_INCompo, Original_ITauxL, Original_ITauxD, Original_IDureeRest, Original_IAnnDDeb, Original_IValNetFisc, Original_IMode, Original_IOrdreImmoPrinc)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function DeleteByIDossier_ICpt_IActi_IOrdre(ByVal IDossier As String, ByVal ICpt As String, ByVal IActi As String, ByVal IOrdre As Global.System.Nullable(Of Short)) As Integer
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(1)
            If (IDossier Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IDossier,String)
            End If
            If (ICpt Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(ICpt,String)
            End If
            If (IActi Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IActi,String)
            End If
            If (IOrdre.HasValue = true) Then
                command.Parameters(3).Value = CType(IOrdre.Value,Short)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function MaxIDtForfByIDossier(ByVal IDossier As String) As Global.System.Nullable(Of Date)
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(4)
            If (IDossier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDossier")
            Else
                command.Parameters(0).Value = CType(IDossier,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Date)
            Else
                Return New Global.System.Nullable(Of Date)(CType(returnValue,Date))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function MAXIOrdre(ByVal IDossier As String, ByVal ICpt As String, ByVal IActi As String) As Global.System.Nullable(Of Short)
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(5)
            If (IDossier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDossier")
            Else
                command.Parameters(0).Value = CType(IDossier,String)
            End If
            If (ICpt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICpt")
            Else
                command.Parameters(1).Value = CType(ICpt,String)
            End If
            If (IActi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IActi")
            Else
                command.Parameters(2).Value = CType(IActi,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Short)
            Else
                Return New Global.System.Nullable(Of Short)(CType(returnValue,Short))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DossiersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Dossiers"
            tableMapping.ColumnMappings.Add("DDossier", "DDossier")
            tableMapping.ColumnMappings.Add("DExpl", "DExpl")
            tableMapping.ColumnMappings.Add("DDtDebEx", "DDtDebEx")
            tableMapping.ColumnMappings.Add("DDtFinEx", "DDtFinEx")
            tableMapping.ColumnMappings.Add("DDtArrete", "DDtArrete")
            tableMapping.ColumnMappings.Add("DBqCpt", "DBqCpt")
            tableMapping.ColumnMappings.Add("DBqVal", "DBqVal")
            tableMapping.ColumnMappings.Add("DBqFolio1", "DBqFolio1")
            tableMapping.ColumnMappings.Add("DCptOuvert", "DCptOuvert")
            tableMapping.ColumnMappings.Add("DComptesReportsDetaillesCloture", "DComptesReportsDetaillesCloture")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Dossiers` WHERE ((`DDossier` = ?) AND ((? = 1 AND `DExpl` IS NULL) O"& _ 
                "R (`DExpl` = ?)) AND ((? = 1 AND `DDtDebEx` IS NULL) OR (`DDtDebEx` = ?)) AND (("& _ 
                "? = 1 AND `DDtFinEx` IS NULL) OR (`DDtFinEx` = ?)) AND ((? = 1 AND `DDtArrete` I"& _ 
                "S NULL) OR (`DDtArrete` = ?)) AND ((? = 1 AND `DBqCpt` IS NULL) OR (`DBqCpt` = ?"& _ 
                ")) AND ((? = 1 AND `DBqVal` IS NULL) OR (`DBqVal` = ?)) AND ((? = 1 AND `DBqFoli"& _ 
                "o1` IS NULL) OR (`DBqFolio1` = ?)) AND ((? = 1 AND `DCptOuvert` IS NULL) OR (`DC"& _ 
                "ptOuvert` = ?)) AND ((? = 1 AND `DComptesReportsDetaillesCloture` IS NULL) OR (`"& _ 
                "DComptesReportsDetaillesCloture` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DExpl", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DExpl", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DExpl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DDtDebEx", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtDebEx", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DDtDebEx", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtDebEx", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DDtFinEx", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtFinEx", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DDtFinEx", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtFinEx", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DDtArrete", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtArrete", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DDtArrete", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtArrete", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DBqCpt", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqCpt", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DBqCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DBqVal", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqVal", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DBqVal", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqVal", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DBqFolio1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqFolio1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DBqFolio1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqFolio1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DCptOuvert", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DCptOuvert", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DCptOuvert", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DCptOuvert", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DComptesReportsDetaillesCloture", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DComptesReportsDetaillesCloture", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DComptesReportsDetaillesCloture", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DComptesReportsDetaillesCloture", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Dossiers` (`DDossier`, `DExpl`, `DDtDebEx`, `DDtFinEx`, `DDtArrete`,"& _ 
                " `DBqCpt`, `DBqVal`, `DBqFolio1`, `DCptOuvert`, `DComptesReportsDetaillesCloture"& _ 
                "`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DExpl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDtDebEx", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtDebEx", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDtFinEx", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtFinEx", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDtArrete", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtArrete", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBqCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBqVal", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqVal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBqFolio1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqFolio1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DCptOuvert", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DCptOuvert", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DComptesReportsDetaillesCloture", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DComptesReportsDetaillesCloture", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Dossiers` SET `DDossier` = ?, `DExpl` = ?, `DDtDebEx` = ?, `DDtFinEx` = ?"& _ 
                ", `DDtArrete` = ?, `DBqCpt` = ?, `DBqVal` = ?, `DBqFolio1` = ?, `DCptOuvert` = ?"& _ 
                ", `DComptesReportsDetaillesCloture` = ? WHERE ((`DDossier` = ?) AND ((? = 1 AND "& _ 
                "`DExpl` IS NULL) OR (`DExpl` = ?)) AND ((? = 1 AND `DDtDebEx` IS NULL) OR (`DDtD"& _ 
                "ebEx` = ?)) AND ((? = 1 AND `DDtFinEx` IS NULL) OR (`DDtFinEx` = ?)) AND ((? = 1"& _ 
                " AND `DDtArrete` IS NULL) OR (`DDtArrete` = ?)) AND ((? = 1 AND `DBqCpt` IS NULL"& _ 
                ") OR (`DBqCpt` = ?)) AND ((? = 1 AND `DBqVal` IS NULL) OR (`DBqVal` = ?)) AND (("& _ 
                "? = 1 AND `DBqFolio1` IS NULL) OR (`DBqFolio1` = ?)) AND ((? = 1 AND `DCptOuvert"& _ 
                "` IS NULL) OR (`DCptOuvert` = ?)) AND ((? = 1 AND `DComptesReportsDetaillesClotu"& _ 
                "re` IS NULL) OR (`DComptesReportsDetaillesCloture` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DExpl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDtDebEx", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtDebEx", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDtFinEx", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtFinEx", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDtArrete", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtArrete", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBqCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBqVal", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqVal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBqFolio1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqFolio1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DCptOuvert", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DCptOuvert", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DComptesReportsDetaillesCloture", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DComptesReportsDetaillesCloture", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DExpl", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DExpl", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DExpl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DDtDebEx", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtDebEx", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DDtDebEx", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtDebEx", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DDtFinEx", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtFinEx", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DDtFinEx", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtFinEx", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DDtArrete", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtArrete", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DDtArrete", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDtArrete", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DBqCpt", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqCpt", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DBqCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DBqVal", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqVal", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DBqVal", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqVal", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DBqFolio1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqFolio1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DBqFolio1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBqFolio1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DCptOuvert", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DCptOuvert", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DCptOuvert", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DCptOuvert", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DComptesReportsDetaillesCloture", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DComptesReportsDetaillesCloture", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DComptesReportsDetaillesCloture", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DComptesReportsDetaillesCloture", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DDossier, DExpl, DDtDebEx, DDtFinEx, DDtArrete, DBqCpt, DBqVal, DBqFolio1,"& _ 
                " DCptOuvert, DComptesReportsDetaillesCloture FROM Dossiers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT DDossier, DExpl, DDtDebEx, DDtFinEx, DDtArrete, DBqCpt, DBqVal, DBqFolio1,"& _ 
                " DCptOuvert, DComptesReportsDetaillesCloture FROM Dossiers"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (DDossier = ?)"& _ 
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImmobilisationsDataSet.DossiersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImmobilisationsDataSet.DossiersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImmobilisationsDataSet.DossiersDataTable = New ImmobilisationsDataSet.DossiersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDDossier(ByVal dataTable As ImmobilisationsDataSet.DossiersDataTable, ByVal DDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDDossier(ByVal DDossier As String) As ImmobilisationsDataSet.DossiersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DDossier,String)
            End If
            Dim dataTable As ImmobilisationsDataSet.DossiersDataTable = New ImmobilisationsDataSet.DossiersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ImmobilisationsDataSet.DossiersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ImmobilisationsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Dossiers")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DDossier As String, ByVal Original_DExpl As String, ByVal Original_DDtDebEx As Global.System.Nullable(Of Date), ByVal Original_DDtFinEx As Global.System.Nullable(Of Date), ByVal Original_DDtArrete As Global.System.Nullable(Of Date), ByVal Original_DBqCpt As String, ByVal Original_DBqVal As Global.System.Nullable(Of Decimal), ByVal Original_DBqFolio1 As Global.System.Nullable(Of Short), ByVal Original_DCptOuvert As Global.System.Nullable(Of Integer), ByVal Original_DComptesReportsDetaillesCloture As String) As Integer
            If (Original_DDossier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DDossier,String)
            End If
            If (Original_DExpl Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DExpl,String)
            End If
            If (Original_DDtDebEx.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DDtDebEx.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_DDtFinEx.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DDtFinEx.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_DDtArrete.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DDtArrete.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_DBqCpt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_DBqCpt,String)
            End If
            If (Original_DBqVal.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_DBqVal.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_DBqFolio1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_DBqFolio1.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_DCptOuvert.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_DCptOuvert.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_DComptesReportsDetaillesCloture Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_DComptesReportsDetaillesCloture,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DDossier As String, ByVal DExpl As String, ByVal DDtDebEx As Global.System.Nullable(Of Date), ByVal DDtFinEx As Global.System.Nullable(Of Date), ByVal DDtArrete As Global.System.Nullable(Of Date), ByVal DBqCpt As String, ByVal DBqVal As Global.System.Nullable(Of Decimal), ByVal DBqFolio1 As Global.System.Nullable(Of Short), ByVal DCptOuvert As Global.System.Nullable(Of Integer), ByVal DComptesReportsDetaillesCloture As String) As Integer
            If (DDossier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DDossier,String)
            End If
            If (DExpl Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DExpl,String)
            End If
            If (DDtDebEx.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DDtDebEx.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DDtFinEx.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DDtFinEx.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DDtArrete.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DDtArrete.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DBqCpt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DBqCpt,String)
            End If
            If (DBqVal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DBqVal.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DBqFolio1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DBqFolio1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DCptOuvert.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DCptOuvert.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (DComptesReportsDetaillesCloture Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(DComptesReportsDetaillesCloture,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DDossier As String,  _
                    ByVal DExpl As String,  _
                    ByVal DDtDebEx As Global.System.Nullable(Of Date),  _
                    ByVal DDtFinEx As Global.System.Nullable(Of Date),  _
                    ByVal DDtArrete As Global.System.Nullable(Of Date),  _
                    ByVal DBqCpt As String,  _
                    ByVal DBqVal As Global.System.Nullable(Of Decimal),  _
                    ByVal DBqFolio1 As Global.System.Nullable(Of Short),  _
                    ByVal DCptOuvert As Global.System.Nullable(Of Integer),  _
                    ByVal DComptesReportsDetaillesCloture As String,  _
                    ByVal Original_DDossier As String,  _
                    ByVal Original_DExpl As String,  _
                    ByVal Original_DDtDebEx As Global.System.Nullable(Of Date),  _
                    ByVal Original_DDtFinEx As Global.System.Nullable(Of Date),  _
                    ByVal Original_DDtArrete As Global.System.Nullable(Of Date),  _
                    ByVal Original_DBqCpt As String,  _
                    ByVal Original_DBqVal As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DBqFolio1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_DCptOuvert As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DComptesReportsDetaillesCloture As String) As Integer
            If (DDossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DDossier,String)
            End If
            If (DExpl Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DExpl,String)
            End If
            If (DDtDebEx.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DDtDebEx.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DDtFinEx.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DDtFinEx.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DDtArrete.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DDtArrete.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DBqCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DBqCpt,String)
            End If
            If (DBqVal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DBqVal.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DBqFolio1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DBqFolio1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DCptOuvert.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DCptOuvert.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (DComptesReportsDetaillesCloture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(DComptesReportsDetaillesCloture,String)
            End If
            If (Original_DDossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_DDossier,String)
            End If
            If (Original_DExpl Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_DExpl,String)
            End If
            If (Original_DDtDebEx.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DDtDebEx.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_DDtFinEx.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_DDtFinEx.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_DDtArrete.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DDtArrete.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_DBqCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_DBqCpt,String)
            End If
            If (Original_DBqVal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_DBqVal.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_DBqFolio1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_DBqFolio1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_DCptOuvert.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_DCptOuvert.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_DComptesReportsDetaillesCloture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_DComptesReportsDetaillesCloture,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DExpl As String,  _
                    ByVal DDtDebEx As Global.System.Nullable(Of Date),  _
                    ByVal DDtFinEx As Global.System.Nullable(Of Date),  _
                    ByVal DDtArrete As Global.System.Nullable(Of Date),  _
                    ByVal DBqCpt As String,  _
                    ByVal DBqVal As Global.System.Nullable(Of Decimal),  _
                    ByVal DBqFolio1 As Global.System.Nullable(Of Short),  _
                    ByVal DCptOuvert As Global.System.Nullable(Of Integer),  _
                    ByVal DComptesReportsDetaillesCloture As String,  _
                    ByVal Original_DDossier As String,  _
                    ByVal Original_DExpl As String,  _
                    ByVal Original_DDtDebEx As Global.System.Nullable(Of Date),  _
                    ByVal Original_DDtFinEx As Global.System.Nullable(Of Date),  _
                    ByVal Original_DDtArrete As Global.System.Nullable(Of Date),  _
                    ByVal Original_DBqCpt As String,  _
                    ByVal Original_DBqVal As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DBqFolio1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_DCptOuvert As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DComptesReportsDetaillesCloture As String) As Integer
            Return Me.Update(Original_DDossier, DExpl, DDtDebEx, DDtFinEx, DDtArrete, DBqCpt, DBqVal, DBqFolio1, DCptOuvert, DComptesReportsDetaillesCloture, Original_DDossier, Original_DExpl, Original_DDtDebEx, Original_DDtFinEx, Original_DDtArrete, Original_DBqCpt, Original_DBqVal, Original_DBqFolio1, Original_DCptOuvert, Original_DComptesReportsDetaillesCloture)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ComptesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Comptes"
            tableMapping.ColumnMappings.Add("CDossier", "CDossier")
            tableMapping.ColumnMappings.Add("CCpt", "CCpt")
            tableMapping.ColumnMappings.Add("CLib", "CLib")
            tableMapping.ColumnMappings.Add("CU1", "CU1")
            tableMapping.ColumnMappings.Add("CU2", "CU2")
            tableMapping.ColumnMappings.Add("CCptContre", "CCptContre")
            tableMapping.ColumnMappings.Add("C_DC", "C_DC")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Comptes` WHERE ((`CDossier` = ?) AND (`CCpt` = ?) AND ((? = 1 AND `C"& _ 
                "Lib` IS NULL) OR (`CLib` = ?)) AND ((? = 1 AND `CU1` IS NULL) OR (`CU1` = ?)) AN"& _ 
                "D ((? = 1 AND `CU2` IS NULL) OR (`CU2` = ?)) AND ((? = 1 AND `CCptContre` IS NUL"& _ 
                "L) OR (`CCptContre` = ?)) AND ((? = 1 AND `C_DC` IS NULL) OR (`C_DC` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CLib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CLib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CLib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CU1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CU1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CU2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CU2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CCptContre", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCptContre", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CCptContre", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCptContre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_C_DC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C_DC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_C_DC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C_DC", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Comptes` (`CDossier`, `CCpt`, `CLib`, `CU1`, `CU2`, `CCptContre`, `C"& _ 
                "_DC`) VALUES (?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CU1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CU2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CCptContre", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCptContre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("C_DC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C_DC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Comptes` SET `CDossier` = ?, `CCpt` = ?, `CLib` = ?, `CU1` = ?, `CU2` = ?"& _ 
                ", `CCptContre` = ?, `C_DC` = ? WHERE ((`CDossier` = ?) AND (`CCpt` = ?) AND ((? "& _ 
                "= 1 AND `CLib` IS NULL) OR (`CLib` = ?)) AND ((? = 1 AND `CU1` IS NULL) OR (`CU1"& _ 
                "` = ?)) AND ((? = 1 AND `CU2` IS NULL) OR (`CU2` = ?)) AND ((? = 1 AND `CCptCont"& _ 
                "re` IS NULL) OR (`CCptContre` = ?)) AND ((? = 1 AND `C_DC` IS NULL) OR (`C_DC` ="& _ 
                " ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CU1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CU2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CCptContre", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCptContre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("C_DC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C_DC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CLib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CLib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CLib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CU1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CU1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CU2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CU2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CCptContre", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCptContre", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CCptContre", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCptContre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_C_DC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C_DC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_C_DC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C_DC", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDossier, CCpt, CLib, CU1, CU2, CCptContre, C_DC FROM Comptes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CDossier, CCpt, CLib, CU1, CU2, CCptContre, C_DC FROM Comptes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (CDos"& _ 
                "sier = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImmobilisationsDataSet.ComptesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImmobilisationsDataSet.ComptesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImmobilisationsDataSet.ComptesDataTable = New ImmobilisationsDataSet.ComptesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCDossier(ByVal dataTable As ImmobilisationsDataSet.ComptesDataTable, ByVal CDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCDossier(ByVal CDossier As String) As ImmobilisationsDataSet.ComptesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            Dim dataTable As ImmobilisationsDataSet.ComptesDataTable = New ImmobilisationsDataSet.ComptesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ImmobilisationsDataSet.ComptesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ImmobilisationsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Comptes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CDossier As String, ByVal Original_CCpt As String, ByVal Original_CLib As String, ByVal Original_CU1 As String, ByVal Original_CU2 As String, ByVal Original_CCptContre As String, ByVal Original_C_DC As String) As Integer
            If (Original_CDossier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDossier,String)
            End If
            If (Original_CCpt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CCpt,String)
            End If
            If (Original_CLib Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CLib,String)
            End If
            If (Original_CU1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CU1,String)
            End If
            If (Original_CU2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CU2,String)
            End If
            If (Original_CCptContre Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CCptContre,String)
            End If
            If (Original_C_DC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_C_DC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CDossier As String, ByVal CCpt As String, ByVal CLib As String, ByVal CU1 As String, ByVal CU2 As String, ByVal CCptContre As String, ByVal C_DC As String) As Integer
            If (CDossier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            If (CCpt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CCpt,String)
            End If
            If (CLib Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CLib,String)
            End If
            If (CU1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CU1,String)
            End If
            If (CU2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CU2,String)
            End If
            If (CCptContre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CCptContre,String)
            End If
            If (C_DC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(C_DC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CDossier As String, ByVal CCpt As String, ByVal CLib As String, ByVal CU1 As String, ByVal CU2 As String, ByVal CCptContre As String, ByVal C_DC As String, ByVal Original_CDossier As String, ByVal Original_CCpt As String, ByVal Original_CLib As String, ByVal Original_CU1 As String, ByVal Original_CU2 As String, ByVal Original_CCptContre As String, ByVal Original_C_DC As String) As Integer
            If (CDossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            If (CCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CCpt,String)
            End If
            If (CLib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CLib,String)
            End If
            If (CU1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CU1,String)
            End If
            If (CU2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CU2,String)
            End If
            If (CCptContre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CCptContre,String)
            End If
            If (C_DC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(C_DC,String)
            End If
            If (Original_CDossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CDossier,String)
            End If
            If (Original_CCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CCpt,String)
            End If
            If (Original_CLib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CLib,String)
            End If
            If (Original_CU1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CU1,String)
            End If
            If (Original_CU2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CU2,String)
            End If
            If (Original_CCptContre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CCptContre,String)
            End If
            If (Original_C_DC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_C_DC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CLib As String, ByVal CU1 As String, ByVal CU2 As String, ByVal CCptContre As String, ByVal C_DC As String, ByVal Original_CDossier As String, ByVal Original_CCpt As String, ByVal Original_CLib As String, ByVal Original_CU1 As String, ByVal Original_CU2 As String, ByVal Original_CCptContre As String, ByVal Original_C_DC As String) As Integer
            Return Me.Update(Original_CDossier, Original_CCpt, CLib, CU1, CU2, CCptContre, C_DC, Original_CDossier, Original_CCpt, Original_CLib, Original_CU1, Original_CU2, Original_CCptContre, Original_C_DC)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SommeDeImmobilisationsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SommeDeImmobilisations"
            tableMapping.ColumnMappings.Add("ICpt", "ICpt")
            tableMapping.ColumnMappings.Add("SommeDeIValAcquis", "SommeDeIValAcquis")
            tableMapping.ColumnMappings.Add("SommeDeIAmtExTot", "SommeDeIAmtExTot")
            tableMapping.ColumnMappings.Add("SommeDeIAmtCumTot", "SommeDeIAmtCumTot")
            tableMapping.ColumnMappings.Add("SommeDeIValResid", "SommeDeIValResid")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ICpt, SUM(IValAcquis) AS SommeDeIValAcquis, SUM(IAmtExTot) AS Somme"& _ 
                "DeIAmtExTot, SUM(IAmtCumTot) AS SommeDeIAmtCumTot, SUM(IValResid) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             AS SommeDeIValResid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Immobilisations"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY ICpt"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ICpt"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ICpt, SUM(IValAcquis) AS SommeDeIValAcquis, SUM(IAmtExTot) AS Somme"& _ 
                "DeIAmtExTot, SUM(IAmtCumTot) AS SommeDeIAmtCumTot, SUM(IValResid) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             AS SommeDeIValResid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Immobilisations"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        "& _ 
                "(IDossier = ?)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY ICpt"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ICpt"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImmobilisationsDataSet.SommeDeImmobilisationsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImmobilisationsDataSet.SommeDeImmobilisationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImmobilisationsDataSet.SommeDeImmobilisationsDataTable = New ImmobilisationsDataSet.SommeDeImmobilisationsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByIDossier(ByVal dataTable As ImmobilisationsDataSet.SommeDeImmobilisationsDataTable, ByVal IDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (IDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByIDossier(ByVal IDossier As String) As ImmobilisationsDataSet.SommeDeImmobilisationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (IDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDossier,String)
            End If
            Dim dataTable As ImmobilisationsDataSet.SommeDeImmobilisationsDataTable = New ImmobilisationsDataSet.SommeDeImmobilisationsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ImmobilisationsImpressionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ImmobilisationsImpression"
            tableMapping.ColumnMappings.Add("Exploit", "Exploit")
            tableMapping.ColumnMappings.Add("DDossier", "DDossier")
            tableMapping.ColumnMappings.Add("DateExDeb", "DateExDeb")
            tableMapping.ColumnMappings.Add("DateFinEx", "DateFinEx")
            tableMapping.ColumnMappings.Add("Cpt", "Cpt")
            tableMapping.ColumnMappings.Add("Act", "Act")
            tableMapping.ColumnMappings.Add("Ordre", "Ordre")
            tableMapping.ColumnMappings.Add("Lib", "Lib")
            tableMapping.ColumnMappings.Add("DtAcquis", "DtAcquis")
            tableMapping.ColumnMappings.Add("ValAcquis", "ValAcquis")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("TauxL", "TauxL")
            tableMapping.ColumnMappings.Add("TauxD", "TauxD")
            tableMapping.ColumnMappings.Add("Coeff", "Coeff")
            tableMapping.ColumnMappings.Add("Duree", "Duree")
            tableMapping.ColumnMappings.Add("ValDebEx", "ValDebEx")
            tableMapping.ColumnMappings.Add("AmortEx", "AmortEx")
            tableMapping.ColumnMappings.Add("DtCession", "DtCession")
            tableMapping.ColumnMappings.Add("ValCession", "ValCession")
            tableMapping.ColumnMappings.Add("PlusValLg", "PlusValLg")
            tableMapping.ColumnMappings.Add("PlusValCt", "PlusValCt")
            tableMapping.ColumnMappings.Add("ValForf", "ValForf")
            tableMapping.ColumnMappings.Add("DtForf", "DtForf")
            tableMapping.ColumnMappings.Add("AmtCumTot", "AmtCumTot")
            tableMapping.ColumnMappings.Add("DureeResid", "DureeResid")
            tableMapping.ColumnMappings.Add("ValVenale", "ValVenale")
            tableMapping.ColumnMappings.Add("ValNetFisc", "ValNetFisc")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Dossiers.DExpl AS Exploit, Dossiers.DDossier, Dossiers.DDtDebEx AS "& _ 
                "DateExDeb, Dossiers.DDtFinEx AS DateFinEx, Immobilisations.ICpt AS Cpt, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                   Immobilisations.IActi AS Act, Immobilisations.IOrdre AS Ordre"& _ 
                ", Immobilisations.ILib AS Lib, Immobilisations.IDtAcquis AS DtAcquis, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 Immobilisations.IValAcquis AS ValAcquis, Immobilisations.ITypAm"& _ 
                "t AS Type, Immobilisations.ITauxL AS TauxL, Immobilisations.ITauxD AS TauxD, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                        Immobilisations.ICoeff AS Coeff, Immobilisations.IDuree "& _ 
                "AS Duree, Immobilisations.IValResid AS ValDebEx, Immobilisations.IAmtExTot AS Am"& _ 
                "ortEx, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Immobilisations.IDtCess AS DtCession, Immobili"& _ 
                "sations.IValCess AS ValCession, Immobilisations.IPlusValLg AS PlusValLg, Immobil"& _ 
                "isations.IPlusValCt AS PlusValCt, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Immobilisations.IVa"& _ 
                "lForf AS ValForf, Immobilisations.IDtForf AS DtForf, Immobilisations.IAmtCumTot "& _ 
                "AS AmtCumTot, Immobilisations.IDureeResid AS DureeResid, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    Immobilisations.IValVenale AS ValVenale, Immobilisations.IValNetFisc AS ValN"& _ 
                "etFisc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            (Dossiers INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Immobilis"& _ 
                "ations ON Dossiers.DDossier = Immobilisations.IDossier)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Dossiers.DExpl AS Exploit, Dossiers.DDossier, Dossiers.DDtDebEx AS "& _ 
                "DateExDeb, Dossiers.DDtFinEx AS DateFinEx, Immobilisations.ICpt AS Cpt, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                   Immobilisations.IActi AS Act, Immobilisations.IOrdre AS Ordre"& _ 
                ", Immobilisations.ILib AS Lib, Immobilisations.IDtAcquis AS DtAcquis, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 Immobilisations.IValAcquis AS ValAcquis, Immobilisations.ITypAm"& _ 
                "t AS Type, Immobilisations.ITauxL AS TauxL, Immobilisations.ITauxD AS TauxD, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                        Immobilisations.ICoeff AS Coeff, Immobilisations.IDuree "& _ 
                "AS Duree, Immobilisations.IValResid AS ValDebEx, Immobilisations.IAmtExTot AS Am"& _ 
                "ortEx, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Immobilisations.IDtCess AS DtCession, Immobili"& _ 
                "sations.IValCess AS ValCession, Immobilisations.IPlusValLg AS PlusValLg, Immobil"& _ 
                "isations.IPlusValCt AS PlusValCt, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Immobilisations.IVa"& _ 
                "lForf AS ValForf, Immobilisations.IDtForf AS DtForf, Immobilisations.IAmtCumTot "& _ 
                "AS AmtCumTot, Immobilisations.IDureeResid AS DureeResid, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    Immobilisations.IValVenale AS ValVenale, Immobilisations.IValNetFisc AS ValN"& _ 
                "etFisc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            (Dossiers INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Immobilis"& _ 
                "ations ON Dossiers.DDossier = Immobilisations.IDossier)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (IDossier = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImmobilisationsDataSet.ImmobilisationsImpressionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImmobilisationsDataSet.ImmobilisationsImpressionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImmobilisationsDataSet.ImmobilisationsImpressionDataTable = New ImmobilisationsDataSet.ImmobilisationsImpressionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByIDossier(ByVal dataTable As ImmobilisationsDataSet.ImmobilisationsImpressionDataTable, ByVal IDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (IDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByIDossier(ByVal IDossier As String) As ImmobilisationsDataSet.ImmobilisationsImpressionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (IDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDossier,String)
            End If
            Dim dataTable As ImmobilisationsDataSet.ImmobilisationsImpressionDataTable = New ImmobilisationsDataSet.ImmobilisationsImpressionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
