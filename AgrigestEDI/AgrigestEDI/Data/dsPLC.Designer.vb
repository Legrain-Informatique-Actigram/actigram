'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.4927
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsPLC"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPLC
    Inherits Global.System.Data.DataSet
    
    Private tableActivites As ActivitesDataTable
    
    Private tableComptes As ComptesDataTable
    
    Private tableDossiers As DossiersDataTable
    
    Private tableExploitations As ExploitationsDataTable
    
    Private tablePlanComptable As PlanComptableDataTable
    
    Private tableParametrage As ParametrageDataTable
    
    Private tablePlanType As PlanTypeDataTable
    
    Private tableRica As RicaDataTable
    
    Private tableModLignesPara As ModLignesParaDataTable
    
    Private tableModMouvementsPara As ModMouvementsParaDataTable
    
    Private tableModMouvements As ModMouvementsDataTable
    
    Private tableModLignes As ModLignesDataTable
    
    Private relationComptesPlanComptable As Global.System.Data.DataRelation
    
    Private relationDossiersComptes As Global.System.Data.DataRelation
    
    Private relationExploitationsDossiers As Global.System.Data.DataRelation
    
    Private relationDossiers_Activites As Global.System.Data.DataRelation
    
    Private relationActivitesPlanComptable As Global.System.Data.DataRelation
    
    Private relationPlanTypeComptes As Global.System.Data.DataRelation
    
    Private relationPlanType_Parametrage As Global.System.Data.DataRelation
    
    Private relationRica_Parametrage As Global.System.Data.DataRelation
    
    Private relationModLignesParaModMouvementsPara As Global.System.Data.DataRelation
    
    Private relationModLignesModMouvements As Global.System.Data.DataRelation
    
    Private relationExploitationsModLignes As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.ExcludeSchema) Then
                Me.InitExpressions
            End If
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Activites")) Is Nothing) Then
                MyBase.Tables.Add(New ActivitesDataTable(ds.Tables("Activites")))
            End If
            If (Not (ds.Tables("Comptes")) Is Nothing) Then
                MyBase.Tables.Add(New ComptesDataTable(ds.Tables("Comptes")))
            End If
            If (Not (ds.Tables("Dossiers")) Is Nothing) Then
                MyBase.Tables.Add(New DossiersDataTable(ds.Tables("Dossiers")))
            End If
            If (Not (ds.Tables("Exploitations")) Is Nothing) Then
                MyBase.Tables.Add(New ExploitationsDataTable(ds.Tables("Exploitations")))
            End If
            If (Not (ds.Tables("PlanComptable")) Is Nothing) Then
                MyBase.Tables.Add(New PlanComptableDataTable(ds.Tables("PlanComptable")))
            End If
            If (Not (ds.Tables("Parametrage")) Is Nothing) Then
                MyBase.Tables.Add(New ParametrageDataTable(ds.Tables("Parametrage")))
            End If
            If (Not (ds.Tables("PlanType")) Is Nothing) Then
                MyBase.Tables.Add(New PlanTypeDataTable(ds.Tables("PlanType")))
            End If
            If (Not (ds.Tables("Rica")) Is Nothing) Then
                MyBase.Tables.Add(New RicaDataTable(ds.Tables("Rica")))
            End If
            If (Not (ds.Tables("ModLignesPara")) Is Nothing) Then
                MyBase.Tables.Add(New ModLignesParaDataTable(ds.Tables("ModLignesPara")))
            End If
            If (Not (ds.Tables("ModMouvementsPara")) Is Nothing) Then
                MyBase.Tables.Add(New ModMouvementsParaDataTable(ds.Tables("ModMouvementsPara")))
            End If
            If (Not (ds.Tables("ModMouvements")) Is Nothing) Then
                MyBase.Tables.Add(New ModMouvementsDataTable(ds.Tables("ModMouvements")))
            End If
            If (Not (ds.Tables("ModLignes")) Is Nothing) Then
                MyBase.Tables.Add(New ModLignesDataTable(ds.Tables("ModLignes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Activites() As ActivitesDataTable
        Get
            Return Me.tableActivites
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Comptes() As ComptesDataTable
        Get
            Return Me.tableComptes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dossiers() As DossiersDataTable
        Get
            Return Me.tableDossiers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Exploitations() As ExploitationsDataTable
        Get
            Return Me.tableExploitations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PlanComptable() As PlanComptableDataTable
        Get
            Return Me.tablePlanComptable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Parametrage() As ParametrageDataTable
        Get
            Return Me.tableParametrage
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PlanType() As PlanTypeDataTable
        Get
            Return Me.tablePlanType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Rica() As RicaDataTable
        Get
            Return Me.tableRica
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ModLignesPara() As ModLignesParaDataTable
        Get
            Return Me.tableModLignesPara
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ModMouvementsPara() As ModMouvementsParaDataTable
        Get
            Return Me.tableModMouvementsPara
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ModMouvements() As ModMouvementsDataTable
        Get
            Return Me.tableModMouvements
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ModLignes() As ModLignesDataTable
        Get
            Return Me.tableModLignes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsPLC = CType(MyBase.Clone,dsPLC)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Activites")) Is Nothing) Then
                MyBase.Tables.Add(New ActivitesDataTable(ds.Tables("Activites")))
            End If
            If (Not (ds.Tables("Comptes")) Is Nothing) Then
                MyBase.Tables.Add(New ComptesDataTable(ds.Tables("Comptes")))
            End If
            If (Not (ds.Tables("Dossiers")) Is Nothing) Then
                MyBase.Tables.Add(New DossiersDataTable(ds.Tables("Dossiers")))
            End If
            If (Not (ds.Tables("Exploitations")) Is Nothing) Then
                MyBase.Tables.Add(New ExploitationsDataTable(ds.Tables("Exploitations")))
            End If
            If (Not (ds.Tables("PlanComptable")) Is Nothing) Then
                MyBase.Tables.Add(New PlanComptableDataTable(ds.Tables("PlanComptable")))
            End If
            If (Not (ds.Tables("Parametrage")) Is Nothing) Then
                MyBase.Tables.Add(New ParametrageDataTable(ds.Tables("Parametrage")))
            End If
            If (Not (ds.Tables("PlanType")) Is Nothing) Then
                MyBase.Tables.Add(New PlanTypeDataTable(ds.Tables("PlanType")))
            End If
            If (Not (ds.Tables("Rica")) Is Nothing) Then
                MyBase.Tables.Add(New RicaDataTable(ds.Tables("Rica")))
            End If
            If (Not (ds.Tables("ModLignesPara")) Is Nothing) Then
                MyBase.Tables.Add(New ModLignesParaDataTable(ds.Tables("ModLignesPara")))
            End If
            If (Not (ds.Tables("ModMouvementsPara")) Is Nothing) Then
                MyBase.Tables.Add(New ModMouvementsParaDataTable(ds.Tables("ModMouvementsPara")))
            End If
            If (Not (ds.Tables("ModMouvements")) Is Nothing) Then
                MyBase.Tables.Add(New ModMouvementsDataTable(ds.Tables("ModMouvements")))
            End If
            If (Not (ds.Tables("ModLignes")) Is Nothing) Then
                MyBase.Tables.Add(New ModLignesDataTable(ds.Tables("ModLignes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableActivites = CType(MyBase.Tables("Activites"),ActivitesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableActivites) Is Nothing) Then
                Me.tableActivites.InitVars
            End If
        End If
        Me.tableComptes = CType(MyBase.Tables("Comptes"),ComptesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableComptes) Is Nothing) Then
                Me.tableComptes.InitVars
            End If
        End If
        Me.tableDossiers = CType(MyBase.Tables("Dossiers"),DossiersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDossiers) Is Nothing) Then
                Me.tableDossiers.InitVars
            End If
        End If
        Me.tableExploitations = CType(MyBase.Tables("Exploitations"),ExploitationsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableExploitations) Is Nothing) Then
                Me.tableExploitations.InitVars
            End If
        End If
        Me.tablePlanComptable = CType(MyBase.Tables("PlanComptable"),PlanComptableDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanComptable) Is Nothing) Then
                Me.tablePlanComptable.InitVars
            End If
        End If
        Me.tableParametrage = CType(MyBase.Tables("Parametrage"),ParametrageDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParametrage) Is Nothing) Then
                Me.tableParametrage.InitVars
            End If
        End If
        Me.tablePlanType = CType(MyBase.Tables("PlanType"),PlanTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanType) Is Nothing) Then
                Me.tablePlanType.InitVars
            End If
        End If
        Me.tableRica = CType(MyBase.Tables("Rica"),RicaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRica) Is Nothing) Then
                Me.tableRica.InitVars
            End If
        End If
        Me.tableModLignesPara = CType(MyBase.Tables("ModLignesPara"),ModLignesParaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableModLignesPara) Is Nothing) Then
                Me.tableModLignesPara.InitVars
            End If
        End If
        Me.tableModMouvementsPara = CType(MyBase.Tables("ModMouvementsPara"),ModMouvementsParaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableModMouvementsPara) Is Nothing) Then
                Me.tableModMouvementsPara.InitVars
            End If
        End If
        Me.tableModMouvements = CType(MyBase.Tables("ModMouvements"),ModMouvementsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableModMouvements) Is Nothing) Then
                Me.tableModMouvements.InitVars
            End If
        End If
        Me.tableModLignes = CType(MyBase.Tables("ModLignes"),ModLignesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableModLignes) Is Nothing) Then
                Me.tableModLignes.InitVars
            End If
        End If
        Me.relationComptesPlanComptable = Me.Relations("ComptesPlanComptable")
        Me.relationDossiersComptes = Me.Relations("DossiersComptes")
        Me.relationExploitationsDossiers = Me.Relations("ExploitationsDossiers")
        Me.relationDossiers_Activites = Me.Relations("Dossiers_Activites")
        Me.relationActivitesPlanComptable = Me.Relations("ActivitesPlanComptable")
        Me.relationPlanTypeComptes = Me.Relations("PlanTypeComptes")
        Me.relationPlanType_Parametrage = Me.Relations("PlanType_Parametrage")
        Me.relationRica_Parametrage = Me.Relations("Rica_Parametrage")
        Me.relationModLignesParaModMouvementsPara = Me.Relations("ModLignesParaModMouvementsPara")
        Me.relationModLignesModMouvements = Me.Relations("ModLignesModMouvements")
        Me.relationExploitationsModLignes = Me.Relations("ExploitationsModLignes")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPLC"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPLC.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableActivites = New ActivitesDataTable(false)
        MyBase.Tables.Add(Me.tableActivites)
        Me.tableComptes = New ComptesDataTable(false)
        MyBase.Tables.Add(Me.tableComptes)
        Me.tableDossiers = New DossiersDataTable
        MyBase.Tables.Add(Me.tableDossiers)
        Me.tableExploitations = New ExploitationsDataTable
        MyBase.Tables.Add(Me.tableExploitations)
        Me.tablePlanComptable = New PlanComptableDataTable(false)
        MyBase.Tables.Add(Me.tablePlanComptable)
        Me.tableParametrage = New ParametrageDataTable(false)
        MyBase.Tables.Add(Me.tableParametrage)
        Me.tablePlanType = New PlanTypeDataTable(false)
        MyBase.Tables.Add(Me.tablePlanType)
        Me.tableRica = New RicaDataTable(false)
        MyBase.Tables.Add(Me.tableRica)
        Me.tableModLignesPara = New ModLignesParaDataTable
        MyBase.Tables.Add(Me.tableModLignesPara)
        Me.tableModMouvementsPara = New ModMouvementsParaDataTable
        MyBase.Tables.Add(Me.tableModMouvementsPara)
        Me.tableModMouvements = New ModMouvementsDataTable
        MyBase.Tables.Add(Me.tableModMouvements)
        Me.tableModLignes = New ModLignesDataTable
        MyBase.Tables.Add(Me.tableModLignes)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("ComptesPlanComptable", New Global.System.Data.DataColumn() {Me.tableComptes.CDossierColumn, Me.tableComptes.CCptColumn}, New Global.System.Data.DataColumn() {Me.tablePlanComptable.PlDossierColumn, Me.tablePlanComptable.PlCptColumn})
        Me.tablePlanComptable.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        Me.relationComptesPlanComptable = New Global.System.Data.DataRelation("ComptesPlanComptable", New Global.System.Data.DataColumn() {Me.tableComptes.CDossierColumn, Me.tableComptes.CCptColumn}, New Global.System.Data.DataColumn() {Me.tablePlanComptable.PlDossierColumn, Me.tablePlanComptable.PlCptColumn}, false)
        Me.Relations.Add(Me.relationComptesPlanComptable)
        Me.relationDossiersComptes = New Global.System.Data.DataRelation("DossiersComptes", New Global.System.Data.DataColumn() {Me.tableDossiers.DDossierColumn}, New Global.System.Data.DataColumn() {Me.tableComptes.CDossierColumn}, false)
        Me.Relations.Add(Me.relationDossiersComptes)
        Me.relationExploitationsDossiers = New Global.System.Data.DataRelation("ExploitationsDossiers", New Global.System.Data.DataColumn() {Me.tableExploitations.EExplColumn}, New Global.System.Data.DataColumn() {Me.tableDossiers.DExplColumn}, false)
        Me.Relations.Add(Me.relationExploitationsDossiers)
        Me.relationDossiers_Activites = New Global.System.Data.DataRelation("Dossiers_Activites", New Global.System.Data.DataColumn() {Me.tableDossiers.DDossierColumn}, New Global.System.Data.DataColumn() {Me.tableActivites.ADossierColumn}, false)
        Me.Relations.Add(Me.relationDossiers_Activites)
        Me.relationActivitesPlanComptable = New Global.System.Data.DataRelation("ActivitesPlanComptable", New Global.System.Data.DataColumn() {Me.tableActivites.ADossierColumn, Me.tableActivites.AActiColumn}, New Global.System.Data.DataColumn() {Me.tablePlanComptable.PlDossierColumn, Me.tablePlanComptable.PlActiColumn}, false)
        Me.Relations.Add(Me.relationActivitesPlanComptable)
        Me.relationPlanTypeComptes = New Global.System.Data.DataRelation("PlanTypeComptes", New Global.System.Data.DataColumn() {Me.tablePlanType.PlCptColumn}, New Global.System.Data.DataColumn() {Me.tableComptes.CCptColumn}, false)
        Me.Relations.Add(Me.relationPlanTypeComptes)
        Me.relationPlanType_Parametrage = New Global.System.Data.DataRelation("PlanType_Parametrage", New Global.System.Data.DataColumn() {Me.tablePlanType.PlCptColumn}, New Global.System.Data.DataColumn() {Me.tableParametrage.CCptColumn}, false)
        Me.Relations.Add(Me.relationPlanType_Parametrage)
        Me.relationRica_Parametrage = New Global.System.Data.DataRelation("Rica_Parametrage", New Global.System.Data.DataColumn() {Me.tableRica.RiCodeColumn}, New Global.System.Data.DataColumn() {Me.tableParametrage.AActiColumn}, false)
        Me.Relations.Add(Me.relationRica_Parametrage)
        Me.relationModLignesParaModMouvementsPara = New Global.System.Data.DataRelation("ModLignesParaModMouvementsPara", New Global.System.Data.DataColumn() {Me.tableModLignesPara.ModLProdColumn, Me.tableModLignesPara.ModLStatusColumn, Me.tableModLignesPara.ModLPieceColumn, Me.tableModLignesPara.ModLLigColumn}, New Global.System.Data.DataColumn() {Me.tableModMouvementsPara.ModMProdColumn, Me.tableModMouvementsPara.ModMStatusColumn, Me.tableModMouvementsPara.ModMPieceColumn, Me.tableModMouvementsPara.ModMLigColumn}, false)
        Me.Relations.Add(Me.relationModLignesParaModMouvementsPara)
        Me.relationModLignesModMouvements = New Global.System.Data.DataRelation("ModLignesModMouvements", New Global.System.Data.DataColumn() {Me.tableModLignes.ModLExplColumn, Me.tableModLignes.ModLPieceColumn, Me.tableModLignes.ModLLigColumn}, New Global.System.Data.DataColumn() {Me.tableModMouvements.ModMExplColumn, Me.tableModMouvements.ModMPieceColumn, Me.tableModMouvements.ModMLigColumn}, false)
        Me.Relations.Add(Me.relationModLignesModMouvements)
        Me.relationExploitationsModLignes = New Global.System.Data.DataRelation("ExploitationsModLignes", New Global.System.Data.DataColumn() {Me.tableExploitations.EExplColumn}, New Global.System.Data.DataColumn() {Me.tableModLignes.ModLExplColumn}, false)
        Me.Relations.Add(Me.relationExploitationsModLignes)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeActivites() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeComptes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDossiers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeExploitations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanComptable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeParametrage() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRica() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeModLignesPara() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeModMouvementsPara() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeModMouvements() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeModLignes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPLC = New dsPLC
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.Activites.ADisplayColumn.Expression = "AActi +iif(ALib is null,'', ' - ' + ALib)"
        Me.Comptes.CDisplayColumn.Expression = "CCpt +  iif(CLib is null,'', ' - ' + CLib)"
        Me.PlanComptable.CptDisplayColumn.Expression = "Parent(ComptesPlanComptable).Clib"
        Me.PlanComptable.ActDisplayColumn.Expression = "Parent(ActivitesPlanComptable).ALib"
        Me.PlanComptable.CU1Column.Expression = "Parent(ComptesPlanComptable).CU1"
        Me.PlanComptable.CU2Column.Expression = "Parent(ComptesPlanComptable).CU2"
        Me.PlanComptable.AQteColumn.Expression = "Parent(ActivitesPlanComptable).AQte"
        Me.PlanComptable.AUnitColumn.Expression = "Parent(ActivitesPlanComptable).AUnit"
        Me.PlanComptable.ADisplayColumn.Expression = "Parent(ActivitesPlanComptable).ADisplay"
        Me.Parametrage.CLibColumn.Expression = "Parent(PlanType_Parametrage).PlLib"
        Me.Parametrage.CU1Column.Expression = "Parent(PlanType_Parametrage).PlU1"
        Me.Parametrage.CU2Column.Expression = "Parent(PlanType_Parametrage).PlU2"
        Me.Parametrage.ALibColumn.Expression = "Parent(Rica_Parametrage).RiLib1"
        Me.Parametrage.AUnitColumn.Expression = "Parent(Rica_Parametrage).RiUnite"
        Me.Parametrage.C_DCColumn.Expression = "Parent(PlanType_Parametrage).PlD_C"
        Me.PlanType.PlDisplayColumn.Expression = "PlCpt + iif(PlLib is null,'', ' - ' + PlLib)"
        Me.PlanType.CCptColumn.Expression = "Max(Child(PlanTypeComptes).CCpt)"
        Me.Rica.RDisplayColumn.Expression = "RiCode + ' - ' + RiLib1"
    End Sub
    
    Public Delegate Sub ActivitesRowChangeEventHandler(ByVal sender As Object, ByVal e As ActivitesRowChangeEvent)
    
    Public Delegate Sub ComptesRowChangeEventHandler(ByVal sender As Object, ByVal e As ComptesRowChangeEvent)
    
    Public Delegate Sub DossiersRowChangeEventHandler(ByVal sender As Object, ByVal e As DossiersRowChangeEvent)
    
    Public Delegate Sub ExploitationsRowChangeEventHandler(ByVal sender As Object, ByVal e As ExploitationsRowChangeEvent)
    
    Public Delegate Sub PlanComptableRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanComptableRowChangeEvent)
    
    Public Delegate Sub ParametrageRowChangeEventHandler(ByVal sender As Object, ByVal e As ParametrageRowChangeEvent)
    
    Public Delegate Sub PlanTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanTypeRowChangeEvent)
    
    Public Delegate Sub RicaRowChangeEventHandler(ByVal sender As Object, ByVal e As RicaRowChangeEvent)
    
    Public Delegate Sub ModLignesParaRowChangeEventHandler(ByVal sender As Object, ByVal e As ModLignesParaRowChangeEvent)
    
    Public Delegate Sub ModMouvementsParaRowChangeEventHandler(ByVal sender As Object, ByVal e As ModMouvementsParaRowChangeEvent)
    
    Public Delegate Sub ModMouvementsRowChangeEventHandler(ByVal sender As Object, ByVal e As ModMouvementsRowChangeEvent)
    
    Public Delegate Sub ModLignesRowChangeEventHandler(ByVal sender As Object, ByVal e As ModLignesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ActivitesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnADossier As Global.System.Data.DataColumn
        
        Private columnAActi As Global.System.Data.DataColumn
        
        Private columnALib As Global.System.Data.DataColumn
        
        Private columnAQte As Global.System.Data.DataColumn
        
        Private columnAUnit As Global.System.Data.DataColumn
        
        Private columnADisplay As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Activites"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AQteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAQte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADisplayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADisplay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ActivitesRow
            Get
                Return CType(Me.Rows(index),ActivitesRow)
            End Get
        End Property
        
        Public Event ActivitesRowChanging As ActivitesRowChangeEventHandler
        
        Public Event ActivitesRowChanged As ActivitesRowChangeEventHandler
        
        Public Event ActivitesRowDeleting As ActivitesRowChangeEventHandler
        
        Public Event ActivitesRowDeleted As ActivitesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddActivitesRow(ByVal row As ActivitesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddActivitesRow(ByVal parentDossiersRowByDossiers_Activites As DossiersRow, ByVal AActi As String, ByVal ALib As String, ByVal AQte As Single, ByVal AUnit As String, ByVal ADisplay As String) As ActivitesRow
            Dim rowActivitesRow As ActivitesRow = CType(Me.NewRow,ActivitesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, AActi, ALib, AQte, AUnit, ADisplay}
            If (Not (parentDossiersRowByDossiers_Activites) Is Nothing) Then
                columnValuesArray(0) = parentDossiersRowByDossiers_Activites(0)
            End If
            rowActivitesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowActivitesRow)
            Return rowActivitesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddActivitesRow(ByVal parentDossiersRowByDossiers_Activites As DossiersRow, ByVal AActi As String, ByVal ALib As String, ByVal AQte As Single, ByVal AUnit As String) As ActivitesRow
            Dim rowActivitesRow As ActivitesRow = CType(Me.NewRow,ActivitesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, AActi, ALib, AQte, AUnit, Nothing}
            If (Not (parentDossiersRowByDossiers_Activites) Is Nothing) Then
                columnValuesArray(0) = parentDossiersRowByDossiers_Activites(0)
            End If
            rowActivitesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowActivitesRow)
            Return rowActivitesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByADossierAActi(ByVal ADossier As String, ByVal AActi As String) As ActivitesRow
            Return CType(Me.Rows.Find(New Object() {ADossier, AActi}),ActivitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ActivitesDataTable = CType(MyBase.Clone,ActivitesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ActivitesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnADossier = MyBase.Columns("ADossier")
            Me.columnAActi = MyBase.Columns("AActi")
            Me.columnALib = MyBase.Columns("ALib")
            Me.columnAQte = MyBase.Columns("AQte")
            Me.columnAUnit = MyBase.Columns("AUnit")
            Me.columnADisplay = MyBase.Columns("ADisplay")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnADossier = New Global.System.Data.DataColumn("ADossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADossier)
            Me.columnAActi = New Global.System.Data.DataColumn("AActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAActi)
            Me.columnALib = New Global.System.Data.DataColumn("ALib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALib)
            Me.columnAQte = New Global.System.Data.DataColumn("AQte", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAQte)
            Me.columnAUnit = New Global.System.Data.DataColumn("AUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUnit)
            Me.columnADisplay = New Global.System.Data.DataColumn("ADisplay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADisplay)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnADossier, Me.columnAActi}, true))
            Me.columnADossier.AllowDBNull = false
            Me.columnADossier.MaxLength = 8
            Me.columnAActi.AllowDBNull = false
            Me.columnAActi.MaxLength = 4
            Me.columnALib.MaxLength = 20
            Me.columnAUnit.MaxLength = 2
            Me.columnADisplay.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewActivitesRow() As ActivitesRow
            Return CType(Me.NewRow,ActivitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ActivitesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ActivitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.ADisplayColumn.Expression = "AActi +iif(ALib is null,'', ' - ' + ALib)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ActivitesRowChangedEvent) Is Nothing) Then
                RaiseEvent ActivitesRowChanged(Me, New ActivitesRowChangeEvent(CType(e.Row,ActivitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ActivitesRowChangingEvent) Is Nothing) Then
                RaiseEvent ActivitesRowChanging(Me, New ActivitesRowChangeEvent(CType(e.Row,ActivitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ActivitesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ActivitesRowDeleted(Me, New ActivitesRowChangeEvent(CType(e.Row,ActivitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ActivitesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ActivitesRowDeleting(Me, New ActivitesRowChangeEvent(CType(e.Row,ActivitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveActivitesRow(ByVal row As ActivitesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ActivitesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComptesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCDossier As Global.System.Data.DataColumn
        
        Private columnCCpt As Global.System.Data.DataColumn
        
        Private columnCLib As Global.System.Data.DataColumn
        
        Private columnCU1 As Global.System.Data.DataColumn
        
        Private columnCU2 As Global.System.Data.DataColumn
        
        Private columnCDisplay As Global.System.Data.DataColumn
        
        Private columnCSelected As Global.System.Data.DataColumn
        
        Private columnCActivites As Global.System.Data.DataColumn
        
        Private columnC_DC As Global.System.Data.DataColumn
        
        Private columnCCptContre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Comptes"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDisplayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDisplay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CSelectedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSelected
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CActivitesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCActivites
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property C_DCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnC_DC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCptContreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCptContre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComptesRow
            Get
                Return CType(Me.Rows(index),ComptesRow)
            End Get
        End Property
        
        Public Event ComptesRowChanging As ComptesRowChangeEventHandler
        
        Public Event ComptesRowChanged As ComptesRowChangeEventHandler
        
        Public Event ComptesRowDeleting As ComptesRowChangeEventHandler
        
        Public Event ComptesRowDeleted As ComptesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComptesRow(ByVal row As ComptesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComptesRow(ByVal parentDossiersRowByDossiersComptes As DossiersRow, ByVal parentPlanTypeRowByPlanTypeComptes As PlanTypeRow, ByVal CLib As String, ByVal CU1 As String, ByVal CU2 As String, ByVal CDisplay As String, ByVal CSelected As Boolean, ByVal CActivites As String, ByVal C_DC As String, ByVal CCptContre As String) As ComptesRow
            Dim rowComptesRow As ComptesRow = CType(Me.NewRow,ComptesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, CLib, CU1, CU2, CDisplay, CSelected, CActivites, C_DC, CCptContre}
            If (Not (parentDossiersRowByDossiersComptes) Is Nothing) Then
                columnValuesArray(0) = parentDossiersRowByDossiersComptes(0)
            End If
            If (Not (parentPlanTypeRowByPlanTypeComptes) Is Nothing) Then
                columnValuesArray(1) = parentPlanTypeRowByPlanTypeComptes(0)
            End If
            rowComptesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowComptesRow)
            Return rowComptesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComptesRow(ByVal parentDossiersRowByDossiersComptes As DossiersRow, ByVal parentPlanTypeRowByPlanTypeComptes As PlanTypeRow, ByVal CLib As String, ByVal CU1 As String, ByVal CU2 As String, ByVal CSelected As Boolean, ByVal CActivites As String, ByVal C_DC As String, ByVal CCptContre As String) As ComptesRow
            Dim rowComptesRow As ComptesRow = CType(Me.NewRow,ComptesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, CLib, CU1, CU2, Nothing, CSelected, CActivites, C_DC, CCptContre}
            If (Not (parentDossiersRowByDossiersComptes) Is Nothing) Then
                columnValuesArray(0) = parentDossiersRowByDossiersComptes(0)
            End If
            If (Not (parentPlanTypeRowByPlanTypeComptes) Is Nothing) Then
                columnValuesArray(1) = parentPlanTypeRowByPlanTypeComptes(0)
            End If
            rowComptesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowComptesRow)
            Return rowComptesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDossierCCpt(ByVal CDossier As String, ByVal CCpt As String) As ComptesRow
            Return CType(Me.Rows.Find(New Object() {CDossier, CCpt}),ComptesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ComptesDataTable = CType(MyBase.Clone,ComptesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ComptesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDossier = MyBase.Columns("CDossier")
            Me.columnCCpt = MyBase.Columns("CCpt")
            Me.columnCLib = MyBase.Columns("CLib")
            Me.columnCU1 = MyBase.Columns("CU1")
            Me.columnCU2 = MyBase.Columns("CU2")
            Me.columnCDisplay = MyBase.Columns("CDisplay")
            Me.columnCSelected = MyBase.Columns("CSelected")
            Me.columnCActivites = MyBase.Columns("CActivites")
            Me.columnC_DC = MyBase.Columns("C_DC")
            Me.columnCCptContre = MyBase.Columns("CCptContre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDossier = New Global.System.Data.DataColumn("CDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDossier)
            Me.columnCCpt = New Global.System.Data.DataColumn("CCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCpt)
            Me.columnCLib = New Global.System.Data.DataColumn("CLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLib)
            Me.columnCU1 = New Global.System.Data.DataColumn("CU1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCU1)
            Me.columnCU2 = New Global.System.Data.DataColumn("CU2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCU2)
            Me.columnCDisplay = New Global.System.Data.DataColumn("CDisplay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDisplay)
            Me.columnCSelected = New Global.System.Data.DataColumn("CSelected", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSelected)
            Me.columnCActivites = New Global.System.Data.DataColumn("CActivites", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCActivites)
            Me.columnC_DC = New Global.System.Data.DataColumn("C_DC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnC_DC)
            Me.columnCCptContre = New Global.System.Data.DataColumn("CCptContre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCptContre)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCDossier, Me.columnCCpt}, true))
            Me.columnCDossier.AllowDBNull = false
            Me.columnCDossier.MaxLength = 8
            Me.columnCCpt.AllowDBNull = false
            Me.columnCCpt.MaxLength = 8
            Me.columnCLib.MaxLength = 30
            Me.columnCU1.MaxLength = 2
            Me.columnCU2.MaxLength = 2
            Me.columnCDisplay.ReadOnly = true
            Me.columnC_DC.MaxLength = 1
            Me.columnCCptContre.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComptesRow() As ComptesRow
            Return CType(Me.NewRow,ComptesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ComptesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ComptesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.CDisplayColumn.Expression = "CCpt +  iif(CLib is null,'', ' - ' + CLib)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComptesRowChangedEvent) Is Nothing) Then
                RaiseEvent ComptesRowChanged(Me, New ComptesRowChangeEvent(CType(e.Row,ComptesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComptesRowChangingEvent) Is Nothing) Then
                RaiseEvent ComptesRowChanging(Me, New ComptesRowChangeEvent(CType(e.Row,ComptesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComptesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ComptesRowDeleted(Me, New ComptesRowChangeEvent(CType(e.Row,ComptesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComptesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ComptesRowDeleting(Me, New ComptesRowChangeEvent(CType(e.Row,ComptesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComptesRow(ByVal row As ComptesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComptesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DossiersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDDossier As Global.System.Data.DataColumn
        
        Private columnDExpl As Global.System.Data.DataColumn
        
        Private columnDDtDebEx As Global.System.Data.DataColumn
        
        Private columnDDtFinEx As Global.System.Data.DataColumn
        
        Private columnDDtArrete As Global.System.Data.DataColumn
        
        Private columnDBqCpt As Global.System.Data.DataColumn
        
        Private columnDBqVal As Global.System.Data.DataColumn
        
        Private columnDBqFolio1 As Global.System.Data.DataColumn
        
        Private columnDCptOuvert As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dossiers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DExplColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDExpl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDtDebExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDtDebEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDtFinExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDtFinEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDtArreteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDtArrete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBqCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBqCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBqValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBqVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBqFolio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBqFolio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DCptOuvertColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDCptOuvert
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DossiersRow
            Get
                Return CType(Me.Rows(index),DossiersRow)
            End Get
        End Property
        
        Public Event DossiersRowChanging As DossiersRowChangeEventHandler
        
        Public Event DossiersRowChanged As DossiersRowChangeEventHandler
        
        Public Event DossiersRowDeleting As DossiersRowChangeEventHandler
        
        Public Event DossiersRowDeleted As DossiersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDossiersRow(ByVal row As DossiersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDossiersRow(ByVal DDossier As String, ByVal parentExploitationsRowByExploitationsDossiers As ExploitationsRow, ByVal DDtDebEx As Date, ByVal DDtFinEx As Date, ByVal DDtArrete As Date, ByVal DBqCpt As String, ByVal DBqVal As Decimal, ByVal DBqFolio1 As Short, ByVal DCptOuvert As Integer) As DossiersRow
            Dim rowDossiersRow As DossiersRow = CType(Me.NewRow,DossiersRow)
            Dim columnValuesArray() As Object = New Object() {DDossier, Nothing, DDtDebEx, DDtFinEx, DDtArrete, DBqCpt, DBqVal, DBqFolio1, DCptOuvert}
            If (Not (parentExploitationsRowByExploitationsDossiers) Is Nothing) Then
                columnValuesArray(1) = parentExploitationsRowByExploitationsDossiers(0)
            End If
            rowDossiersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDossiersRow)
            Return rowDossiersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDDossier(ByVal DDossier As String) As DossiersRow
            Return CType(Me.Rows.Find(New Object() {DDossier}),DossiersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DossiersDataTable = CType(MyBase.Clone,DossiersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DossiersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDDossier = MyBase.Columns("DDossier")
            Me.columnDExpl = MyBase.Columns("DExpl")
            Me.columnDDtDebEx = MyBase.Columns("DDtDebEx")
            Me.columnDDtFinEx = MyBase.Columns("DDtFinEx")
            Me.columnDDtArrete = MyBase.Columns("DDtArrete")
            Me.columnDBqCpt = MyBase.Columns("DBqCpt")
            Me.columnDBqVal = MyBase.Columns("DBqVal")
            Me.columnDBqFolio1 = MyBase.Columns("DBqFolio1")
            Me.columnDCptOuvert = MyBase.Columns("DCptOuvert")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDDossier = New Global.System.Data.DataColumn("DDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDossier)
            Me.columnDExpl = New Global.System.Data.DataColumn("DExpl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDExpl)
            Me.columnDDtDebEx = New Global.System.Data.DataColumn("DDtDebEx", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDtDebEx)
            Me.columnDDtFinEx = New Global.System.Data.DataColumn("DDtFinEx", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDtFinEx)
            Me.columnDDtArrete = New Global.System.Data.DataColumn("DDtArrete", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDtArrete)
            Me.columnDBqCpt = New Global.System.Data.DataColumn("DBqCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBqCpt)
            Me.columnDBqVal = New Global.System.Data.DataColumn("DBqVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBqVal)
            Me.columnDBqFolio1 = New Global.System.Data.DataColumn("DBqFolio1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBqFolio1)
            Me.columnDCptOuvert = New Global.System.Data.DataColumn("DCptOuvert", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDCptOuvert)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDDossier}, true))
            Me.columnDDossier.AllowDBNull = false
            Me.columnDDossier.Unique = true
            Me.columnDDossier.MaxLength = 8
            Me.columnDExpl.MaxLength = 6
            Me.columnDBqCpt.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDossiersRow() As DossiersRow
            Return CType(Me.NewRow,DossiersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DossiersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DossiersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DossiersRowChangedEvent) Is Nothing) Then
                RaiseEvent DossiersRowChanged(Me, New DossiersRowChangeEvent(CType(e.Row,DossiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DossiersRowChangingEvent) Is Nothing) Then
                RaiseEvent DossiersRowChanging(Me, New DossiersRowChangeEvent(CType(e.Row,DossiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DossiersRowDeletedEvent) Is Nothing) Then
                RaiseEvent DossiersRowDeleted(Me, New DossiersRowChangeEvent(CType(e.Row,DossiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DossiersRowDeletingEvent) Is Nothing) Then
                RaiseEvent DossiersRowDeleting(Me, New DossiersRowChangeEvent(CType(e.Row,DossiersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDossiersRow(ByVal row As DossiersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DossiersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ExploitationsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnEExpl As Global.System.Data.DataColumn
        
        Private columnENom1 As Global.System.Data.DataColumn
        
        Private columnENom2 As Global.System.Data.DataColumn
        
        Private columnEType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Exploitations"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EExplColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEExpl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENom1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnENom1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENom2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnENom2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ETypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ExploitationsRow
            Get
                Return CType(Me.Rows(index),ExploitationsRow)
            End Get
        End Property
        
        Public Event ExploitationsRowChanging As ExploitationsRowChangeEventHandler
        
        Public Event ExploitationsRowChanged As ExploitationsRowChangeEventHandler
        
        Public Event ExploitationsRowDeleting As ExploitationsRowChangeEventHandler
        
        Public Event ExploitationsRowDeleted As ExploitationsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddExploitationsRow(ByVal row As ExploitationsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddExploitationsRow(ByVal EExpl As String, ByVal ENom1 As String, ByVal ENom2 As String, ByVal EType As String) As ExploitationsRow
            Dim rowExploitationsRow As ExploitationsRow = CType(Me.NewRow,ExploitationsRow)
            Dim columnValuesArray() As Object = New Object() {EExpl, ENom1, ENom2, EType}
            rowExploitationsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowExploitationsRow)
            Return rowExploitationsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEExpl(ByVal EExpl As String) As ExploitationsRow
            Return CType(Me.Rows.Find(New Object() {EExpl}),ExploitationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ExploitationsDataTable = CType(MyBase.Clone,ExploitationsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ExploitationsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEExpl = MyBase.Columns("EExpl")
            Me.columnENom1 = MyBase.Columns("ENom1")
            Me.columnENom2 = MyBase.Columns("ENom2")
            Me.columnEType = MyBase.Columns("EType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEExpl = New Global.System.Data.DataColumn("EExpl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEExpl)
            Me.columnENom1 = New Global.System.Data.DataColumn("ENom1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENom1)
            Me.columnENom2 = New Global.System.Data.DataColumn("ENom2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENom2)
            Me.columnEType = New Global.System.Data.DataColumn("EType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEExpl}, true))
            Me.columnEExpl.AllowDBNull = false
            Me.columnEExpl.Unique = true
            Me.columnEExpl.MaxLength = 6
            Me.columnENom1.MaxLength = 40
            Me.columnENom2.MaxLength = 20
            Me.columnEType.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewExploitationsRow() As ExploitationsRow
            Return CType(Me.NewRow,ExploitationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ExploitationsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ExploitationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ExploitationsRowChangedEvent) Is Nothing) Then
                RaiseEvent ExploitationsRowChanged(Me, New ExploitationsRowChangeEvent(CType(e.Row,ExploitationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ExploitationsRowChangingEvent) Is Nothing) Then
                RaiseEvent ExploitationsRowChanging(Me, New ExploitationsRowChangeEvent(CType(e.Row,ExploitationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ExploitationsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ExploitationsRowDeleted(Me, New ExploitationsRowChangeEvent(CType(e.Row,ExploitationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ExploitationsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ExploitationsRowDeleting(Me, New ExploitationsRowChangeEvent(CType(e.Row,ExploitationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveExploitationsRow(ByVal row As ExploitationsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ExploitationsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PlanComptableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPlDossier As Global.System.Data.DataColumn
        
        Private columnPlCpt As Global.System.Data.DataColumn
        
        Private columnPlActi As Global.System.Data.DataColumn
        
        Private columnPlLib As Global.System.Data.DataColumn
        
        Private columnPlRepG_C As Global.System.Data.DataColumn
        
        Private columnPlRepG_D As Global.System.Data.DataColumn
        
        Private columnPlRepG_U1 As Global.System.Data.DataColumn
        
        Private columnPlRepG_U2 As Global.System.Data.DataColumn
        
        Private columnPlRepA_C As Global.System.Data.DataColumn
        
        Private columnPlRepA_D As Global.System.Data.DataColumn
        
        Private columnPlRepA_U1 As Global.System.Data.DataColumn
        
        Private columnPlRepA_U2 As Global.System.Data.DataColumn
        
        Private columnPlSoldeG_C As Global.System.Data.DataColumn
        
        Private columnPlSoldeG_D As Global.System.Data.DataColumn
        
        Private columnPlSoldeG_U1 As Global.System.Data.DataColumn
        
        Private columnPlSoldeG_U2 As Global.System.Data.DataColumn
        
        Private columnPlSoldeA_C As Global.System.Data.DataColumn
        
        Private columnPlSoldeA_D As Global.System.Data.DataColumn
        
        Private columnPlSoldeA_U1 As Global.System.Data.DataColumn
        
        Private columnPlSoldeA_U2 As Global.System.Data.DataColumn
        
        Private columnCptDisplay As Global.System.Data.DataColumn
        
        Private columnActDisplay As Global.System.Data.DataColumn
        
        Private columnCU1 As Global.System.Data.DataColumn
        
        Private columnCU2 As Global.System.Data.DataColumn
        
        Private columnAQte As Global.System.Data.DataColumn
        
        Private columnAUnit As Global.System.Data.DataColumn
        
        Private columnADisplay As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "PlanComptable"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepG_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepG_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepG_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepG_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepG_U1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepG_U1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepG_U2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepG_U2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepA_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepA_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepA_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepA_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepA_U1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepA_U1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRepA_U2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRepA_U2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeG_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeG_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeG_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeG_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeG_U1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeG_U1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeG_U2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeG_U2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeA_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeA_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeA_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeA_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeA_U1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeA_U1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlSoldeA_U2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlSoldeA_U2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CptDisplayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCptDisplay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActDisplayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActDisplay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AQteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAQte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADisplayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADisplay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PlanComptableRow
            Get
                Return CType(Me.Rows(index),PlanComptableRow)
            End Get
        End Property
        
        Public Event PlanComptableRowChanging As PlanComptableRowChangeEventHandler
        
        Public Event PlanComptableRowChanged As PlanComptableRowChangeEventHandler
        
        Public Event PlanComptableRowDeleting As PlanComptableRowChangeEventHandler
        
        Public Event PlanComptableRowDeleted As PlanComptableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPlanComptableRow(ByVal row As PlanComptableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanComptableRow( _
                    ByVal PlDossier As String,  _
                    ByVal PlCpt As String,  _
                    ByVal PlActi As String,  _
                    ByVal PlLib As String,  _
                    ByVal PlRepG_C As Decimal,  _
                    ByVal PlRepG_D As Decimal,  _
                    ByVal PlRepG_U1 As Decimal,  _
                    ByVal PlRepG_U2 As Decimal,  _
                    ByVal PlRepA_C As Decimal,  _
                    ByVal PlRepA_D As Decimal,  _
                    ByVal PlRepA_U1 As Decimal,  _
                    ByVal PlRepA_U2 As Decimal,  _
                    ByVal PlSoldeG_C As Decimal,  _
                    ByVal PlSoldeG_D As Decimal,  _
                    ByVal PlSoldeG_U1 As Decimal,  _
                    ByVal PlSoldeG_U2 As Decimal,  _
                    ByVal PlSoldeA_C As Decimal,  _
                    ByVal PlSoldeA_D As Decimal,  _
                    ByVal PlSoldeA_U1 As Decimal,  _
                    ByVal PlSoldeA_U2 As Decimal,  _
                    ByVal CptDisplay As String,  _
                    ByVal ActDisplay As String,  _
                    ByVal CU1 As String,  _
                    ByVal CU2 As String,  _
                    ByVal AQte As Single,  _
                    ByVal AUnit As String,  _
                    ByVal ADisplay As String) As PlanComptableRow
            Dim rowPlanComptableRow As PlanComptableRow = CType(Me.NewRow,PlanComptableRow)
            Dim columnValuesArray() As Object = New Object() {PlDossier, PlCpt, PlActi, PlLib, PlRepG_C, PlRepG_D, PlRepG_U1, PlRepG_U2, PlRepA_C, PlRepA_D, PlRepA_U1, PlRepA_U2, PlSoldeG_C, PlSoldeG_D, PlSoldeG_U1, PlSoldeG_U2, PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, PlSoldeA_U2, CptDisplay, ActDisplay, CU1, CU2, AQte, AUnit, ADisplay}
            rowPlanComptableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanComptableRow)
            Return rowPlanComptableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanComptableRow( _
                    ByVal PlDossier As String,  _
                    ByVal PlCpt As String,  _
                    ByVal PlActi As String,  _
                    ByVal PlLib As String,  _
                    ByVal PlRepG_C As Decimal,  _
                    ByVal PlRepG_D As Decimal,  _
                    ByVal PlRepG_U1 As Decimal,  _
                    ByVal PlRepG_U2 As Decimal,  _
                    ByVal PlRepA_C As Decimal,  _
                    ByVal PlRepA_D As Decimal,  _
                    ByVal PlRepA_U1 As Decimal,  _
                    ByVal PlRepA_U2 As Decimal,  _
                    ByVal PlSoldeG_C As Decimal,  _
                    ByVal PlSoldeG_D As Decimal,  _
                    ByVal PlSoldeG_U1 As Decimal,  _
                    ByVal PlSoldeG_U2 As Decimal,  _
                    ByVal PlSoldeA_C As Decimal,  _
                    ByVal PlSoldeA_D As Decimal,  _
                    ByVal PlSoldeA_U1 As Decimal,  _
                    ByVal PlSoldeA_U2 As Decimal) As PlanComptableRow
            Dim rowPlanComptableRow As PlanComptableRow = CType(Me.NewRow,PlanComptableRow)
            Dim columnValuesArray() As Object = New Object() {PlDossier, PlCpt, PlActi, PlLib, PlRepG_C, PlRepG_D, PlRepG_U1, PlRepG_U2, PlRepA_C, PlRepA_D, PlRepA_U1, PlRepA_U2, PlSoldeG_C, PlSoldeG_D, PlSoldeG_U1, PlSoldeG_U2, PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, PlSoldeA_U2, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}
            rowPlanComptableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanComptableRow)
            Return rowPlanComptableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPlDossierPlCptPlActi(ByVal PlDossier As String, ByVal PlCpt As String, ByVal PlActi As String) As PlanComptableRow
            Return CType(Me.Rows.Find(New Object() {PlDossier, PlCpt, PlActi}),PlanComptableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PlanComptableDataTable = CType(MyBase.Clone,PlanComptableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PlanComptableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPlDossier = MyBase.Columns("PlDossier")
            Me.columnPlCpt = MyBase.Columns("PlCpt")
            Me.columnPlActi = MyBase.Columns("PlActi")
            Me.columnPlLib = MyBase.Columns("PlLib")
            Me.columnPlRepG_C = MyBase.Columns("PlRepG_C")
            Me.columnPlRepG_D = MyBase.Columns("PlRepG_D")
            Me.columnPlRepG_U1 = MyBase.Columns("PlRepG_U1")
            Me.columnPlRepG_U2 = MyBase.Columns("PlRepG_U2")
            Me.columnPlRepA_C = MyBase.Columns("PlRepA_C")
            Me.columnPlRepA_D = MyBase.Columns("PlRepA_D")
            Me.columnPlRepA_U1 = MyBase.Columns("PlRepA_U1")
            Me.columnPlRepA_U2 = MyBase.Columns("PlRepA_U2")
            Me.columnPlSoldeG_C = MyBase.Columns("PlSoldeG_C")
            Me.columnPlSoldeG_D = MyBase.Columns("PlSoldeG_D")
            Me.columnPlSoldeG_U1 = MyBase.Columns("PlSoldeG_U1")
            Me.columnPlSoldeG_U2 = MyBase.Columns("PlSoldeG_U2")
            Me.columnPlSoldeA_C = MyBase.Columns("PlSoldeA_C")
            Me.columnPlSoldeA_D = MyBase.Columns("PlSoldeA_D")
            Me.columnPlSoldeA_U1 = MyBase.Columns("PlSoldeA_U1")
            Me.columnPlSoldeA_U2 = MyBase.Columns("PlSoldeA_U2")
            Me.columnCptDisplay = MyBase.Columns("CptDisplay")
            Me.columnActDisplay = MyBase.Columns("ActDisplay")
            Me.columnCU1 = MyBase.Columns("CU1")
            Me.columnCU2 = MyBase.Columns("CU2")
            Me.columnAQte = MyBase.Columns("AQte")
            Me.columnAUnit = MyBase.Columns("AUnit")
            Me.columnADisplay = MyBase.Columns("ADisplay")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPlDossier = New Global.System.Data.DataColumn("PlDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlDossier)
            Me.columnPlCpt = New Global.System.Data.DataColumn("PlCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlCpt)
            Me.columnPlActi = New Global.System.Data.DataColumn("PlActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlActi)
            Me.columnPlLib = New Global.System.Data.DataColumn("PlLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlLib)
            Me.columnPlRepG_C = New Global.System.Data.DataColumn("PlRepG_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepG_C)
            Me.columnPlRepG_D = New Global.System.Data.DataColumn("PlRepG_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepG_D)
            Me.columnPlRepG_U1 = New Global.System.Data.DataColumn("PlRepG_U1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepG_U1)
            Me.columnPlRepG_U2 = New Global.System.Data.DataColumn("PlRepG_U2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepG_U2)
            Me.columnPlRepA_C = New Global.System.Data.DataColumn("PlRepA_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepA_C)
            Me.columnPlRepA_D = New Global.System.Data.DataColumn("PlRepA_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepA_D)
            Me.columnPlRepA_U1 = New Global.System.Data.DataColumn("PlRepA_U1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepA_U1)
            Me.columnPlRepA_U2 = New Global.System.Data.DataColumn("PlRepA_U2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRepA_U2)
            Me.columnPlSoldeG_C = New Global.System.Data.DataColumn("PlSoldeG_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeG_C)
            Me.columnPlSoldeG_D = New Global.System.Data.DataColumn("PlSoldeG_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeG_D)
            Me.columnPlSoldeG_U1 = New Global.System.Data.DataColumn("PlSoldeG_U1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeG_U1)
            Me.columnPlSoldeG_U2 = New Global.System.Data.DataColumn("PlSoldeG_U2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeG_U2)
            Me.columnPlSoldeA_C = New Global.System.Data.DataColumn("PlSoldeA_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeA_C)
            Me.columnPlSoldeA_D = New Global.System.Data.DataColumn("PlSoldeA_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeA_D)
            Me.columnPlSoldeA_U1 = New Global.System.Data.DataColumn("PlSoldeA_U1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeA_U1)
            Me.columnPlSoldeA_U2 = New Global.System.Data.DataColumn("PlSoldeA_U2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlSoldeA_U2)
            Me.columnCptDisplay = New Global.System.Data.DataColumn("CptDisplay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCptDisplay)
            Me.columnActDisplay = New Global.System.Data.DataColumn("ActDisplay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActDisplay)
            Me.columnCU1 = New Global.System.Data.DataColumn("CU1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCU1)
            Me.columnCU2 = New Global.System.Data.DataColumn("CU2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCU2)
            Me.columnAQte = New Global.System.Data.DataColumn("AQte", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAQte)
            Me.columnAUnit = New Global.System.Data.DataColumn("AUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUnit)
            Me.columnADisplay = New Global.System.Data.DataColumn("ADisplay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADisplay)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPlDossier, Me.columnPlCpt, Me.columnPlActi}, true))
            Me.columnPlDossier.AllowDBNull = false
            Me.columnPlDossier.MaxLength = 8
            Me.columnPlCpt.AllowDBNull = false
            Me.columnPlCpt.MaxLength = 8
            Me.columnPlActi.AllowDBNull = false
            Me.columnPlActi.MaxLength = 4
            Me.columnPlLib.MaxLength = 55
            Me.columnCptDisplay.ReadOnly = true
            Me.columnActDisplay.ReadOnly = true
            Me.columnCU1.ReadOnly = true
            Me.columnCU2.ReadOnly = true
            Me.columnAQte.ReadOnly = true
            Me.columnAUnit.ReadOnly = true
            Me.columnADisplay.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPlanComptableRow() As PlanComptableRow
            Return CType(Me.NewRow,PlanComptableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PlanComptableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PlanComptableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.CptDisplayColumn.Expression = "Parent(ComptesPlanComptable).Clib"
            Me.ActDisplayColumn.Expression = "Parent(ActivitesPlanComptable).ALib"
            Me.CU1Column.Expression = "Parent(ComptesPlanComptable).CU1"
            Me.CU2Column.Expression = "Parent(ComptesPlanComptable).CU2"
            Me.AQteColumn.Expression = "Parent(ActivitesPlanComptable).AQte"
            Me.AUnitColumn.Expression = "Parent(ActivitesPlanComptable).AUnit"
            Me.ADisplayColumn.Expression = "Parent(ActivitesPlanComptable).ADisplay"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanComptableRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanComptableRowChanged(Me, New PlanComptableRowChangeEvent(CType(e.Row,PlanComptableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanComptableRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanComptableRowChanging(Me, New PlanComptableRowChangeEvent(CType(e.Row,PlanComptableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanComptableRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanComptableRowDeleted(Me, New PlanComptableRowChangeEvent(CType(e.Row,PlanComptableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanComptableRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanComptableRowDeleting(Me, New PlanComptableRowChangeEvent(CType(e.Row,PlanComptableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePlanComptableRow(ByVal row As PlanComptableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PlanComptableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ParametrageDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodeProd As Global.System.Data.DataColumn
        
        Private columnStatut As Global.System.Data.DataColumn
        
        Private columnCCpt As Global.System.Data.DataColumn
        
        Private columnAActi As Global.System.Data.DataColumn
        
        Private columnCLib As Global.System.Data.DataColumn
        
        Private columnCU1 As Global.System.Data.DataColumn
        
        Private columnCU2 As Global.System.Data.DataColumn
        
        Private columnALib As Global.System.Data.DataColumn
        
        Private columnAUnit As Global.System.Data.DataColumn
        
        Private columnC_DC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Parametrage"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property C_DCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnC_DC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParametrageRow
            Get
                Return CType(Me.Rows(index),ParametrageRow)
            End Get
        End Property
        
        Public Event ParametrageRowChanging As ParametrageRowChangeEventHandler
        
        Public Event ParametrageRowChanged As ParametrageRowChangeEventHandler
        
        Public Event ParametrageRowDeleting As ParametrageRowChangeEventHandler
        
        Public Event ParametrageRowDeleted As ParametrageRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddParametrageRow(ByVal row As ParametrageRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddParametrageRow(ByVal CodeProd As String, ByVal Statut As String, ByVal parentPlanTypeRowByPlanType_Parametrage As PlanTypeRow, ByVal parentRicaRowByRica_Parametrage As RicaRow, ByVal CLib As String, ByVal CU1 As String, ByVal CU2 As String, ByVal ALib As String, ByVal AUnit As String, ByVal C_DC As String) As ParametrageRow
            Dim rowParametrageRow As ParametrageRow = CType(Me.NewRow,ParametrageRow)
            Dim columnValuesArray() As Object = New Object() {CodeProd, Statut, Nothing, Nothing, CLib, CU1, CU2, ALib, AUnit, C_DC}
            If (Not (parentPlanTypeRowByPlanType_Parametrage) Is Nothing) Then
                columnValuesArray(2) = parentPlanTypeRowByPlanType_Parametrage(0)
            End If
            If (Not (parentRicaRowByRica_Parametrage) Is Nothing) Then
                columnValuesArray(3) = parentRicaRowByRica_Parametrage(0)
            End If
            rowParametrageRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParametrageRow)
            Return rowParametrageRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddParametrageRow(ByVal CodeProd As String, ByVal Statut As String, ByVal parentPlanTypeRowByPlanType_Parametrage As PlanTypeRow, ByVal parentRicaRowByRica_Parametrage As RicaRow) As ParametrageRow
            Dim rowParametrageRow As ParametrageRow = CType(Me.NewRow,ParametrageRow)
            Dim columnValuesArray() As Object = New Object() {CodeProd, Statut, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}
            If (Not (parentPlanTypeRowByPlanType_Parametrage) Is Nothing) Then
                columnValuesArray(2) = parentPlanTypeRowByPlanType_Parametrage(0)
            End If
            If (Not (parentRicaRowByRica_Parametrage) Is Nothing) Then
                columnValuesArray(3) = parentRicaRowByRica_Parametrage(0)
            End If
            rowParametrageRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParametrageRow)
            Return rowParametrageRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ParametrageDataTable = CType(MyBase.Clone,ParametrageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ParametrageDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodeProd = MyBase.Columns("CodeProd")
            Me.columnStatut = MyBase.Columns("Statut")
            Me.columnCCpt = MyBase.Columns("CCpt")
            Me.columnAActi = MyBase.Columns("AActi")
            Me.columnCLib = MyBase.Columns("CLib")
            Me.columnCU1 = MyBase.Columns("CU1")
            Me.columnCU2 = MyBase.Columns("CU2")
            Me.columnALib = MyBase.Columns("ALib")
            Me.columnAUnit = MyBase.Columns("AUnit")
            Me.columnC_DC = MyBase.Columns("C_DC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodeProd = New Global.System.Data.DataColumn("CodeProd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProd)
            Me.columnStatut = New Global.System.Data.DataColumn("Statut", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatut)
            Me.columnCCpt = New Global.System.Data.DataColumn("CCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCpt)
            Me.columnAActi = New Global.System.Data.DataColumn("AActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAActi)
            Me.columnCLib = New Global.System.Data.DataColumn("CLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLib)
            Me.columnCU1 = New Global.System.Data.DataColumn("CU1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCU1)
            Me.columnCU2 = New Global.System.Data.DataColumn("CU2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCU2)
            Me.columnALib = New Global.System.Data.DataColumn("ALib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALib)
            Me.columnAUnit = New Global.System.Data.DataColumn("AUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUnit)
            Me.columnC_DC = New Global.System.Data.DataColumn("C_DC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnC_DC)
            Me.columnCodeProd.MaxLength = 15
            Me.columnStatut.MaxLength = 1
            Me.columnCCpt.MaxLength = 8
            Me.columnAActi.MaxLength = 4
            Me.columnCLib.ReadOnly = true
            Me.columnCU1.ReadOnly = true
            Me.columnCU2.ReadOnly = true
            Me.columnALib.ReadOnly = true
            Me.columnAUnit.ReadOnly = true
            Me.columnC_DC.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewParametrageRow() As ParametrageRow
            Return CType(Me.NewRow,ParametrageRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ParametrageRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ParametrageRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.CLibColumn.Expression = "Parent(PlanType_Parametrage).PlLib"
            Me.CU1Column.Expression = "Parent(PlanType_Parametrage).PlU1"
            Me.CU2Column.Expression = "Parent(PlanType_Parametrage).PlU2"
            Me.ALibColumn.Expression = "Parent(Rica_Parametrage).RiLib1"
            Me.AUnitColumn.Expression = "Parent(Rica_Parametrage).RiUnite"
            Me.C_DCColumn.Expression = "Parent(PlanType_Parametrage).PlD_C"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParametrageRowChangedEvent) Is Nothing) Then
                RaiseEvent ParametrageRowChanged(Me, New ParametrageRowChangeEvent(CType(e.Row,ParametrageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParametrageRowChangingEvent) Is Nothing) Then
                RaiseEvent ParametrageRowChanging(Me, New ParametrageRowChangeEvent(CType(e.Row,ParametrageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParametrageRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParametrageRowDeleted(Me, New ParametrageRowChangeEvent(CType(e.Row,ParametrageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParametrageRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParametrageRowDeleting(Me, New ParametrageRowChangeEvent(CType(e.Row,ParametrageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveParametrageRow(ByVal row As ParametrageRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParametrageDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PlanTypeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPlCpt As Global.System.Data.DataColumn
        
        Private columnPlLib As Global.System.Data.DataColumn
        
        Private columnPlRacine As Global.System.Data.DataColumn
        
        Private columnPlU1 As Global.System.Data.DataColumn
        
        Private columnPlU2 As Global.System.Data.DataColumn
        
        Private columnPlActi As Global.System.Data.DataColumn
        
        Private columnPlActiPermis As Global.System.Data.DataColumn
        
        Private columnPlTVA As Global.System.Data.DataColumn
        
        Private columnPlDisplay As Global.System.Data.DataColumn
        
        Private columnPlD_C As Global.System.Data.DataColumn
        
        Private columnPlMotsCles As Global.System.Data.DataColumn
        
        Private columnCCpt As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "PlanType"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlRacineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlRacine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlActiPermisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlActiPermis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlDisplayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlDisplay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlD_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlD_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlMotsClesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlMotsCles
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PlanTypeRow
            Get
                Return CType(Me.Rows(index),PlanTypeRow)
            End Get
        End Property
        
        Public Event PlanTypeRowChanging As PlanTypeRowChangeEventHandler
        
        Public Event PlanTypeRowChanged As PlanTypeRowChangeEventHandler
        
        Public Event PlanTypeRowDeleting As PlanTypeRowChangeEventHandler
        
        Public Event PlanTypeRowDeleted As PlanTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPlanTypeRow(ByVal row As PlanTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanTypeRow(ByVal PlCpt As String, ByVal PlLib As String, ByVal PlRacine As String, ByVal PlU1 As String, ByVal PlU2 As String, ByVal PlActi As String, ByVal PlActiPermis As String, ByVal PlTVA As String, ByVal PlDisplay As String, ByVal PlD_C As String, ByVal PlMotsCles As String, ByVal CCpt As String) As PlanTypeRow
            Dim rowPlanTypeRow As PlanTypeRow = CType(Me.NewRow,PlanTypeRow)
            Dim columnValuesArray() As Object = New Object() {PlCpt, PlLib, PlRacine, PlU1, PlU2, PlActi, PlActiPermis, PlTVA, PlDisplay, PlD_C, PlMotsCles, CCpt}
            rowPlanTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanTypeRow)
            Return rowPlanTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanTypeRow(ByVal PlCpt As String, ByVal PlLib As String, ByVal PlRacine As String, ByVal PlU1 As String, ByVal PlU2 As String, ByVal PlActi As String, ByVal PlActiPermis As String, ByVal PlTVA As String, ByVal PlD_C As String, ByVal PlMotsCles As String) As PlanTypeRow
            Dim rowPlanTypeRow As PlanTypeRow = CType(Me.NewRow,PlanTypeRow)
            Dim columnValuesArray() As Object = New Object() {PlCpt, PlLib, PlRacine, PlU1, PlU2, PlActi, PlActiPermis, PlTVA, Nothing, PlD_C, PlMotsCles, Nothing}
            rowPlanTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanTypeRow)
            Return rowPlanTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PlanTypeDataTable = CType(MyBase.Clone,PlanTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PlanTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPlCpt = MyBase.Columns("PlCpt")
            Me.columnPlLib = MyBase.Columns("PlLib")
            Me.columnPlRacine = MyBase.Columns("PlRacine")
            Me.columnPlU1 = MyBase.Columns("PlU1")
            Me.columnPlU2 = MyBase.Columns("PlU2")
            Me.columnPlActi = MyBase.Columns("PlActi")
            Me.columnPlActiPermis = MyBase.Columns("PlActiPermis")
            Me.columnPlTVA = MyBase.Columns("PlTVA")
            Me.columnPlDisplay = MyBase.Columns("PlDisplay")
            Me.columnPlD_C = MyBase.Columns("PlD_C")
            Me.columnPlMotsCles = MyBase.Columns("PlMotsCles")
            Me.columnCCpt = MyBase.Columns("CCpt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPlCpt = New Global.System.Data.DataColumn("PlCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlCpt)
            Me.columnPlLib = New Global.System.Data.DataColumn("PlLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlLib)
            Me.columnPlRacine = New Global.System.Data.DataColumn("PlRacine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlRacine)
            Me.columnPlU1 = New Global.System.Data.DataColumn("PlU1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlU1)
            Me.columnPlU2 = New Global.System.Data.DataColumn("PlU2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlU2)
            Me.columnPlActi = New Global.System.Data.DataColumn("PlActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlActi)
            Me.columnPlActiPermis = New Global.System.Data.DataColumn("PlActiPermis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlActiPermis)
            Me.columnPlTVA = New Global.System.Data.DataColumn("PlTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlTVA)
            Me.columnPlDisplay = New Global.System.Data.DataColumn("PlDisplay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlDisplay)
            Me.columnPlD_C = New Global.System.Data.DataColumn("PlD_C", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlD_C)
            Me.columnPlMotsCles = New Global.System.Data.DataColumn("PlMotsCles", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlMotsCles)
            Me.columnCCpt = New Global.System.Data.DataColumn("CCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCpt)
            Me.columnPlCpt.MaxLength = 8
            Me.columnPlLib.MaxLength = 35
            Me.columnPlRacine.MaxLength = 8
            Me.columnPlU1.MaxLength = 2
            Me.columnPlU2.MaxLength = 2
            Me.columnPlActi.MaxLength = 536870910
            Me.columnPlActiPermis.MaxLength = 536870910
            Me.columnPlTVA.MaxLength = 50
            Me.columnPlDisplay.ReadOnly = true
            Me.columnPlD_C.MaxLength = 1
            Me.columnPlMotsCles.MaxLength = 536870910
            Me.columnCCpt.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPlanTypeRow() As PlanTypeRow
            Return CType(Me.NewRow,PlanTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PlanTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PlanTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.PlDisplayColumn.Expression = "PlCpt + iif(PlLib is null,'', ' - ' + PlLib)"
            Me.CCptColumn.Expression = "Max(Child(PlanTypeComptes).CCpt)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanTypeRowChanged(Me, New PlanTypeRowChangeEvent(CType(e.Row,PlanTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanTypeRowChanging(Me, New PlanTypeRowChangeEvent(CType(e.Row,PlanTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanTypeRowDeleted(Me, New PlanTypeRowChangeEvent(CType(e.Row,PlanTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanTypeRowDeleting(Me, New PlanTypeRowChangeEvent(CType(e.Row,PlanTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePlanTypeRow(ByVal row As PlanTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PlanTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RicaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRiCode As Global.System.Data.DataColumn
        
        Private columnRiLib1 As Global.System.Data.DataColumn
        
        Private columnRiLib2 As Global.System.Data.DataColumn
        
        Private columnRiUnite As Global.System.Data.DataColumn
        
        Private columnRDisplay As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Rica"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RiCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RiLib1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiLib1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RiLib2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiLib2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RiUniteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiUnite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RDisplayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRDisplay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RicaRow
            Get
                Return CType(Me.Rows(index),RicaRow)
            End Get
        End Property
        
        Public Event RicaRowChanging As RicaRowChangeEventHandler
        
        Public Event RicaRowChanged As RicaRowChangeEventHandler
        
        Public Event RicaRowDeleting As RicaRowChangeEventHandler
        
        Public Event RicaRowDeleted As RicaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRicaRow(ByVal row As RicaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRicaRow(ByVal RiCode As String, ByVal RiLib1 As String, ByVal RiLib2 As String, ByVal RiUnite As String, ByVal RDisplay As String) As RicaRow
            Dim rowRicaRow As RicaRow = CType(Me.NewRow,RicaRow)
            Dim columnValuesArray() As Object = New Object() {RiCode, RiLib1, RiLib2, RiUnite, RDisplay}
            rowRicaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRicaRow)
            Return rowRicaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRicaRow(ByVal RiCode As String, ByVal RiLib1 As String, ByVal RiLib2 As String, ByVal RiUnite As String) As RicaRow
            Dim rowRicaRow As RicaRow = CType(Me.NewRow,RicaRow)
            Dim columnValuesArray() As Object = New Object() {RiCode, RiLib1, RiLib2, RiUnite, Nothing}
            rowRicaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRicaRow)
            Return rowRicaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRiCode(ByVal RiCode As String) As RicaRow
            Return CType(Me.Rows.Find(New Object() {RiCode}),RicaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RicaDataTable = CType(MyBase.Clone,RicaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RicaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRiCode = MyBase.Columns("RiCode")
            Me.columnRiLib1 = MyBase.Columns("RiLib1")
            Me.columnRiLib2 = MyBase.Columns("RiLib2")
            Me.columnRiUnite = MyBase.Columns("RiUnite")
            Me.columnRDisplay = MyBase.Columns("RDisplay")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRiCode = New Global.System.Data.DataColumn("RiCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiCode)
            Me.columnRiLib1 = New Global.System.Data.DataColumn("RiLib1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiLib1)
            Me.columnRiLib2 = New Global.System.Data.DataColumn("RiLib2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiLib2)
            Me.columnRiUnite = New Global.System.Data.DataColumn("RiUnite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiUnite)
            Me.columnRDisplay = New Global.System.Data.DataColumn("RDisplay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRDisplay)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRiCode}, true))
            Me.columnRiCode.AllowDBNull = false
            Me.columnRiCode.Unique = true
            Me.columnRiCode.MaxLength = 4
            Me.columnRiLib1.MaxLength = 20
            Me.columnRiLib2.MaxLength = 25
            Me.columnRiUnite.MaxLength = 2
            Me.columnRDisplay.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRicaRow() As RicaRow
            Return CType(Me.NewRow,RicaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RicaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RicaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.RDisplayColumn.Expression = "RiCode + ' - ' + RiLib1"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RicaRowChangedEvent) Is Nothing) Then
                RaiseEvent RicaRowChanged(Me, New RicaRowChangeEvent(CType(e.Row,RicaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RicaRowChangingEvent) Is Nothing) Then
                RaiseEvent RicaRowChanging(Me, New RicaRowChangeEvent(CType(e.Row,RicaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RicaRowDeletedEvent) Is Nothing) Then
                RaiseEvent RicaRowDeleted(Me, New RicaRowChangeEvent(CType(e.Row,RicaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RicaRowDeletingEvent) Is Nothing) Then
                RaiseEvent RicaRowDeleting(Me, New RicaRowChangeEvent(CType(e.Row,RicaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRicaRow(ByVal row As RicaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RicaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ModLignesParaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnModLProd As Global.System.Data.DataColumn
        
        Private columnModLStatus As Global.System.Data.DataColumn
        
        Private columnModLPiece As Global.System.Data.DataColumn
        
        Private columnModLLig As Global.System.Data.DataColumn
        
        Private columnModLTva As Global.System.Data.DataColumn
        
        Private columnModLLib As Global.System.Data.DataColumn
        
        Private columnModLGene As Global.System.Data.DataColumn
        
        Private columnModLAna As Global.System.Data.DataColumn
        
        Private columnModLJournal As Global.System.Data.DataColumn
        
        Private columnModLMtTVA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ModLignesPara"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLProdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLProd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLPieceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLPiece
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLLigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLLig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLGeneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLGene
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLAnaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLAna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLJournalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLJournal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLMtTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLMtTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ModLignesParaRow
            Get
                Return CType(Me.Rows(index),ModLignesParaRow)
            End Get
        End Property
        
        Public Event ModLignesParaRowChanging As ModLignesParaRowChangeEventHandler
        
        Public Event ModLignesParaRowChanged As ModLignesParaRowChangeEventHandler
        
        Public Event ModLignesParaRowDeleting As ModLignesParaRowChangeEventHandler
        
        Public Event ModLignesParaRowDeleted As ModLignesParaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddModLignesParaRow(ByVal row As ModLignesParaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddModLignesParaRow(ByVal ModLProd As String, ByVal ModLStatus As String, ByVal ModLPiece As String, ByVal ModLLig As Integer, ByVal ModLTva As String, ByVal ModLLib As String, ByVal ModLGene As String, ByVal ModLAna As String, ByVal ModLJournal As String, ByVal ModLMtTVA As String) As ModLignesParaRow
            Dim rowModLignesParaRow As ModLignesParaRow = CType(Me.NewRow,ModLignesParaRow)
            Dim columnValuesArray() As Object = New Object() {ModLProd, ModLStatus, ModLPiece, ModLLig, ModLTva, ModLLib, ModLGene, ModLAna, ModLJournal, ModLMtTVA}
            rowModLignesParaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowModLignesParaRow)
            Return rowModLignesParaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByModLProdModLStatusModLPieceModLLig(ByVal ModLProd As String, ByVal ModLStatus As String, ByVal ModLPiece As String, ByVal ModLLig As Integer) As ModLignesParaRow
            Return CType(Me.Rows.Find(New Object() {ModLProd, ModLStatus, ModLPiece, ModLLig}),ModLignesParaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ModLignesParaDataTable = CType(MyBase.Clone,ModLignesParaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ModLignesParaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnModLProd = MyBase.Columns("ModLProd")
            Me.columnModLStatus = MyBase.Columns("ModLStatus")
            Me.columnModLPiece = MyBase.Columns("ModLPiece")
            Me.columnModLLig = MyBase.Columns("ModLLig")
            Me.columnModLTva = MyBase.Columns("ModLTva")
            Me.columnModLLib = MyBase.Columns("ModLLib")
            Me.columnModLGene = MyBase.Columns("ModLGene")
            Me.columnModLAna = MyBase.Columns("ModLAna")
            Me.columnModLJournal = MyBase.Columns("ModLJournal")
            Me.columnModLMtTVA = MyBase.Columns("ModLMtTVA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnModLProd = New Global.System.Data.DataColumn("ModLProd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLProd)
            Me.columnModLStatus = New Global.System.Data.DataColumn("ModLStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLStatus)
            Me.columnModLPiece = New Global.System.Data.DataColumn("ModLPiece", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLPiece)
            Me.columnModLLig = New Global.System.Data.DataColumn("ModLLig", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLLig)
            Me.columnModLTva = New Global.System.Data.DataColumn("ModLTva", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLTva)
            Me.columnModLLib = New Global.System.Data.DataColumn("ModLLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLLib)
            Me.columnModLGene = New Global.System.Data.DataColumn("ModLGene", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLGene)
            Me.columnModLAna = New Global.System.Data.DataColumn("ModLAna", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLAna)
            Me.columnModLJournal = New Global.System.Data.DataColumn("ModLJournal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLJournal)
            Me.columnModLMtTVA = New Global.System.Data.DataColumn("ModLMtTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLMtTVA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnModLProd, Me.columnModLStatus, Me.columnModLPiece, Me.columnModLLig}, true))
            Me.columnModLProd.AllowDBNull = false
            Me.columnModLProd.MaxLength = 15
            Me.columnModLStatus.AllowDBNull = false
            Me.columnModLStatus.MaxLength = 1
            Me.columnModLPiece.AllowDBNull = false
            Me.columnModLPiece.MaxLength = 50
            Me.columnModLLig.AllowDBNull = false
            Me.columnModLTva.MaxLength = 5
            Me.columnModLLib.MaxLength = 55
            Me.columnModLGene.MaxLength = 1
            Me.columnModLAna.MaxLength = 1
            Me.columnModLJournal.MaxLength = 4
            Me.columnModLMtTVA.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewModLignesParaRow() As ModLignesParaRow
            Return CType(Me.NewRow,ModLignesParaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ModLignesParaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ModLignesParaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ModLignesParaRowChangedEvent) Is Nothing) Then
                RaiseEvent ModLignesParaRowChanged(Me, New ModLignesParaRowChangeEvent(CType(e.Row,ModLignesParaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ModLignesParaRowChangingEvent) Is Nothing) Then
                RaiseEvent ModLignesParaRowChanging(Me, New ModLignesParaRowChangeEvent(CType(e.Row,ModLignesParaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ModLignesParaRowDeletedEvent) Is Nothing) Then
                RaiseEvent ModLignesParaRowDeleted(Me, New ModLignesParaRowChangeEvent(CType(e.Row,ModLignesParaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ModLignesParaRowDeletingEvent) Is Nothing) Then
                RaiseEvent ModLignesParaRowDeleting(Me, New ModLignesParaRowChangeEvent(CType(e.Row,ModLignesParaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveModLignesParaRow(ByVal row As ModLignesParaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ModLignesParaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ModMouvementsParaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnModMProd As Global.System.Data.DataColumn
        
        Private columnModMStatus As Global.System.Data.DataColumn
        
        Private columnModMPiece As Global.System.Data.DataColumn
        
        Private columnModMLig As Global.System.Data.DataColumn
        
        Private columnModMOrdre As Global.System.Data.DataColumn
        
        Private columnModMCpt As Global.System.Data.DataColumn
        
        Private columnModMActi As Global.System.Data.DataColumn
        
        Private columnModMMtDeb As Global.System.Data.DataColumn
        
        Private columnModMMtCre As Global.System.Data.DataColumn
        
        Private columnModMD_C As Global.System.Data.DataColumn
        
        Private columnModMQte1 As Global.System.Data.DataColumn
        
        Private columnModMQte2 As Global.System.Data.DataColumn
        
        Private columnModMLettrage As Global.System.Data.DataColumn
        
        Private columnModMCptCtr As Global.System.Data.DataColumn
        
        Private columnModMActCtr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ModMouvementsPara"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMProdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMProd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMPieceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMPiece
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMLigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMLig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMMtDebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMMtDeb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMMtCreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMMtCre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMD_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMD_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMQte1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMQte1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMQte2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMQte2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMLettrageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMLettrage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMCptCtrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMCptCtr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMActCtrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMActCtr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ModMouvementsParaRow
            Get
                Return CType(Me.Rows(index),ModMouvementsParaRow)
            End Get
        End Property
        
        Public Event ModMouvementsParaRowChanging As ModMouvementsParaRowChangeEventHandler
        
        Public Event ModMouvementsParaRowChanged As ModMouvementsParaRowChangeEventHandler
        
        Public Event ModMouvementsParaRowDeleting As ModMouvementsParaRowChangeEventHandler
        
        Public Event ModMouvementsParaRowDeleted As ModMouvementsParaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddModMouvementsParaRow(ByVal row As ModMouvementsParaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddModMouvementsParaRow(ByVal ModMProd As String, ByVal ModMStatus As String, ByVal ModMPiece As String, ByVal ModMLig As Integer, ByVal ModMOrdre As Byte, ByVal ModMCpt As String, ByVal ModMActi As String, ByVal ModMMtDeb As Decimal, ByVal ModMMtCre As Decimal, ByVal ModMD_C As String, ByVal ModMQte1 As Decimal, ByVal ModMQte2 As Decimal, ByVal ModMLettrage As Integer, ByVal ModMCptCtr As String, ByVal ModMActCtr As String) As ModMouvementsParaRow
            Dim rowModMouvementsParaRow As ModMouvementsParaRow = CType(Me.NewRow,ModMouvementsParaRow)
            Dim columnValuesArray() As Object = New Object() {ModMProd, ModMStatus, ModMPiece, ModMLig, ModMOrdre, ModMCpt, ModMActi, ModMMtDeb, ModMMtCre, ModMD_C, ModMQte1, ModMQte2, ModMLettrage, ModMCptCtr, ModMActCtr}
            rowModMouvementsParaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowModMouvementsParaRow)
            Return rowModMouvementsParaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByModMProdModMStatusModMPieceModMLigModMOrdre(ByVal ModMProd As String, ByVal ModMStatus As String, ByVal ModMPiece As String, ByVal ModMLig As Integer, ByVal ModMOrdre As Byte) As ModMouvementsParaRow
            Return CType(Me.Rows.Find(New Object() {ModMProd, ModMStatus, ModMPiece, ModMLig, ModMOrdre}),ModMouvementsParaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ModMouvementsParaDataTable = CType(MyBase.Clone,ModMouvementsParaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ModMouvementsParaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnModMProd = MyBase.Columns("ModMProd")
            Me.columnModMStatus = MyBase.Columns("ModMStatus")
            Me.columnModMPiece = MyBase.Columns("ModMPiece")
            Me.columnModMLig = MyBase.Columns("ModMLig")
            Me.columnModMOrdre = MyBase.Columns("ModMOrdre")
            Me.columnModMCpt = MyBase.Columns("ModMCpt")
            Me.columnModMActi = MyBase.Columns("ModMActi")
            Me.columnModMMtDeb = MyBase.Columns("ModMMtDeb")
            Me.columnModMMtCre = MyBase.Columns("ModMMtCre")
            Me.columnModMD_C = MyBase.Columns("ModMD_C")
            Me.columnModMQte1 = MyBase.Columns("ModMQte1")
            Me.columnModMQte2 = MyBase.Columns("ModMQte2")
            Me.columnModMLettrage = MyBase.Columns("ModMLettrage")
            Me.columnModMCptCtr = MyBase.Columns("ModMCptCtr")
            Me.columnModMActCtr = MyBase.Columns("ModMActCtr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnModMProd = New Global.System.Data.DataColumn("ModMProd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMProd)
            Me.columnModMStatus = New Global.System.Data.DataColumn("ModMStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMStatus)
            Me.columnModMPiece = New Global.System.Data.DataColumn("ModMPiece", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMPiece)
            Me.columnModMLig = New Global.System.Data.DataColumn("ModMLig", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMLig)
            Me.columnModMOrdre = New Global.System.Data.DataColumn("ModMOrdre", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMOrdre)
            Me.columnModMCpt = New Global.System.Data.DataColumn("ModMCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMCpt)
            Me.columnModMActi = New Global.System.Data.DataColumn("ModMActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMActi)
            Me.columnModMMtDeb = New Global.System.Data.DataColumn("ModMMtDeb", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMMtDeb)
            Me.columnModMMtCre = New Global.System.Data.DataColumn("ModMMtCre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMMtCre)
            Me.columnModMD_C = New Global.System.Data.DataColumn("ModMD_C", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMD_C)
            Me.columnModMQte1 = New Global.System.Data.DataColumn("ModMQte1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMQte1)
            Me.columnModMQte2 = New Global.System.Data.DataColumn("ModMQte2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMQte2)
            Me.columnModMLettrage = New Global.System.Data.DataColumn("ModMLettrage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMLettrage)
            Me.columnModMCptCtr = New Global.System.Data.DataColumn("ModMCptCtr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMCptCtr)
            Me.columnModMActCtr = New Global.System.Data.DataColumn("ModMActCtr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMActCtr)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnModMProd, Me.columnModMStatus, Me.columnModMPiece, Me.columnModMLig, Me.columnModMOrdre}, true))
            Me.columnModMProd.AllowDBNull = false
            Me.columnModMProd.MaxLength = 15
            Me.columnModMStatus.AllowDBNull = false
            Me.columnModMStatus.MaxLength = 1
            Me.columnModMPiece.AllowDBNull = false
            Me.columnModMPiece.MaxLength = 50
            Me.columnModMLig.AllowDBNull = false
            Me.columnModMOrdre.AllowDBNull = false
            Me.columnModMCpt.MaxLength = 8
            Me.columnModMActi.MaxLength = 4
            Me.columnModMD_C.MaxLength = 1
            Me.columnModMCptCtr.MaxLength = 8
            Me.columnModMActCtr.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewModMouvementsParaRow() As ModMouvementsParaRow
            Return CType(Me.NewRow,ModMouvementsParaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ModMouvementsParaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ModMouvementsParaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ModMouvementsParaRowChangedEvent) Is Nothing) Then
                RaiseEvent ModMouvementsParaRowChanged(Me, New ModMouvementsParaRowChangeEvent(CType(e.Row,ModMouvementsParaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ModMouvementsParaRowChangingEvent) Is Nothing) Then
                RaiseEvent ModMouvementsParaRowChanging(Me, New ModMouvementsParaRowChangeEvent(CType(e.Row,ModMouvementsParaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ModMouvementsParaRowDeletedEvent) Is Nothing) Then
                RaiseEvent ModMouvementsParaRowDeleted(Me, New ModMouvementsParaRowChangeEvent(CType(e.Row,ModMouvementsParaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ModMouvementsParaRowDeletingEvent) Is Nothing) Then
                RaiseEvent ModMouvementsParaRowDeleting(Me, New ModMouvementsParaRowChangeEvent(CType(e.Row,ModMouvementsParaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveModMouvementsParaRow(ByVal row As ModMouvementsParaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ModMouvementsParaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ModMouvementsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnModMExpl As Global.System.Data.DataColumn
        
        Private columnModMPiece As Global.System.Data.DataColumn
        
        Private columnModMLig As Global.System.Data.DataColumn
        
        Private columnModMOrdre As Global.System.Data.DataColumn
        
        Private columnModMCpt As Global.System.Data.DataColumn
        
        Private columnModMActi As Global.System.Data.DataColumn
        
        Private columnModMMtDeb As Global.System.Data.DataColumn
        
        Private columnModMMtCre As Global.System.Data.DataColumn
        
        Private columnModMD_C As Global.System.Data.DataColumn
        
        Private columnModMQte1 As Global.System.Data.DataColumn
        
        Private columnModMQte2 As Global.System.Data.DataColumn
        
        Private columnModMLettrage As Global.System.Data.DataColumn
        
        Private columnModMCptCtr As Global.System.Data.DataColumn
        
        Private columnModMActCtr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ModMouvements"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMExplColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMExpl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMPieceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMPiece
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMLigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMLig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMMtDebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMMtDeb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMMtCreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMMtCre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMD_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMD_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMQte1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMQte1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMQte2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMQte2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMLettrageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMLettrage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMCptCtrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMCptCtr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModMActCtrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModMActCtr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ModMouvementsRow
            Get
                Return CType(Me.Rows(index),ModMouvementsRow)
            End Get
        End Property
        
        Public Event ModMouvementsRowChanging As ModMouvementsRowChangeEventHandler
        
        Public Event ModMouvementsRowChanged As ModMouvementsRowChangeEventHandler
        
        Public Event ModMouvementsRowDeleting As ModMouvementsRowChangeEventHandler
        
        Public Event ModMouvementsRowDeleted As ModMouvementsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddModMouvementsRow(ByVal row As ModMouvementsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddModMouvementsRow(ByVal ModMExpl As String, ByVal ModMPiece As String, ByVal ModMLig As Integer, ByVal ModMOrdre As Byte, ByVal ModMCpt As String, ByVal ModMActi As String, ByVal ModMMtDeb As Decimal, ByVal ModMMtCre As Decimal, ByVal ModMD_C As String, ByVal ModMQte1 As Decimal, ByVal ModMQte2 As Decimal, ByVal ModMLettrage As Integer, ByVal ModMCptCtr As String, ByVal ModMActCtr As String) As ModMouvementsRow
            Dim rowModMouvementsRow As ModMouvementsRow = CType(Me.NewRow,ModMouvementsRow)
            Dim columnValuesArray() As Object = New Object() {ModMExpl, ModMPiece, ModMLig, ModMOrdre, ModMCpt, ModMActi, ModMMtDeb, ModMMtCre, ModMD_C, ModMQte1, ModMQte2, ModMLettrage, ModMCptCtr, ModMActCtr}
            rowModMouvementsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowModMouvementsRow)
            Return rowModMouvementsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByModMExplModMPieceModMLigModMOrdre(ByVal ModMExpl As String, ByVal ModMPiece As String, ByVal ModMLig As Integer, ByVal ModMOrdre As Byte) As ModMouvementsRow
            Return CType(Me.Rows.Find(New Object() {ModMExpl, ModMPiece, ModMLig, ModMOrdre}),ModMouvementsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ModMouvementsDataTable = CType(MyBase.Clone,ModMouvementsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ModMouvementsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnModMExpl = MyBase.Columns("ModMExpl")
            Me.columnModMPiece = MyBase.Columns("ModMPiece")
            Me.columnModMLig = MyBase.Columns("ModMLig")
            Me.columnModMOrdre = MyBase.Columns("ModMOrdre")
            Me.columnModMCpt = MyBase.Columns("ModMCpt")
            Me.columnModMActi = MyBase.Columns("ModMActi")
            Me.columnModMMtDeb = MyBase.Columns("ModMMtDeb")
            Me.columnModMMtCre = MyBase.Columns("ModMMtCre")
            Me.columnModMD_C = MyBase.Columns("ModMD_C")
            Me.columnModMQte1 = MyBase.Columns("ModMQte1")
            Me.columnModMQte2 = MyBase.Columns("ModMQte2")
            Me.columnModMLettrage = MyBase.Columns("ModMLettrage")
            Me.columnModMCptCtr = MyBase.Columns("ModMCptCtr")
            Me.columnModMActCtr = MyBase.Columns("ModMActCtr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnModMExpl = New Global.System.Data.DataColumn("ModMExpl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMExpl)
            Me.columnModMPiece = New Global.System.Data.DataColumn("ModMPiece", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMPiece)
            Me.columnModMLig = New Global.System.Data.DataColumn("ModMLig", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMLig)
            Me.columnModMOrdre = New Global.System.Data.DataColumn("ModMOrdre", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMOrdre)
            Me.columnModMCpt = New Global.System.Data.DataColumn("ModMCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMCpt)
            Me.columnModMActi = New Global.System.Data.DataColumn("ModMActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMActi)
            Me.columnModMMtDeb = New Global.System.Data.DataColumn("ModMMtDeb", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMMtDeb)
            Me.columnModMMtCre = New Global.System.Data.DataColumn("ModMMtCre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMMtCre)
            Me.columnModMD_C = New Global.System.Data.DataColumn("ModMD_C", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMD_C)
            Me.columnModMQte1 = New Global.System.Data.DataColumn("ModMQte1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMQte1)
            Me.columnModMQte2 = New Global.System.Data.DataColumn("ModMQte2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMQte2)
            Me.columnModMLettrage = New Global.System.Data.DataColumn("ModMLettrage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMLettrage)
            Me.columnModMCptCtr = New Global.System.Data.DataColumn("ModMCptCtr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMCptCtr)
            Me.columnModMActCtr = New Global.System.Data.DataColumn("ModMActCtr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModMActCtr)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnModMExpl, Me.columnModMPiece, Me.columnModMLig, Me.columnModMOrdre}, true))
            Me.columnModMExpl.AllowDBNull = false
            Me.columnModMExpl.MaxLength = 6
            Me.columnModMPiece.AllowDBNull = false
            Me.columnModMPiece.MaxLength = 50
            Me.columnModMLig.AllowDBNull = false
            Me.columnModMOrdre.AllowDBNull = false
            Me.columnModMCpt.MaxLength = 8
            Me.columnModMActi.MaxLength = 4
            Me.columnModMD_C.MaxLength = 1
            Me.columnModMCptCtr.MaxLength = 8
            Me.columnModMActCtr.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewModMouvementsRow() As ModMouvementsRow
            Return CType(Me.NewRow,ModMouvementsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ModMouvementsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ModMouvementsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ModMouvementsRowChangedEvent) Is Nothing) Then
                RaiseEvent ModMouvementsRowChanged(Me, New ModMouvementsRowChangeEvent(CType(e.Row,ModMouvementsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ModMouvementsRowChangingEvent) Is Nothing) Then
                RaiseEvent ModMouvementsRowChanging(Me, New ModMouvementsRowChangeEvent(CType(e.Row,ModMouvementsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ModMouvementsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ModMouvementsRowDeleted(Me, New ModMouvementsRowChangeEvent(CType(e.Row,ModMouvementsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ModMouvementsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ModMouvementsRowDeleting(Me, New ModMouvementsRowChangeEvent(CType(e.Row,ModMouvementsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveModMouvementsRow(ByVal row As ModMouvementsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ModMouvementsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ModLignesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnModLExpl As Global.System.Data.DataColumn
        
        Private columnModLPiece As Global.System.Data.DataColumn
        
        Private columnModLLig As Global.System.Data.DataColumn
        
        Private columnModLTva As Global.System.Data.DataColumn
        
        Private columnModLLib As Global.System.Data.DataColumn
        
        Private columnModLGene As Global.System.Data.DataColumn
        
        Private columnModLAna As Global.System.Data.DataColumn
        
        Private columnModLJournal As Global.System.Data.DataColumn
        
        Private columnModLMtTVA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ModLignes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLExplColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLExpl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLPieceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLPiece
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLLigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLLig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLGeneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLGene
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLAnaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLAna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLJournalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLJournal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModLMtTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModLMtTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ModLignesRow
            Get
                Return CType(Me.Rows(index),ModLignesRow)
            End Get
        End Property
        
        Public Event ModLignesRowChanging As ModLignesRowChangeEventHandler
        
        Public Event ModLignesRowChanged As ModLignesRowChangeEventHandler
        
        Public Event ModLignesRowDeleting As ModLignesRowChangeEventHandler
        
        Public Event ModLignesRowDeleted As ModLignesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddModLignesRow(ByVal row As ModLignesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddModLignesRow(ByVal parentExploitationsRowByExploitationsModLignes As ExploitationsRow, ByVal ModLPiece As String, ByVal ModLLig As Integer, ByVal ModLTva As String, ByVal ModLLib As String, ByVal ModLGene As String, ByVal ModLAna As String, ByVal ModLJournal As String, ByVal ModLMtTVA As String) As ModLignesRow
            Dim rowModLignesRow As ModLignesRow = CType(Me.NewRow,ModLignesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ModLPiece, ModLLig, ModLTva, ModLLib, ModLGene, ModLAna, ModLJournal, ModLMtTVA}
            If (Not (parentExploitationsRowByExploitationsModLignes) Is Nothing) Then
                columnValuesArray(0) = parentExploitationsRowByExploitationsModLignes(0)
            End If
            rowModLignesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowModLignesRow)
            Return rowModLignesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByModLExplModLPieceModLLig(ByVal ModLExpl As String, ByVal ModLPiece As String, ByVal ModLLig As Integer) As ModLignesRow
            Return CType(Me.Rows.Find(New Object() {ModLExpl, ModLPiece, ModLLig}),ModLignesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ModLignesDataTable = CType(MyBase.Clone,ModLignesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ModLignesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnModLExpl = MyBase.Columns("ModLExpl")
            Me.columnModLPiece = MyBase.Columns("ModLPiece")
            Me.columnModLLig = MyBase.Columns("ModLLig")
            Me.columnModLTva = MyBase.Columns("ModLTva")
            Me.columnModLLib = MyBase.Columns("ModLLib")
            Me.columnModLGene = MyBase.Columns("ModLGene")
            Me.columnModLAna = MyBase.Columns("ModLAna")
            Me.columnModLJournal = MyBase.Columns("ModLJournal")
            Me.columnModLMtTVA = MyBase.Columns("ModLMtTVA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnModLExpl = New Global.System.Data.DataColumn("ModLExpl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLExpl)
            Me.columnModLPiece = New Global.System.Data.DataColumn("ModLPiece", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLPiece)
            Me.columnModLLig = New Global.System.Data.DataColumn("ModLLig", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLLig)
            Me.columnModLTva = New Global.System.Data.DataColumn("ModLTva", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLTva)
            Me.columnModLLib = New Global.System.Data.DataColumn("ModLLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLLib)
            Me.columnModLGene = New Global.System.Data.DataColumn("ModLGene", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLGene)
            Me.columnModLAna = New Global.System.Data.DataColumn("ModLAna", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLAna)
            Me.columnModLJournal = New Global.System.Data.DataColumn("ModLJournal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLJournal)
            Me.columnModLMtTVA = New Global.System.Data.DataColumn("ModLMtTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModLMtTVA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnModLExpl, Me.columnModLPiece, Me.columnModLLig}, true))
            Me.columnModLExpl.AllowDBNull = false
            Me.columnModLExpl.MaxLength = 6
            Me.columnModLPiece.AllowDBNull = false
            Me.columnModLPiece.MaxLength = 50
            Me.columnModLLig.AllowDBNull = false
            Me.columnModLTva.MaxLength = 5
            Me.columnModLLib.MaxLength = 55
            Me.columnModLGene.MaxLength = 1
            Me.columnModLAna.MaxLength = 1
            Me.columnModLJournal.MaxLength = 4
            Me.columnModLMtTVA.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewModLignesRow() As ModLignesRow
            Return CType(Me.NewRow,ModLignesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ModLignesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ModLignesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ModLignesRowChangedEvent) Is Nothing) Then
                RaiseEvent ModLignesRowChanged(Me, New ModLignesRowChangeEvent(CType(e.Row,ModLignesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ModLignesRowChangingEvent) Is Nothing) Then
                RaiseEvent ModLignesRowChanging(Me, New ModLignesRowChangeEvent(CType(e.Row,ModLignesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ModLignesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ModLignesRowDeleted(Me, New ModLignesRowChangeEvent(CType(e.Row,ModLignesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ModLignesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ModLignesRowDeleting(Me, New ModLignesRowChangeEvent(CType(e.Row,ModLignesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveModLignesRow(ByVal row As ModLignesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPLC = New dsPLC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ModLignesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ActivitesRow
        Inherits Global.System.Data.DataRow
        
        Private tableActivites As ActivitesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableActivites = CType(Me.Table,ActivitesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADossier() As String
            Get
                Return CType(Me(Me.tableActivites.ADossierColumn),String)
            End Get
            Set
                Me(Me.tableActivites.ADossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AActi() As String
            Get
                Return CType(Me(Me.tableActivites.AActiColumn),String)
            End Get
            Set
                Me(Me.tableActivites.AActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALib() As String
            Get
                Try 
                    Return CType(Me(Me.tableActivites.ALibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ALib' dans la table 'Activites' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivites.ALibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AQte() As Single
            Get
                Try 
                    Return CType(Me(Me.tableActivites.AQteColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AQte' dans la table 'Activites' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivites.AQteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableActivites.AUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AUnit' dans la table 'Activites' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivites.AUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADisplay() As String
            Get
                Try 
                    Return CType(Me(Me.tableActivites.ADisplayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ADisplay' dans la table 'Activites' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivites.ADisplayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DossiersRow() As DossiersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Dossiers_Activites")),DossiersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Dossiers_Activites"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALibNull() As Boolean
            Return Me.IsNull(Me.tableActivites.ALibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALibNull()
            Me(Me.tableActivites.ALibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAQteNull() As Boolean
            Return Me.IsNull(Me.tableActivites.AQteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAQteNull()
            Me(Me.tableActivites.AQteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUnitNull() As Boolean
            Return Me.IsNull(Me.tableActivites.AUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUnitNull()
            Me(Me.tableActivites.AUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADisplayNull() As Boolean
            Return Me.IsNull(Me.tableActivites.ADisplayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADisplayNull()
            Me(Me.tableActivites.ADisplayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPlanComptableRows() As PlanComptableRow()
            If (Me.Table.ChildRelations("ActivitesPlanComptable") Is Nothing) Then
                Return New PlanComptableRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ActivitesPlanComptable")),PlanComptableRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComptesRow
        Inherits Global.System.Data.DataRow
        
        Private tableComptes As ComptesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableComptes = CType(Me.Table,ComptesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDossier() As String
            Get
                Return CType(Me(Me.tableComptes.CDossierColumn),String)
            End Get
            Set
                Me(Me.tableComptes.CDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCpt() As String
            Get
                Return CType(Me(Me.tableComptes.CCptColumn),String)
            End Get
            Set
                Me(Me.tableComptes.CCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CLib' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CU1() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CU1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CU1' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CU2() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CU2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CU2' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDisplay() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CDisplayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDisplay' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CDisplayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CSelected() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CSelectedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CSelected' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CSelectedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CActivites() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CActivitesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CActivites' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CActivitesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property C_DC() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.C_DCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'C_DC' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.C_DCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCptContre() As String
            Get
                Try 
                    Return CType(Me(Me.tableComptes.CCptContreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CCptContre' dans la table 'Comptes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComptes.CCptContreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DossiersRow() As DossiersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DossiersComptes")),DossiersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DossiersComptes"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanTypeRow() As PlanTypeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanTypeComptes")),PlanTypeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanTypeComptes"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLibNull() As Boolean
            Return Me.IsNull(Me.tableComptes.CLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLibNull()
            Me(Me.tableComptes.CLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCU1Null() As Boolean
            Return Me.IsNull(Me.tableComptes.CU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCU1Null()
            Me(Me.tableComptes.CU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCU2Null() As Boolean
            Return Me.IsNull(Me.tableComptes.CU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCU2Null()
            Me(Me.tableComptes.CU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDisplayNull() As Boolean
            Return Me.IsNull(Me.tableComptes.CDisplayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDisplayNull()
            Me(Me.tableComptes.CDisplayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCSelectedNull() As Boolean
            Return Me.IsNull(Me.tableComptes.CSelectedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCSelectedNull()
            Me(Me.tableComptes.CSelectedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCActivitesNull() As Boolean
            Return Me.IsNull(Me.tableComptes.CActivitesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCActivitesNull()
            Me(Me.tableComptes.CActivitesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsC_DCNull() As Boolean
            Return Me.IsNull(Me.tableComptes.C_DCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetC_DCNull()
            Me(Me.tableComptes.C_DCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCptContreNull() As Boolean
            Return Me.IsNull(Me.tableComptes.CCptContreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCptContreNull()
            Me(Me.tableComptes.CCptContreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPlanComptableRows() As PlanComptableRow()
            If (Me.Table.ChildRelations("ComptesPlanComptable") Is Nothing) Then
                Return New PlanComptableRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ComptesPlanComptable")),PlanComptableRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DossiersRow
        Inherits Global.System.Data.DataRow
        
        Private tableDossiers As DossiersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDossiers = CType(Me.Table,DossiersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDossier() As String
            Get
                Return CType(Me(Me.tableDossiers.DDossierColumn),String)
            End Get
            Set
                Me(Me.tableDossiers.DDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DExpl() As String
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DExplColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DExpl' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DExplColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDtDebEx() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DDtDebExColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DDtDebEx' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DDtDebExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDtFinEx() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DDtFinExColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DDtFinEx' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DDtFinExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDtArrete() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DDtArreteColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DDtArrete' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DDtArreteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBqCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DBqCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DBqCpt' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DBqCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBqVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DBqValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DBqVal' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DBqValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBqFolio1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DBqFolio1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DBqFolio1' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DBqFolio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DCptOuvert() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDossiers.DCptOuvertColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DCptOuvert' dans la table 'Dossiers' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDossiers.DCptOuvertColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExploitationsRow() As ExploitationsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ExploitationsDossiers")),ExploitationsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ExploitationsDossiers"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDExplNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DExplColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDExplNull()
            Me(Me.tableDossiers.DExplColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDDtDebExNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DDtDebExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDDtDebExNull()
            Me(Me.tableDossiers.DDtDebExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDDtFinExNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DDtFinExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDDtFinExNull()
            Me(Me.tableDossiers.DDtFinExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDDtArreteNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DDtArreteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDDtArreteNull()
            Me(Me.tableDossiers.DDtArreteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBqCptNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DBqCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBqCptNull()
            Me(Me.tableDossiers.DBqCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBqValNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DBqValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBqValNull()
            Me(Me.tableDossiers.DBqValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBqFolio1Null() As Boolean
            Return Me.IsNull(Me.tableDossiers.DBqFolio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBqFolio1Null()
            Me(Me.tableDossiers.DBqFolio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDCptOuvertNull() As Boolean
            Return Me.IsNull(Me.tableDossiers.DCptOuvertColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDCptOuvertNull()
            Me(Me.tableDossiers.DCptOuvertColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetComptesRows() As ComptesRow()
            If (Me.Table.ChildRelations("DossiersComptes") Is Nothing) Then
                Return New ComptesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("DossiersComptes")),ComptesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetActivitesRows() As ActivitesRow()
            If (Me.Table.ChildRelations("Dossiers_Activites") Is Nothing) Then
                Return New ActivitesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Dossiers_Activites")),ActivitesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ExploitationsRow
        Inherits Global.System.Data.DataRow
        
        Private tableExploitations As ExploitationsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableExploitations = CType(Me.Table,ExploitationsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EExpl() As String
            Get
                Return CType(Me(Me.tableExploitations.EExplColumn),String)
            End Get
            Set
                Me(Me.tableExploitations.EExplColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENom1() As String
            Get
                Try 
                    Return CType(Me(Me.tableExploitations.ENom1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ENom1' dans la table 'Exploitations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExploitations.ENom1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENom2() As String
            Get
                Try 
                    Return CType(Me(Me.tableExploitations.ENom2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ENom2' dans la table 'Exploitations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExploitations.ENom2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EType() As String
            Get
                Try 
                    Return CType(Me(Me.tableExploitations.ETypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'EType' dans la table 'Exploitations' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExploitations.ETypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENom1Null() As Boolean
            Return Me.IsNull(Me.tableExploitations.ENom1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENom1Null()
            Me(Me.tableExploitations.ENom1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENom2Null() As Boolean
            Return Me.IsNull(Me.tableExploitations.ENom2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENom2Null()
            Me(Me.tableExploitations.ENom2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsETypeNull() As Boolean
            Return Me.IsNull(Me.tableExploitations.ETypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetETypeNull()
            Me(Me.tableExploitations.ETypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDossiersRows() As DossiersRow()
            If (Me.Table.ChildRelations("ExploitationsDossiers") Is Nothing) Then
                Return New DossiersRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ExploitationsDossiers")),DossiersRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetModLignesRows() As ModLignesRow()
            If (Me.Table.ChildRelations("ExploitationsModLignes") Is Nothing) Then
                Return New ModLignesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ExploitationsModLignes")),ModLignesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PlanComptableRow
        Inherits Global.System.Data.DataRow
        
        Private tablePlanComptable As PlanComptableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanComptable = CType(Me.Table,PlanComptableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlDossier() As String
            Get
                Return CType(Me(Me.tablePlanComptable.PlDossierColumn),String)
            End Get
            Set
                Me(Me.tablePlanComptable.PlDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlCpt() As String
            Get
                Return CType(Me(Me.tablePlanComptable.PlCptColumn),String)
            End Get
            Set
                Me(Me.tablePlanComptable.PlCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlActi() As String
            Get
                Return CType(Me(Me.tablePlanComptable.PlActiColumn),String)
            End Get
            Set
                Me(Me.tablePlanComptable.PlActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlLib() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlLib' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepG_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepG_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepG_C' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepG_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepG_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepG_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepG_D' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepG_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepG_U1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepG_U1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepG_U1' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepG_U1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepG_U2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepG_U2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepG_U2' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepG_U2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepA_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepA_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepA_C' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepA_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepA_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepA_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepA_D' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepA_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepA_U1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepA_U1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepA_U1' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepA_U1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRepA_U2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlRepA_U2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRepA_U2' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlRepA_U2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeG_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeG_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeG_C' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeG_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeG_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeG_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeG_D' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeG_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeG_U1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeG_U1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeG_U1' dans la table 'PlanComptable' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeG_U1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeG_U2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeG_U2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeG_U2' dans la table 'PlanComptable' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeG_U2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeA_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeA_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeA_C' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeA_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeA_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeA_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeA_D' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeA_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeA_U1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeA_U1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeA_U1' dans la table 'PlanComptable' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeA_U1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlSoldeA_U2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.PlSoldeA_U2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlSoldeA_U2' dans la table 'PlanComptable' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.PlSoldeA_U2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CptDisplay() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.CptDisplayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CptDisplay' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.CptDisplayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActDisplay() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.ActDisplayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ActDisplay' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.ActDisplayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CU1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.CU1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CU1' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.CU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CU2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.CU2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CU2' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.CU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AQte() As Single
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.AQteColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AQte' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.AQteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.AUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AUnit' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.AUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADisplay() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanComptable.ADisplayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ADisplay' dans la table 'PlanComptable' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanComptable.ADisplayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComptesRowParent() As ComptesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ComptesPlanComptable")),ComptesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ComptesPlanComptable"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActivitesRowParent() As ActivitesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ActivitesPlanComptable")),ActivitesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ActivitesPlanComptable"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlLibNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlLibNull()
            Me(Me.tablePlanComptable.PlLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepG_CNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepG_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepG_CNull()
            Me(Me.tablePlanComptable.PlRepG_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepG_DNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepG_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepG_DNull()
            Me(Me.tablePlanComptable.PlRepG_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepG_U1Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepG_U1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepG_U1Null()
            Me(Me.tablePlanComptable.PlRepG_U1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepG_U2Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepG_U2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepG_U2Null()
            Me(Me.tablePlanComptable.PlRepG_U2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepA_CNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepA_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepA_CNull()
            Me(Me.tablePlanComptable.PlRepA_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepA_DNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepA_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepA_DNull()
            Me(Me.tablePlanComptable.PlRepA_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepA_U1Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepA_U1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepA_U1Null()
            Me(Me.tablePlanComptable.PlRepA_U1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRepA_U2Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlRepA_U2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRepA_U2Null()
            Me(Me.tablePlanComptable.PlRepA_U2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeG_CNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeG_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeG_CNull()
            Me(Me.tablePlanComptable.PlSoldeG_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeG_DNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeG_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeG_DNull()
            Me(Me.tablePlanComptable.PlSoldeG_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeG_U1Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeG_U1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeG_U1Null()
            Me(Me.tablePlanComptable.PlSoldeG_U1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeG_U2Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeG_U2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeG_U2Null()
            Me(Me.tablePlanComptable.PlSoldeG_U2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeA_CNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeA_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeA_CNull()
            Me(Me.tablePlanComptable.PlSoldeA_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeA_DNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeA_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeA_DNull()
            Me(Me.tablePlanComptable.PlSoldeA_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeA_U1Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeA_U1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeA_U1Null()
            Me(Me.tablePlanComptable.PlSoldeA_U1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlSoldeA_U2Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.PlSoldeA_U2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlSoldeA_U2Null()
            Me(Me.tablePlanComptable.PlSoldeA_U2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCptDisplayNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.CptDisplayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCptDisplayNull()
            Me(Me.tablePlanComptable.CptDisplayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActDisplayNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.ActDisplayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActDisplayNull()
            Me(Me.tablePlanComptable.ActDisplayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCU1Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.CU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCU1Null()
            Me(Me.tablePlanComptable.CU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCU2Null() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.CU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCU2Null()
            Me(Me.tablePlanComptable.CU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAQteNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.AQteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAQteNull()
            Me(Me.tablePlanComptable.AQteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUnitNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.AUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUnitNull()
            Me(Me.tablePlanComptable.AUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADisplayNull() As Boolean
            Return Me.IsNull(Me.tablePlanComptable.ADisplayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADisplayNull()
            Me(Me.tablePlanComptable.ADisplayColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ParametrageRow
        Inherits Global.System.Data.DataRow
        
        Private tableParametrage As ParametrageDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParametrage = CType(Me.Table,ParametrageDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProd() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametrage.CodeProdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CodeProd' dans la table 'Parametrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametrage.CodeProdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Statut() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametrage.StatutColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Statut' dans la table 'Parametrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametrage.StatutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametrage.CCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CCpt' dans la table 'Parametrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametrage.CCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametrage.AActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AActi' dans la table 'Parametrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametrage.AActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametrage.CLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CLib' dans la table 'Parametrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametrage.CLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CU1() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametrage.CU1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CU1' dans la table 'Parametrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametrage.CU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CU2() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametrage.CU2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CU2' dans la table 'Parametrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametrage.CU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALib() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametrage.ALibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ALib' dans la table 'Parametrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametrage.ALibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametrage.AUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AUnit' dans la table 'Parametrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametrage.AUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property C_DC() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametrage.C_DCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'C_DC' dans la table 'Parametrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametrage.C_DCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanTypeRow() As PlanTypeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanType_Parametrage")),PlanTypeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanType_Parametrage"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RicaRow() As RicaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Rica_Parametrage")),RicaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Rica_Parametrage"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProdNull() As Boolean
            Return Me.IsNull(Me.tableParametrage.CodeProdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProdNull()
            Me(Me.tableParametrage.CodeProdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatutNull() As Boolean
            Return Me.IsNull(Me.tableParametrage.StatutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatutNull()
            Me(Me.tableParametrage.StatutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCptNull() As Boolean
            Return Me.IsNull(Me.tableParametrage.CCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCptNull()
            Me(Me.tableParametrage.CCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAActiNull() As Boolean
            Return Me.IsNull(Me.tableParametrage.AActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAActiNull()
            Me(Me.tableParametrage.AActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLibNull() As Boolean
            Return Me.IsNull(Me.tableParametrage.CLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLibNull()
            Me(Me.tableParametrage.CLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCU1Null() As Boolean
            Return Me.IsNull(Me.tableParametrage.CU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCU1Null()
            Me(Me.tableParametrage.CU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCU2Null() As Boolean
            Return Me.IsNull(Me.tableParametrage.CU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCU2Null()
            Me(Me.tableParametrage.CU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALibNull() As Boolean
            Return Me.IsNull(Me.tableParametrage.ALibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALibNull()
            Me(Me.tableParametrage.ALibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUnitNull() As Boolean
            Return Me.IsNull(Me.tableParametrage.AUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUnitNull()
            Me(Me.tableParametrage.AUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsC_DCNull() As Boolean
            Return Me.IsNull(Me.tableParametrage.C_DCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetC_DCNull()
            Me(Me.tableParametrage.C_DCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PlanTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tablePlanType As PlanTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanType = CType(Me.Table,PlanTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlCpt' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlLib() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlLib' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlRacine() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlRacineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlRacine' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlRacineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlU1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlU1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlU1' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlU2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlU2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlU2' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlActi() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlActi' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlActiPermis() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlActiPermisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlActiPermis' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlActiPermisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlTVA' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlDisplay() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlDisplayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlDisplay' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlDisplayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlD_C() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlD_CColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlD_C' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlD_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlMotsCles() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.PlMotsClesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PlMotsCles' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.PlMotsClesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanType.CCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CCpt' dans la table 'PlanType' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanType.CCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlCptNull() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlCptNull()
            Me(Me.tablePlanType.PlCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlLibNull() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlLibNull()
            Me(Me.tablePlanType.PlLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlRacineNull() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlRacineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlRacineNull()
            Me(Me.tablePlanType.PlRacineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlU1Null() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlU1Null()
            Me(Me.tablePlanType.PlU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlU2Null() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlU2Null()
            Me(Me.tablePlanType.PlU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlActiNull() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlActiNull()
            Me(Me.tablePlanType.PlActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlActiPermisNull() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlActiPermisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlActiPermisNull()
            Me(Me.tablePlanType.PlActiPermisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlTVANull() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlTVANull()
            Me(Me.tablePlanType.PlTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlDisplayNull() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlDisplayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlDisplayNull()
            Me(Me.tablePlanType.PlDisplayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlD_CNull() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlD_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlD_CNull()
            Me(Me.tablePlanType.PlD_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlMotsClesNull() As Boolean
            Return Me.IsNull(Me.tablePlanType.PlMotsClesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlMotsClesNull()
            Me(Me.tablePlanType.PlMotsClesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCptNull() As Boolean
            Return Me.IsNull(Me.tablePlanType.CCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCptNull()
            Me(Me.tablePlanType.CCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetComptesRows() As ComptesRow()
            If (Me.Table.ChildRelations("PlanTypeComptes") Is Nothing) Then
                Return New ComptesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanTypeComptes")),ComptesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetParametrageRows() As ParametrageRow()
            If (Me.Table.ChildRelations("PlanType_Parametrage") Is Nothing) Then
                Return New ParametrageRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanType_Parametrage")),ParametrageRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RicaRow
        Inherits Global.System.Data.DataRow
        
        Private tableRica As RicaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRica = CType(Me.Table,RicaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RiCode() As String
            Get
                Return CType(Me(Me.tableRica.RiCodeColumn),String)
            End Get
            Set
                Me(Me.tableRica.RiCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RiLib1() As String
            Get
                Try 
                    Return CType(Me(Me.tableRica.RiLib1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'RiLib1' dans la table 'Rica' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRica.RiLib1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RiLib2() As String
            Get
                Try 
                    Return CType(Me(Me.tableRica.RiLib2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'RiLib2' dans la table 'Rica' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRica.RiLib2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RiUnite() As String
            Get
                Try 
                    Return CType(Me(Me.tableRica.RiUniteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'RiUnite' dans la table 'Rica' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRica.RiUniteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RDisplay() As String
            Get
                Try 
                    Return CType(Me(Me.tableRica.RDisplayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'RDisplay' dans la table 'Rica' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRica.RDisplayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRiLib1Null() As Boolean
            Return Me.IsNull(Me.tableRica.RiLib1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRiLib1Null()
            Me(Me.tableRica.RiLib1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRiLib2Null() As Boolean
            Return Me.IsNull(Me.tableRica.RiLib2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRiLib2Null()
            Me(Me.tableRica.RiLib2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRiUniteNull() As Boolean
            Return Me.IsNull(Me.tableRica.RiUniteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRiUniteNull()
            Me(Me.tableRica.RiUniteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRDisplayNull() As Boolean
            Return Me.IsNull(Me.tableRica.RDisplayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRDisplayNull()
            Me(Me.tableRica.RDisplayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetParametrageRows() As ParametrageRow()
            If (Me.Table.ChildRelations("Rica_Parametrage") Is Nothing) Then
                Return New ParametrageRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Rica_Parametrage")),ParametrageRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ModLignesParaRow
        Inherits Global.System.Data.DataRow
        
        Private tableModLignesPara As ModLignesParaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableModLignesPara = CType(Me.Table,ModLignesParaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLProd() As String
            Get
                Return CType(Me(Me.tableModLignesPara.ModLProdColumn),String)
            End Get
            Set
                Me(Me.tableModLignesPara.ModLProdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLStatus() As String
            Get
                Return CType(Me(Me.tableModLignesPara.ModLStatusColumn),String)
            End Get
            Set
                Me(Me.tableModLignesPara.ModLStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLPiece() As String
            Get
                Return CType(Me(Me.tableModLignesPara.ModLPieceColumn),String)
            End Get
            Set
                Me(Me.tableModLignesPara.ModLPieceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLLig() As Integer
            Get
                Return CType(Me(Me.tableModLignesPara.ModLLigColumn),Integer)
            End Get
            Set
                Me(Me.tableModLignesPara.ModLLigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLTva() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignesPara.ModLTvaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLTva' dans la table 'ModLignesPara' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignesPara.ModLTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignesPara.ModLLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLLib' dans la table 'ModLignesPara' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignesPara.ModLLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLGene() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignesPara.ModLGeneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLGene' dans la table 'ModLignesPara' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignesPara.ModLGeneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLAna() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignesPara.ModLAnaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLAna' dans la table 'ModLignesPara' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignesPara.ModLAnaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLJournal() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignesPara.ModLJournalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLJournal' dans la table 'ModLignesPara' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignesPara.ModLJournalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLMtTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignesPara.ModLMtTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLMtTVA' dans la table 'ModLignesPara' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignesPara.ModLMtTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLTvaNull() As Boolean
            Return Me.IsNull(Me.tableModLignesPara.ModLTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLTvaNull()
            Me(Me.tableModLignesPara.ModLTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLLibNull() As Boolean
            Return Me.IsNull(Me.tableModLignesPara.ModLLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLLibNull()
            Me(Me.tableModLignesPara.ModLLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLGeneNull() As Boolean
            Return Me.IsNull(Me.tableModLignesPara.ModLGeneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLGeneNull()
            Me(Me.tableModLignesPara.ModLGeneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLAnaNull() As Boolean
            Return Me.IsNull(Me.tableModLignesPara.ModLAnaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLAnaNull()
            Me(Me.tableModLignesPara.ModLAnaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLJournalNull() As Boolean
            Return Me.IsNull(Me.tableModLignesPara.ModLJournalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLJournalNull()
            Me(Me.tableModLignesPara.ModLJournalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLMtTVANull() As Boolean
            Return Me.IsNull(Me.tableModLignesPara.ModLMtTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLMtTVANull()
            Me(Me.tableModLignesPara.ModLMtTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetModMouvementsParaRows() As ModMouvementsParaRow()
            If (Me.Table.ChildRelations("ModLignesParaModMouvementsPara") Is Nothing) Then
                Return New ModMouvementsParaRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ModLignesParaModMouvementsPara")),ModMouvementsParaRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ModMouvementsParaRow
        Inherits Global.System.Data.DataRow
        
        Private tableModMouvementsPara As ModMouvementsParaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableModMouvementsPara = CType(Me.Table,ModMouvementsParaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMProd() As String
            Get
                Return CType(Me(Me.tableModMouvementsPara.ModMProdColumn),String)
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMProdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMStatus() As String
            Get
                Return CType(Me(Me.tableModMouvementsPara.ModMStatusColumn),String)
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMPiece() As String
            Get
                Return CType(Me(Me.tableModMouvementsPara.ModMPieceColumn),String)
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMPieceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMLig() As Integer
            Get
                Return CType(Me(Me.tableModMouvementsPara.ModMLigColumn),Integer)
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMLigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMOrdre() As Byte
            Get
                Return CType(Me(Me.tableModMouvementsPara.ModMOrdreColumn),Byte)
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableModMouvementsPara.ModMCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMCpt' dans la table 'ModMouvementsPara' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableModMouvementsPara.ModMActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMActi' dans la table 'ModMouvementsPara' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMMtDeb() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableModMouvementsPara.ModMMtDebColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMMtDeb' dans la table 'ModMouvementsPara' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMMtDebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMMtCre() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableModMouvementsPara.ModMMtCreColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMMtCre' dans la table 'ModMouvementsPara' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMMtCreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMD_C() As String
            Get
                Try 
                    Return CType(Me(Me.tableModMouvementsPara.ModMD_CColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMD_C' dans la table 'ModMouvementsPara' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMD_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMQte1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableModMouvementsPara.ModMQte1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMQte1' dans la table 'ModMouvementsPara' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMQte1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMQte2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableModMouvementsPara.ModMQte2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMQte2' dans la table 'ModMouvementsPara' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMQte2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMLettrage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableModMouvementsPara.ModMLettrageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMLettrage' dans la table 'ModMouvementsPara' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMLettrageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMCptCtr() As String
            Get
                Try 
                    Return CType(Me(Me.tableModMouvementsPara.ModMCptCtrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMCptCtr' dans la table 'ModMouvementsPara' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMCptCtrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMActCtr() As String
            Get
                Try 
                    Return CType(Me(Me.tableModMouvementsPara.ModMActCtrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMActCtr' dans la table 'ModMouvementsPara' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvementsPara.ModMActCtrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLignesParaRowParent() As ModLignesParaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ModLignesParaModMouvementsPara")),ModLignesParaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ModLignesParaModMouvementsPara"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMCptNull() As Boolean
            Return Me.IsNull(Me.tableModMouvementsPara.ModMCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMCptNull()
            Me(Me.tableModMouvementsPara.ModMCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMActiNull() As Boolean
            Return Me.IsNull(Me.tableModMouvementsPara.ModMActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMActiNull()
            Me(Me.tableModMouvementsPara.ModMActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMMtDebNull() As Boolean
            Return Me.IsNull(Me.tableModMouvementsPara.ModMMtDebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMMtDebNull()
            Me(Me.tableModMouvementsPara.ModMMtDebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMMtCreNull() As Boolean
            Return Me.IsNull(Me.tableModMouvementsPara.ModMMtCreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMMtCreNull()
            Me(Me.tableModMouvementsPara.ModMMtCreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMD_CNull() As Boolean
            Return Me.IsNull(Me.tableModMouvementsPara.ModMD_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMD_CNull()
            Me(Me.tableModMouvementsPara.ModMD_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMQte1Null() As Boolean
            Return Me.IsNull(Me.tableModMouvementsPara.ModMQte1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMQte1Null()
            Me(Me.tableModMouvementsPara.ModMQte1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMQte2Null() As Boolean
            Return Me.IsNull(Me.tableModMouvementsPara.ModMQte2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMQte2Null()
            Me(Me.tableModMouvementsPara.ModMQte2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMLettrageNull() As Boolean
            Return Me.IsNull(Me.tableModMouvementsPara.ModMLettrageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMLettrageNull()
            Me(Me.tableModMouvementsPara.ModMLettrageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMCptCtrNull() As Boolean
            Return Me.IsNull(Me.tableModMouvementsPara.ModMCptCtrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMCptCtrNull()
            Me(Me.tableModMouvementsPara.ModMCptCtrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMActCtrNull() As Boolean
            Return Me.IsNull(Me.tableModMouvementsPara.ModMActCtrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMActCtrNull()
            Me(Me.tableModMouvementsPara.ModMActCtrColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ModMouvementsRow
        Inherits Global.System.Data.DataRow
        
        Private tableModMouvements As ModMouvementsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableModMouvements = CType(Me.Table,ModMouvementsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMExpl() As String
            Get
                Return CType(Me(Me.tableModMouvements.ModMExplColumn),String)
            End Get
            Set
                Me(Me.tableModMouvements.ModMExplColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMPiece() As String
            Get
                Return CType(Me(Me.tableModMouvements.ModMPieceColumn),String)
            End Get
            Set
                Me(Me.tableModMouvements.ModMPieceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMLig() As Integer
            Get
                Return CType(Me(Me.tableModMouvements.ModMLigColumn),Integer)
            End Get
            Set
                Me(Me.tableModMouvements.ModMLigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMOrdre() As Byte
            Get
                Return CType(Me(Me.tableModMouvements.ModMOrdreColumn),Byte)
            End Get
            Set
                Me(Me.tableModMouvements.ModMOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableModMouvements.ModMCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMCpt' dans la table 'ModMouvements' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvements.ModMCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableModMouvements.ModMActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMActi' dans la table 'ModMouvements' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvements.ModMActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMMtDeb() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableModMouvements.ModMMtDebColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMMtDeb' dans la table 'ModMouvements' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvements.ModMMtDebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMMtCre() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableModMouvements.ModMMtCreColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMMtCre' dans la table 'ModMouvements' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvements.ModMMtCreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMD_C() As String
            Get
                Try 
                    Return CType(Me(Me.tableModMouvements.ModMD_CColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMD_C' dans la table 'ModMouvements' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvements.ModMD_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMQte1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableModMouvements.ModMQte1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMQte1' dans la table 'ModMouvements' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvements.ModMQte1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMQte2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableModMouvements.ModMQte2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMQte2' dans la table 'ModMouvements' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvements.ModMQte2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMLettrage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableModMouvements.ModMLettrageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMLettrage' dans la table 'ModMouvements' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvements.ModMLettrageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMCptCtr() As String
            Get
                Try 
                    Return CType(Me(Me.tableModMouvements.ModMCptCtrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMCptCtr' dans la table 'ModMouvements' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvements.ModMCptCtrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModMActCtr() As String
            Get
                Try 
                    Return CType(Me(Me.tableModMouvements.ModMActCtrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModMActCtr' dans la table 'ModMouvements' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModMouvements.ModMActCtrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLignesRowParent() As ModLignesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ModLignesModMouvements")),ModLignesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ModLignesModMouvements"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMCptNull() As Boolean
            Return Me.IsNull(Me.tableModMouvements.ModMCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMCptNull()
            Me(Me.tableModMouvements.ModMCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMActiNull() As Boolean
            Return Me.IsNull(Me.tableModMouvements.ModMActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMActiNull()
            Me(Me.tableModMouvements.ModMActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMMtDebNull() As Boolean
            Return Me.IsNull(Me.tableModMouvements.ModMMtDebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMMtDebNull()
            Me(Me.tableModMouvements.ModMMtDebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMMtCreNull() As Boolean
            Return Me.IsNull(Me.tableModMouvements.ModMMtCreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMMtCreNull()
            Me(Me.tableModMouvements.ModMMtCreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMD_CNull() As Boolean
            Return Me.IsNull(Me.tableModMouvements.ModMD_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMD_CNull()
            Me(Me.tableModMouvements.ModMD_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMQte1Null() As Boolean
            Return Me.IsNull(Me.tableModMouvements.ModMQte1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMQte1Null()
            Me(Me.tableModMouvements.ModMQte1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMQte2Null() As Boolean
            Return Me.IsNull(Me.tableModMouvements.ModMQte2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMQte2Null()
            Me(Me.tableModMouvements.ModMQte2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMLettrageNull() As Boolean
            Return Me.IsNull(Me.tableModMouvements.ModMLettrageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMLettrageNull()
            Me(Me.tableModMouvements.ModMLettrageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMCptCtrNull() As Boolean
            Return Me.IsNull(Me.tableModMouvements.ModMCptCtrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMCptCtrNull()
            Me(Me.tableModMouvements.ModMCptCtrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModMActCtrNull() As Boolean
            Return Me.IsNull(Me.tableModMouvements.ModMActCtrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModMActCtrNull()
            Me(Me.tableModMouvements.ModMActCtrColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ModLignesRow
        Inherits Global.System.Data.DataRow
        
        Private tableModLignes As ModLignesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableModLignes = CType(Me.Table,ModLignesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLExpl() As String
            Get
                Return CType(Me(Me.tableModLignes.ModLExplColumn),String)
            End Get
            Set
                Me(Me.tableModLignes.ModLExplColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLPiece() As String
            Get
                Return CType(Me(Me.tableModLignes.ModLPieceColumn),String)
            End Get
            Set
                Me(Me.tableModLignes.ModLPieceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLLig() As Integer
            Get
                Return CType(Me(Me.tableModLignes.ModLLigColumn),Integer)
            End Get
            Set
                Me(Me.tableModLignes.ModLLigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLTva() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignes.ModLTvaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLTva' dans la table 'ModLignes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignes.ModLTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignes.ModLLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLLib' dans la table 'ModLignes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignes.ModLLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLGene() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignes.ModLGeneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLGene' dans la table 'ModLignes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignes.ModLGeneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLAna() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignes.ModLAnaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLAna' dans la table 'ModLignes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignes.ModLAnaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLJournal() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignes.ModLJournalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLJournal' dans la table 'ModLignes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignes.ModLJournalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModLMtTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableModLignes.ModLMtTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ModLMtTVA' dans la table 'ModLignes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModLignes.ModLMtTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExploitationsRow() As ExploitationsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ExploitationsModLignes")),ExploitationsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ExploitationsModLignes"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLTvaNull() As Boolean
            Return Me.IsNull(Me.tableModLignes.ModLTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLTvaNull()
            Me(Me.tableModLignes.ModLTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLLibNull() As Boolean
            Return Me.IsNull(Me.tableModLignes.ModLLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLLibNull()
            Me(Me.tableModLignes.ModLLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLGeneNull() As Boolean
            Return Me.IsNull(Me.tableModLignes.ModLGeneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLGeneNull()
            Me(Me.tableModLignes.ModLGeneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLAnaNull() As Boolean
            Return Me.IsNull(Me.tableModLignes.ModLAnaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLAnaNull()
            Me(Me.tableModLignes.ModLAnaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLJournalNull() As Boolean
            Return Me.IsNull(Me.tableModLignes.ModLJournalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLJournalNull()
            Me(Me.tableModLignes.ModLJournalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModLMtTVANull() As Boolean
            Return Me.IsNull(Me.tableModLignes.ModLMtTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModLMtTVANull()
            Me(Me.tableModLignes.ModLMtTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetModMouvementsRows() As ModMouvementsRow()
            If (Me.Table.ChildRelations("ModLignesModMouvements") Is Nothing) Then
                Return New ModMouvementsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ModLignesModMouvements")),ModMouvementsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ActivitesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ActivitesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ActivitesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ActivitesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComptesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ComptesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComptesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComptesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DossiersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DossiersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DossiersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DossiersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ExploitationsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ExploitationsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ExploitationsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ExploitationsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PlanComptableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PlanComptableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PlanComptableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PlanComptableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ParametrageRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ParametrageRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParametrageRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParametrageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PlanTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PlanTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PlanTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PlanTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RicaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RicaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RicaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RicaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ModLignesParaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ModLignesParaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ModLignesParaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ModLignesParaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ModMouvementsParaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ModMouvementsParaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ModMouvementsParaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ModMouvementsParaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ModMouvementsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ModMouvementsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ModMouvementsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ModMouvementsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ModLignesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ModLignesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ModLignesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ModLignesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsPLCTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ActivitesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Activites"
            tableMapping.ColumnMappings.Add("ADossier", "ADossier")
            tableMapping.ColumnMappings.Add("AActi", "AActi")
            tableMapping.ColumnMappings.Add("ALib", "ALib")
            tableMapping.ColumnMappings.Add("AQte", "AQte")
            tableMapping.ColumnMappings.Add("AUnit", "AUnit")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Activites` WHERE ((`ADossier` = ?) AND (`AActi` = ?))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ADossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Activites` (`ADossier`, `AActi`, `ALib`, `AQte`, `AUnit`) VALUES (?,"& _ 
                " ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ADossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ALib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ALib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AQte", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AQte", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AUnit", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AUnit", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE    Activites"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              ALib = ?, AQte = ?, AUnit = ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (A"& _ 
                "Dossier = ?) AND (AActi = ?)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ALib", Global.System.Data.OleDb.OleDbType.WChar, 20, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ALib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AQte", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(7,Byte), CType(0,Byte), "AQte", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AUnit", Global.System.Data.OleDb.OleDbType.WChar, 2, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AUnit", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ADossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AActi", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ADossier, AActi, ALib, AQte, AUnit FROM Activites"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ADossier, AActi, ALib, AQte, AUnit FROM Activites"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE ADossier=?"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ADossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT DISTINCT ADossier, AActi, ALib, AQte, AUnit "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Activites"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INNER JOIN M"& _ 
                "ouvements ON Activites.ADossier=Mouvements.MDossier AND Activites.AActi=Mouvemen"& _ 
                "ts.MActi"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE ADossier=?"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ADossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.ActivitesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.ActivitesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.ActivitesDataTable = New dsPLC.ActivitesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDossier(ByVal dataTable As dsPLC.ActivitesDataTable, ByVal ADossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ADossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ADossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDossier(ByVal ADossier As String) As dsPLC.ActivitesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ADossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ADossier,String)
            End If
            Dim dataTable As dsPLC.ActivitesDataTable = New dsPLC.ActivitesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDossierMvtes(ByVal dataTable As dsPLC.ActivitesDataTable, ByVal ADossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ADossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ADossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDossierMvtes(ByVal ADossier As String) As dsPLC.ActivitesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ADossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ADossier,String)
            End If
            Dim dataTable As dsPLC.ActivitesDataTable = New dsPLC.ActivitesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPLC.ActivitesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPLC) As Integer
            Return Me.Adapter.Update(dataSet, "Activites")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ADossier As String, ByVal Original_AActi As String) As Integer
            If (Original_ADossier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ADossier,String)
            End If
            If (Original_AActi Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_AActi,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ADossier As String, ByVal AActi As String, ByVal ALib As String, ByVal AQte As Global.System.Nullable(Of Single), ByVal AUnit As String) As Integer
            If (ADossier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ADossier,String)
            End If
            If (AActi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AActi,String)
            End If
            If (ALib Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ALib,String)
            End If
            If (AQte.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AQte.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AUnit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AUnit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ALib As String, ByVal AQte As Global.System.Nullable(Of Decimal), ByVal AUnit As String, ByVal Original_ADossier As String, ByVal Original_AActi As String) As Integer
            If (ALib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ALib,String)
            End If
            If (AQte.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(AQte.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (AUnit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(AUnit,String)
            End If
            If (Original_ADossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ADossier,String)
            End If
            If (Original_AActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_AActi,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ComptesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Comptes"
            tableMapping.ColumnMappings.Add("CDossier", "CDossier")
            tableMapping.ColumnMappings.Add("CCpt", "CCpt")
            tableMapping.ColumnMappings.Add("CLib", "CLib")
            tableMapping.ColumnMappings.Add("CU1", "CU1")
            tableMapping.ColumnMappings.Add("CU2", "CU2")
            tableMapping.ColumnMappings.Add("C_DC", "C_DC")
            tableMapping.ColumnMappings.Add("CCptContre", "CCptContre")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Comptes` WHERE ((`CDossier` = ?) AND (`CCpt` = ?))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Comptes` (`CDossier`, `CCpt`, `CLib`, `CU1`, `CU2`, `C_DC`, `CCptCon"& _ 
                "tre`) VALUES (?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CU1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CU2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("C_DC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C_DC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CCptContre", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCptContre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE    Comptes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              CLib = ?, CU1 = ?, CU2 = ?, C_DC = ?, CCptCon"& _ 
                "tre = ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CDossier = ?) AND (CCpt = ?)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CLib", Global.System.Data.OleDb.OleDbType.WChar, 25, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CU1", Global.System.Data.OleDb.OleDbType.WChar, 2, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CU2", Global.System.Data.OleDb.OleDbType.WChar, 2, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CU2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("C_DC", Global.System.Data.OleDb.OleDbType.WChar, 1, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C_DC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CCptContre", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCptContre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CCpt", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     CDossier, CCpt, CLib, CU1, CU2, C_DC, CCptContre"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Comptes"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CCpt, CCptContre, CDossier, CLib, CU1, CU2, C_DC FROM Comptes WHERE (CDoss"& _ 
                "ier = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CCpt, CCptContre, CDossier, CLib, CU1, CU2, C_DC FROM Comptes WHERE (CDoss"& _ 
                "ier = ?) AND (CCpt = ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CCpt", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT DISTINCT CCpt, CCptContre, CDossier, CLib, CU1, CU2, C_DC "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Comptes "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INNER JOIN Mouvements ON (Comptes.CDossier=Mouvements.MDossier AND Comptes.CCpt"& _ 
                "=Mouvements.MCpt)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (CDossier = ?)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.ComptesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.ComptesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.ComptesDataTable = New dsPLC.ComptesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDossier(ByVal dataTable As dsPLC.ComptesDataTable, ByVal CDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDossier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDossier")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDossier(ByVal CDossier As String) As dsPLC.ComptesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDossier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDossier")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            Dim dataTable As dsPLC.ComptesDataTable = New dsPLC.ComptesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDossierAndCpt(ByVal dataTable As dsPLC.ComptesDataTable, ByVal CDossier As String, ByVal CCpt As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CDossier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDossier")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            If (CCpt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CCpt")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CCpt,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDossierAndCpt(ByVal CDossier As String, ByVal CCpt As String) As dsPLC.ComptesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CDossier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDossier")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            If (CCpt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CCpt")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CCpt,String)
            End If
            Dim dataTable As dsPLC.ComptesDataTable = New dsPLC.ComptesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDossierMvtes(ByVal dataTable As dsPLC.ComptesDataTable, ByVal CDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDossierMvtes(ByVal CDossier As String) As dsPLC.ComptesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            Dim dataTable As dsPLC.ComptesDataTable = New dsPLC.ComptesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPLC.ComptesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPLC) As Integer
            Return Me.Adapter.Update(dataSet, "Comptes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CDossier As String, ByVal Original_CCpt As String) As Integer
            If (Original_CDossier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDossier,String)
            End If
            If (Original_CCpt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CCpt,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CDossier As String, ByVal CCpt As String, ByVal CLib As String, ByVal CU1 As String, ByVal CU2 As String, ByVal C_DC As String, ByVal CCptContre As String) As Integer
            If (CDossier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDossier,String)
            End If
            If (CCpt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CCpt,String)
            End If
            If (CLib Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CLib,String)
            End If
            If (CU1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CU1,String)
            End If
            If (CU2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CU2,String)
            End If
            If (C_DC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(C_DC,String)
            End If
            If (CCptContre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CCptContre,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CLib As String, ByVal CU1 As String, ByVal CU2 As String, ByVal C_DC As String, ByVal CCptContre As String, ByVal Original_CDossier As String, ByVal Original_CCpt As String) As Integer
            If (CLib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CLib,String)
            End If
            If (CU1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CU1,String)
            End If
            If (CU2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CU2,String)
            End If
            If (C_DC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(C_DC,String)
            End If
            If (CCptContre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CCptContre,String)
            End If
            If (Original_CDossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CDossier,String)
            End If
            If (Original_CCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CCpt,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DossiersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Dossiers"
            tableMapping.ColumnMappings.Add("DDossier", "DDossier")
            tableMapping.ColumnMappings.Add("DExpl", "DExpl")
            tableMapping.ColumnMappings.Add("DDtDebEx", "DDtDebEx")
            tableMapping.ColumnMappings.Add("DDtFinEx", "DDtFinEx")
            tableMapping.ColumnMappings.Add("DDtArrete", "DDtArrete")
            tableMapping.ColumnMappings.Add("DBqCpt", "DBqCpt")
            tableMapping.ColumnMappings.Add("DBqVal", "DBqVal")
            tableMapping.ColumnMappings.Add("DBqFolio1", "DBqFolio1")
            tableMapping.ColumnMappings.Add("DCptOuvert", "DCptOuvert")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DDossier, DExpl, DDtDebEx, DDtFinEx, DDtArrete, DBqCpt, DBqVal, DBqFolio1,"& _ 
                " DCptOuvert FROM Dossiers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.DossiersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.DossiersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.DossiersDataTable = New dsPLC.DossiersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ExploitationsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Exploitations"
            tableMapping.ColumnMappings.Add("EExpl", "EExpl")
            tableMapping.ColumnMappings.Add("ENom1", "ENom1")
            tableMapping.ColumnMappings.Add("ENom2", "ENom2")
            tableMapping.ColumnMappings.Add("EType", "EType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        EExpl, ENom1, ENom2, EType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Exploitations"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.ExploitationsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.ExploitationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.ExploitationsDataTable = New dsPLC.ExploitationsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PlanComptableTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PlanComptable"
            tableMapping.ColumnMappings.Add("PlDossier", "PlDossier")
            tableMapping.ColumnMappings.Add("PlCpt", "PlCpt")
            tableMapping.ColumnMappings.Add("PlActi", "PlActi")
            tableMapping.ColumnMappings.Add("PlLib", "PlLib")
            tableMapping.ColumnMappings.Add("PlRepG_C", "PlRepG_C")
            tableMapping.ColumnMappings.Add("PlRepG_D", "PlRepG_D")
            tableMapping.ColumnMappings.Add("PlRepG_U1", "PlRepG_U1")
            tableMapping.ColumnMappings.Add("PlRepG_U2", "PlRepG_U2")
            tableMapping.ColumnMappings.Add("PlRepA_C", "PlRepA_C")
            tableMapping.ColumnMappings.Add("PlRepA_D", "PlRepA_D")
            tableMapping.ColumnMappings.Add("PlRepA_U1", "PlRepA_U1")
            tableMapping.ColumnMappings.Add("PlRepA_U2", "PlRepA_U2")
            tableMapping.ColumnMappings.Add("PlSoldeG_C", "PlSoldeG_C")
            tableMapping.ColumnMappings.Add("PlSoldeG_D", "PlSoldeG_D")
            tableMapping.ColumnMappings.Add("PlSoldeG_U1", "PlSoldeG_U1")
            tableMapping.ColumnMappings.Add("PlSoldeG_U2", "PlSoldeG_U2")
            tableMapping.ColumnMappings.Add("PlSoldeA_C", "PlSoldeA_C")
            tableMapping.ColumnMappings.Add("PlSoldeA_D", "PlSoldeA_D")
            tableMapping.ColumnMappings.Add("PlSoldeA_U1", "PlSoldeA_U1")
            tableMapping.ColumnMappings.Add("PlSoldeA_U2", "PlSoldeA_U2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PlanComptable` WHERE ((`PlDossier` = ?) AND (`PlCpt` = ?) AND (`PlAc"& _ 
                "ti` = ?))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlDossier", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO PlanComptable"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (PlDossier, PlCpt, PlActi, PlLib"& _ 
                ", PlRepG_C, PlRepG_D, PlRepG_U1, PlRepG_U2, PlRepA_C, PlRepA_D, PlRepA_U1, PlRep"& _ 
                "A_U2, PlSoldeG_C, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PlSoldeG_D, PlSoldeG_U1, PlSoldeG_U2, "& _ 
                "PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, PlSoldeA_U2)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlCpt", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlActi", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlLib", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepG_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepG_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepG_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepG_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepA_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepA_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepA_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepA_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeG_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeG_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeG_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeG_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeA_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeA_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeA_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeA_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE    PlanComptable"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              PlLib = ?, PlRepG_C = ?, PlRepG_D = ?, "& _ 
                "PlRepG_U1 = ?, PlRepG_U2 = ?, PlRepA_C = ?, PlRepA_D = ?, PlRepA_U1 = ?, PlRepA_"& _ 
                "U2 = ?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PlSoldeG_C = ?, PlSoldeG_D = ?, PlSoldeG_U1 = ?,"& _ 
                " PlSoldeG_U2 = ?, PlSoldeA_C = ?, PlSoldeA_D = ?, PlSoldeA_U1 = ?, PlSoldeA_U2 ="& _ 
                " ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (PlDossier = ?) AND (PlCpt = ?) AND (PlActi = ?)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlLib", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepG_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepG_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepG_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepG_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepA_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepA_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepA_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlRepA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlRepA_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeG_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeG_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeG_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeG_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeG_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_C", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeA_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_D", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeA_D", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_U1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeA_U1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlSoldeA_U2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(19,Byte), CType(0,Byte), "PlSoldeA_U2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlCpt", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PlActi", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PlDossier, PlCpt, PlActi, PlLib, PlRepG_C, PlRepG_D, PlRepG_U1, PlRepG_U2,"& _ 
                " PlRepA_C, PlRepA_D, PlRepA_U1, PlRepA_U2, PlSoldeG_C, PlSoldeG_D, PlSoldeG_U1, "& _ 
                "PlSoldeG_U2, PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, PlSoldeA_U2 FROM PlanComptable"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     COUNT(*) AS Cnt"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Mouvements"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (MDossier = ?) AND"& _ 
                " (MCpt = ?) AND (MActi = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MCpt", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MActi", Global.System.Data.OleDb.OleDbType.WChar, 4, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     PlDossier, PlCpt, PlActi, PlLib, PlRepG_C, PlRepG_D, PlRepG_U1, PlRepG"& _ 
                "_U2, PlRepA_C, PlRepA_D, PlRepA_U1, PlRepA_U2, PlSoldeG_C, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "   PlSoldeG_D, PlSoldeG_U1, PlSoldeG_U2, PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, Pl"& _ 
                "SoldeA_U2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         PlanComptable"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (PlDossier = ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     PlDossier, PlCpt, PlActi, PlLib, PlRepG_C, PlRepG_D, PlRepG_U1, PlRepG"& _ 
                "_U2, PlRepA_C, PlRepA_D, PlRepA_U1, PlRepA_U2, PlSoldeG_C, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "   PlSoldeG_D, PlSoldeG_U1, PlSoldeG_U2, PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, Pl"& _ 
                "SoldeA_U2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         PlanComptable"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (PlDossier = ?) AND (PlCpt = ?)"& _ 
                ""
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlCpt", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(4) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT DISTINCT PlDossier, PlCpt, PlActi, PlLib, PlRepG_C, PlRepG_D, PlRepG_U1, P"& _ 
                "lRepG_U2, PlRepA_C, PlRepA_D, PlRepA_U1, PlRepA_U2, PlSoldeG_C, PlSoldeG_D, PlSo"& _ 
                "ldeG_U1, PlSoldeG_U2, PlSoldeA_C, PlSoldeA_D, PlSoldeA_U1, PlSoldeA_U2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    "& _ 
                "     PlanComptable AS plc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INNER JOIN Mouvements  AS mvt ON plc.PlDossier=mvt.MD"& _ 
                "ossier AND plc.PlCpt=mvt.MCpt AND plc.PlActi=mvt.MActi"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (PlDossier = ?"& _ 
                ")"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlDossier", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlDossier", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.PlanComptableDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.PlanComptableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.PlanComptableDataTable = New dsPLC.PlanComptableDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDossier(ByVal dataTable As dsPLC.PlanComptableDataTable, ByVal PlDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (PlDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDossier(ByVal PlDossier As String) As dsPLC.PlanComptableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (PlDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            Dim dataTable As dsPLC.PlanComptableDataTable = New dsPLC.PlanComptableDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDossierAndCpt(ByVal dataTable As dsPLC.PlanComptableDataTable, ByVal PlDossier As String, ByVal PlCpt As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (PlDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            If (PlCpt Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PlCpt,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDossierAndCpt(ByVal PlDossier As String, ByVal PlCpt As String) As dsPLC.PlanComptableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (PlDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            If (PlCpt Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PlCpt,String)
            End If
            Dim dataTable As dsPLC.PlanComptableDataTable = New dsPLC.PlanComptableDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDossierMvtes(ByVal dataTable As dsPLC.PlanComptableDataTable, ByVal PlDossier As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (PlDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDossierMvtes(ByVal PlDossier As String) As dsPLC.PlanComptableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (PlDossier Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            Dim dataTable As dsPLC.PlanComptableDataTable = New dsPLC.PlanComptableDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPLC.PlanComptableDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPLC) As Integer
            Return Me.Adapter.Update(dataSet, "PlanComptable")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PlDossier As String, ByVal Original_PlCpt As String, ByVal Original_PlActi As String) As Integer
            If (Original_PlDossier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PlDossier,String)
            End If
            If (Original_PlCpt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PlCpt,String)
            End If
            If (Original_PlActi Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PlActi,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PlDossier As String,  _
                    ByVal PlCpt As String,  _
                    ByVal PlActi As String,  _
                    ByVal PlLib As String,  _
                    ByVal PlRepG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_U2 As Global.System.Nullable(Of Decimal)) As Integer
            If (PlDossier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PlDossier,String)
            End If
            If (PlCpt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PlCpt,String)
            End If
            If (PlActi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PlActi,String)
            End If
            If (PlLib Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PlLib,String)
            End If
            If (PlRepG_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PlRepG_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_D.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PlRepG_D.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_U1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PlRepG_U1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_U2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PlRepG_U2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PlRepA_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_D.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PlRepA_D.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_U1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PlRepA_U1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_U2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PlRepA_U2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PlSoldeG_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_D.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PlSoldeG_D.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_U1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PlSoldeG_U1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_U2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PlSoldeG_U2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PlSoldeA_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_D.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PlSoldeA_D.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_U1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PlSoldeA_U1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_U2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PlSoldeA_U2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PlLib As String,  _
                    ByVal PlRepG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlRepA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeG_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_C As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_D As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_U1 As Global.System.Nullable(Of Decimal),  _
                    ByVal PlSoldeA_U2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PlDossier As String,  _
                    ByVal Original_PlCpt As String,  _
                    ByVal Original_PlActi As String) As Integer
            If (PlLib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PlLib,String)
            End If
            If (PlRepG_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PlRepG_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PlRepG_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PlRepG_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PlRepG_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PlRepG_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PlRepA_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PlRepA_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PlRepA_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PlRepA_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PlRepA_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PlSoldeG_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PlSoldeG_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PlSoldeG_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeG_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PlSoldeG_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PlSoldeA_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PlSoldeA_D.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_U1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PlSoldeA_U1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PlSoldeA_U2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(PlSoldeA_U2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_PlDossier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_PlDossier,String)
            End If
            If (Original_PlCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_PlCpt,String)
            End If
            If (Original_PlActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_PlActi,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CompteUtilise(ByVal MDossier As String, ByVal MCpt As String, ByVal MActi As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(1)
            If (MDossier Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(MDossier,String)
            End If
            If (MCpt Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(MCpt,String)
            End If
            If (MActi Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(MActi,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ParametrageTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Parametrage"
            tableMapping.ColumnMappings.Add("CodeProd", "CodeProd")
            tableMapping.ColumnMappings.Add("Statut", "Statut")
            tableMapping.ColumnMappings.Add("CCpt", "CCpt")
            tableMapping.ColumnMappings.Add("AActi", "AActi")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Parametrage` (`CodeProd`, `Statut`, `CCpt`, `AActi`) VALUES (?, ?, ?"& _ 
                ", ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodeProd", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodeProd", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Statut", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Statut", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbPlantypeCOConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CodeProd, Statut, CCpt, AActi FROM Parametrage"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CodeProd, Statut, CCpt, AActi FROM Parametrage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where (CodeProd=? or CodeP"& _ 
                "rod='') AND (Statut=? OR Statut='') Order By CCpt,AActi"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodeProd", Global.System.Data.OleDb.OleDbType.WChar, 15, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodeProd", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Statut", Global.System.Data.OleDb.OleDbType.WChar, 1, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Statut", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.ParametrageDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.ParametrageDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.ParametrageDataTable = New dsPLC.ParametrageDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodeProdAndStatut(ByVal dataTable As dsPLC.ParametrageDataTable, ByVal CodeProd As String, ByVal Statut As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodeProd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProd")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodeProd,String)
            End If
            If (Statut Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Statut")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Statut,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodeProdAndStatut(ByVal CodeProd As String, ByVal Statut As String) As dsPLC.ParametrageDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodeProd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProd")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodeProd,String)
            End If
            If (Statut Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Statut")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Statut,String)
            End If
            Dim dataTable As dsPLC.ParametrageDataTable = New dsPLC.ParametrageDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPLC.ParametrageDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPLC) As Integer
            Return Me.Adapter.Update(dataSet, "Parametrage")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CodeProd As String, ByVal Statut As String, ByVal CCpt As String, ByVal AActi As String) As Integer
            If (CodeProd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProd")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CodeProd,String)
            End If
            If (Statut Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Statut")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Statut,String)
            End If
            If (CCpt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CCpt,String)
            End If
            If (AActi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AActi,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PlanTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PlanType"
            tableMapping.ColumnMappings.Add("PlACpt", "PlCpt")
            tableMapping.ColumnMappings.Add("PlALib", "PlLib")
            tableMapping.ColumnMappings.Add("PlARacine", "PlRacine")
            tableMapping.ColumnMappings.Add("PlAU1", "PlU1")
            tableMapping.ColumnMappings.Add("PlAU2", "PlU2")
            tableMapping.ColumnMappings.Add("PlAActi", "PlActi")
            tableMapping.ColumnMappings.Add("PlAActiPermis", "PlActiPermis")
            tableMapping.ColumnMappings.Add("PlTVA", "PlTVA")
            tableMapping.ColumnMappings.Add("PlD_C", "PlD_C")
            tableMapping.ColumnMappings.Add("PlMotsCles", "PlMotsCles")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PlanType` (`PlACpt`, `PlALib`, `PlARacine`, `PlAU1`, `PlAU2`, `PlAAc"& _ 
                "ti`, `PlAActiPermis`, `PlTVA`, `PlD_C`, `PlMotsCles`) VALUES (?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlACpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlACpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlALib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlALib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlARacine", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlARacine", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlAU1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlAU1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlAU2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlAU2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlAActi", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlAActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlAActiPermis", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlAActiPermis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlTVA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlTVA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlD_C", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlD_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlMotsCles", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlMotsCles", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbPlantypeCOConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     PlACpt, PlALib, PlARacine, PlAU1, PlAU2, PlAActi, PlAActiPermis, PlTVA"& _ 
                ", PlD_C, PlMotsCles"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         PlanType"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PlACpt, PlALib, PlARacine, PlAU1, PlAU2, PlAActi, PlAActiPermis, PlTVA FRO"& _ 
                "M PlanTypeAgricole"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     PlACpt, PlALib, PlARacine, PlAU1, PlAU2, PlAActi, PlAActiPermis, PlTVA"& _ 
                ", PlD_C, PlMotsCles"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         PlanType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     PlACpt LIKE ? OR (PlALib L"& _ 
                "IKE ?) OR (PlMotsCles LIKE ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlACpt", Global.System.Data.OleDb.OleDbType.WChar, 8, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlACpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlALib", Global.System.Data.OleDb.OleDbType.WChar, 35, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlALib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PlMotsCles", Global.System.Data.OleDb.OleDbType.WChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PlMotsCles", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     PlACpt, PlALib, PlARacine, PlAU1, PlAU2, PlAActi, PlAActiPermis, PlTVA"& _ 
                ", PlD_C, PlMotsCles"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         PlanType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (PlALib LIKE '*?*') OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                    (PlMotsCles LIKE '*?*')"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     PlACpt, PlALib, PlARacine, PlAU1, PlAU2, PlAActi, PlAActiPermis, PlTVA"& _ 
                ", PlD_C, PlMotsCles"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         PlanType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (PlALib LIKE '*?') OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   (PlMotsCles LIKE '*?')"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT PlGCpt as PlACpt, PlGLib as PlALib, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"PlGRacine as PlARacine, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"PlGU1 as P"& _ 
                "lAU1,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"PlGU2 as  PlAU2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"PlGActi as PlAActi, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"PlGActiPermis as  PlAActiPermis,"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"PlTVA FROM PlanTypeGeneral"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.PlanTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.PlanTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.PlanTypeDataTable = New dsPLC.PlanTypeDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillAgricole(ByVal dataTable As dsPLC.PlanTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataAgricole() As dsPLC.PlanTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As dsPLC.PlanTypeDataTable = New dsPLC.PlanTypeDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFind(ByVal dataTable As dsPLC.PlanTypeDataTable, ByVal PlACpt As String, ByVal PlALib As String, ByVal PlMotsCles As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (PlACpt Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PlACpt,String)
            End If
            If (PlALib Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PlALib,String)
            End If
            If (PlMotsCles Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PlMotsCles")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PlMotsCles,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFind(ByVal PlACpt As String, ByVal PlALib As String, ByVal PlMotsCles As String) As dsPLC.PlanTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (PlACpt Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PlACpt,String)
            End If
            If (PlALib Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PlALib,String)
            End If
            If (PlMotsCles Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PlMotsCles")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PlMotsCles,String)
            End If
            Dim dataTable As dsPLC.PlanTypeDataTable = New dsPLC.PlanTypeDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFindContain(ByVal dataTable As dsPLC.PlanTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFindContain() As dsPLC.PlanTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Dim dataTable As dsPLC.PlanTypeDataTable = New dsPLC.PlanTypeDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFindStart(ByVal dataTable As dsPLC.PlanTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFindStart() As dsPLC.PlanTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Dim dataTable As dsPLC.PlanTypeDataTable = New dsPLC.PlanTypeDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillGeneral(ByVal dataTable As dsPLC.PlanTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataGeneral() As dsPLC.PlanTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Dim dataTable As dsPLC.PlanTypeDataTable = New dsPLC.PlanTypeDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPLC.PlanTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPLC) As Integer
            Return Me.Adapter.Update(dataSet, "PlanType")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RicaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Rica"
            tableMapping.ColumnMappings.Add("RiCode", "RiCode")
            tableMapping.ColumnMappings.Add("RiLib1", "RiLib1")
            tableMapping.ColumnMappings.Add("RiLib2", "RiLib2")
            tableMapping.ColumnMappings.Add("RiUnite", "RiUnite")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbPlantypeCOConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT RiCode, RiLib1, RiLib2, RiUnite FROM Rica"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.RicaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.RicaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.RicaDataTable = New dsPLC.RicaDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ModLignesParaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ModLignesPara"
            tableMapping.ColumnMappings.Add("ModLProd", "ModLProd")
            tableMapping.ColumnMappings.Add("ModLStatus", "ModLStatus")
            tableMapping.ColumnMappings.Add("ModLPiece", "ModLPiece")
            tableMapping.ColumnMappings.Add("ModLLig", "ModLLig")
            tableMapping.ColumnMappings.Add("ModLTva", "ModLTva")
            tableMapping.ColumnMappings.Add("ModLLib", "ModLLib")
            tableMapping.ColumnMappings.Add("ModLGene", "ModLGene")
            tableMapping.ColumnMappings.Add("ModLAna", "ModLAna")
            tableMapping.ColumnMappings.Add("ModLJournal", "ModLJournal")
            tableMapping.ColumnMappings.Add("ModLMtTVA", "ModLMtTVA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `ModLignesPara` WHERE ((`ModLProd` = ?) AND (`ModLStatus` = ?) AND (`"& _ 
                "ModLPiece` = ?) AND (`ModLLig` = ?) AND ((? = 1 AND `ModLTva` IS NULL) OR (`ModL"& _ 
                "Tva` = ?)) AND ((? = 1 AND `ModLLib` IS NULL) OR (`ModLLib` = ?)) AND ((? = 1 AN"& _ 
                "D `ModLGene` IS NULL) OR (`ModLGene` = ?)) AND ((? = 1 AND `ModLAna` IS NULL) OR"& _ 
                " (`ModLAna` = ?)) AND ((? = 1 AND `ModLJournal` IS NULL) OR (`ModLJournal` = ?))"& _ 
                " AND ((? = 1 AND `ModLMtTVA` IS NULL) OR (`ModLMtTVA` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLProd", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLProd", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLStatus", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLStatus", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLPiece", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLig", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLTva", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLTva", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLLib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLGene", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLGene", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLAna", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLAna", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLJournal", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLJournal", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLMtTVA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLMtTVA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ModLignesPara` (`ModLProd`, `ModLStatus`, `ModLPiece`, `ModLLig`, `M"& _ 
                "odLTva`, `ModLLib`, `ModLGene`, `ModLAna`, `ModLJournal`, `ModLMtTVA`) VALUES (?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLProd", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLProd", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLStatus", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLStatus", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLPiece", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLig", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLTva", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLGene", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLAna", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLJournal", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLMtTVA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `ModLignesPara` SET `ModLProd` = ?, `ModLStatus` = ?, `ModLPiece` = ?, `Mo"& _ 
                "dLLig` = ?, `ModLTva` = ?, `ModLLib` = ?, `ModLGene` = ?, `ModLAna` = ?, `ModLJo"& _ 
                "urnal` = ?, `ModLMtTVA` = ? WHERE ((`ModLProd` = ?) AND (`ModLStatus` = ?) AND ("& _ 
                "`ModLPiece` = ?) AND (`ModLLig` = ?) AND ((? = 1 AND `ModLTva` IS NULL) OR (`Mod"& _ 
                "LTva` = ?)) AND ((? = 1 AND `ModLLib` IS NULL) OR (`ModLLib` = ?)) AND ((? = 1 A"& _ 
                "ND `ModLGene` IS NULL) OR (`ModLGene` = ?)) AND ((? = 1 AND `ModLAna` IS NULL) O"& _ 
                "R (`ModLAna` = ?)) AND ((? = 1 AND `ModLJournal` IS NULL) OR (`ModLJournal` = ?)"& _ 
                ") AND ((? = 1 AND `ModLMtTVA` IS NULL) OR (`ModLMtTVA` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLProd", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLProd", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLStatus", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLStatus", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLPiece", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLig", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLTva", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLGene", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLAna", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLJournal", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLMtTVA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLProd", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLProd", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLStatus", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLStatus", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLPiece", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLig", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLTva", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLTva", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLLib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLGene", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLGene", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLAna", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLAna", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLJournal", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLJournal", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLMtTVA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLMtTVA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbPlantypeCOConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ModLProd, ModLStatus, ModLPiece, ModLLig, ModLTva, ModLLib, ModLGene, ModL"& _ 
                "Ana, ModLJournal, ModLMtTVA FROM ModLignesPara"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     ModLProd, ModLStatus, ModLPiece, ModLLig, ModLTva, ModLLib, ModLGene, "& _ 
                "ModLAna, ModLJournal, ModLMtTVA"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ModLignesPara"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ModLProd"& _ 
                " = ? OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ModLProd = '') AND (ModLStatus = ? OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "            ModLStatus = '')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ModLPiece, ModLLig"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLProd", Global.System.Data.OleDb.OleDbType.WChar, 15, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLProd", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLStatus", Global.System.Data.OleDb.OleDbType.WChar, 1, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLStatus", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.ModLignesParaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.ModLignesParaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.ModLignesParaDataTable = New dsPLC.ModLignesParaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodeProdAndStatut(ByVal dataTable As dsPLC.ModLignesParaDataTable, ByVal ModLProd As String, ByVal ModLStatus As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ModLProd Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModLProd,String)
            End If
            If (ModLStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ModLStatus")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModLStatus,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodeProdAndStatut(ByVal ModLProd As String, ByVal ModLStatus As String) As dsPLC.ModLignesParaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ModLProd Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModLProd,String)
            End If
            If (ModLStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ModLStatus")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModLStatus,String)
            End If
            Dim dataTable As dsPLC.ModLignesParaDataTable = New dsPLC.ModLignesParaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPLC.ModLignesParaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPLC) As Integer
            Return Me.Adapter.Update(dataSet, "ModLignesPara")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ModLProd As String, ByVal Original_ModLStatus As String, ByVal Original_ModLPiece As String, ByVal Original_ModLLig As Global.System.Nullable(Of Integer), ByVal Original_ModLTva As String, ByVal Original_ModLLib As String, ByVal Original_ModLGene As String, ByVal Original_ModLAna As String, ByVal Original_ModLJournal As String, ByVal Original_ModLMtTVA As String) As Integer
            If (Original_ModLProd Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ModLProd,String)
            End If
            If (Original_ModLStatus Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ModLStatus,String)
            End If
            If (Original_ModLPiece Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ModLPiece,String)
            End If
            If (Original_ModLLig.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ModLLig.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_ModLTva Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ModLTva,String)
            End If
            If (Original_ModLLib Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ModLLib,String)
            End If
            If (Original_ModLGene Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ModLGene,String)
            End If
            If (Original_ModLAna Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ModLAna,String)
            End If
            If (Original_ModLJournal Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_ModLJournal,String)
            End If
            If (Original_ModLMtTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_ModLMtTVA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ModLProd As String, ByVal ModLStatus As String, ByVal ModLPiece As String, ByVal ModLLig As Global.System.Nullable(Of Integer), ByVal ModLTva As String, ByVal ModLLib As String, ByVal ModLGene As String, ByVal ModLAna As String, ByVal ModLJournal As String, ByVal ModLMtTVA As String) As Integer
            If (ModLProd Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ModLProd,String)
            End If
            If (ModLStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ModLStatus,String)
            End If
            If (ModLPiece Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ModLPiece,String)
            End If
            If (ModLLig.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ModLLig.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ModLTva Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ModLTva,String)
            End If
            If (ModLLib Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ModLLib,String)
            End If
            If (ModLGene Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ModLGene,String)
            End If
            If (ModLAna Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ModLAna,String)
            End If
            If (ModLJournal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ModLJournal,String)
            End If
            If (ModLMtTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ModLMtTVA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ModLProd As String,  _
                    ByVal ModLStatus As String,  _
                    ByVal ModLPiece As String,  _
                    ByVal ModLLig As Global.System.Nullable(Of Integer),  _
                    ByVal ModLTva As String,  _
                    ByVal ModLLib As String,  _
                    ByVal ModLGene As String,  _
                    ByVal ModLAna As String,  _
                    ByVal ModLJournal As String,  _
                    ByVal ModLMtTVA As String,  _
                    ByVal Original_ModLProd As String,  _
                    ByVal Original_ModLStatus As String,  _
                    ByVal Original_ModLPiece As String,  _
                    ByVal Original_ModLLig As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModLTva As String,  _
                    ByVal Original_ModLLib As String,  _
                    ByVal Original_ModLGene As String,  _
                    ByVal Original_ModLAna As String,  _
                    ByVal Original_ModLJournal As String,  _
                    ByVal Original_ModLMtTVA As String) As Integer
            If (ModLProd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ModLProd,String)
            End If
            If (ModLStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ModLStatus,String)
            End If
            If (ModLPiece Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ModLPiece,String)
            End If
            If (ModLLig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ModLLig.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ModLTva Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ModLTva,String)
            End If
            If (ModLLib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ModLLib,String)
            End If
            If (ModLGene Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ModLGene,String)
            End If
            If (ModLAna Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ModLAna,String)
            End If
            If (ModLJournal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ModLJournal,String)
            End If
            If (ModLMtTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ModLMtTVA,String)
            End If
            If (Original_ModLProd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ModLProd,String)
            End If
            If (Original_ModLStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ModLStatus,String)
            End If
            If (Original_ModLPiece Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ModLPiece,String)
            End If
            If (Original_ModLLig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ModLLig.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_ModLTva Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ModLTva,String)
            End If
            If (Original_ModLLib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ModLLib,String)
            End If
            If (Original_ModLGene Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ModLGene,String)
            End If
            If (Original_ModLAna Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ModLAna,String)
            End If
            If (Original_ModLJournal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ModLJournal,String)
            End If
            If (Original_ModLMtTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ModLMtTVA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ModLTva As String,  _
                    ByVal ModLLib As String,  _
                    ByVal ModLGene As String,  _
                    ByVal ModLAna As String,  _
                    ByVal ModLJournal As String,  _
                    ByVal ModLMtTVA As String,  _
                    ByVal Original_ModLProd As String,  _
                    ByVal Original_ModLStatus As String,  _
                    ByVal Original_ModLPiece As String,  _
                    ByVal Original_ModLLig As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModLTva As String,  _
                    ByVal Original_ModLLib As String,  _
                    ByVal Original_ModLGene As String,  _
                    ByVal Original_ModLAna As String,  _
                    ByVal Original_ModLJournal As String,  _
                    ByVal Original_ModLMtTVA As String) As Integer
            Return Me.Update(Original_ModLProd, Original_ModLStatus, Original_ModLPiece, Original_ModLLig, ModLTva, ModLLib, ModLGene, ModLAna, ModLJournal, ModLMtTVA, Original_ModLProd, Original_ModLStatus, Original_ModLPiece, Original_ModLLig, Original_ModLTva, Original_ModLLib, Original_ModLGene, Original_ModLAna, Original_ModLJournal, Original_ModLMtTVA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ModMouvementsParaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ModMouvementsPara"
            tableMapping.ColumnMappings.Add("ModMProd", "ModMProd")
            tableMapping.ColumnMappings.Add("ModMStatus", "ModMStatus")
            tableMapping.ColumnMappings.Add("ModMPiece", "ModMPiece")
            tableMapping.ColumnMappings.Add("ModMLig", "ModMLig")
            tableMapping.ColumnMappings.Add("ModMOrdre", "ModMOrdre")
            tableMapping.ColumnMappings.Add("ModMCpt", "ModMCpt")
            tableMapping.ColumnMappings.Add("ModMActi", "ModMActi")
            tableMapping.ColumnMappings.Add("ModMMtDeb", "ModMMtDeb")
            tableMapping.ColumnMappings.Add("ModMMtCre", "ModMMtCre")
            tableMapping.ColumnMappings.Add("ModMD_C", "ModMD_C")
            tableMapping.ColumnMappings.Add("ModMQte1", "ModMQte1")
            tableMapping.ColumnMappings.Add("ModMQte2", "ModMQte2")
            tableMapping.ColumnMappings.Add("ModMLettrage", "ModMLettrage")
            tableMapping.ColumnMappings.Add("ModMCptCtr", "ModMCptCtr")
            tableMapping.ColumnMappings.Add("ModMActCtr", "ModMActCtr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `ModMouvementsPara` WHERE ((`ModMProd` = ?) AND (`ModMStatus` = ?) AN"& _ 
                "D (`ModMPiece` = ?) AND (`ModMLig` = ?) AND (`ModMOrdre` = ?) AND ((? = 1 AND `M"& _ 
                "odMCpt` IS NULL) OR (`ModMCpt` = ?)) AND ((? = 1 AND `ModMActi` IS NULL) OR (`Mo"& _ 
                "dMActi` = ?)) AND ((? = 1 AND `ModMMtDeb` IS NULL) OR (`ModMMtDeb` = ?)) AND ((?"& _ 
                " = 1 AND `ModMMtCre` IS NULL) OR (`ModMMtCre` = ?)) AND ((? = 1 AND `ModMD_C` IS"& _ 
                " NULL) OR (`ModMD_C` = ?)) AND ((? = 1 AND `ModMQte1` IS NULL) OR (`ModMQte1` = "& _ 
                "?)) AND ((? = 1 AND `ModMQte2` IS NULL) OR (`ModMQte2` = ?)) AND ((? = 1 AND `Mo"& _ 
                "dMLettrage` IS NULL) OR (`ModMLettrage` = ?)) AND ((? = 1 AND `ModMCptCtr` IS NU"& _ 
                "LL) OR (`ModMCptCtr` = ?)) AND ((? = 1 AND `ModMActCtr` IS NULL) OR (`ModMActCtr"& _ 
                "` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMProd", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMProd", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMStatus", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMStatus", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMPiece", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLig", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMOrdre", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMOrdre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMCpt", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMActi", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMMtDeb", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMMtDeb", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMMtCre", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMMtCre", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMD_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMD_C", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMQte1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMQte1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMQte2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMQte2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMCptCtr", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMCptCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMActCtr", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMActCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ModMouvementsPara` (`ModMProd`, `ModMStatus`, `ModMPiece`, `ModMLig`"& _ 
                ", `ModMOrdre`, `ModMCpt`, `ModMActi`, `ModMMtDeb`, `ModMMtCre`, `ModMD_C`, `ModM"& _ 
                "Qte1`, `ModMQte2`, `ModMLettrage`, `ModMCptCtr`, `ModMActCtr`) VALUES (?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMProd", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMProd", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMStatus", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMStatus", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMPiece", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLig", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMOrdre", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMOrdre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMMtDeb", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMMtCre", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMD_C", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMQte1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMQte2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMCptCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMActCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `ModMouvementsPara` SET `ModMProd` = ?, `ModMStatus` = ?, `ModMPiece` = ?,"& _ 
                " `ModMLig` = ?, `ModMOrdre` = ?, `ModMCpt` = ?, `ModMActi` = ?, `ModMMtDeb` = ?,"& _ 
                " `ModMMtCre` = ?, `ModMD_C` = ?, `ModMQte1` = ?, `ModMQte2` = ?, `ModMLettrage` "& _ 
                "= ?, `ModMCptCtr` = ?, `ModMActCtr` = ? WHERE ((`ModMProd` = ?) AND (`ModMStatus"& _ 
                "` = ?) AND (`ModMPiece` = ?) AND (`ModMLig` = ?) AND (`ModMOrdre` = ?) AND ((? ="& _ 
                " 1 AND `ModMCpt` IS NULL) OR (`ModMCpt` = ?)) AND ((? = 1 AND `ModMActi` IS NULL"& _ 
                ") OR (`ModMActi` = ?)) AND ((? = 1 AND `ModMMtDeb` IS NULL) OR (`ModMMtDeb` = ?)"& _ 
                ") AND ((? = 1 AND `ModMMtCre` IS NULL) OR (`ModMMtCre` = ?)) AND ((? = 1 AND `Mo"& _ 
                "dMD_C` IS NULL) OR (`ModMD_C` = ?)) AND ((? = 1 AND `ModMQte1` IS NULL) OR (`Mod"& _ 
                "MQte1` = ?)) AND ((? = 1 AND `ModMQte2` IS NULL) OR (`ModMQte2` = ?)) AND ((? = "& _ 
                "1 AND `ModMLettrage` IS NULL) OR (`ModMLettrage` = ?)) AND ((? = 1 AND `ModMCptC"& _ 
                "tr` IS NULL) OR (`ModMCptCtr` = ?)) AND ((? = 1 AND `ModMActCtr` IS NULL) OR (`M"& _ 
                "odMActCtr` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMProd", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMProd", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMStatus", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMStatus", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMPiece", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLig", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMOrdre", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMOrdre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMMtDeb", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMMtCre", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMD_C", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMQte1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMQte2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMCptCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMActCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMProd", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMProd", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMStatus", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMStatus", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMPiece", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLig", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMOrdre", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMOrdre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMCpt", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMActi", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMMtDeb", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMMtDeb", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMMtCre", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMMtCre", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMD_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMD_C", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMQte1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMQte1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMQte2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMQte2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMCptCtr", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMCptCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMActCtr", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMActCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbPlantypeCOConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ModMProd, ModMStatus, ModMPiece, ModMLig, ModMOrdre, ModMCpt, ModMActi, Mo"& _ 
                "dMMtDeb, ModMMtCre, ModMD_C, ModMQte1, ModMQte2, ModMLettrage, ModMCptCtr, ModMA"& _ 
                "ctCtr FROM ModMouvementsPara"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ModMProd, ModMStatus, ModMPiece, ModMLig, ModMOrdre, ModMCpt, ModMActi, Mo"& _ 
                "dMMtDeb, ModMMtCre, ModMD_C, ModMQte1, ModMQte2, ModMLettrage, ModMCptCtr, ModMA"& _ 
                "ctCtr FROM ModMouvementsPara WHERE     (ModMProd = ? OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      M"& _ 
                "odMProd = '') AND (ModMStatus = ? OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ModMStatus = '') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"O"& _ 
                "RDER BY ModMPiece, ModMLig"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMProd", Global.System.Data.OleDb.OleDbType.WChar, 15, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMProd", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMStatus", Global.System.Data.OleDb.OleDbType.WChar, 1, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMStatus", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.ModMouvementsParaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.ModMouvementsParaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.ModMouvementsParaDataTable = New dsPLC.ModMouvementsParaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodeProdAndStatut(ByVal dataTable As dsPLC.ModMouvementsParaDataTable, ByVal ModMProd As String, ByVal ModMStatus As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ModMProd Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModMProd,String)
            End If
            If (ModMStatus Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModMStatus,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodeProdAndStatut(ByVal ModMProd As String, ByVal ModMStatus As String) As dsPLC.ModMouvementsParaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ModMProd Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModMProd,String)
            End If
            If (ModMStatus Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModMStatus,String)
            End If
            Dim dataTable As dsPLC.ModMouvementsParaDataTable = New dsPLC.ModMouvementsParaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPLC.ModMouvementsParaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPLC) As Integer
            Return Me.Adapter.Update(dataSet, "ModMouvementsPara")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ModMProd As String, ByVal Original_ModMStatus As String, ByVal Original_ModMPiece As String, ByVal Original_ModMLig As Global.System.Nullable(Of Integer), ByVal Original_ModMOrdre As Global.System.Nullable(Of Byte), ByVal Original_ModMCpt As String, ByVal Original_ModMActi As String, ByVal Original_ModMMtDeb As Global.System.Nullable(Of Decimal), ByVal Original_ModMMtCre As Global.System.Nullable(Of Decimal), ByVal Original_ModMD_C As String, ByVal Original_ModMQte1 As Global.System.Nullable(Of Decimal), ByVal Original_ModMQte2 As Global.System.Nullable(Of Decimal), ByVal Original_ModMLettrage As Global.System.Nullable(Of Integer), ByVal Original_ModMCptCtr As String, ByVal Original_ModMActCtr As String) As Integer
            If (Original_ModMProd Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ModMProd,String)
            End If
            If (Original_ModMStatus Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ModMStatus,String)
            End If
            If (Original_ModMPiece Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ModMPiece,String)
            End If
            If (Original_ModMLig.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ModMLig.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMOrdre.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ModMOrdre.Value,Byte)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMCpt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ModMCpt,String)
            End If
            If (Original_ModMActi Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ModMActi,String)
            End If
            If (Original_ModMMtDeb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ModMMtDeb.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMMtCre.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ModMMtCre.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMD_C Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ModMD_C,String)
            End If
            If (Original_ModMQte1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ModMQte1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMQte2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ModMQte2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMLettrage.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_ModMLettrage.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMCptCtr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_ModMCptCtr,String)
            End If
            If (Original_ModMActCtr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_ModMActCtr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ModMProd As String, ByVal ModMStatus As String, ByVal ModMPiece As String, ByVal ModMLig As Global.System.Nullable(Of Integer), ByVal ModMOrdre As Global.System.Nullable(Of Byte), ByVal ModMCpt As String, ByVal ModMActi As String, ByVal ModMMtDeb As Global.System.Nullable(Of Decimal), ByVal ModMMtCre As Global.System.Nullable(Of Decimal), ByVal ModMD_C As String, ByVal ModMQte1 As Global.System.Nullable(Of Decimal), ByVal ModMQte2 As Global.System.Nullable(Of Decimal), ByVal ModMLettrage As Global.System.Nullable(Of Integer), ByVal ModMCptCtr As String, ByVal ModMActCtr As String) As Integer
            If (ModMProd Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ModMProd,String)
            End If
            If (ModMStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ModMStatus,String)
            End If
            If (ModMPiece Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ModMPiece,String)
            End If
            If (ModMLig.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ModMLig.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ModMOrdre.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ModMOrdre.Value,Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ModMCpt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ModMCpt,String)
            End If
            If (ModMActi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ModMActi,String)
            End If
            If (ModMMtDeb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ModMMtDeb.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ModMMtCre.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ModMMtCre.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ModMD_C Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ModMD_C,String)
            End If
            If (ModMQte1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ModMQte1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ModMQte2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ModMQte2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ModMLettrage.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ModMLettrage.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ModMCptCtr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ModMCptCtr,String)
            End If
            If (ModMActCtr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ModMActCtr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ModMProd As String,  _
                    ByVal ModMStatus As String,  _
                    ByVal ModMPiece As String,  _
                    ByVal ModMLig As Global.System.Nullable(Of Integer),  _
                    ByVal ModMOrdre As Global.System.Nullable(Of Byte),  _
                    ByVal ModMCpt As String,  _
                    ByVal ModMActi As String,  _
                    ByVal ModMMtDeb As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMMtCre As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMD_C As String,  _
                    ByVal ModMQte1 As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMQte2 As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMLettrage As Global.System.Nullable(Of Integer),  _
                    ByVal ModMCptCtr As String,  _
                    ByVal ModMActCtr As String,  _
                    ByVal Original_ModMProd As String,  _
                    ByVal Original_ModMStatus As String,  _
                    ByVal Original_ModMPiece As String,  _
                    ByVal Original_ModMLig As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModMOrdre As Global.System.Nullable(Of Byte),  _
                    ByVal Original_ModMCpt As String,  _
                    ByVal Original_ModMActi As String,  _
                    ByVal Original_ModMMtDeb As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMMtCre As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMD_C As String,  _
                    ByVal Original_ModMQte1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMQte2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMLettrage As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModMCptCtr As String,  _
                    ByVal Original_ModMActCtr As String) As Integer
            If (ModMProd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ModMProd,String)
            End If
            If (ModMStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ModMStatus,String)
            End If
            If (ModMPiece Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ModMPiece,String)
            End If
            If (ModMLig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ModMLig.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ModMOrdre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ModMOrdre.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ModMCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ModMCpt,String)
            End If
            If (ModMActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ModMActi,String)
            End If
            If (ModMMtDeb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ModMMtDeb.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ModMMtCre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ModMMtCre.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ModMD_C Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ModMD_C,String)
            End If
            If (ModMQte1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ModMQte1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ModMQte2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ModMQte2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ModMLettrage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ModMLettrage.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ModMCptCtr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ModMCptCtr,String)
            End If
            If (ModMActCtr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ModMActCtr,String)
            End If
            If (Original_ModMProd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ModMProd,String)
            End If
            If (Original_ModMStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_ModMStatus,String)
            End If
            If (Original_ModMPiece Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ModMPiece,String)
            End If
            If (Original_ModMLig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ModMLig.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMOrdre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ModMOrdre.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ModMCpt,String)
            End If
            If (Original_ModMActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ModMActi,String)
            End If
            If (Original_ModMMtDeb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ModMMtDeb.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMMtCre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ModMMtCre.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMD_C Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_ModMD_C,String)
            End If
            If (Original_ModMQte1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ModMQte1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMQte2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_ModMQte2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMLettrage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_ModMLettrage.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMCptCtr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ModMCptCtr,String)
            End If
            If (Original_ModMActCtr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ModMActCtr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ModMCpt As String,  _
                    ByVal ModMActi As String,  _
                    ByVal ModMMtDeb As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMMtCre As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMD_C As String,  _
                    ByVal ModMQte1 As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMQte2 As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMLettrage As Global.System.Nullable(Of Integer),  _
                    ByVal ModMCptCtr As String,  _
                    ByVal ModMActCtr As String,  _
                    ByVal Original_ModMProd As String,  _
                    ByVal Original_ModMStatus As String,  _
                    ByVal Original_ModMPiece As String,  _
                    ByVal Original_ModMLig As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModMOrdre As Global.System.Nullable(Of Byte),  _
                    ByVal Original_ModMCpt As String,  _
                    ByVal Original_ModMActi As String,  _
                    ByVal Original_ModMMtDeb As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMMtCre As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMD_C As String,  _
                    ByVal Original_ModMQte1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMQte2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMLettrage As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModMCptCtr As String,  _
                    ByVal Original_ModMActCtr As String) As Integer
            Return Me.Update(Original_ModMProd, Original_ModMStatus, Original_ModMPiece, Original_ModMLig, Original_ModMOrdre, ModMCpt, ModMActi, ModMMtDeb, ModMMtCre, ModMD_C, ModMQte1, ModMQte2, ModMLettrage, ModMCptCtr, ModMActCtr, Original_ModMProd, Original_ModMStatus, Original_ModMPiece, Original_ModMLig, Original_ModMOrdre, Original_ModMCpt, Original_ModMActi, Original_ModMMtDeb, Original_ModMMtCre, Original_ModMD_C, Original_ModMQte1, Original_ModMQte2, Original_ModMLettrage, Original_ModMCptCtr, Original_ModMActCtr)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ModMouvementsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ModMouvements"
            tableMapping.ColumnMappings.Add("ModMExpl", "ModMExpl")
            tableMapping.ColumnMappings.Add("ModMPiece", "ModMPiece")
            tableMapping.ColumnMappings.Add("ModMLig", "ModMLig")
            tableMapping.ColumnMappings.Add("ModMOrdre", "ModMOrdre")
            tableMapping.ColumnMappings.Add("ModMCpt", "ModMCpt")
            tableMapping.ColumnMappings.Add("ModMActi", "ModMActi")
            tableMapping.ColumnMappings.Add("ModMMtDeb", "ModMMtDeb")
            tableMapping.ColumnMappings.Add("ModMMtCre", "ModMMtCre")
            tableMapping.ColumnMappings.Add("ModMD_C", "ModMD_C")
            tableMapping.ColumnMappings.Add("ModMQte1", "ModMQte1")
            tableMapping.ColumnMappings.Add("ModMQte2", "ModMQte2")
            tableMapping.ColumnMappings.Add("ModMLettrage", "ModMLettrage")
            tableMapping.ColumnMappings.Add("ModMCptCtr", "ModMCptCtr")
            tableMapping.ColumnMappings.Add("ModMActCtr", "ModMActCtr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `ModMouvements` WHERE ((`ModMExpl` = ?) AND (`ModMPiece` = ?) AND (`M"& _ 
                "odMLig` = ?) AND (`ModMOrdre` = ?) AND ((? = 1 AND `ModMCpt` IS NULL) OR (`ModMC"& _ 
                "pt` = ?)) AND ((? = 1 AND `ModMActi` IS NULL) OR (`ModMActi` = ?)) AND ((? = 1 A"& _ 
                "ND `ModMMtDeb` IS NULL) OR (`ModMMtDeb` = ?)) AND ((? = 1 AND `ModMMtCre` IS NUL"& _ 
                "L) OR (`ModMMtCre` = ?)) AND ((? = 1 AND `ModMD_C` IS NULL) OR (`ModMD_C` = ?)) "& _ 
                "AND ((? = 1 AND `ModMQte1` IS NULL) OR (`ModMQte1` = ?)) AND ((? = 1 AND `ModMQt"& _ 
                "e2` IS NULL) OR (`ModMQte2` = ?)) AND ((? = 1 AND `ModMLettrage` IS NULL) OR (`M"& _ 
                "odMLettrage` = ?)) AND ((? = 1 AND `ModMCptCtr` IS NULL) OR (`ModMCptCtr` = ?)) "& _ 
                "AND ((? = 1 AND `ModMActCtr` IS NULL) OR (`ModMActCtr` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMExpl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMPiece", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLig", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMOrdre", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMOrdre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMCpt", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMActi", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMMtDeb", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMMtDeb", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMMtCre", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMMtCre", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMD_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMD_C", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMQte1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMQte1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMQte2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMQte2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMCptCtr", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMCptCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMActCtr", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMActCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ModMouvements` (`ModMExpl`, `ModMPiece`, `ModMLig`, `ModMOrdre`, `Mo"& _ 
                "dMCpt`, `ModMActi`, `ModMMtDeb`, `ModMMtCre`, `ModMD_C`, `ModMQte1`, `ModMQte2`,"& _ 
                " `ModMLettrage`, `ModMCptCtr`, `ModMActCtr`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMExpl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMPiece", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLig", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMOrdre", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMOrdre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMMtDeb", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMMtCre", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMD_C", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMQte1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMQte2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMCptCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMActCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `ModMouvements` SET `ModMExpl` = ?, `ModMPiece` = ?, `ModMLig` = ?, `ModMO"& _ 
                "rdre` = ?, `ModMCpt` = ?, `ModMActi` = ?, `ModMMtDeb` = ?, `ModMMtCre` = ?, `Mod"& _ 
                "MD_C` = ?, `ModMQte1` = ?, `ModMQte2` = ?, `ModMLettrage` = ?, `ModMCptCtr` = ?,"& _ 
                " `ModMActCtr` = ? WHERE ((`ModMExpl` = ?) AND (`ModMPiece` = ?) AND (`ModMLig` ="& _ 
                " ?) AND (`ModMOrdre` = ?) AND ((? = 1 AND `ModMCpt` IS NULL) OR (`ModMCpt` = ?))"& _ 
                " AND ((? = 1 AND `ModMActi` IS NULL) OR (`ModMActi` = ?)) AND ((? = 1 AND `ModMM"& _ 
                "tDeb` IS NULL) OR (`ModMMtDeb` = ?)) AND ((? = 1 AND `ModMMtCre` IS NULL) OR (`M"& _ 
                "odMMtCre` = ?)) AND ((? = 1 AND `ModMD_C` IS NULL) OR (`ModMD_C` = ?)) AND ((? ="& _ 
                " 1 AND `ModMQte1` IS NULL) OR (`ModMQte1` = ?)) AND ((? = 1 AND `ModMQte2` IS NU"& _ 
                "LL) OR (`ModMQte2` = ?)) AND ((? = 1 AND `ModMLettrage` IS NULL) OR (`ModMLettra"& _ 
                "ge` = ?)) AND ((? = 1 AND `ModMCptCtr` IS NULL) OR (`ModMCptCtr` = ?)) AND ((? ="& _ 
                " 1 AND `ModMActCtr` IS NULL) OR (`ModMActCtr` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMExpl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMPiece", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLig", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMOrdre", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMOrdre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMMtDeb", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMMtCre", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMD_C", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMQte1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMQte2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMCptCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModMActCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMExpl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMPiece", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLig", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMOrdre", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMOrdre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMCpt", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMCpt", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCpt", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMActi", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMActi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActi", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMMtDeb", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMMtDeb", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtDeb", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMMtCre", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMMtCre", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMMtCre", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMD_C", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMD_C", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMD_C", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMQte1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMQte1", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMQte2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMQte2", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMQte2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMLettrage", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMLettrage", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMCptCtr", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMCptCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMCptCtr", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModMActCtr", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModMActCtr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModMActCtr", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ModMExpl, ModMPiece, ModMLig, ModMOrdre, ModMCpt, ModMActi, ModMMtDeb, Mod"& _ 
                "MMtCre, ModMD_C, ModMQte1, ModMQte2, ModMLettrage, ModMCptCtr, ModMActCtr FROM M"& _ 
                "odMouvements"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.ModMouvementsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.ModMouvementsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.ModMouvementsDataTable = New dsPLC.ModMouvementsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPLC.ModMouvementsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPLC) As Integer
            Return Me.Adapter.Update(dataSet, "ModMouvements")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ModMExpl As String, ByVal Original_ModMPiece As String, ByVal Original_ModMLig As Global.System.Nullable(Of Integer), ByVal Original_ModMOrdre As Global.System.Nullable(Of Byte), ByVal Original_ModMCpt As String, ByVal Original_ModMActi As String, ByVal Original_ModMMtDeb As Global.System.Nullable(Of Decimal), ByVal Original_ModMMtCre As Global.System.Nullable(Of Decimal), ByVal Original_ModMD_C As String, ByVal Original_ModMQte1 As Global.System.Nullable(Of Decimal), ByVal Original_ModMQte2 As Global.System.Nullable(Of Decimal), ByVal Original_ModMLettrage As Global.System.Nullable(Of Integer), ByVal Original_ModMCptCtr As String, ByVal Original_ModMActCtr As String) As Integer
            If (Original_ModMExpl Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ModMExpl,String)
            End If
            If (Original_ModMPiece Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ModMPiece,String)
            End If
            If (Original_ModMLig.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ModMLig.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMOrdre.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ModMOrdre.Value,Byte)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMCpt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ModMCpt,String)
            End If
            If (Original_ModMActi Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ModMActi,String)
            End If
            If (Original_ModMMtDeb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ModMMtDeb.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMMtCre.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ModMMtCre.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMD_C Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_ModMD_C,String)
            End If
            If (Original_ModMQte1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_ModMQte1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMQte2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_ModMQte2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMLettrage.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ModMLettrage.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMCptCtr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_ModMCptCtr,String)
            End If
            If (Original_ModMActCtr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_ModMActCtr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ModMExpl As String, ByVal ModMPiece As String, ByVal ModMLig As Global.System.Nullable(Of Integer), ByVal ModMOrdre As Global.System.Nullable(Of Byte), ByVal ModMCpt As String, ByVal ModMActi As String, ByVal ModMMtDeb As Global.System.Nullable(Of Decimal), ByVal ModMMtCre As Global.System.Nullable(Of Decimal), ByVal ModMD_C As String, ByVal ModMQte1 As Global.System.Nullable(Of Decimal), ByVal ModMQte2 As Global.System.Nullable(Of Decimal), ByVal ModMLettrage As Global.System.Nullable(Of Integer), ByVal ModMCptCtr As String, ByVal ModMActCtr As String) As Integer
            If (ModMExpl Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ModMExpl,String)
            End If
            If (ModMPiece Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ModMPiece,String)
            End If
            If (ModMLig.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ModMLig.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ModMOrdre.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ModMOrdre.Value,Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ModMCpt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ModMCpt,String)
            End If
            If (ModMActi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ModMActi,String)
            End If
            If (ModMMtDeb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ModMMtDeb.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ModMMtCre.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ModMMtCre.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ModMD_C Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ModMD_C,String)
            End If
            If (ModMQte1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ModMQte1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ModMQte2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ModMQte2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ModMLettrage.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ModMLettrage.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ModMCptCtr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ModMCptCtr,String)
            End If
            If (ModMActCtr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ModMActCtr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ModMExpl As String,  _
                    ByVal ModMPiece As String,  _
                    ByVal ModMLig As Global.System.Nullable(Of Integer),  _
                    ByVal ModMOrdre As Global.System.Nullable(Of Byte),  _
                    ByVal ModMCpt As String,  _
                    ByVal ModMActi As String,  _
                    ByVal ModMMtDeb As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMMtCre As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMD_C As String,  _
                    ByVal ModMQte1 As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMQte2 As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMLettrage As Global.System.Nullable(Of Integer),  _
                    ByVal ModMCptCtr As String,  _
                    ByVal ModMActCtr As String,  _
                    ByVal Original_ModMExpl As String,  _
                    ByVal Original_ModMPiece As String,  _
                    ByVal Original_ModMLig As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModMOrdre As Global.System.Nullable(Of Byte),  _
                    ByVal Original_ModMCpt As String,  _
                    ByVal Original_ModMActi As String,  _
                    ByVal Original_ModMMtDeb As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMMtCre As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMD_C As String,  _
                    ByVal Original_ModMQte1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMQte2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMLettrage As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModMCptCtr As String,  _
                    ByVal Original_ModMActCtr As String) As Integer
            If (ModMExpl Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ModMExpl,String)
            End If
            If (ModMPiece Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ModMPiece,String)
            End If
            If (ModMLig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ModMLig.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ModMOrdre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ModMOrdre.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ModMCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ModMCpt,String)
            End If
            If (ModMActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ModMActi,String)
            End If
            If (ModMMtDeb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ModMMtDeb.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ModMMtCre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ModMMtCre.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ModMD_C Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ModMD_C,String)
            End If
            If (ModMQte1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ModMQte1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ModMQte2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ModMQte2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ModMLettrage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ModMLettrage.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ModMCptCtr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ModMCptCtr,String)
            End If
            If (ModMActCtr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ModMActCtr,String)
            End If
            If (Original_ModMExpl Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ModMExpl,String)
            End If
            If (Original_ModMPiece Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ModMPiece,String)
            End If
            If (Original_ModMLig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_ModMLig.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMOrdre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ModMOrdre.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ModMCpt,String)
            End If
            If (Original_ModMActi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ModMActi,String)
            End If
            If (Original_ModMMtDeb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ModMMtDeb.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMMtCre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ModMMtCre.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMD_C Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ModMD_C,String)
            End If
            If (Original_ModMQte1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_ModMQte1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMQte2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ModMQte2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMLettrage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_ModMLettrage.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_ModMCptCtr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_ModMCptCtr,String)
            End If
            If (Original_ModMActCtr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ModMActCtr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ModMCpt As String,  _
                    ByVal ModMActi As String,  _
                    ByVal ModMMtDeb As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMMtCre As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMD_C As String,  _
                    ByVal ModMQte1 As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMQte2 As Global.System.Nullable(Of Decimal),  _
                    ByVal ModMLettrage As Global.System.Nullable(Of Integer),  _
                    ByVal ModMCptCtr As String,  _
                    ByVal ModMActCtr As String,  _
                    ByVal Original_ModMExpl As String,  _
                    ByVal Original_ModMPiece As String,  _
                    ByVal Original_ModMLig As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModMOrdre As Global.System.Nullable(Of Byte),  _
                    ByVal Original_ModMCpt As String,  _
                    ByVal Original_ModMActi As String,  _
                    ByVal Original_ModMMtDeb As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMMtCre As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMD_C As String,  _
                    ByVal Original_ModMQte1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMQte2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ModMLettrage As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModMCptCtr As String,  _
                    ByVal Original_ModMActCtr As String) As Integer
            Return Me.Update(Original_ModMExpl, Original_ModMPiece, Original_ModMLig, Original_ModMOrdre, ModMCpt, ModMActi, ModMMtDeb, ModMMtCre, ModMD_C, ModMQte1, ModMQte2, ModMLettrage, ModMCptCtr, ModMActCtr, Original_ModMExpl, Original_ModMPiece, Original_ModMLig, Original_ModMOrdre, Original_ModMCpt, Original_ModMActi, Original_ModMMtDeb, Original_ModMMtCre, Original_ModMD_C, Original_ModMQte1, Original_ModMQte2, Original_ModMLettrage, Original_ModMCptCtr, Original_ModMActCtr)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ModLignesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ModLignes"
            tableMapping.ColumnMappings.Add("ModLExpl", "ModLExpl")
            tableMapping.ColumnMappings.Add("ModLPiece", "ModLPiece")
            tableMapping.ColumnMappings.Add("ModLLig", "ModLLig")
            tableMapping.ColumnMappings.Add("ModLTva", "ModLTva")
            tableMapping.ColumnMappings.Add("ModLLib", "ModLLib")
            tableMapping.ColumnMappings.Add("ModLGene", "ModLGene")
            tableMapping.ColumnMappings.Add("ModLAna", "ModLAna")
            tableMapping.ColumnMappings.Add("ModLJournal", "ModLJournal")
            tableMapping.ColumnMappings.Add("ModLMtTVA", "ModLMtTVA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `ModLignes` WHERE ((`ModLExpl` = ?) AND (`ModLPiece` = ?) AND (`ModLL"& _ 
                "ig` = ?) AND ((? = 1 AND `ModLTva` IS NULL) OR (`ModLTva` = ?)) AND ((? = 1 AND "& _ 
                "`ModLLib` IS NULL) OR (`ModLLib` = ?)) AND ((? = 1 AND `ModLGene` IS NULL) OR (`"& _ 
                "ModLGene` = ?)) AND ((? = 1 AND `ModLAna` IS NULL) OR (`ModLAna` = ?)) AND ((? ="& _ 
                " 1 AND `ModLJournal` IS NULL) OR (`ModLJournal` = ?)) AND ((? = 1 AND `ModLMtTVA"& _ 
                "` IS NULL) OR (`ModLMtTVA` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLExpl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLPiece", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLig", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLTva", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLTva", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLLib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLGene", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLGene", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLAna", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLAna", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLJournal", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLJournal", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLMtTVA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLMtTVA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ModLignes` (`ModLExpl`, `ModLPiece`, `ModLLig`, `ModLTva`, `ModLLib`"& _ 
                ", `ModLGene`, `ModLAna`, `ModLJournal`, `ModLMtTVA`) VALUES (?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLExpl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLPiece", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLig", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLTva", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLGene", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLAna", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLJournal", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLMtTVA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `ModLignes` SET `ModLExpl` = ?, `ModLPiece` = ?, `ModLLig` = ?, `ModLTva` "& _ 
                "= ?, `ModLLib` = ?, `ModLGene` = ?, `ModLAna` = ?, `ModLJournal` = ?, `ModLMtTVA"& _ 
                "` = ? WHERE ((`ModLExpl` = ?) AND (`ModLPiece` = ?) AND (`ModLLig` = ?) AND ((? "& _ 
                "= 1 AND `ModLTva` IS NULL) OR (`ModLTva` = ?)) AND ((? = 1 AND `ModLLib` IS NULL"& _ 
                ") OR (`ModLLib` = ?)) AND ((? = 1 AND `ModLGene` IS NULL) OR (`ModLGene` = ?)) A"& _ 
                "ND ((? = 1 AND `ModLAna` IS NULL) OR (`ModLAna` = ?)) AND ((? = 1 AND `ModLJourn"& _ 
                "al` IS NULL) OR (`ModLJournal` = ?)) AND ((? = 1 AND `ModLMtTVA` IS NULL) OR (`M"& _ 
                "odLMtTVA` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLExpl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLPiece", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLig", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLTva", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLGene", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLAna", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLJournal", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLMtTVA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLExpl", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLExpl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLPiece", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLPiece", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLLig", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLig", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLTva", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLTva", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLTva", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLLib", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLLib", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLLib", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLGene", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLGene", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLGene", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLAna", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLAna", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLAna", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLJournal", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLJournal", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLJournal", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ModLMtTVA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ModLMtTVA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLMtTVA", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.AgrigestEDI.My.MySettings.Default.dbDonneesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ModLExpl, ModLPiece, ModLLig, ModLTva, ModLLib, ModLGene, ModLAna, ModLJou"& _ 
                "rnal, ModLMtTVA FROM ModLignes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     ModLExpl, ModLPiece, ModLLig, ModLTva, ModLLib, ModLGene, ModLAna, Mod"& _ 
                "LJournal, ModLMtTVA"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ModLignes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ModLExpl = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ModLExpl", Global.System.Data.OleDb.OleDbType.WChar, 6, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ModLExpl", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPLC.ModLignesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPLC.ModLignesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPLC.ModLignesDataTable = New dsPLC.ModLignesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByExpl(ByVal dataTable As dsPLC.ModLignesDataTable, ByVal ModLExpl As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ModLExpl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModLExpl,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByExpl(ByVal ModLExpl As String) As dsPLC.ModLignesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ModLExpl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModLExpl,String)
            End If
            Dim dataTable As dsPLC.ModLignesDataTable = New dsPLC.ModLignesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPLC.ModLignesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPLC) As Integer
            Return Me.Adapter.Update(dataSet, "ModLignes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ModLExpl As String, ByVal Original_ModLPiece As String, ByVal Original_ModLLig As Global.System.Nullable(Of Integer), ByVal Original_ModLTva As String, ByVal Original_ModLLib As String, ByVal Original_ModLGene As String, ByVal Original_ModLAna As String, ByVal Original_ModLJournal As String, ByVal Original_ModLMtTVA As String) As Integer
            If (Original_ModLExpl Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ModLExpl,String)
            End If
            If (Original_ModLPiece Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ModLPiece,String)
            End If
            If (Original_ModLLig.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ModLLig.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ModLTva Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ModLTva,String)
            End If
            If (Original_ModLLib Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ModLLib,String)
            End If
            If (Original_ModLGene Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ModLGene,String)
            End If
            If (Original_ModLAna Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ModLAna,String)
            End If
            If (Original_ModLJournal Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ModLJournal,String)
            End If
            If (Original_ModLMtTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ModLMtTVA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ModLExpl As String, ByVal ModLPiece As String, ByVal ModLLig As Global.System.Nullable(Of Integer), ByVal ModLTva As String, ByVal ModLLib As String, ByVal ModLGene As String, ByVal ModLAna As String, ByVal ModLJournal As String, ByVal ModLMtTVA As String) As Integer
            If (ModLExpl Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ModLExpl,String)
            End If
            If (ModLPiece Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ModLPiece,String)
            End If
            If (ModLLig.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ModLLig.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ModLTva Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ModLTva,String)
            End If
            If (ModLLib Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ModLLib,String)
            End If
            If (ModLGene Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ModLGene,String)
            End If
            If (ModLAna Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ModLAna,String)
            End If
            If (ModLJournal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ModLJournal,String)
            End If
            If (ModLMtTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ModLMtTVA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ModLExpl As String,  _
                    ByVal ModLPiece As String,  _
                    ByVal ModLLig As Global.System.Nullable(Of Integer),  _
                    ByVal ModLTva As String,  _
                    ByVal ModLLib As String,  _
                    ByVal ModLGene As String,  _
                    ByVal ModLAna As String,  _
                    ByVal ModLJournal As String,  _
                    ByVal ModLMtTVA As String,  _
                    ByVal Original_ModLExpl As String,  _
                    ByVal Original_ModLPiece As String,  _
                    ByVal Original_ModLLig As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ModLTva As String,  _
                    ByVal Original_ModLLib As String,  _
                    ByVal Original_ModLGene As String,  _
                    ByVal Original_ModLAna As String,  _
                    ByVal Original_ModLJournal As String,  _
                    ByVal Original_ModLMtTVA As String) As Integer
            If (ModLExpl Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ModLExpl,String)
            End If
            If (ModLPiece Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ModLPiece,String)
            End If
            If (ModLLig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ModLLig.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ModLTva Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ModLTva,String)
            End If
            If (ModLLib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ModLLib,String)
            End If
            If (ModLGene Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ModLGene,String)
            End If
            If (ModLAna Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ModLAna,String)
            End If
            If (ModLJournal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ModLJournal,String)
            End If
            If (ModLMtTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ModLMtTVA,String)
            End If
            If (Original_ModLExpl Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ModLExpl,String)
            End If
            If (Original_ModLPiece Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ModLPiece,String)
            End If
            If (Original_ModLLig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ModLLig.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_ModLTva Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ModLTva,String)
            End If
            If (Original_ModLLib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ModLLib,String)
            End If
            If (Original_ModLGene Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ModLGene,String)
            End If
            If (Original_ModLAna Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ModLAna,String)
            End If
            If (Original_ModLJournal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ModLJournal,String)
            End If
            If (Original_ModLMtTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ModLMtTVA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ModLTva As String, ByVal ModLLib As String, ByVal ModLGene As String, ByVal ModLAna As String, ByVal ModLJournal As String, ByVal ModLMtTVA As String, ByVal Original_ModLExpl As String, ByVal Original_ModLPiece As String, ByVal Original_ModLLig As Global.System.Nullable(Of Integer), ByVal Original_ModLTva As String, ByVal Original_ModLLib As String, ByVal Original_ModLGene As String, ByVal Original_ModLAna As String, ByVal Original_ModLJournal As String, ByVal Original_ModLMtTVA As String) As Integer
            Return Me.Update(Original_ModLExpl, Original_ModLPiece, Original_ModLLig, ModLTva, ModLLib, ModLGene, ModLAna, ModLJournal, ModLMtTVA, Original_ModLExpl, Original_ModLPiece, Original_ModLLig, Original_ModLTva, Original_ModLLib, Original_ModLGene, Original_ModLAna, Original_ModLJournal, Original_ModLMtTVA)
        End Function
    End Class
End Namespace
