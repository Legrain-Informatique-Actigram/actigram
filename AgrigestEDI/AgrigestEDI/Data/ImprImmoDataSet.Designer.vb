'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.5446
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ImprImmoDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ImprImmoDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableImpTabImmo As ImpTabImmoDataTable
    
    Private tableImpTabDepImmo As ImpTabDepImmoDataTable
    
    Private tableImpRecapImmo As ImpRecapImmoDataTable
    
    Private tableImpTabCessImmo As ImpTabCessImmoDataTable
    
    Private tableImpAmortDer As ImpAmortDerDataTable
    
    Private tableImpPassReelImmo As ImpPassReelImmoDataTable
    
    Private tableImpTabClaImmo As ImpTabClaImmoDataTable
    
    Private tableImpCalProv As ImpCalProvDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ImpTabImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpTabImmoDataTable(ds.Tables("ImpTabImmo")))
            End If
            If (Not (ds.Tables("ImpTabDepImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpTabDepImmoDataTable(ds.Tables("ImpTabDepImmo")))
            End If
            If (Not (ds.Tables("ImpRecapImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpRecapImmoDataTable(ds.Tables("ImpRecapImmo")))
            End If
            If (Not (ds.Tables("ImpTabCessImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpTabCessImmoDataTable(ds.Tables("ImpTabCessImmo")))
            End If
            If (Not (ds.Tables("ImpAmortDer")) Is Nothing) Then
                MyBase.Tables.Add(New ImpAmortDerDataTable(ds.Tables("ImpAmortDer")))
            End If
            If (Not (ds.Tables("ImpPassReelImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpPassReelImmoDataTable(ds.Tables("ImpPassReelImmo")))
            End If
            If (Not (ds.Tables("ImpTabClaImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpTabClaImmoDataTable(ds.Tables("ImpTabClaImmo")))
            End If
            If (Not (ds.Tables("ImpCalProv")) Is Nothing) Then
                MyBase.Tables.Add(New ImpCalProvDataTable(ds.Tables("ImpCalProv")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImpTabImmo() As ImpTabImmoDataTable
        Get
            Return Me.tableImpTabImmo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImpTabDepImmo() As ImpTabDepImmoDataTable
        Get
            Return Me.tableImpTabDepImmo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImpRecapImmo() As ImpRecapImmoDataTable
        Get
            Return Me.tableImpRecapImmo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImpTabCessImmo() As ImpTabCessImmoDataTable
        Get
            Return Me.tableImpTabCessImmo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImpAmortDer() As ImpAmortDerDataTable
        Get
            Return Me.tableImpAmortDer
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImpPassReelImmo() As ImpPassReelImmoDataTable
        Get
            Return Me.tableImpPassReelImmo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImpTabClaImmo() As ImpTabClaImmoDataTable
        Get
            Return Me.tableImpTabClaImmo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImpCalProv() As ImpCalProvDataTable
        Get
            Return Me.tableImpCalProv
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ImprImmoDataSet = CType(MyBase.Clone,ImprImmoDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ImpTabImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpTabImmoDataTable(ds.Tables("ImpTabImmo")))
            End If
            If (Not (ds.Tables("ImpTabDepImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpTabDepImmoDataTable(ds.Tables("ImpTabDepImmo")))
            End If
            If (Not (ds.Tables("ImpRecapImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpRecapImmoDataTable(ds.Tables("ImpRecapImmo")))
            End If
            If (Not (ds.Tables("ImpTabCessImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpTabCessImmoDataTable(ds.Tables("ImpTabCessImmo")))
            End If
            If (Not (ds.Tables("ImpAmortDer")) Is Nothing) Then
                MyBase.Tables.Add(New ImpAmortDerDataTable(ds.Tables("ImpAmortDer")))
            End If
            If (Not (ds.Tables("ImpPassReelImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpPassReelImmoDataTable(ds.Tables("ImpPassReelImmo")))
            End If
            If (Not (ds.Tables("ImpTabClaImmo")) Is Nothing) Then
                MyBase.Tables.Add(New ImpTabClaImmoDataTable(ds.Tables("ImpTabClaImmo")))
            End If
            If (Not (ds.Tables("ImpCalProv")) Is Nothing) Then
                MyBase.Tables.Add(New ImpCalProvDataTable(ds.Tables("ImpCalProv")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableImpTabImmo = CType(MyBase.Tables("ImpTabImmo"),ImpTabImmoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImpTabImmo) Is Nothing) Then
                Me.tableImpTabImmo.InitVars
            End If
        End If
        Me.tableImpTabDepImmo = CType(MyBase.Tables("ImpTabDepImmo"),ImpTabDepImmoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImpTabDepImmo) Is Nothing) Then
                Me.tableImpTabDepImmo.InitVars
            End If
        End If
        Me.tableImpRecapImmo = CType(MyBase.Tables("ImpRecapImmo"),ImpRecapImmoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImpRecapImmo) Is Nothing) Then
                Me.tableImpRecapImmo.InitVars
            End If
        End If
        Me.tableImpTabCessImmo = CType(MyBase.Tables("ImpTabCessImmo"),ImpTabCessImmoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImpTabCessImmo) Is Nothing) Then
                Me.tableImpTabCessImmo.InitVars
            End If
        End If
        Me.tableImpAmortDer = CType(MyBase.Tables("ImpAmortDer"),ImpAmortDerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImpAmortDer) Is Nothing) Then
                Me.tableImpAmortDer.InitVars
            End If
        End If
        Me.tableImpPassReelImmo = CType(MyBase.Tables("ImpPassReelImmo"),ImpPassReelImmoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImpPassReelImmo) Is Nothing) Then
                Me.tableImpPassReelImmo.InitVars
            End If
        End If
        Me.tableImpTabClaImmo = CType(MyBase.Tables("ImpTabClaImmo"),ImpTabClaImmoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImpTabClaImmo) Is Nothing) Then
                Me.tableImpTabClaImmo.InitVars
            End If
        End If
        Me.tableImpCalProv = CType(MyBase.Tables("ImpCalProv"),ImpCalProvDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImpCalProv) Is Nothing) Then
                Me.tableImpCalProv.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ImprImmoDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ImprImmoDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableImpTabImmo = New ImpTabImmoDataTable
        MyBase.Tables.Add(Me.tableImpTabImmo)
        Me.tableImpTabDepImmo = New ImpTabDepImmoDataTable
        MyBase.Tables.Add(Me.tableImpTabDepImmo)
        Me.tableImpRecapImmo = New ImpRecapImmoDataTable
        MyBase.Tables.Add(Me.tableImpRecapImmo)
        Me.tableImpTabCessImmo = New ImpTabCessImmoDataTable
        MyBase.Tables.Add(Me.tableImpTabCessImmo)
        Me.tableImpAmortDer = New ImpAmortDerDataTable
        MyBase.Tables.Add(Me.tableImpAmortDer)
        Me.tableImpPassReelImmo = New ImpPassReelImmoDataTable
        MyBase.Tables.Add(Me.tableImpPassReelImmo)
        Me.tableImpTabClaImmo = New ImpTabClaImmoDataTable
        MyBase.Tables.Add(Me.tableImpTabClaImmo)
        Me.tableImpCalProv = New ImpCalProvDataTable
        MyBase.Tables.Add(Me.tableImpCalProv)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImpTabImmo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImpTabDepImmo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImpRecapImmo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImpTabCessImmo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImpAmortDer() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImpPassReelImmo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImpTabClaImmo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImpCalProv() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ImprImmoDataSet = New ImprImmoDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ImpTabImmoRowChangeEventHandler(ByVal sender As Object, ByVal e As ImpTabImmoRowChangeEvent)
    
    Public Delegate Sub ImpTabDepImmoRowChangeEventHandler(ByVal sender As Object, ByVal e As ImpTabDepImmoRowChangeEvent)
    
    Public Delegate Sub ImpRecapImmoRowChangeEventHandler(ByVal sender As Object, ByVal e As ImpRecapImmoRowChangeEvent)
    
    Public Delegate Sub ImpTabCessImmoRowChangeEventHandler(ByVal sender As Object, ByVal e As ImpTabCessImmoRowChangeEvent)
    
    Public Delegate Sub ImpAmortDerRowChangeEventHandler(ByVal sender As Object, ByVal e As ImpAmortDerRowChangeEvent)
    
    Public Delegate Sub ImpPassReelImmoRowChangeEventHandler(ByVal sender As Object, ByVal e As ImpPassReelImmoRowChangeEvent)
    
    Public Delegate Sub ImpTabClaImmoRowChangeEventHandler(ByVal sender As Object, ByVal e As ImpTabClaImmoRowChangeEvent)
    
    Public Delegate Sub ImpCalProvRowChangeEventHandler(ByVal sender As Object, ByVal e As ImpCalProvRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImpTabImmoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIDossier As Global.System.Data.DataColumn
        
        Private columnICpt As Global.System.Data.DataColumn
        
        Private columnIActi As Global.System.Data.DataColumn
        
        Private columnIOrdre As Global.System.Data.DataColumn
        
        Private columnILib As Global.System.Data.DataColumn
        
        Private columnITypAmt As Global.System.Data.DataColumn
        
        Private columnIValAcquis As Global.System.Data.DataColumn
        
        Private columnIDtAcquis As Global.System.Data.DataColumn
        
        Private columnIDtForf As Global.System.Data.DataColumn
        
        Private columnIDtOrig As Global.System.Data.DataColumn
        
        Private columnIDuree As Global.System.Data.DataColumn
        
        Private columnIAmtExMax As Global.System.Data.DataColumn
        
        Private columnIAmtExTot As Global.System.Data.DataColumn
        
        Private columnIAmtCumTot As Global.System.Data.DataColumn
        
        Private columnIValResid As Global.System.Data.DataColumn
        
        Private columnIDureeResid As Global.System.Data.DataColumn
        
        Private columnITVA As Global.System.Data.DataColumn
        
        Private columnCLib As Global.System.Data.DataColumn
        
        Private columnICoeff As Global.System.Data.DataColumn
        
        Private columnIDtCess As Global.System.Data.DataColumn
        
        Private columnIDerogatoire As Global.System.Data.DataColumn
        
        Private columnIAmtExLin As Global.System.Data.DataColumn
        
        Private columnIDtDebEx As Global.System.Data.DataColumn
        
        Private columnALib As Global.System.Data.DataColumn
        
        Private columnIValCess As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImpTabImmo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITypAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITypAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtOrigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtOrig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDuree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtCumTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtCumTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDureeResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICoeffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICoeff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtCessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtCess
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDerogatoireColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDerogatoire
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExLinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExLin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtDebExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtDebEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValCessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValCess
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImpTabImmoRow
            Get
                Return CType(Me.Rows(index),ImpTabImmoRow)
            End Get
        End Property
        
        Public Event ImpTabImmoRowChanging As ImpTabImmoRowChangeEventHandler
        
        Public Event ImpTabImmoRowChanged As ImpTabImmoRowChangeEventHandler
        
        Public Event ImpTabImmoRowDeleting As ImpTabImmoRowChangeEventHandler
        
        Public Event ImpTabImmoRowDeleted As ImpTabImmoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImpTabImmoRow(ByVal row As ImpTabImmoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImpTabImmoRow( _
                    ByVal IDossier As String,  _
                    ByVal ICpt As String,  _
                    ByVal IActi As String,  _
                    ByVal IOrdre As String,  _
                    ByVal ILib As String,  _
                    ByVal ITypAmt As String,  _
                    ByVal IValAcquis As Decimal,  _
                    ByVal IDtAcquis As Date,  _
                    ByVal IDtForf As Date,  _
                    ByVal IDtOrig As Date,  _
                    ByVal IDuree As Long,  _
                    ByVal IAmtExMax As Decimal,  _
                    ByVal IAmtExTot As Decimal,  _
                    ByVal IAmtCumTot As Decimal,  _
                    ByVal IValResid As Decimal,  _
                    ByVal IDureeResid As Long,  _
                    ByVal ITVA As Decimal,  _
                    ByVal CLib As String,  _
                    ByVal ICoeff As Decimal,  _
                    ByVal IDtCess As Date,  _
                    ByVal IDerogatoire As String,  _
                    ByVal IAmtExLin As Decimal,  _
                    ByVal IDtDebEx As Date,  _
                    ByVal ALib As String,  _
                    ByVal IValCess As Decimal) As ImpTabImmoRow
            Dim rowImpTabImmoRow As ImpTabImmoRow = CType(Me.NewRow,ImpTabImmoRow)
            Dim columnValuesArray() As Object = New Object() {IDossier, ICpt, IActi, IOrdre, ILib, ITypAmt, IValAcquis, IDtAcquis, IDtForf, IDtOrig, IDuree, IAmtExMax, IAmtExTot, IAmtCumTot, IValResid, IDureeResid, ITVA, CLib, ICoeff, IDtCess, IDerogatoire, IAmtExLin, IDtDebEx, ALib, IValCess}
            rowImpTabImmoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImpTabImmoRow)
            Return rowImpTabImmoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImpTabImmoDataTable = CType(MyBase.Clone,ImpTabImmoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImpTabImmoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDossier = MyBase.Columns("IDossier")
            Me.columnICpt = MyBase.Columns("ICpt")
            Me.columnIActi = MyBase.Columns("IActi")
            Me.columnIOrdre = MyBase.Columns("IOrdre")
            Me.columnILib = MyBase.Columns("ILib")
            Me.columnITypAmt = MyBase.Columns("ITypAmt")
            Me.columnIValAcquis = MyBase.Columns("IValAcquis")
            Me.columnIDtAcquis = MyBase.Columns("IDtAcquis")
            Me.columnIDtForf = MyBase.Columns("IDtForf")
            Me.columnIDtOrig = MyBase.Columns("IDtOrig")
            Me.columnIDuree = MyBase.Columns("IDuree")
            Me.columnIAmtExMax = MyBase.Columns("IAmtExMax")
            Me.columnIAmtExTot = MyBase.Columns("IAmtExTot")
            Me.columnIAmtCumTot = MyBase.Columns("IAmtCumTot")
            Me.columnIValResid = MyBase.Columns("IValResid")
            Me.columnIDureeResid = MyBase.Columns("IDureeResid")
            Me.columnITVA = MyBase.Columns("ITVA")
            Me.columnCLib = MyBase.Columns("CLib")
            Me.columnICoeff = MyBase.Columns("ICoeff")
            Me.columnIDtCess = MyBase.Columns("IDtCess")
            Me.columnIDerogatoire = MyBase.Columns("IDerogatoire")
            Me.columnIAmtExLin = MyBase.Columns("IAmtExLin")
            Me.columnIDtDebEx = MyBase.Columns("IDtDebEx")
            Me.columnALib = MyBase.Columns("ALib")
            Me.columnIValCess = MyBase.Columns("IValCess")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDossier = New Global.System.Data.DataColumn("IDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDossier)
            Me.columnICpt = New Global.System.Data.DataColumn("ICpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICpt)
            Me.columnIActi = New Global.System.Data.DataColumn("IActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIActi)
            Me.columnIOrdre = New Global.System.Data.DataColumn("IOrdre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOrdre)
            Me.columnILib = New Global.System.Data.DataColumn("ILib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib)
            Me.columnITypAmt = New Global.System.Data.DataColumn("ITypAmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITypAmt)
            Me.columnIValAcquis = New Global.System.Data.DataColumn("IValAcquis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValAcquis)
            Me.columnIDtAcquis = New Global.System.Data.DataColumn("IDtAcquis", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtAcquis)
            Me.columnIDtForf = New Global.System.Data.DataColumn("IDtForf", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtForf)
            Me.columnIDtOrig = New Global.System.Data.DataColumn("IDtOrig", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtOrig)
            Me.columnIDuree = New Global.System.Data.DataColumn("IDuree", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDuree)
            Me.columnIAmtExMax = New Global.System.Data.DataColumn("IAmtExMax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExMax)
            Me.columnIAmtExTot = New Global.System.Data.DataColumn("IAmtExTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExTot)
            Me.columnIAmtCumTot = New Global.System.Data.DataColumn("IAmtCumTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtCumTot)
            Me.columnIValResid = New Global.System.Data.DataColumn("IValResid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValResid)
            Me.columnIDureeResid = New Global.System.Data.DataColumn("IDureeResid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDureeResid)
            Me.columnITVA = New Global.System.Data.DataColumn("ITVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITVA)
            Me.columnCLib = New Global.System.Data.DataColumn("CLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLib)
            Me.columnICoeff = New Global.System.Data.DataColumn("ICoeff", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICoeff)
            Me.columnIDtCess = New Global.System.Data.DataColumn("IDtCess", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtCess)
            Me.columnIDerogatoire = New Global.System.Data.DataColumn("IDerogatoire", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDerogatoire)
            Me.columnIAmtExLin = New Global.System.Data.DataColumn("IAmtExLin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExLin)
            Me.columnIDtDebEx = New Global.System.Data.DataColumn("IDtDebEx", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtDebEx)
            Me.columnALib = New Global.System.Data.DataColumn("ALib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALib)
            Me.columnIValCess = New Global.System.Data.DataColumn("IValCess", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValCess)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImpTabImmoRow() As ImpTabImmoRow
            Return CType(Me.NewRow,ImpTabImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImpTabImmoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImpTabImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImpTabImmoRowChangedEvent) Is Nothing) Then
                RaiseEvent ImpTabImmoRowChanged(Me, New ImpTabImmoRowChangeEvent(CType(e.Row,ImpTabImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImpTabImmoRowChangingEvent) Is Nothing) Then
                RaiseEvent ImpTabImmoRowChanging(Me, New ImpTabImmoRowChangeEvent(CType(e.Row,ImpTabImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImpTabImmoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImpTabImmoRowDeleted(Me, New ImpTabImmoRowChangeEvent(CType(e.Row,ImpTabImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImpTabImmoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImpTabImmoRowDeleting(Me, New ImpTabImmoRowChangeEvent(CType(e.Row,ImpTabImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImpTabImmoRow(ByVal row As ImpTabImmoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImprImmoDataSet = New ImprImmoDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImpTabImmoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImpTabDepImmoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIDossier As Global.System.Data.DataColumn
        
        Private columnICpt As Global.System.Data.DataColumn
        
        Private columnIActi As Global.System.Data.DataColumn
        
        Private columnIOrdre As Global.System.Data.DataColumn
        
        Private columnILib As Global.System.Data.DataColumn
        
        Private columnITypAmt As Global.System.Data.DataColumn
        
        Private columnIValAcquis As Global.System.Data.DataColumn
        
        Private columnIDtAcquis As Global.System.Data.DataColumn
        
        Private columnIDtForf As Global.System.Data.DataColumn
        
        Private columnIDtOrig As Global.System.Data.DataColumn
        
        Private columnIDuree As Global.System.Data.DataColumn
        
        Private columnIAmtExMax As Global.System.Data.DataColumn
        
        Private columnIAmtExTot As Global.System.Data.DataColumn
        
        Private columnIAmtCumTot As Global.System.Data.DataColumn
        
        Private columnIValResid As Global.System.Data.DataColumn
        
        Private columnIDureeResid As Global.System.Data.DataColumn
        
        Private columnITVA As Global.System.Data.DataColumn
        
        Private columnCLib As Global.System.Data.DataColumn
        
        Private columnICoeff As Global.System.Data.DataColumn
        
        Private columnIDtCess As Global.System.Data.DataColumn
        
        Private columnIDerogatoire As Global.System.Data.DataColumn
        
        Private columnIAmtExLin As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImpTabDepImmo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITypAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITypAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtOrigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtOrig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDuree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtCumTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtCumTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDureeResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICoeffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICoeff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtCessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtCess
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDerogatoireColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDerogatoire
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExLinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExLin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImpTabDepImmoRow
            Get
                Return CType(Me.Rows(index),ImpTabDepImmoRow)
            End Get
        End Property
        
        Public Event ImpTabDepImmoRowChanging As ImpTabDepImmoRowChangeEventHandler
        
        Public Event ImpTabDepImmoRowChanged As ImpTabDepImmoRowChangeEventHandler
        
        Public Event ImpTabDepImmoRowDeleting As ImpTabDepImmoRowChangeEventHandler
        
        Public Event ImpTabDepImmoRowDeleted As ImpTabDepImmoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImpTabDepImmoRow(ByVal row As ImpTabDepImmoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImpTabDepImmoRow( _
                    ByVal IDossier As String,  _
                    ByVal ICpt As String,  _
                    ByVal IActi As String,  _
                    ByVal IOrdre As String,  _
                    ByVal ILib As String,  _
                    ByVal ITypAmt As String,  _
                    ByVal IValAcquis As Decimal,  _
                    ByVal IDtAcquis As Date,  _
                    ByVal IDtForf As Date,  _
                    ByVal IDtOrig As Date,  _
                    ByVal IDuree As Long,  _
                    ByVal IAmtExMax As Decimal,  _
                    ByVal IAmtExTot As Decimal,  _
                    ByVal IAmtCumTot As Decimal,  _
                    ByVal IValResid As Decimal,  _
                    ByVal IDureeResid As Long,  _
                    ByVal ITVA As Decimal,  _
                    ByVal CLib As String,  _
                    ByVal ICoeff As Decimal,  _
                    ByVal IDtCess As Date,  _
                    ByVal IDerogatoire As String,  _
                    ByVal IAmtExLin As Decimal) As ImpTabDepImmoRow
            Dim rowImpTabDepImmoRow As ImpTabDepImmoRow = CType(Me.NewRow,ImpTabDepImmoRow)
            Dim columnValuesArray() As Object = New Object() {IDossier, ICpt, IActi, IOrdre, ILib, ITypAmt, IValAcquis, IDtAcquis, IDtForf, IDtOrig, IDuree, IAmtExMax, IAmtExTot, IAmtCumTot, IValResid, IDureeResid, ITVA, CLib, ICoeff, IDtCess, IDerogatoire, IAmtExLin}
            rowImpTabDepImmoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImpTabDepImmoRow)
            Return rowImpTabDepImmoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImpTabDepImmoDataTable = CType(MyBase.Clone,ImpTabDepImmoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImpTabDepImmoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDossier = MyBase.Columns("IDossier")
            Me.columnICpt = MyBase.Columns("ICpt")
            Me.columnIActi = MyBase.Columns("IActi")
            Me.columnIOrdre = MyBase.Columns("IOrdre")
            Me.columnILib = MyBase.Columns("ILib")
            Me.columnITypAmt = MyBase.Columns("ITypAmt")
            Me.columnIValAcquis = MyBase.Columns("IValAcquis")
            Me.columnIDtAcquis = MyBase.Columns("IDtAcquis")
            Me.columnIDtForf = MyBase.Columns("IDtForf")
            Me.columnIDtOrig = MyBase.Columns("IDtOrig")
            Me.columnIDuree = MyBase.Columns("IDuree")
            Me.columnIAmtExMax = MyBase.Columns("IAmtExMax")
            Me.columnIAmtExTot = MyBase.Columns("IAmtExTot")
            Me.columnIAmtCumTot = MyBase.Columns("IAmtCumTot")
            Me.columnIValResid = MyBase.Columns("IValResid")
            Me.columnIDureeResid = MyBase.Columns("IDureeResid")
            Me.columnITVA = MyBase.Columns("ITVA")
            Me.columnCLib = MyBase.Columns("CLib")
            Me.columnICoeff = MyBase.Columns("ICoeff")
            Me.columnIDtCess = MyBase.Columns("IDtCess")
            Me.columnIDerogatoire = MyBase.Columns("IDerogatoire")
            Me.columnIAmtExLin = MyBase.Columns("IAmtExLin")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDossier = New Global.System.Data.DataColumn("IDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDossier)
            Me.columnICpt = New Global.System.Data.DataColumn("ICpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICpt)
            Me.columnIActi = New Global.System.Data.DataColumn("IActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIActi)
            Me.columnIOrdre = New Global.System.Data.DataColumn("IOrdre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOrdre)
            Me.columnILib = New Global.System.Data.DataColumn("ILib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib)
            Me.columnITypAmt = New Global.System.Data.DataColumn("ITypAmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITypAmt)
            Me.columnIValAcquis = New Global.System.Data.DataColumn("IValAcquis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValAcquis)
            Me.columnIDtAcquis = New Global.System.Data.DataColumn("IDtAcquis", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtAcquis)
            Me.columnIDtForf = New Global.System.Data.DataColumn("IDtForf", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtForf)
            Me.columnIDtOrig = New Global.System.Data.DataColumn("IDtOrig", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtOrig)
            Me.columnIDuree = New Global.System.Data.DataColumn("IDuree", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDuree)
            Me.columnIAmtExMax = New Global.System.Data.DataColumn("IAmtExMax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExMax)
            Me.columnIAmtExTot = New Global.System.Data.DataColumn("IAmtExTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExTot)
            Me.columnIAmtCumTot = New Global.System.Data.DataColumn("IAmtCumTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtCumTot)
            Me.columnIValResid = New Global.System.Data.DataColumn("IValResid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValResid)
            Me.columnIDureeResid = New Global.System.Data.DataColumn("IDureeResid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDureeResid)
            Me.columnITVA = New Global.System.Data.DataColumn("ITVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITVA)
            Me.columnCLib = New Global.System.Data.DataColumn("CLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLib)
            Me.columnICoeff = New Global.System.Data.DataColumn("ICoeff", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICoeff)
            Me.columnIDtCess = New Global.System.Data.DataColumn("IDtCess", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtCess)
            Me.columnIDerogatoire = New Global.System.Data.DataColumn("IDerogatoire", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDerogatoire)
            Me.columnIAmtExLin = New Global.System.Data.DataColumn("IAmtExLin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExLin)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImpTabDepImmoRow() As ImpTabDepImmoRow
            Return CType(Me.NewRow,ImpTabDepImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImpTabDepImmoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImpTabDepImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImpTabDepImmoRowChangedEvent) Is Nothing) Then
                RaiseEvent ImpTabDepImmoRowChanged(Me, New ImpTabDepImmoRowChangeEvent(CType(e.Row,ImpTabDepImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImpTabDepImmoRowChangingEvent) Is Nothing) Then
                RaiseEvent ImpTabDepImmoRowChanging(Me, New ImpTabDepImmoRowChangeEvent(CType(e.Row,ImpTabDepImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImpTabDepImmoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImpTabDepImmoRowDeleted(Me, New ImpTabDepImmoRowChangeEvent(CType(e.Row,ImpTabDepImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImpTabDepImmoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImpTabDepImmoRowDeleting(Me, New ImpTabDepImmoRowChangeEvent(CType(e.Row,ImpTabDepImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImpTabDepImmoRow(ByVal row As ImpTabDepImmoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImprImmoDataSet = New ImprImmoDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImpTabDepImmoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImpRecapImmoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIDossier As Global.System.Data.DataColumn
        
        Private columnICpt As Global.System.Data.DataColumn
        
        Private columnIActi As Global.System.Data.DataColumn
        
        Private columnIOrdre As Global.System.Data.DataColumn
        
        Private columnILib As Global.System.Data.DataColumn
        
        Private columnITypAmt As Global.System.Data.DataColumn
        
        Private columnIValAcquis As Global.System.Data.DataColumn
        
        Private columnIDtAcquis As Global.System.Data.DataColumn
        
        Private columnIDtForf As Global.System.Data.DataColumn
        
        Private columnIDtOrig As Global.System.Data.DataColumn
        
        Private columnIDuree As Global.System.Data.DataColumn
        
        Private columnIAmtExLin As Global.System.Data.DataColumn
        
        Private columnIAmtExTot As Global.System.Data.DataColumn
        
        Private columnIAmtCumTot As Global.System.Data.DataColumn
        
        Private columnIValResid As Global.System.Data.DataColumn
        
        Private columnIPlusValLg As Global.System.Data.DataColumn
        
        Private columnIPlusValCt As Global.System.Data.DataColumn
        
        Private columnIDtCess As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImpRecapImmo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITypAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITypAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtOrigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtOrig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDuree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExLinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExLin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtCumTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtCumTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPlusValLgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPlusValLg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPlusValCtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPlusValCt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtCessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtCess
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImpRecapImmoRow
            Get
                Return CType(Me.Rows(index),ImpRecapImmoRow)
            End Get
        End Property
        
        Public Event ImpRecapImmoRowChanging As ImpRecapImmoRowChangeEventHandler
        
        Public Event ImpRecapImmoRowChanged As ImpRecapImmoRowChangeEventHandler
        
        Public Event ImpRecapImmoRowDeleting As ImpRecapImmoRowChangeEventHandler
        
        Public Event ImpRecapImmoRowDeleted As ImpRecapImmoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImpRecapImmoRow(ByVal row As ImpRecapImmoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImpRecapImmoRow( _
                    ByVal IDossier As String,  _
                    ByVal ICpt As String,  _
                    ByVal IActi As String,  _
                    ByVal IOrdre As String,  _
                    ByVal ILib As String,  _
                    ByVal ITypAmt As String,  _
                    ByVal IValAcquis As Decimal,  _
                    ByVal IDtAcquis As Date,  _
                    ByVal IDtForf As Date,  _
                    ByVal IDtOrig As Date,  _
                    ByVal IDuree As Long,  _
                    ByVal IAmtExLin As Decimal,  _
                    ByVal IAmtExTot As Decimal,  _
                    ByVal IAmtCumTot As Decimal,  _
                    ByVal IValResid As Decimal,  _
                    ByVal IPlusValLg As Decimal,  _
                    ByVal IPlusValCt As Decimal,  _
                    ByVal IDtCess As Date) As ImpRecapImmoRow
            Dim rowImpRecapImmoRow As ImpRecapImmoRow = CType(Me.NewRow,ImpRecapImmoRow)
            Dim columnValuesArray() As Object = New Object() {IDossier, ICpt, IActi, IOrdre, ILib, ITypAmt, IValAcquis, IDtAcquis, IDtForf, IDtOrig, IDuree, IAmtExLin, IAmtExTot, IAmtCumTot, IValResid, IPlusValLg, IPlusValCt, IDtCess}
            rowImpRecapImmoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImpRecapImmoRow)
            Return rowImpRecapImmoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImpRecapImmoDataTable = CType(MyBase.Clone,ImpRecapImmoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImpRecapImmoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDossier = MyBase.Columns("IDossier")
            Me.columnICpt = MyBase.Columns("ICpt")
            Me.columnIActi = MyBase.Columns("IActi")
            Me.columnIOrdre = MyBase.Columns("IOrdre")
            Me.columnILib = MyBase.Columns("ILib")
            Me.columnITypAmt = MyBase.Columns("ITypAmt")
            Me.columnIValAcquis = MyBase.Columns("IValAcquis")
            Me.columnIDtAcquis = MyBase.Columns("IDtAcquis")
            Me.columnIDtForf = MyBase.Columns("IDtForf")
            Me.columnIDtOrig = MyBase.Columns("IDtOrig")
            Me.columnIDuree = MyBase.Columns("IDuree")
            Me.columnIAmtExLin = MyBase.Columns("IAmtExLin")
            Me.columnIAmtExTot = MyBase.Columns("IAmtExTot")
            Me.columnIAmtCumTot = MyBase.Columns("IAmtCumTot")
            Me.columnIValResid = MyBase.Columns("IValResid")
            Me.columnIPlusValLg = MyBase.Columns("IPlusValLg")
            Me.columnIPlusValCt = MyBase.Columns("IPlusValCt")
            Me.columnIDtCess = MyBase.Columns("IDtCess")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDossier = New Global.System.Data.DataColumn("IDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDossier)
            Me.columnICpt = New Global.System.Data.DataColumn("ICpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICpt)
            Me.columnIActi = New Global.System.Data.DataColumn("IActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIActi)
            Me.columnIOrdre = New Global.System.Data.DataColumn("IOrdre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOrdre)
            Me.columnILib = New Global.System.Data.DataColumn("ILib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib)
            Me.columnITypAmt = New Global.System.Data.DataColumn("ITypAmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITypAmt)
            Me.columnIValAcquis = New Global.System.Data.DataColumn("IValAcquis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValAcquis)
            Me.columnIDtAcquis = New Global.System.Data.DataColumn("IDtAcquis", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtAcquis)
            Me.columnIDtForf = New Global.System.Data.DataColumn("IDtForf", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtForf)
            Me.columnIDtOrig = New Global.System.Data.DataColumn("IDtOrig", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtOrig)
            Me.columnIDuree = New Global.System.Data.DataColumn("IDuree", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDuree)
            Me.columnIAmtExLin = New Global.System.Data.DataColumn("IAmtExLin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExLin)
            Me.columnIAmtExTot = New Global.System.Data.DataColumn("IAmtExTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExTot)
            Me.columnIAmtCumTot = New Global.System.Data.DataColumn("IAmtCumTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtCumTot)
            Me.columnIValResid = New Global.System.Data.DataColumn("IValResid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValResid)
            Me.columnIPlusValLg = New Global.System.Data.DataColumn("IPlusValLg", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPlusValLg)
            Me.columnIPlusValCt = New Global.System.Data.DataColumn("IPlusValCt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPlusValCt)
            Me.columnIDtCess = New Global.System.Data.DataColumn("IDtCess", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtCess)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImpRecapImmoRow() As ImpRecapImmoRow
            Return CType(Me.NewRow,ImpRecapImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImpRecapImmoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImpRecapImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImpRecapImmoRowChangedEvent) Is Nothing) Then
                RaiseEvent ImpRecapImmoRowChanged(Me, New ImpRecapImmoRowChangeEvent(CType(e.Row,ImpRecapImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImpRecapImmoRowChangingEvent) Is Nothing) Then
                RaiseEvent ImpRecapImmoRowChanging(Me, New ImpRecapImmoRowChangeEvent(CType(e.Row,ImpRecapImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImpRecapImmoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImpRecapImmoRowDeleted(Me, New ImpRecapImmoRowChangeEvent(CType(e.Row,ImpRecapImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImpRecapImmoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImpRecapImmoRowDeleting(Me, New ImpRecapImmoRowChangeEvent(CType(e.Row,ImpRecapImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImpRecapImmoRow(ByVal row As ImpRecapImmoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImprImmoDataSet = New ImprImmoDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImpRecapImmoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImpTabCessImmoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIDossier As Global.System.Data.DataColumn
        
        Private columnICpt As Global.System.Data.DataColumn
        
        Private columnIActi As Global.System.Data.DataColumn
        
        Private columnIOrdre As Global.System.Data.DataColumn
        
        Private columnILib As Global.System.Data.DataColumn
        
        Private columnITypAmt As Global.System.Data.DataColumn
        
        Private columnIValAcquis As Global.System.Data.DataColumn
        
        Private columnIDtAcquis As Global.System.Data.DataColumn
        
        Private columnIDuree As Global.System.Data.DataColumn
        
        Private columnIValResid As Global.System.Data.DataColumn
        
        Private columnIPlusValLg As Global.System.Data.DataColumn
        
        Private columnIPlusValCt As Global.System.Data.DataColumn
        
        Private columnIDtCess As Global.System.Data.DataColumn
        
        Private columnICoeff As Global.System.Data.DataColumn
        
        Private columnIValVenale As Global.System.Data.DataColumn
        
        Private columnIValLeasing As Global.System.Data.DataColumn
        
        Private columnIDtCession As Global.System.Data.DataColumn
        
        Private columnIValCession As Global.System.Data.DataColumn
        
        Private columnIDureeResid As Global.System.Data.DataColumn
        
        Private columnClib As Global.System.Data.DataColumn
        
        Private columnIDtForf As Global.System.Data.DataColumn
        
        Private columnIValForf As Global.System.Data.DataColumn
        
        Private columnIAmtCumTot As Global.System.Data.DataColumn
        
        Private columnIAmtExTot As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImpTabCessImmo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITypAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITypAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDuree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPlusValLgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPlusValLg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPlusValCtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPlusValCt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtCessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtCess
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICoeffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICoeff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValVenaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValVenale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValLeasingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValLeasing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtCessionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtCession
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValCessionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValCession
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDureeResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtCumTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtCumTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImpTabCessImmoRow
            Get
                Return CType(Me.Rows(index),ImpTabCessImmoRow)
            End Get
        End Property
        
        Public Event ImpTabCessImmoRowChanging As ImpTabCessImmoRowChangeEventHandler
        
        Public Event ImpTabCessImmoRowChanged As ImpTabCessImmoRowChangeEventHandler
        
        Public Event ImpTabCessImmoRowDeleting As ImpTabCessImmoRowChangeEventHandler
        
        Public Event ImpTabCessImmoRowDeleted As ImpTabCessImmoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImpTabCessImmoRow(ByVal row As ImpTabCessImmoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImpTabCessImmoRow( _
                    ByVal IDossier As String,  _
                    ByVal ICpt As String,  _
                    ByVal IActi As String,  _
                    ByVal IOrdre As String,  _
                    ByVal ILib As String,  _
                    ByVal ITypAmt As String,  _
                    ByVal IValAcquis As Decimal,  _
                    ByVal IDtAcquis As Date,  _
                    ByVal IDuree As Long,  _
                    ByVal IValResid As Decimal,  _
                    ByVal IPlusValLg As Decimal,  _
                    ByVal IPlusValCt As Decimal,  _
                    ByVal IDtCess As Date,  _
                    ByVal ICoeff As Decimal,  _
                    ByVal IValVenale As Decimal,  _
                    ByVal IValLeasing As Decimal,  _
                    ByVal IDtCession As Date,  _
                    ByVal IValCession As Decimal,  _
                    ByVal IDureeResid As Long,  _
                    ByVal Clib As String,  _
                    ByVal IDtForf As Date,  _
                    ByVal IValForf As Decimal,  _
                    ByVal IAmtCumTot As Decimal,  _
                    ByVal IAmtExTot As Decimal) As ImpTabCessImmoRow
            Dim rowImpTabCessImmoRow As ImpTabCessImmoRow = CType(Me.NewRow,ImpTabCessImmoRow)
            Dim columnValuesArray() As Object = New Object() {IDossier, ICpt, IActi, IOrdre, ILib, ITypAmt, IValAcquis, IDtAcquis, IDuree, IValResid, IPlusValLg, IPlusValCt, IDtCess, ICoeff, IValVenale, IValLeasing, IDtCession, IValCession, IDureeResid, Clib, IDtForf, IValForf, IAmtCumTot, IAmtExTot}
            rowImpTabCessImmoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImpTabCessImmoRow)
            Return rowImpTabCessImmoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImpTabCessImmoDataTable = CType(MyBase.Clone,ImpTabCessImmoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImpTabCessImmoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDossier = MyBase.Columns("IDossier")
            Me.columnICpt = MyBase.Columns("ICpt")
            Me.columnIActi = MyBase.Columns("IActi")
            Me.columnIOrdre = MyBase.Columns("IOrdre")
            Me.columnILib = MyBase.Columns("ILib")
            Me.columnITypAmt = MyBase.Columns("ITypAmt")
            Me.columnIValAcquis = MyBase.Columns("IValAcquis")
            Me.columnIDtAcquis = MyBase.Columns("IDtAcquis")
            Me.columnIDuree = MyBase.Columns("IDuree")
            Me.columnIValResid = MyBase.Columns("IValResid")
            Me.columnIPlusValLg = MyBase.Columns("IPlusValLg")
            Me.columnIPlusValCt = MyBase.Columns("IPlusValCt")
            Me.columnIDtCess = MyBase.Columns("IDtCess")
            Me.columnICoeff = MyBase.Columns("ICoeff")
            Me.columnIValVenale = MyBase.Columns("IValVenale")
            Me.columnIValLeasing = MyBase.Columns("IValLeasing")
            Me.columnIDtCession = MyBase.Columns("IDtCession")
            Me.columnIValCession = MyBase.Columns("IValCession")
            Me.columnIDureeResid = MyBase.Columns("IDureeResid")
            Me.columnClib = MyBase.Columns("Clib")
            Me.columnIDtForf = MyBase.Columns("IDtForf")
            Me.columnIValForf = MyBase.Columns("IValForf")
            Me.columnIAmtCumTot = MyBase.Columns("IAmtCumTot")
            Me.columnIAmtExTot = MyBase.Columns("IAmtExTot")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDossier = New Global.System.Data.DataColumn("IDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDossier)
            Me.columnICpt = New Global.System.Data.DataColumn("ICpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICpt)
            Me.columnIActi = New Global.System.Data.DataColumn("IActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIActi)
            Me.columnIOrdre = New Global.System.Data.DataColumn("IOrdre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOrdre)
            Me.columnILib = New Global.System.Data.DataColumn("ILib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib)
            Me.columnITypAmt = New Global.System.Data.DataColumn("ITypAmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITypAmt)
            Me.columnIValAcquis = New Global.System.Data.DataColumn("IValAcquis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValAcquis)
            Me.columnIDtAcquis = New Global.System.Data.DataColumn("IDtAcquis", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtAcquis)
            Me.columnIDuree = New Global.System.Data.DataColumn("IDuree", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDuree)
            Me.columnIValResid = New Global.System.Data.DataColumn("IValResid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValResid)
            Me.columnIPlusValLg = New Global.System.Data.DataColumn("IPlusValLg", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPlusValLg)
            Me.columnIPlusValCt = New Global.System.Data.DataColumn("IPlusValCt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPlusValCt)
            Me.columnIDtCess = New Global.System.Data.DataColumn("IDtCess", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtCess)
            Me.columnICoeff = New Global.System.Data.DataColumn("ICoeff", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICoeff)
            Me.columnIValVenale = New Global.System.Data.DataColumn("IValVenale", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValVenale)
            Me.columnIValLeasing = New Global.System.Data.DataColumn("IValLeasing", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValLeasing)
            Me.columnIDtCession = New Global.System.Data.DataColumn("IDtCession", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtCession)
            Me.columnIValCession = New Global.System.Data.DataColumn("IValCession", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValCession)
            Me.columnIDureeResid = New Global.System.Data.DataColumn("IDureeResid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDureeResid)
            Me.columnClib = New Global.System.Data.DataColumn("Clib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClib)
            Me.columnIDtForf = New Global.System.Data.DataColumn("IDtForf", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtForf)
            Me.columnIValForf = New Global.System.Data.DataColumn("IValForf", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValForf)
            Me.columnIAmtCumTot = New Global.System.Data.DataColumn("IAmtCumTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtCumTot)
            Me.columnIAmtExTot = New Global.System.Data.DataColumn("IAmtExTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExTot)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImpTabCessImmoRow() As ImpTabCessImmoRow
            Return CType(Me.NewRow,ImpTabCessImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImpTabCessImmoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImpTabCessImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImpTabCessImmoRowChangedEvent) Is Nothing) Then
                RaiseEvent ImpTabCessImmoRowChanged(Me, New ImpTabCessImmoRowChangeEvent(CType(e.Row,ImpTabCessImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImpTabCessImmoRowChangingEvent) Is Nothing) Then
                RaiseEvent ImpTabCessImmoRowChanging(Me, New ImpTabCessImmoRowChangeEvent(CType(e.Row,ImpTabCessImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImpTabCessImmoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImpTabCessImmoRowDeleted(Me, New ImpTabCessImmoRowChangeEvent(CType(e.Row,ImpTabCessImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImpTabCessImmoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImpTabCessImmoRowDeleting(Me, New ImpTabCessImmoRowChangeEvent(CType(e.Row,ImpTabCessImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImpTabCessImmoRow(ByVal row As ImpTabCessImmoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImprImmoDataSet = New ImprImmoDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImpTabCessImmoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImpAmortDerDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIDossier As Global.System.Data.DataColumn
        
        Private columnICpt As Global.System.Data.DataColumn
        
        Private columnIActi As Global.System.Data.DataColumn
        
        Private columnIOrdre As Global.System.Data.DataColumn
        
        Private columnILib As Global.System.Data.DataColumn
        
        Private columnITypAmt As Global.System.Data.DataColumn
        
        Private columnIValAcquis As Global.System.Data.DataColumn
        
        Private columnIDtAcquis As Global.System.Data.DataColumn
        
        Private columnIDuree As Global.System.Data.DataColumn
        
        Private columnIAmtExMax As Global.System.Data.DataColumn
        
        Private columnIAmtExTot As Global.System.Data.DataColumn
        
        Private columnIAmtCumTot As Global.System.Data.DataColumn
        
        Private columnIValResid As Global.System.Data.DataColumn
        
        Private columnIDureeResid As Global.System.Data.DataColumn
        
        Private columnCLib As Global.System.Data.DataColumn
        
        Private columnICoeff As Global.System.Data.DataColumn
        
        Private columnIAmtExLin As Global.System.Data.DataColumn
        
        Private columnIAmtCumLin As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImpAmortDer"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITypAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITypAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDuree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtCumTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtCumTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDureeResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICoeffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICoeff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExLinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExLin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtCumLinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtCumLin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImpAmortDerRow
            Get
                Return CType(Me.Rows(index),ImpAmortDerRow)
            End Get
        End Property
        
        Public Event ImpAmortDerRowChanging As ImpAmortDerRowChangeEventHandler
        
        Public Event ImpAmortDerRowChanged As ImpAmortDerRowChangeEventHandler
        
        Public Event ImpAmortDerRowDeleting As ImpAmortDerRowChangeEventHandler
        
        Public Event ImpAmortDerRowDeleted As ImpAmortDerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImpAmortDerRow(ByVal row As ImpAmortDerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImpAmortDerRow( _
                    ByVal IDossier As String,  _
                    ByVal ICpt As String,  _
                    ByVal IActi As String,  _
                    ByVal IOrdre As String,  _
                    ByVal ILib As String,  _
                    ByVal ITypAmt As String,  _
                    ByVal IValAcquis As Decimal,  _
                    ByVal IDtAcquis As Date,  _
                    ByVal IDuree As Long,  _
                    ByVal IAmtExMax As Decimal,  _
                    ByVal IAmtExTot As Decimal,  _
                    ByVal IAmtCumTot As Decimal,  _
                    ByVal IValResid As Decimal,  _
                    ByVal IDureeResid As Long,  _
                    ByVal CLib As String,  _
                    ByVal ICoeff As Decimal,  _
                    ByVal IAmtExLin As Decimal,  _
                    ByVal IAmtCumLin As Decimal) As ImpAmortDerRow
            Dim rowImpAmortDerRow As ImpAmortDerRow = CType(Me.NewRow,ImpAmortDerRow)
            Dim columnValuesArray() As Object = New Object() {IDossier, ICpt, IActi, IOrdre, ILib, ITypAmt, IValAcquis, IDtAcquis, IDuree, IAmtExMax, IAmtExTot, IAmtCumTot, IValResid, IDureeResid, CLib, ICoeff, IAmtExLin, IAmtCumLin}
            rowImpAmortDerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImpAmortDerRow)
            Return rowImpAmortDerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImpAmortDerDataTable = CType(MyBase.Clone,ImpAmortDerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImpAmortDerDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDossier = MyBase.Columns("IDossier")
            Me.columnICpt = MyBase.Columns("ICpt")
            Me.columnIActi = MyBase.Columns("IActi")
            Me.columnIOrdre = MyBase.Columns("IOrdre")
            Me.columnILib = MyBase.Columns("ILib")
            Me.columnITypAmt = MyBase.Columns("ITypAmt")
            Me.columnIValAcquis = MyBase.Columns("IValAcquis")
            Me.columnIDtAcquis = MyBase.Columns("IDtAcquis")
            Me.columnIDuree = MyBase.Columns("IDuree")
            Me.columnIAmtExMax = MyBase.Columns("IAmtExMax")
            Me.columnIAmtExTot = MyBase.Columns("IAmtExTot")
            Me.columnIAmtCumTot = MyBase.Columns("IAmtCumTot")
            Me.columnIValResid = MyBase.Columns("IValResid")
            Me.columnIDureeResid = MyBase.Columns("IDureeResid")
            Me.columnCLib = MyBase.Columns("CLib")
            Me.columnICoeff = MyBase.Columns("ICoeff")
            Me.columnIAmtExLin = MyBase.Columns("IAmtExLin")
            Me.columnIAmtCumLin = MyBase.Columns("IAmtCumLin")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDossier = New Global.System.Data.DataColumn("IDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDossier)
            Me.columnICpt = New Global.System.Data.DataColumn("ICpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICpt)
            Me.columnIActi = New Global.System.Data.DataColumn("IActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIActi)
            Me.columnIOrdre = New Global.System.Data.DataColumn("IOrdre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOrdre)
            Me.columnILib = New Global.System.Data.DataColumn("ILib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib)
            Me.columnITypAmt = New Global.System.Data.DataColumn("ITypAmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITypAmt)
            Me.columnIValAcquis = New Global.System.Data.DataColumn("IValAcquis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValAcquis)
            Me.columnIDtAcquis = New Global.System.Data.DataColumn("IDtAcquis", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtAcquis)
            Me.columnIDuree = New Global.System.Data.DataColumn("IDuree", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDuree)
            Me.columnIAmtExMax = New Global.System.Data.DataColumn("IAmtExMax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExMax)
            Me.columnIAmtExTot = New Global.System.Data.DataColumn("IAmtExTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExTot)
            Me.columnIAmtCumTot = New Global.System.Data.DataColumn("IAmtCumTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtCumTot)
            Me.columnIValResid = New Global.System.Data.DataColumn("IValResid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValResid)
            Me.columnIDureeResid = New Global.System.Data.DataColumn("IDureeResid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDureeResid)
            Me.columnCLib = New Global.System.Data.DataColumn("CLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLib)
            Me.columnICoeff = New Global.System.Data.DataColumn("ICoeff", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICoeff)
            Me.columnIAmtExLin = New Global.System.Data.DataColumn("IAmtExLin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExLin)
            Me.columnIAmtCumLin = New Global.System.Data.DataColumn("IAmtCumLin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtCumLin)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImpAmortDerRow() As ImpAmortDerRow
            Return CType(Me.NewRow,ImpAmortDerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImpAmortDerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImpAmortDerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImpAmortDerRowChangedEvent) Is Nothing) Then
                RaiseEvent ImpAmortDerRowChanged(Me, New ImpAmortDerRowChangeEvent(CType(e.Row,ImpAmortDerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImpAmortDerRowChangingEvent) Is Nothing) Then
                RaiseEvent ImpAmortDerRowChanging(Me, New ImpAmortDerRowChangeEvent(CType(e.Row,ImpAmortDerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImpAmortDerRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImpAmortDerRowDeleted(Me, New ImpAmortDerRowChangeEvent(CType(e.Row,ImpAmortDerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImpAmortDerRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImpAmortDerRowDeleting(Me, New ImpAmortDerRowChangeEvent(CType(e.Row,ImpAmortDerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImpAmortDerRow(ByVal row As ImpAmortDerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImprImmoDataSet = New ImprImmoDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImpAmortDerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImpPassReelImmoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIDossier As Global.System.Data.DataColumn
        
        Private columnICpt As Global.System.Data.DataColumn
        
        Private columnIActi As Global.System.Data.DataColumn
        
        Private columnIOrdre As Global.System.Data.DataColumn
        
        Private columnILib As Global.System.Data.DataColumn
        
        Private columnITypAmt As Global.System.Data.DataColumn
        
        Private columnIValAcquis As Global.System.Data.DataColumn
        
        Private columnIDtForf As Global.System.Data.DataColumn
        
        Private columnIDureeResid As Global.System.Data.DataColumn
        
        Private columnCLib As Global.System.Data.DataColumn
        
        Private columnICoeff As Global.System.Data.DataColumn
        
        Private columnIValForf As Global.System.Data.DataColumn
        
        Private columnIValVenale As Global.System.Data.DataColumn
        
        Private columnIDuree As Global.System.Data.DataColumn
        
        Private columnIAmtExTot As Global.System.Data.DataColumn
        
        Private columnIValResid As Global.System.Data.DataColumn
        
        Private columnIValLeasing As Global.System.Data.DataColumn
        
        Private columnIValNetFisc As Global.System.Data.DataColumn
        
        Private columnIDtAcquis As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImpPassReelImmo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITypAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITypAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDureeResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICoeffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICoeff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValForfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValForf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValVenaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValVenale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDuree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValLeasingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValLeasing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValNetFiscColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValNetFisc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImpPassReelImmoRow
            Get
                Return CType(Me.Rows(index),ImpPassReelImmoRow)
            End Get
        End Property
        
        Public Event ImpPassReelImmoRowChanging As ImpPassReelImmoRowChangeEventHandler
        
        Public Event ImpPassReelImmoRowChanged As ImpPassReelImmoRowChangeEventHandler
        
        Public Event ImpPassReelImmoRowDeleting As ImpPassReelImmoRowChangeEventHandler
        
        Public Event ImpPassReelImmoRowDeleted As ImpPassReelImmoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImpPassReelImmoRow(ByVal row As ImpPassReelImmoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImpPassReelImmoRow( _
                    ByVal IDossier As String,  _
                    ByVal ICpt As String,  _
                    ByVal IActi As String,  _
                    ByVal IOrdre As String,  _
                    ByVal ILib As String,  _
                    ByVal ITypAmt As String,  _
                    ByVal IValAcquis As Decimal,  _
                    ByVal IDtForf As Date,  _
                    ByVal IDureeResid As Long,  _
                    ByVal CLib As String,  _
                    ByVal ICoeff As Decimal,  _
                    ByVal IValForf As Decimal,  _
                    ByVal IValVenale As Decimal,  _
                    ByVal IDuree As Long,  _
                    ByVal IAmtExTot As Decimal,  _
                    ByVal IValResid As Decimal,  _
                    ByVal IValLeasing As Decimal,  _
                    ByVal IValNetFisc As Decimal,  _
                    ByVal IDtAcquis As Date) As ImpPassReelImmoRow
            Dim rowImpPassReelImmoRow As ImpPassReelImmoRow = CType(Me.NewRow,ImpPassReelImmoRow)
            Dim columnValuesArray() As Object = New Object() {IDossier, ICpt, IActi, IOrdre, ILib, ITypAmt, IValAcquis, IDtForf, IDureeResid, CLib, ICoeff, IValForf, IValVenale, IDuree, IAmtExTot, IValResid, IValLeasing, IValNetFisc, IDtAcquis}
            rowImpPassReelImmoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImpPassReelImmoRow)
            Return rowImpPassReelImmoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImpPassReelImmoDataTable = CType(MyBase.Clone,ImpPassReelImmoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImpPassReelImmoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDossier = MyBase.Columns("IDossier")
            Me.columnICpt = MyBase.Columns("ICpt")
            Me.columnIActi = MyBase.Columns("IActi")
            Me.columnIOrdre = MyBase.Columns("IOrdre")
            Me.columnILib = MyBase.Columns("ILib")
            Me.columnITypAmt = MyBase.Columns("ITypAmt")
            Me.columnIValAcquis = MyBase.Columns("IValAcquis")
            Me.columnIDtForf = MyBase.Columns("IDtForf")
            Me.columnIDureeResid = MyBase.Columns("IDureeResid")
            Me.columnCLib = MyBase.Columns("CLib")
            Me.columnICoeff = MyBase.Columns("ICoeff")
            Me.columnIValForf = MyBase.Columns("IValForf")
            Me.columnIValVenale = MyBase.Columns("IValVenale")
            Me.columnIDuree = MyBase.Columns("IDuree")
            Me.columnIAmtExTot = MyBase.Columns("IAmtExTot")
            Me.columnIValResid = MyBase.Columns("IValResid")
            Me.columnIValLeasing = MyBase.Columns("IValLeasing")
            Me.columnIValNetFisc = MyBase.Columns("IValNetFisc")
            Me.columnIDtAcquis = MyBase.Columns("IDtAcquis")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDossier = New Global.System.Data.DataColumn("IDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDossier)
            Me.columnICpt = New Global.System.Data.DataColumn("ICpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICpt)
            Me.columnIActi = New Global.System.Data.DataColumn("IActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIActi)
            Me.columnIOrdre = New Global.System.Data.DataColumn("IOrdre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOrdre)
            Me.columnILib = New Global.System.Data.DataColumn("ILib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib)
            Me.columnITypAmt = New Global.System.Data.DataColumn("ITypAmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITypAmt)
            Me.columnIValAcquis = New Global.System.Data.DataColumn("IValAcquis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValAcquis)
            Me.columnIDtForf = New Global.System.Data.DataColumn("IDtForf", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtForf)
            Me.columnIDureeResid = New Global.System.Data.DataColumn("IDureeResid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDureeResid)
            Me.columnCLib = New Global.System.Data.DataColumn("CLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLib)
            Me.columnICoeff = New Global.System.Data.DataColumn("ICoeff", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICoeff)
            Me.columnIValForf = New Global.System.Data.DataColumn("IValForf", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValForf)
            Me.columnIValVenale = New Global.System.Data.DataColumn("IValVenale", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValVenale)
            Me.columnIDuree = New Global.System.Data.DataColumn("IDuree", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDuree)
            Me.columnIAmtExTot = New Global.System.Data.DataColumn("IAmtExTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExTot)
            Me.columnIValResid = New Global.System.Data.DataColumn("IValResid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValResid)
            Me.columnIValLeasing = New Global.System.Data.DataColumn("IValLeasing", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValLeasing)
            Me.columnIValNetFisc = New Global.System.Data.DataColumn("IValNetFisc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValNetFisc)
            Me.columnIDtAcquis = New Global.System.Data.DataColumn("IDtAcquis", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtAcquis)
            Me.columnIDuree.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImpPassReelImmoRow() As ImpPassReelImmoRow
            Return CType(Me.NewRow,ImpPassReelImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImpPassReelImmoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImpPassReelImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImpPassReelImmoRowChangedEvent) Is Nothing) Then
                RaiseEvent ImpPassReelImmoRowChanged(Me, New ImpPassReelImmoRowChangeEvent(CType(e.Row,ImpPassReelImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImpPassReelImmoRowChangingEvent) Is Nothing) Then
                RaiseEvent ImpPassReelImmoRowChanging(Me, New ImpPassReelImmoRowChangeEvent(CType(e.Row,ImpPassReelImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImpPassReelImmoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImpPassReelImmoRowDeleted(Me, New ImpPassReelImmoRowChangeEvent(CType(e.Row,ImpPassReelImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImpPassReelImmoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImpPassReelImmoRowDeleting(Me, New ImpPassReelImmoRowChangeEvent(CType(e.Row,ImpPassReelImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImpPassReelImmoRow(ByVal row As ImpPassReelImmoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImprImmoDataSet = New ImprImmoDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImpPassReelImmoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImpTabClaImmoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIDossier As Global.System.Data.DataColumn
        
        Private columnICpt As Global.System.Data.DataColumn
        
        Private columnIValDebEx As Global.System.Data.DataColumn
        
        Private columnIValAugEx As Global.System.Data.DataColumn
        
        Private columnIValAugAmtEx As Global.System.Data.DataColumn
        
        Private columnIValDimEx As Global.System.Data.DataColumn
        
        Private columnIValDimAmtEx As Global.System.Data.DataColumn
        
        Private columnIAmtExMax As Global.System.Data.DataColumn
        
        Private columnIAmtExTot As Global.System.Data.DataColumn
        
        Private columnIAmtCumTot As Global.System.Data.DataColumn
        
        Private columnIValResid As Global.System.Data.DataColumn
        
        Private columnCLib As Global.System.Data.DataColumn
        
        Private columnIAmtExLin As Global.System.Data.DataColumn
        
        Private columnICatImmo As Global.System.Data.DataColumn
        
        Private columnITypAmt As Global.System.Data.DataColumn
        
        Private columnIDerogatoire As Global.System.Data.DataColumn
        
        Private columnIAmtCumLin As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImpTabClaImmo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValDebExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValDebEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValAugExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValAugEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValAugAmtExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValAugAmtEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValDimExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValDimEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValDimAmtExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValDimAmtEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtCumTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtCumTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValResidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValResid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExLinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExLin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICatImmoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICatImmo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITypAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITypAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDerogatoireColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDerogatoire
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtCumLinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtCumLin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImpTabClaImmoRow
            Get
                Return CType(Me.Rows(index),ImpTabClaImmoRow)
            End Get
        End Property
        
        Public Event ImpTabClaImmoRowChanging As ImpTabClaImmoRowChangeEventHandler
        
        Public Event ImpTabClaImmoRowChanged As ImpTabClaImmoRowChangeEventHandler
        
        Public Event ImpTabClaImmoRowDeleting As ImpTabClaImmoRowChangeEventHandler
        
        Public Event ImpTabClaImmoRowDeleted As ImpTabClaImmoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImpTabClaImmoRow(ByVal row As ImpTabClaImmoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImpTabClaImmoRow( _
                    ByVal IDossier As String,  _
                    ByVal ICpt As String,  _
                    ByVal IValDebEx As Decimal,  _
                    ByVal IValAugEx As Decimal,  _
                    ByVal IValAugAmtEx As Decimal,  _
                    ByVal IValDimEx As Decimal,  _
                    ByVal IValDimAmtEx As Decimal,  _
                    ByVal IAmtExMax As Decimal,  _
                    ByVal IAmtExTot As Decimal,  _
                    ByVal IAmtCumTot As Decimal,  _
                    ByVal IValResid As Decimal,  _
                    ByVal CLib As String,  _
                    ByVal IAmtExLin As Decimal,  _
                    ByVal ICatImmo As String,  _
                    ByVal ITypAmt As String,  _
                    ByVal IDerogatoire As String,  _
                    ByVal IAmtCumLin As Decimal) As ImpTabClaImmoRow
            Dim rowImpTabClaImmoRow As ImpTabClaImmoRow = CType(Me.NewRow,ImpTabClaImmoRow)
            Dim columnValuesArray() As Object = New Object() {IDossier, ICpt, IValDebEx, IValAugEx, IValAugAmtEx, IValDimEx, IValDimAmtEx, IAmtExMax, IAmtExTot, IAmtCumTot, IValResid, CLib, IAmtExLin, ICatImmo, ITypAmt, IDerogatoire, IAmtCumLin}
            rowImpTabClaImmoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImpTabClaImmoRow)
            Return rowImpTabClaImmoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImpTabClaImmoDataTable = CType(MyBase.Clone,ImpTabClaImmoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImpTabClaImmoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDossier = MyBase.Columns("IDossier")
            Me.columnICpt = MyBase.Columns("ICpt")
            Me.columnIValDebEx = MyBase.Columns("IValDebEx")
            Me.columnIValAugEx = MyBase.Columns("IValAugEx")
            Me.columnIValAugAmtEx = MyBase.Columns("IValAugAmtEx")
            Me.columnIValDimEx = MyBase.Columns("IValDimEx")
            Me.columnIValDimAmtEx = MyBase.Columns("IValDimAmtEx")
            Me.columnIAmtExMax = MyBase.Columns("IAmtExMax")
            Me.columnIAmtExTot = MyBase.Columns("IAmtExTot")
            Me.columnIAmtCumTot = MyBase.Columns("IAmtCumTot")
            Me.columnIValResid = MyBase.Columns("IValResid")
            Me.columnCLib = MyBase.Columns("CLib")
            Me.columnIAmtExLin = MyBase.Columns("IAmtExLin")
            Me.columnICatImmo = MyBase.Columns("ICatImmo")
            Me.columnITypAmt = MyBase.Columns("ITypAmt")
            Me.columnIDerogatoire = MyBase.Columns("IDerogatoire")
            Me.columnIAmtCumLin = MyBase.Columns("IAmtCumLin")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDossier = New Global.System.Data.DataColumn("IDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDossier)
            Me.columnICpt = New Global.System.Data.DataColumn("ICpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICpt)
            Me.columnIValDebEx = New Global.System.Data.DataColumn("IValDebEx", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValDebEx)
            Me.columnIValAugEx = New Global.System.Data.DataColumn("IValAugEx", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValAugEx)
            Me.columnIValAugAmtEx = New Global.System.Data.DataColumn("IValAugAmtEx", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValAugAmtEx)
            Me.columnIValDimEx = New Global.System.Data.DataColumn("IValDimEx", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValDimEx)
            Me.columnIValDimAmtEx = New Global.System.Data.DataColumn("IValDimAmtEx", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValDimAmtEx)
            Me.columnIAmtExMax = New Global.System.Data.DataColumn("IAmtExMax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExMax)
            Me.columnIAmtExTot = New Global.System.Data.DataColumn("IAmtExTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExTot)
            Me.columnIAmtCumTot = New Global.System.Data.DataColumn("IAmtCumTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtCumTot)
            Me.columnIValResid = New Global.System.Data.DataColumn("IValResid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValResid)
            Me.columnCLib = New Global.System.Data.DataColumn("CLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLib)
            Me.columnIAmtExLin = New Global.System.Data.DataColumn("IAmtExLin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExLin)
            Me.columnICatImmo = New Global.System.Data.DataColumn("ICatImmo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICatImmo)
            Me.columnITypAmt = New Global.System.Data.DataColumn("ITypAmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITypAmt)
            Me.columnIDerogatoire = New Global.System.Data.DataColumn("IDerogatoire", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDerogatoire)
            Me.columnIAmtCumLin = New Global.System.Data.DataColumn("IAmtCumLin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtCumLin)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImpTabClaImmoRow() As ImpTabClaImmoRow
            Return CType(Me.NewRow,ImpTabClaImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImpTabClaImmoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImpTabClaImmoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImpTabClaImmoRowChangedEvent) Is Nothing) Then
                RaiseEvent ImpTabClaImmoRowChanged(Me, New ImpTabClaImmoRowChangeEvent(CType(e.Row,ImpTabClaImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImpTabClaImmoRowChangingEvent) Is Nothing) Then
                RaiseEvent ImpTabClaImmoRowChanging(Me, New ImpTabClaImmoRowChangeEvent(CType(e.Row,ImpTabClaImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImpTabClaImmoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImpTabClaImmoRowDeleted(Me, New ImpTabClaImmoRowChangeEvent(CType(e.Row,ImpTabClaImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImpTabClaImmoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImpTabClaImmoRowDeleting(Me, New ImpTabClaImmoRowChangeEvent(CType(e.Row,ImpTabClaImmoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImpTabClaImmoRow(ByVal row As ImpTabClaImmoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImprImmoDataSet = New ImprImmoDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImpTabClaImmoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImpCalProvDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIDossier As Global.System.Data.DataColumn
        
        Private columnICpt As Global.System.Data.DataColumn
        
        Private columnIActi As Global.System.Data.DataColumn
        
        Private columnIOrdre As Global.System.Data.DataColumn
        
        Private columnILib As Global.System.Data.DataColumn
        
        Private columnITypAmt As Global.System.Data.DataColumn
        
        Private columnIValAcquis As Global.System.Data.DataColumn
        
        Private columnIDtAcquis As Global.System.Data.DataColumn
        
        Private columnIDuree As Global.System.Data.DataColumn
        
        Private columnIAmtExMax As Global.System.Data.DataColumn
        
        Private columnIAmtExTot As Global.System.Data.DataColumn
        
        Private columnIAmtExMin As Global.System.Data.DataColumn
        
        Private columnCLib As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImpCalProv"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDossierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDossier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IActiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIActi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOrdreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOrdre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITypAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITypAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IValAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIValAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDtAcquisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDtAcquis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDureeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDuree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAmtExMinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAmtExMin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImpCalProvRow
            Get
                Return CType(Me.Rows(index),ImpCalProvRow)
            End Get
        End Property
        
        Public Event ImpCalProvRowChanging As ImpCalProvRowChangeEventHandler
        
        Public Event ImpCalProvRowChanged As ImpCalProvRowChangeEventHandler
        
        Public Event ImpCalProvRowDeleting As ImpCalProvRowChangeEventHandler
        
        Public Event ImpCalProvRowDeleted As ImpCalProvRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImpCalProvRow(ByVal row As ImpCalProvRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImpCalProvRow(ByVal IDossier As String, ByVal ICpt As String, ByVal IActi As String, ByVal IOrdre As String, ByVal ILib As String, ByVal ITypAmt As String, ByVal IValAcquis As Decimal, ByVal IDtAcquis As Date, ByVal IDuree As Long, ByVal IAmtExMax As Decimal, ByVal IAmtExTot As Decimal, ByVal IAmtExMin As Decimal, ByVal CLib As String) As ImpCalProvRow
            Dim rowImpCalProvRow As ImpCalProvRow = CType(Me.NewRow,ImpCalProvRow)
            Dim columnValuesArray() As Object = New Object() {IDossier, ICpt, IActi, IOrdre, ILib, ITypAmt, IValAcquis, IDtAcquis, IDuree, IAmtExMax, IAmtExTot, IAmtExMin, CLib}
            rowImpCalProvRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImpCalProvRow)
            Return rowImpCalProvRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImpCalProvDataTable = CType(MyBase.Clone,ImpCalProvDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImpCalProvDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDossier = MyBase.Columns("IDossier")
            Me.columnICpt = MyBase.Columns("ICpt")
            Me.columnIActi = MyBase.Columns("IActi")
            Me.columnIOrdre = MyBase.Columns("IOrdre")
            Me.columnILib = MyBase.Columns("ILib")
            Me.columnITypAmt = MyBase.Columns("ITypAmt")
            Me.columnIValAcquis = MyBase.Columns("IValAcquis")
            Me.columnIDtAcquis = MyBase.Columns("IDtAcquis")
            Me.columnIDuree = MyBase.Columns("IDuree")
            Me.columnIAmtExMax = MyBase.Columns("IAmtExMax")
            Me.columnIAmtExTot = MyBase.Columns("IAmtExTot")
            Me.columnIAmtExMin = MyBase.Columns("IAmtExMin")
            Me.columnCLib = MyBase.Columns("CLib")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDossier = New Global.System.Data.DataColumn("IDossier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDossier)
            Me.columnICpt = New Global.System.Data.DataColumn("ICpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICpt)
            Me.columnIActi = New Global.System.Data.DataColumn("IActi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIActi)
            Me.columnIOrdre = New Global.System.Data.DataColumn("IOrdre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOrdre)
            Me.columnILib = New Global.System.Data.DataColumn("ILib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILib)
            Me.columnITypAmt = New Global.System.Data.DataColumn("ITypAmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITypAmt)
            Me.columnIValAcquis = New Global.System.Data.DataColumn("IValAcquis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIValAcquis)
            Me.columnIDtAcquis = New Global.System.Data.DataColumn("IDtAcquis", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDtAcquis)
            Me.columnIDuree = New Global.System.Data.DataColumn("IDuree", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDuree)
            Me.columnIAmtExMax = New Global.System.Data.DataColumn("IAmtExMax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExMax)
            Me.columnIAmtExTot = New Global.System.Data.DataColumn("IAmtExTot", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExTot)
            Me.columnIAmtExMin = New Global.System.Data.DataColumn("IAmtExMin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAmtExMin)
            Me.columnCLib = New Global.System.Data.DataColumn("CLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLib)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImpCalProvRow() As ImpCalProvRow
            Return CType(Me.NewRow,ImpCalProvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImpCalProvRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImpCalProvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImpCalProvRowChangedEvent) Is Nothing) Then
                RaiseEvent ImpCalProvRowChanged(Me, New ImpCalProvRowChangeEvent(CType(e.Row,ImpCalProvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImpCalProvRowChangingEvent) Is Nothing) Then
                RaiseEvent ImpCalProvRowChanging(Me, New ImpCalProvRowChangeEvent(CType(e.Row,ImpCalProvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImpCalProvRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImpCalProvRowDeleted(Me, New ImpCalProvRowChangeEvent(CType(e.Row,ImpCalProvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImpCalProvRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImpCalProvRowDeleting(Me, New ImpCalProvRowChangeEvent(CType(e.Row,ImpCalProvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImpCalProvRow(ByVal row As ImpCalProvRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ImprImmoDataSet = New ImprImmoDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImpCalProvDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImpTabImmoRow
        Inherits Global.System.Data.DataRow
        
        Private tableImpTabImmo As ImpTabImmoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImpTabImmo = CType(Me.Table,ImpTabImmoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDossier' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.ICptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICpt' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.ICptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IActi' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOrdre() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IOrdreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IOrdre' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.ILibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.ILibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITypAmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.ITypAmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITypAmt' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.ITypAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValAcquis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IValAcquisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValAcquis' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IValAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtAcquis() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IDtAcquisColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtAcquis' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IDtAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtForf() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IDtForfColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtForf' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IDtForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtOrig() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IDtOrigColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtOrig' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IDtOrigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDuree() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IDureeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDuree' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IDureeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExMax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IAmtExMaxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExMax' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IAmtExMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IAmtExTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExTot' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IAmtExTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtCumTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IAmtCumTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtCumTot' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IAmtCumTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValResid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IValResidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValResid' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IValResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDureeResid() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IDureeResidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDureeResid' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IDureeResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.ITVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITVA' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.ITVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.CLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CLib' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.CLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICoeff() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.ICoeffColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICoeff' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.ICoeffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtCess() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IDtCessColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtCess' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IDtCessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDerogatoire() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IDerogatoireColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDerogatoire' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IDerogatoireColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExLin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IAmtExLinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExLin' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IAmtExLinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtDebEx() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IDtDebExColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtDebEx' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IDtDebExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.ALibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ALib' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.ALibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValCess() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabImmo.IValCessColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValCess' dans la table 'ImpTabImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabImmo.IValCessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDossierNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDossierNull()
            Me(Me.tableImpTabImmo.IDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICptNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.ICptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICptNull()
            Me(Me.tableImpTabImmo.ICptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIActiNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIActiNull()
            Me(Me.tableImpTabImmo.IActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOrdreNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IOrdreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOrdreNull()
            Me(Me.tableImpTabImmo.IOrdreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILibNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.ILibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILibNull()
            Me(Me.tableImpTabImmo.ILibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITypAmtNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.ITypAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITypAmtNull()
            Me(Me.tableImpTabImmo.ITypAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IValAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValAcquisNull()
            Me(Me.tableImpTabImmo.IValAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IDtAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtAcquisNull()
            Me(Me.tableImpTabImmo.IDtAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtForfNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IDtForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtForfNull()
            Me(Me.tableImpTabImmo.IDtForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtOrigNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IDtOrigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtOrigNull()
            Me(Me.tableImpTabImmo.IDtOrigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IDureeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeNull()
            Me(Me.tableImpTabImmo.IDureeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExMaxNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IAmtExMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExMaxNull()
            Me(Me.tableImpTabImmo.IAmtExMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExTotNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IAmtExTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExTotNull()
            Me(Me.tableImpTabImmo.IAmtExTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtCumTotNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IAmtCumTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtCumTotNull()
            Me(Me.tableImpTabImmo.IAmtCumTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValResidNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IValResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValResidNull()
            Me(Me.tableImpTabImmo.IValResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeResidNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IDureeResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeResidNull()
            Me(Me.tableImpTabImmo.IDureeResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITVANull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.ITVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITVANull()
            Me(Me.tableImpTabImmo.ITVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLibNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.CLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLibNull()
            Me(Me.tableImpTabImmo.CLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICoeffNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.ICoeffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICoeffNull()
            Me(Me.tableImpTabImmo.ICoeffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtCessNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IDtCessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtCessNull()
            Me(Me.tableImpTabImmo.IDtCessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDerogatoireNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IDerogatoireColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDerogatoireNull()
            Me(Me.tableImpTabImmo.IDerogatoireColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExLinNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IAmtExLinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExLinNull()
            Me(Me.tableImpTabImmo.IAmtExLinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtDebExNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IDtDebExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtDebExNull()
            Me(Me.tableImpTabImmo.IDtDebExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALibNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.ALibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALibNull()
            Me(Me.tableImpTabImmo.ALibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValCessNull() As Boolean
            Return Me.IsNull(Me.tableImpTabImmo.IValCessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValCessNull()
            Me(Me.tableImpTabImmo.IValCessColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImpTabDepImmoRow
        Inherits Global.System.Data.DataRow
        
        Private tableImpTabDepImmo As ImpTabDepImmoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImpTabDepImmo = CType(Me.Table,ImpTabDepImmoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDossier' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.ICptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICpt' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.ICptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IActi' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOrdre() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IOrdreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IOrdre' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.ILibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.ILibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITypAmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.ITypAmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITypAmt' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.ITypAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValAcquis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IValAcquisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValAcquis' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IValAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtAcquis() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IDtAcquisColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtAcquis' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IDtAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtForf() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IDtForfColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtForf' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IDtForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtOrig() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IDtOrigColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtOrig' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IDtOrigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDuree() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IDureeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDuree' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IDureeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExMax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IAmtExMaxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExMax' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IAmtExMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IAmtExTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExTot' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IAmtExTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtCumTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IAmtCumTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtCumTot' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IAmtCumTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValResid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IValResidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValResid' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IValResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDureeResid() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IDureeResidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDureeResid' dans la table 'ImpTabDepImmo' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IDureeResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.ITVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITVA' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.ITVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.CLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CLib' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.CLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICoeff() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.ICoeffColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICoeff' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.ICoeffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtCess() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IDtCessColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtCess' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IDtCessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDerogatoire() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IDerogatoireColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDerogatoire' dans la table 'ImpTabDepImmo' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IDerogatoireColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExLin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabDepImmo.IAmtExLinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExLin' dans la table 'ImpTabDepImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabDepImmo.IAmtExLinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDossierNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDossierNull()
            Me(Me.tableImpTabDepImmo.IDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICptNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.ICptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICptNull()
            Me(Me.tableImpTabDepImmo.ICptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIActiNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIActiNull()
            Me(Me.tableImpTabDepImmo.IActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOrdreNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IOrdreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOrdreNull()
            Me(Me.tableImpTabDepImmo.IOrdreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILibNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.ILibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILibNull()
            Me(Me.tableImpTabDepImmo.ILibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITypAmtNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.ITypAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITypAmtNull()
            Me(Me.tableImpTabDepImmo.ITypAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IValAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValAcquisNull()
            Me(Me.tableImpTabDepImmo.IValAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IDtAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtAcquisNull()
            Me(Me.tableImpTabDepImmo.IDtAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtForfNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IDtForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtForfNull()
            Me(Me.tableImpTabDepImmo.IDtForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtOrigNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IDtOrigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtOrigNull()
            Me(Me.tableImpTabDepImmo.IDtOrigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IDureeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeNull()
            Me(Me.tableImpTabDepImmo.IDureeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExMaxNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IAmtExMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExMaxNull()
            Me(Me.tableImpTabDepImmo.IAmtExMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExTotNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IAmtExTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExTotNull()
            Me(Me.tableImpTabDepImmo.IAmtExTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtCumTotNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IAmtCumTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtCumTotNull()
            Me(Me.tableImpTabDepImmo.IAmtCumTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValResidNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IValResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValResidNull()
            Me(Me.tableImpTabDepImmo.IValResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeResidNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IDureeResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeResidNull()
            Me(Me.tableImpTabDepImmo.IDureeResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITVANull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.ITVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITVANull()
            Me(Me.tableImpTabDepImmo.ITVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLibNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.CLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLibNull()
            Me(Me.tableImpTabDepImmo.CLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICoeffNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.ICoeffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICoeffNull()
            Me(Me.tableImpTabDepImmo.ICoeffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtCessNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IDtCessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtCessNull()
            Me(Me.tableImpTabDepImmo.IDtCessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDerogatoireNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IDerogatoireColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDerogatoireNull()
            Me(Me.tableImpTabDepImmo.IDerogatoireColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExLinNull() As Boolean
            Return Me.IsNull(Me.tableImpTabDepImmo.IAmtExLinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExLinNull()
            Me(Me.tableImpTabDepImmo.IAmtExLinColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImpRecapImmoRow
        Inherits Global.System.Data.DataRow
        
        Private tableImpRecapImmo As ImpRecapImmoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImpRecapImmo = CType(Me.Table,ImpRecapImmoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDossier' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.ICptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICpt' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.ICptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IActi' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOrdre() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IOrdreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IOrdre' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.ILibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.ILibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITypAmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.ITypAmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITypAmt' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.ITypAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValAcquis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IValAcquisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValAcquis' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IValAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtAcquis() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IDtAcquisColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtAcquis' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IDtAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtForf() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IDtForfColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtForf' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IDtForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtOrig() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IDtOrigColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtOrig' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IDtOrigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDuree() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IDureeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDuree' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IDureeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExLin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IAmtExLinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExLin' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IAmtExLinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IAmtExTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExTot' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IAmtExTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtCumTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IAmtCumTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtCumTot' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IAmtCumTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValResid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IValResidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValResid' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IValResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPlusValLg() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IPlusValLgColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPlusValLg' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IPlusValLgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPlusValCt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IPlusValCtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPlusValCt' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IPlusValCtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtCess() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpRecapImmo.IDtCessColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtCess' dans la table 'ImpRecapImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpRecapImmo.IDtCessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDossierNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDossierNull()
            Me(Me.tableImpRecapImmo.IDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICptNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.ICptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICptNull()
            Me(Me.tableImpRecapImmo.ICptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIActiNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIActiNull()
            Me(Me.tableImpRecapImmo.IActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOrdreNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IOrdreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOrdreNull()
            Me(Me.tableImpRecapImmo.IOrdreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILibNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.ILibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILibNull()
            Me(Me.tableImpRecapImmo.ILibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITypAmtNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.ITypAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITypAmtNull()
            Me(Me.tableImpRecapImmo.ITypAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IValAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValAcquisNull()
            Me(Me.tableImpRecapImmo.IValAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IDtAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtAcquisNull()
            Me(Me.tableImpRecapImmo.IDtAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtForfNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IDtForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtForfNull()
            Me(Me.tableImpRecapImmo.IDtForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtOrigNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IDtOrigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtOrigNull()
            Me(Me.tableImpRecapImmo.IDtOrigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IDureeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeNull()
            Me(Me.tableImpRecapImmo.IDureeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExLinNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IAmtExLinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExLinNull()
            Me(Me.tableImpRecapImmo.IAmtExLinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExTotNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IAmtExTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExTotNull()
            Me(Me.tableImpRecapImmo.IAmtExTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtCumTotNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IAmtCumTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtCumTotNull()
            Me(Me.tableImpRecapImmo.IAmtCumTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValResidNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IValResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValResidNull()
            Me(Me.tableImpRecapImmo.IValResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPlusValLgNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IPlusValLgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPlusValLgNull()
            Me(Me.tableImpRecapImmo.IPlusValLgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPlusValCtNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IPlusValCtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPlusValCtNull()
            Me(Me.tableImpRecapImmo.IPlusValCtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtCessNull() As Boolean
            Return Me.IsNull(Me.tableImpRecapImmo.IDtCessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtCessNull()
            Me(Me.tableImpRecapImmo.IDtCessColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImpTabCessImmoRow
        Inherits Global.System.Data.DataRow
        
        Private tableImpTabCessImmo As ImpTabCessImmoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImpTabCessImmo = CType(Me.Table,ImpTabCessImmoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDossier' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.ICptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICpt' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.ICptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IActi' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOrdre() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IOrdreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IOrdre' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.ILibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.ILibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITypAmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.ITypAmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITypAmt' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.ITypAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValAcquis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IValAcquisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValAcquis' dans la table 'ImpTabCessImmo' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IValAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtAcquis() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IDtAcquisColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtAcquis' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IDtAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDuree() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IDureeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDuree' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IDureeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValResid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IValResidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValResid' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IValResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPlusValLg() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IPlusValLgColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPlusValLg' dans la table 'ImpTabCessImmo' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IPlusValLgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPlusValCt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IPlusValCtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPlusValCt' dans la table 'ImpTabCessImmo' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IPlusValCtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtCess() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IDtCessColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtCess' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IDtCessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICoeff() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.ICoeffColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICoeff' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.ICoeffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValVenale() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IValVenaleColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValVenale' dans la table 'ImpTabCessImmo' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IValVenaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValLeasing() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IValLeasingColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValLeasing' dans la table 'ImpTabCessImmo' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IValLeasingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtCession() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IDtCessionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtCession' dans la table 'ImpTabCessImmo' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IDtCessionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValCession() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IValCessionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValCession' dans la table 'ImpTabCessImmo' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IValCessionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDureeResid() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IDureeResidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDureeResid' dans la table 'ImpTabCessImmo' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IDureeResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.ClibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Clib' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.ClibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtForf() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IDtForfColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtForf' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IDtForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValForf() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IValForfColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValForf' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IValForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtCumTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IAmtCumTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtCumTot' dans la table 'ImpTabCessImmo' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IAmtCumTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabCessImmo.IAmtExTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExTot' dans la table 'ImpTabCessImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabCessImmo.IAmtExTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDossierNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDossierNull()
            Me(Me.tableImpTabCessImmo.IDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICptNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.ICptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICptNull()
            Me(Me.tableImpTabCessImmo.ICptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIActiNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIActiNull()
            Me(Me.tableImpTabCessImmo.IActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOrdreNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IOrdreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOrdreNull()
            Me(Me.tableImpTabCessImmo.IOrdreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILibNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.ILibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILibNull()
            Me(Me.tableImpTabCessImmo.ILibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITypAmtNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.ITypAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITypAmtNull()
            Me(Me.tableImpTabCessImmo.ITypAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IValAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValAcquisNull()
            Me(Me.tableImpTabCessImmo.IValAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IDtAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtAcquisNull()
            Me(Me.tableImpTabCessImmo.IDtAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IDureeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeNull()
            Me(Me.tableImpTabCessImmo.IDureeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValResidNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IValResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValResidNull()
            Me(Me.tableImpTabCessImmo.IValResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPlusValLgNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IPlusValLgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPlusValLgNull()
            Me(Me.tableImpTabCessImmo.IPlusValLgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPlusValCtNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IPlusValCtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPlusValCtNull()
            Me(Me.tableImpTabCessImmo.IPlusValCtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtCessNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IDtCessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtCessNull()
            Me(Me.tableImpTabCessImmo.IDtCessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICoeffNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.ICoeffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICoeffNull()
            Me(Me.tableImpTabCessImmo.ICoeffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValVenaleNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IValVenaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValVenaleNull()
            Me(Me.tableImpTabCessImmo.IValVenaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValLeasingNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IValLeasingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValLeasingNull()
            Me(Me.tableImpTabCessImmo.IValLeasingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtCessionNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IDtCessionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtCessionNull()
            Me(Me.tableImpTabCessImmo.IDtCessionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValCessionNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IValCessionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValCessionNull()
            Me(Me.tableImpTabCessImmo.IValCessionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeResidNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IDureeResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeResidNull()
            Me(Me.tableImpTabCessImmo.IDureeResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClibNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.ClibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClibNull()
            Me(Me.tableImpTabCessImmo.ClibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtForfNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IDtForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtForfNull()
            Me(Me.tableImpTabCessImmo.IDtForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValForfNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IValForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValForfNull()
            Me(Me.tableImpTabCessImmo.IValForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtCumTotNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IAmtCumTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtCumTotNull()
            Me(Me.tableImpTabCessImmo.IAmtCumTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExTotNull() As Boolean
            Return Me.IsNull(Me.tableImpTabCessImmo.IAmtExTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExTotNull()
            Me(Me.tableImpTabCessImmo.IAmtExTotColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImpAmortDerRow
        Inherits Global.System.Data.DataRow
        
        Private tableImpAmortDer As ImpAmortDerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImpAmortDer = CType(Me.Table,ImpAmortDerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDossier' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.ICptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICpt' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.ICptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IActi' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOrdre() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IOrdreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IOrdre' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.ILibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.ILibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITypAmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.ITypAmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITypAmt' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.ITypAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValAcquis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IValAcquisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValAcquis' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IValAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtAcquis() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IDtAcquisColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtAcquis' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IDtAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDuree() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IDureeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDuree' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IDureeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExMax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IAmtExMaxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExMax' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IAmtExMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IAmtExTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExTot' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IAmtExTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtCumTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IAmtCumTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtCumTot' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IAmtCumTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValResid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IValResidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValResid' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IValResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDureeResid() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IDureeResidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDureeResid' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IDureeResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.CLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CLib' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.CLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICoeff() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.ICoeffColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICoeff' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.ICoeffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExLin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IAmtExLinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExLin' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IAmtExLinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtCumLin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpAmortDer.IAmtCumLinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtCumLin' dans la table 'ImpAmortDer' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpAmortDer.IAmtCumLinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDossierNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDossierNull()
            Me(Me.tableImpAmortDer.IDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICptNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.ICptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICptNull()
            Me(Me.tableImpAmortDer.ICptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIActiNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIActiNull()
            Me(Me.tableImpAmortDer.IActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOrdreNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IOrdreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOrdreNull()
            Me(Me.tableImpAmortDer.IOrdreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILibNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.ILibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILibNull()
            Me(Me.tableImpAmortDer.ILibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITypAmtNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.ITypAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITypAmtNull()
            Me(Me.tableImpAmortDer.ITypAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IValAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValAcquisNull()
            Me(Me.tableImpAmortDer.IValAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IDtAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtAcquisNull()
            Me(Me.tableImpAmortDer.IDtAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IDureeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeNull()
            Me(Me.tableImpAmortDer.IDureeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExMaxNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IAmtExMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExMaxNull()
            Me(Me.tableImpAmortDer.IAmtExMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExTotNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IAmtExTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExTotNull()
            Me(Me.tableImpAmortDer.IAmtExTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtCumTotNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IAmtCumTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtCumTotNull()
            Me(Me.tableImpAmortDer.IAmtCumTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValResidNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IValResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValResidNull()
            Me(Me.tableImpAmortDer.IValResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeResidNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IDureeResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeResidNull()
            Me(Me.tableImpAmortDer.IDureeResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLibNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.CLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLibNull()
            Me(Me.tableImpAmortDer.CLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICoeffNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.ICoeffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICoeffNull()
            Me(Me.tableImpAmortDer.ICoeffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExLinNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IAmtExLinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExLinNull()
            Me(Me.tableImpAmortDer.IAmtExLinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtCumLinNull() As Boolean
            Return Me.IsNull(Me.tableImpAmortDer.IAmtCumLinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtCumLinNull()
            Me(Me.tableImpAmortDer.IAmtCumLinColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImpPassReelImmoRow
        Inherits Global.System.Data.DataRow
        
        Private tableImpPassReelImmo As ImpPassReelImmoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImpPassReelImmo = CType(Me.Table,ImpPassReelImmoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDossier' dans la table 'ImpPassReelImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.ICptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICpt' dans la table 'ImpPassReelImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.ICptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IActi' dans la table 'ImpPassReelImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOrdre() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IOrdreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IOrdre' dans la table 'ImpPassReelImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.ILibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib' dans la table 'ImpPassReelImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.ILibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITypAmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.ITypAmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITypAmt' dans la table 'ImpPassReelImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.ITypAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValAcquis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IValAcquisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValAcquis' dans la table 'ImpPassReelImmo' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IValAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtForf() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IDtForfColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtForf' dans la table 'ImpPassReelImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IDtForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDureeResid() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IDureeResidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDureeResid' dans la table 'ImpPassReelImmo' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IDureeResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.CLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CLib' dans la table 'ImpPassReelImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.CLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICoeff() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.ICoeffColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICoeff' dans la table 'ImpPassReelImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.ICoeffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValForf() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IValForfColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValForf' dans la table 'ImpPassReelImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IValForfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValVenale() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IValVenaleColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValVenale' dans la table 'ImpPassReelImmo' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IValVenaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDuree() As Long
            Get
                Return CType(Me(Me.tableImpPassReelImmo.IDureeColumn),Long)
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IDureeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IAmtExTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExTot' dans la table 'ImpPassReelImmo' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IAmtExTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValResid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IValResidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValResid' dans la table 'ImpPassReelImmo' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IValResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValLeasing() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IValLeasingColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValLeasing' dans la table 'ImpPassReelImmo' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IValLeasingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValNetFisc() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IValNetFiscColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValNetFisc' dans la table 'ImpPassReelImmo' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IValNetFiscColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtAcquis() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpPassReelImmo.IDtAcquisColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtAcquis' dans la table 'ImpPassReelImmo' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableImpPassReelImmo.IDtAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDossierNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDossierNull()
            Me(Me.tableImpPassReelImmo.IDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICptNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.ICptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICptNull()
            Me(Me.tableImpPassReelImmo.ICptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIActiNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIActiNull()
            Me(Me.tableImpPassReelImmo.IActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOrdreNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IOrdreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOrdreNull()
            Me(Me.tableImpPassReelImmo.IOrdreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILibNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.ILibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILibNull()
            Me(Me.tableImpPassReelImmo.ILibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITypAmtNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.ITypAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITypAmtNull()
            Me(Me.tableImpPassReelImmo.ITypAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IValAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValAcquisNull()
            Me(Me.tableImpPassReelImmo.IValAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtForfNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IDtForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtForfNull()
            Me(Me.tableImpPassReelImmo.IDtForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeResidNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IDureeResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeResidNull()
            Me(Me.tableImpPassReelImmo.IDureeResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLibNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.CLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLibNull()
            Me(Me.tableImpPassReelImmo.CLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICoeffNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.ICoeffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICoeffNull()
            Me(Me.tableImpPassReelImmo.ICoeffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValForfNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IValForfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValForfNull()
            Me(Me.tableImpPassReelImmo.IValForfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValVenaleNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IValVenaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValVenaleNull()
            Me(Me.tableImpPassReelImmo.IValVenaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExTotNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IAmtExTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExTotNull()
            Me(Me.tableImpPassReelImmo.IAmtExTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValResidNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IValResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValResidNull()
            Me(Me.tableImpPassReelImmo.IValResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValLeasingNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IValLeasingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValLeasingNull()
            Me(Me.tableImpPassReelImmo.IValLeasingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValNetFiscNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IValNetFiscColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValNetFiscNull()
            Me(Me.tableImpPassReelImmo.IValNetFiscColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpPassReelImmo.IDtAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtAcquisNull()
            Me(Me.tableImpPassReelImmo.IDtAcquisColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImpTabClaImmoRow
        Inherits Global.System.Data.DataRow
        
        Private tableImpTabClaImmo As ImpTabClaImmoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImpTabClaImmo = CType(Me.Table,ImpTabClaImmoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDossier' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.ICptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICpt' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.ICptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValDebEx() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IValDebExColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValDebEx' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IValDebExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValAugEx() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IValAugExColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValAugEx' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IValAugExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValAugAmtEx() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IValAugAmtExColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValAugAmtEx' dans la table 'ImpTabClaImmo' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IValAugAmtExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValDimEx() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IValDimExColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValDimEx' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IValDimExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValDimAmtEx() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IValDimAmtExColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValDimAmtEx' dans la table 'ImpTabClaImmo' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IValDimAmtExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExMax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IAmtExMaxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExMax' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IAmtExMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IAmtExTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExTot' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IAmtExTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtCumTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IAmtCumTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtCumTot' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IAmtCumTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValResid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IValResidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValResid' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IValResidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.CLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CLib' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.CLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExLin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IAmtExLinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExLin' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IAmtExLinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICatImmo() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.ICatImmoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICatImmo' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.ICatImmoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITypAmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.ITypAmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITypAmt' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.ITypAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDerogatoire() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IDerogatoireColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDerogatoire' dans la table 'ImpTabClaImmo' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IDerogatoireColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtCumLin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpTabClaImmo.IAmtCumLinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtCumLin' dans la table 'ImpTabClaImmo' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpTabClaImmo.IAmtCumLinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDossierNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDossierNull()
            Me(Me.tableImpTabClaImmo.IDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICptNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.ICptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICptNull()
            Me(Me.tableImpTabClaImmo.ICptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValDebExNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IValDebExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValDebExNull()
            Me(Me.tableImpTabClaImmo.IValDebExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValAugExNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IValAugExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValAugExNull()
            Me(Me.tableImpTabClaImmo.IValAugExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValAugAmtExNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IValAugAmtExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValAugAmtExNull()
            Me(Me.tableImpTabClaImmo.IValAugAmtExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValDimExNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IValDimExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValDimExNull()
            Me(Me.tableImpTabClaImmo.IValDimExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValDimAmtExNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IValDimAmtExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValDimAmtExNull()
            Me(Me.tableImpTabClaImmo.IValDimAmtExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExMaxNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IAmtExMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExMaxNull()
            Me(Me.tableImpTabClaImmo.IAmtExMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExTotNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IAmtExTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExTotNull()
            Me(Me.tableImpTabClaImmo.IAmtExTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtCumTotNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IAmtCumTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtCumTotNull()
            Me(Me.tableImpTabClaImmo.IAmtCumTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValResidNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IValResidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValResidNull()
            Me(Me.tableImpTabClaImmo.IValResidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLibNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.CLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLibNull()
            Me(Me.tableImpTabClaImmo.CLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExLinNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IAmtExLinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExLinNull()
            Me(Me.tableImpTabClaImmo.IAmtExLinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICatImmoNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.ICatImmoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICatImmoNull()
            Me(Me.tableImpTabClaImmo.ICatImmoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITypAmtNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.ITypAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITypAmtNull()
            Me(Me.tableImpTabClaImmo.ITypAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDerogatoireNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IDerogatoireColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDerogatoireNull()
            Me(Me.tableImpTabClaImmo.IDerogatoireColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtCumLinNull() As Boolean
            Return Me.IsNull(Me.tableImpTabClaImmo.IAmtCumLinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtCumLinNull()
            Me(Me.tableImpTabClaImmo.IAmtCumLinColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImpCalProvRow
        Inherits Global.System.Data.DataRow
        
        Private tableImpCalProv As ImpCalProvDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImpCalProv = CType(Me.Table,ImpCalProvDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDossier() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.IDossierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDossier' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.IDossierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.ICptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICpt' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.ICptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IActi() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.IActiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IActi' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.IActiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOrdre() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.IOrdreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IOrdre' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.IOrdreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.ILibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ILib' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.ILibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITypAmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.ITypAmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ITypAmt' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.ITypAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IValAcquis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.IValAcquisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IValAcquis' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.IValAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDtAcquis() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.IDtAcquisColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDtAcquis' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.IDtAcquisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDuree() As Long
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.IDureeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IDuree' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.IDureeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExMax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.IAmtExMaxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExMax' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.IAmtExMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.IAmtExTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExTot' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.IAmtExTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAmtExMin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.IAmtExMinColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IAmtExMin' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.IAmtExMinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableImpCalProv.CLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CLib' dans la table 'ImpCalProv' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImpCalProv.CLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDossierNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.IDossierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDossierNull()
            Me(Me.tableImpCalProv.IDossierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICptNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.ICptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICptNull()
            Me(Me.tableImpCalProv.ICptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIActiNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.IActiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIActiNull()
            Me(Me.tableImpCalProv.IActiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOrdreNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.IOrdreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOrdreNull()
            Me(Me.tableImpCalProv.IOrdreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILibNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.ILibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILibNull()
            Me(Me.tableImpCalProv.ILibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITypAmtNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.ITypAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITypAmtNull()
            Me(Me.tableImpCalProv.ITypAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIValAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.IValAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIValAcquisNull()
            Me(Me.tableImpCalProv.IValAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDtAcquisNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.IDtAcquisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDtAcquisNull()
            Me(Me.tableImpCalProv.IDtAcquisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDureeNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.IDureeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDureeNull()
            Me(Me.tableImpCalProv.IDureeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExMaxNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.IAmtExMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExMaxNull()
            Me(Me.tableImpCalProv.IAmtExMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExTotNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.IAmtExTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExTotNull()
            Me(Me.tableImpCalProv.IAmtExTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAmtExMinNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.IAmtExMinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAmtExMinNull()
            Me(Me.tableImpCalProv.IAmtExMinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLibNull() As Boolean
            Return Me.IsNull(Me.tableImpCalProv.CLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLibNull()
            Me(Me.tableImpCalProv.CLibColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImpTabImmoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImpTabImmoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImpTabImmoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImpTabImmoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImpTabDepImmoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImpTabDepImmoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImpTabDepImmoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImpTabDepImmoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImpRecapImmoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImpRecapImmoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImpRecapImmoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImpRecapImmoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImpTabCessImmoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImpTabCessImmoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImpTabCessImmoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImpTabCessImmoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImpAmortDerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImpAmortDerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImpAmortDerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImpAmortDerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImpPassReelImmoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImpPassReelImmoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImpPassReelImmoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImpPassReelImmoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImpTabClaImmoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImpTabClaImmoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImpTabClaImmoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImpTabClaImmoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImpCalProvRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImpCalProvRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImpCalProvRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImpCalProvRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
