Imports System.Windows.Forms

Public Class ChoixExploitation
    Public SkipIfSingle As Boolean = False

#Region "Page"
    Private Sub ChoixExploitation_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        SetChildFormIcon(Me)
    End Sub

    Private Sub ChoixExploitation_Shown(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Shown
        Me.BringToFront()
        If Me.ExplBindingSource.Count = 0 Then
            Using fr As New FrChoixPrems
                Select Case fr.ShowDialog()
                    Case Windows.Forms.DialogResult.OK 'Nouveau dossier
                        cmdNew_Click(Nothing, Nothing)
                    Case Windows.Forms.DialogResult.Retry 'Démo
                        DemoToolStripMenuItem_Click(Nothing, Nothing)
                        Me.ExplBindingSource.Position = 0
                        OK_Button_Click(Nothing, Nothing)
                    Case Windows.Forms.DialogResult.Yes 'Importer des écritures
                        ImporterDesÉcrituresToolStripMenuItem_Click(Nothing, Nothing)
                        If Me.ExplBindingSource.Count > 0 Then
                            Me.ExplBindingSource.Position = 0
                            OK_Button_Click(Nothing, Nothing)
                        End If
                    Case Windows.Forms.DialogResult.No 'Restaurer une sauvegarde
                        RestaurerUneSauvegardeToolStripMenuItem_Click(Nothing, Nothing)
                        If Me.ExplBindingSource.Count > 0 Then
                            Me.ExplBindingSource.Position = 0
                            OK_Button_Click(Nothing, Nothing)
                        End If
                End Select
            End Using
        End If
    End Sub
#End Region

#Region "Boutons"
    Private Sub OK_Button_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OK_Button.Click
        If Me.ExplBindingSource.Position < 0 Then Exit Sub

        Dim expl As Exploitation = DirectCast(Me.ExplBindingSource.Current, Exploitation)

        If (Me.EstAuthentifie()) Then
            'Vérification de la version de la base
            If Not VerifVersionBase(UtilBase.AccessConnectionString(expl.CheminBase)) Then
                'MsgBox("La base de données n'est pas compatible avec cette version de l'application." & vbCrLf & "Elle doit être mise à jour.", MsgBoxStyle.Critical)
                'End

                If (MsgBox("La base de données n'est pas compatible avec cette version de l'application. " & vbCrLf & "Voulez-vous effectuer la mise à jour maintenant ?", MsgBoxStyle.YesNo) = MsgBoxResult.Yes) Then
                    Dim cheminFichierMigrationBase As String = System.IO.Path.Combine(Application.StartupPath, "MigrationBase.exe")
                    Dim pi As New ProcessStartInfo

                    With pi
                        .FileName = cheminFichierMigrationBase
                        .Arguments = String.Format("-base=""{0}"" -auto", expl.CheminBase)
                        .UseShellExecute = True
                    End With

                    Dim p As Process = Process.Start(pi)

                    p.WaitForExit()

                    'Refaire la vérification de version
                    If Not VerifVersionBase(UtilBase.AccessConnectionString(expl.CheminBase)) Then
                        MsgBox(String.Format("La mise à jour de la base de données {0} a échoué.", expl.CheminBase), MsgBoxStyle.Critical)

                        Exit Sub
                    End If
                Else
                    Exit Sub
                End If
            End If

            expl.Choisir()

            Me.DialogResult = System.Windows.Forms.DialogResult.OK
            Me.Close()
        End If
    End Sub

    Private Sub Cancel_Button_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Cancel_Button.Click
        Me.DialogResult = System.Windows.Forms.DialogResult.Cancel
        Me.Close()
    End Sub

    Private Sub cmdNew_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CréerUneExploitationToolStripMenuItem.Click
        Using fr As New FrModifExploi
            If fr.ShowDialog = Windows.Forms.DialogResult.OK Then
                Dim list As List(Of Exploitation) = DirectCast(Me.ExplBindingSource.DataSource, List(Of Exploitation))
                list.Add(fr.Exploitation)
                Exploitation.EnregistrerExploitations(list)
                fr.Exploitation.Choisir()
                Me.DialogResult = System.Windows.Forms.DialogResult.OK
                Me.Close()
            End If
        End Using
        Me.ExplBindingSource.ResetBindings(False)
    End Sub

    Private Sub cmdModif_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ModifierToolStripMenuItem.Click
        If Me.ExplBindingSource.Position < 0 Then Exit Sub
        Dim expl As Exploitation = DirectCast(Me.ExplBindingSource.Current, Exploitation)
        Using fr As New FrModifExploi()
            fr.Exploitation = expl
            If fr.ShowDialog = Windows.Forms.DialogResult.OK Then
                Dim list As List(Of Exploitation) = DirectCast(Me.ExplBindingSource.DataSource, List(Of Exploitation))
                Exploitation.EnregistrerExploitations(list)
            End If
        End Using
        Me.ExplBindingSource.ResetBindings(False)
    End Sub

    Private Sub cmdSuppr_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SupprimerToolStripMenuItem.Click
        If Me.ExplBindingSource.Position < 0 Then Exit Sub
        Dim expl As Exploitation = DirectCast(Me.ExplBindingSource.Current, Exploitation)
        If MsgBox(String.Format(My.Resources.Strings.Expl_EnleverExploitation, expl.Display), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation) = MsgBoxResult.Yes Then
            Dim list As List(Of Exploitation) = DirectCast(Me.ExplBindingSource.DataSource, List(Of Exploitation))
            list.Remove(expl)
            Dim base As String = expl.CheminBase
            If IO.File.Exists(base) AndAlso Not IO.Path.GetFileName(base).ToLower = "demo.mdb" Then
                Dim trouve As Boolean
                For Each ex As Exploitation In list
                    If ex.CheminBase = base Then
                        trouve = True
                        Exit For
                    End If
                Next
                If Not trouve Then
                    If MsgBox(String.Format(My.Resources.Strings.Expl_SupprimerBDD, IO.Path.GetFileName(base)), MsgBoxStyle.YesNo Or MsgBoxStyle.DefaultButton2) = MsgBoxResult.Yes Then
                        IO.File.Delete(base)
                    End If
                End If
            End If
            Exploitation.EnregistrerExploitations(list)
            Me.ExplBindingSource.ResetBindings(False)
        End If
    End Sub

    Private Sub BtAjouterBase_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles IntégrerUneBaseToolStripMenuItem.Click
        With OpenFileDialog
            .Filter = "Base de données Access (*.mdb)|*.mdb"
            .Title = My.Resources.Strings.Expl_BDDAIntegrer
            .FileName = "dbDonnees.mdb"
            If .ShowDialog = Windows.Forms.DialogResult.OK Then
                Dim list As List(Of Exploitation) = Exploitation.InitFromBase(.FileName)
                Dim curList As List(Of Exploitation) = DirectCast(Me.ExplBindingSource.DataSource, List(Of Exploitation))
                If list IsNot Nothing Then curList.AddRange(list)
                Exploitation.EnregistrerExploitations(curList)
                Me.ExplBindingSource.ResetBindings(False)
            End If
        End With
    End Sub

    Private Sub DemoToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DemoToolStripMenuItem.Click

        Dim list As List(Of Exploitation) = Exploitation.InitFromBase(String.Format("{0}\Data\Demo.mdb", My.Application.Info.DirectoryPath))
        Dim curList As List(Of Exploitation) = DirectCast(Me.ExplBindingSource.DataSource, List(Of Exploitation))
        If list IsNot Nothing Then curList.AddRange(list)
        Exploitation.EnregistrerExploitations(curList)
        Me.ExplBindingSource.ResetBindings(False)

    End Sub

    Private Sub ImporterDesÉcrituresToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImporterDesÉcrituresToolStripMenuItem.Click
        Using fr As New FrImportationIsagri()
            If fr.ShowDialog <> Windows.Forms.DialogResult.Cancel Then
                Dim list As List(Of Exploitation) = Exploitation.ChargerExploitations
                list.Sort(AddressOf Exploitation.CompareByCodeExpl)
                Me.ExplBindingSource.DataSource = list
            End If
        End Using
    End Sub

    Private Sub RestaurerUneSauvegardeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RestaurerUneSauvegardeToolStripMenuItem.Click
        Using fr As New FrRestauration
            If fr.ShowDialog = Windows.Forms.DialogResult.OK Then
                Dim list As List(Of Exploitation) = Exploitation.ChargerExploitations
                list.Sort(AddressOf Exploitation.CompareByCodeExpl)
                Me.ExplBindingSource.DataSource = list
            End If
        End Using
    End Sub
#End Region

#Region "Méthodes diverses"
    Public Function Charger(Optional ByVal StartupExpl As String = Nothing) As Boolean
        Dim list As List(Of Exploitation) = Exploitation.ChargerExploitations
        If list.Count = 0 Then
            Me.ExplBindingSource.DataSource = list
            Return True
        ElseIf Not String.IsNullOrEmpty(StartupExpl) Then
            Dim expl As Exploitation = Exploitation.Trouver(list, StartupExpl)
            If expl IsNot Nothing Then
                expl.Choisir()
                Return False
            End If
        ElseIf list.Count = 1 AndAlso SkipIfSingle Then
            list(0).Choisir()
            Return False
        Else
            list.Sort(AddressOf Exploitation.CompareByCodeExpl)
            Me.ExplBindingSource.DataSource = list
            If My.Settings.DernierExploit.Length > 0 Then
                Dim expl As Exploitation = Exploitation.Trouver(list, My.Settings.DernierExploit)
                If expl IsNot Nothing Then
                    Me.ExplBindingSource.Position = list.IndexOf(expl)
                    'expl.Choisir() 'Permet de définir les bases par défaut
                End If
            End If
            Return True
        End If
    End Function

    Private Function EstAuthentifie() As Boolean
        Dim expl As Exploitation = DirectCast(Me.ExplBindingSource.Current, Exploitation)

        If Not (String.IsNullOrEmpty(expl.MotDePasse)) Then
            With New FrAuthentification(expl)
                If Not (.ShowDialog() = Windows.Forms.DialogResult.OK) Then
                    Return False
                End If
            End With
        End If

        Return True
    End Function

    Private Shared Function VerifVersionBase(ByVal connString As String) As Boolean
        Using conn As New OleDb.OleDbConnection(connString)
            Try
                Dim sql As String = "SELECT Valeur FROM ParamApplication WHERE Cle='VersionBase'"
                Dim versionBase As String = UtilBase.ExecuteScalarStr(sql, conn)
                Return versionBase = My.Settings.VersionBase
            Catch ex As OleDb.OleDbException
                LogException(ex)
                Return False
            End Try
        End Using
    End Function
#End Region

#Region "Liste exploitations"
    Private Sub ListeExploitations_DoubleClick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListeExploitations.DoubleClick
        OK_Button_Click(Nothing, Nothing)
    End Sub
#End Region

End Class
