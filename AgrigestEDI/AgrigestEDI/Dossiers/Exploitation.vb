Imports System.Xml.Serialization

Public Class Exploitation
    Implements ICloneable

    Private Const NOMFICHIER As String = "Exploitations.xml"

#Region "Props"
    Private _codeExpl As String
    <XmlAttribute()> _
    Public Property CodeExpl() As String
        Get
            Return _codeExpl
        End Get
        Set(ByVal value As String)
            _codeExpl = value
        End Set
    End Property

    Private _codeExplImport As String
    <XmlAttribute()> _
    Public Property CodeExplImport() As String
        Get
            Return _codeExplImport
        End Get
        Set(ByVal value As String)
            _codeExplImport = value
        End Set
    End Property

    Private _nom As String
    <XmlAttribute()> _
    Public Property Nom() As String
        Get
            Return _nom
        End Get
        Set(ByVal value As String)
            _nom = value
        End Set
    End Property

    Private _cheminBase As String
    Public Property CheminBase() As String
        Get
            Return _cheminBase
        End Get
        Set(ByVal value As String)
            _cheminBase = value
        End Set
    End Property

    Private _cheminBasePlanType As String
    Public Property CheminBasePlanType() As String
        Get
            Return _cheminBasePlanType
        End Get
        Set(ByVal value As String)
            _cheminBasePlanType = value
        End Set
    End Property

    Private _MotDePasse As String
    Public Property MotDePasse() As String
        Get
            Return Me._MotDePasse
        End Get
        Set(ByVal value As String)
            Me._MotDePasse = value
        End Set
    End Property

    <XmlIgnore()> _
    Public ReadOnly Property Display() As String
        Get
            Return String.Format("{0} - {1}", Me.CodeExpl, Me.Nom)
        End Get
    End Property

    Public Shared ReadOnly Property CheminFichier() As String
        Get
            Return IO.Path.Combine(My.Application.GetAppDataPath, NOMFICHIER)
        End Get
    End Property
#End Region

#Region "Gestion XML"
    Public Shared Function LoadFromString(ByVal s As String) As List(Of Exploitation)
        Using st As New IO.StringReader(s)
            Return LoadFromTextReader(st)
        End Using
    End Function

    Private Shared Function LoadFromTextReader(ByVal s As IO.TextReader) As List(Of Exploitation)
        Dim res As List(Of Exploitation)
        Dim xser As New XmlSerializer(GetType(List(Of Exploitation)))
        res = DirectCast(xser.Deserialize(s), List(Of Exploitation))
        Return res
    End Function

    Private Shared Sub SaveToTextReader(ByVal s As IO.TextWriter, ByVal list As List(Of Exploitation))
        Dim xser As New XmlSerializer(GetType(List(Of Exploitation)))
        xser.Serialize(s, list)
    End Sub

    Public Shared Function LoadFromFile(ByVal path As String) As List(Of Exploitation)
        Using sr As New IO.StreamReader(path)
            Return LoadFromTextReader(sr)
        End Using
    End Function

    Public Shared Sub SaveToFile(ByVal path As String, ByVal list As List(Of Exploitation))
        Using sw As New IO.StreamWriter(path)
            SaveToTextReader(sw, list)
        End Using
    End Sub
#End Region

#Region "Shared"
    Public Shared Function ChargerExploitations() As List(Of Exploitation)
        Dim path As String = CheminFichier
        If Not IO.File.Exists(path) Then
            SaveToFile(path, New List(Of Exploitation))
        End If
        Return LoadFromFile(path)
    End Function

    Public Shared Sub EnregistrerExploitations(ByVal list As List(Of Exploitation))
        SaveToFile(CheminFichier, list)
    End Sub

    Public Shared Function InitFromBase(ByVal path As String) As List(Of Exploitation)
        Dim res As New List(Of Exploitation)
        Using dta As New dbDonneesDataSetTableAdapters.ExploitationsTableAdapter
            dta.Connection = UtilBase.ConnecterBase(path)
            Dim dt As dbDonneesDataSet.ExploitationsDataTable = dta.GetData
            For Each dr As dbDonneesDataSet.ExploitationsRow In dt.Select("", "EExpl")
                Dim e As New Exploitation
                e.CodeExpl = dr.EExpl
                e.Nom = dr.ENom1
                e.CheminBase = path
                e.CheminBasePlanType = My.Settings.CheminBaseConfig
                res.Add(e)
            Next
        End Using
        Return res
    End Function

    Public Shared Sub Enlever(ByVal codeExpl As String)
        Dim list As List(Of Exploitation) = ChargerExploitations()
        Dim expl As Exploitation = Trouver(list, codeExpl)
        If expl IsNot Nothing Then
            list.Remove(expl)
            EnregistrerExploitations(list)
        End If
    End Sub

    Public Shared Function Modifier(ByVal CodeExpl As String, ByVal Nom As String, ByVal CodeExpl_Original As String) As Exploitation
        Dim list As List(Of Exploitation) = ChargerExploitations()
        Dim res As Exploitation = Trouver(list, CodeExpl_Original)
        If res IsNot Nothing Then
            res.CodeExpl = CodeExpl
            res.Nom = Nom
            EnregistrerExploitations(list)
        End If
        Return res
    End Function

    Public Shared Function Ajouter(ByVal CodeExpl As String, ByVal Nom As String) As Exploitation
        Dim expl As Exploitation = New Exploitation
        With expl
            .CodeExpl = CodeExpl
            .Nom = Nom
            .CheminBase = My.Settings.CheminBase
            .CheminBasePlanType = My.Settings.CheminBaseConfig
        End With
        Ajouter(expl)
        Return expl
    End Function

    Public Shared Sub Ajouter(ByVal expl As Exploitation)
        Dim list As List(Of Exploitation) = ChargerExploitations()
        list.Add(expl)
        EnregistrerExploitations(list)
    End Sub

    Public Shared Function ConstruireCodeExpl(ByVal nExpl As String) As String
        If IsNumeric(nExpl) AndAlso nExpl.Length < 6 Then
            Return "C" & nExpl.PadLeft(5, "0"c)
        Else
            'Essayer de tronquer la chaine 
            nExpl = Left(nExpl, 5)
            If IsNumeric(nExpl) Then
                'Si c'est un numérique, utiliser ces chiffres
                Return "Y" & nExpl
            Else
                'Prendre le premier code libre en Z
                Dim i As Integer = 1
                Dim list As List(Of Exploitation) = ChargerExploitations()
                While Trouver(list, String.Format("Z{0:00000}", i)) IsNot Nothing
                    i += 1
                End While
                Return String.Format("Z{0:00000}", i)
            End If
        End If
    End Function

    Public Shared Function TrouverByImport(ByVal codeExplImport As String) As Exploitation
        Dim list As List(Of Exploitation) = ChargerExploitations()
        Return TrouverByImport(list, codeExplImport)
    End Function

    Public Shared Function TrouverByImport(ByVal list As List(Of Exploitation), ByVal codeExplImport As String) As Exploitation
        Dim codeExplTransfo As String = ConstruireCodeExpl(codeExplImport)
        For Each expl As Exploitation In list
            If expl.CodeExplImport IsNot Nothing AndAlso expl.CodeExplImport = codeExplImport Then
                Return expl
            ElseIf codeExplTransfo = expl.CodeExpl Then
                Return expl
            End If
        Next
        Return Nothing
    End Function

    Public Shared Function Trouver(ByVal codeExpl As String) As Exploitation
        Dim list As List(Of Exploitation) = ChargerExploitations()
        Return Trouver(list, codeExpl)
    End Function

    Public Shared Function Trouver(ByVal list As List(Of Exploitation), ByVal codeExpl As String) As Exploitation
        For Each expl As Exploitation In list
            If expl.CodeExpl = codeExpl Then
                Return expl
            End If
        Next
        Return Nothing
    End Function

    Public Shared Function CompareByCodeExpl(ByVal ex1 As Exploitation, ByVal ex2 As Exploitation) As Integer
        Return String.Compare(ex1.CodeExpl, ex2.CodeExpl, True)
    End Function

    Public Shared Function CreerBase(ByVal codeExpl As String) As String
        'Trouver le modèle
        Dim pathModele As String = IO.Path.Combine(My.Application.Info.DirectoryPath, "Data\dbDonneesVide.mdb")
        If Not IO.File.Exists(pathModele) Then
            Throw New ApplicationException("La base de données modèle est introuvable.")
        End If
        Dim newPath As String = String.Format("Data\dbDonnees{0}.mdb", codeExpl)
        newPath = IO.Path.Combine(My.Application.GetAppDataPath, newPath)
        newPath = GenerateUniqueFilename(newPath)
        If Not IO.Directory.Exists(IO.Path.GetDirectoryName(newPath)) Then IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(newPath))
        IO.File.Copy(pathModele, newPath)
        Return newPath
    End Function

    Public Shared Sub Copy(ByVal source As Exploitation, ByVal dest As Exploitation)
        dest.CodeExpl = source.CodeExpl
        dest.CodeExplImport = source.CodeExplImport
        dest.Nom = source.Nom
        dest.CheminBase = source.CheminBase
        dest.CheminBasePlanType = source.CheminBasePlanType
        dest.MotDePasse = source.MotDePasse
    End Sub
#End Region

#Region "Méthodes diverses"
    Public Sub Choisir()
        My.Settings.Exploitation = Me
        My.Settings.DernierExploit = Me.CodeExpl
        My.Settings.SetUserOverride(My.MySettings.dbDonneesConnStringPropertyName, UtilBase.AccessConnectionString(Me.CheminBase))
        My.Settings.SetUserOverride(My.MySettings.dbPlanTypeConnStringPropertyName, UtilBase.AccessConnectionString(Me.CheminBasePlanType))
        My.Settings.ResetChemins()
    End Sub

    Public Sub CreerBase()
        Me.CheminBase = Exploitation.CreerBase(Me.CodeExpl)
    End Sub

    Public Sub InsertBase()
        Using conn As OleDb.OleDbConnection = UtilBase.ConnecterBase(Me.CheminBase)
            Using dta As New dbDonneesDataSetTableAdapters.ExploitationsTableAdapter
                dta.Connection = conn
                dta.Insert(Me.CodeExpl, Me.Nom, "", "")
            End Using
        End Using
    End Sub

    Public Sub UpdateBase(ByVal codeExpl_Original As String)
        Using conn As OleDb.OleDbConnection = UtilBase.ConnecterBase(Me.CheminBase)
            Using dta As New dbDonneesDataSetTableAdapters.ExploitationsTableAdapter
                dta.Connection = conn
                Dim dt As dbDonneesDataSet.ExploitationsDataTable = dta.GetDataByExpl(codeExpl_Original)
                If dt.Rows.Count > 0 Then
                    With DirectCast(dt.Rows(0), dbDonneesDataSet.ExploitationsRow)
                        If .EExpl <> Me.CodeExpl Then .EExpl = Me.CodeExpl
                        .ENom1 = Me.Nom
                    End With
                End If
                dta.Update(dt)
            End Using
        End Using
    End Sub

    Public Function Clone() As Object Implements System.ICloneable.Clone
        Dim e As New Exploitation
        Copy(Me, e)
        Return e
    End Function

    Public Sub Enregistrer()
        Dim list As List(Of Exploitation) = ChargerExploitations()
        Dim res As Exploitation = Trouver(list, Me.CodeExpl)
        If res IsNot Nothing Then
            Copy(Me, res)
        Else
            list.Add(Me)
        End If
        EnregistrerExploitations(list)
    End Sub
#End Region

End Class

Public Class PlanType
    Private Const NOMFICHIER As String = "Data\PlansType.xml"

    <XmlAttribute()> Public Nom As String
    <XmlAttribute()> Public Chemin As String

#Region "Propriétés"
    Public Shared ReadOnly Property CheminFichier() As String
        Get
            Return IO.Path.Combine(My.Application.Info.DirectoryPath, NOMFICHIER)
        End Get
    End Property
#End Region

#Region "Constructeurs"
    Public Sub New()

    End Sub

    Public Sub New(ByVal nom As String, ByVal chemin As String)
        Me.New()
        Me.Nom = nom
        Me.Chemin = chemin
    End Sub
#End Region

#Region "Gestion XML"
    Public Shared Function LoadFromString(ByVal s As String) As List(Of PlanType)
        Using st As New IO.StringReader(s)
            Return LoadFromTextReader(st)
        End Using
    End Function

    Private Shared Function LoadFromTextReader(ByVal s As IO.TextReader) As List(Of PlanType)
        Dim res As List(Of PlanType)
        Dim xser As New XmlSerializer(GetType(List(Of PlanType)))
        res = DirectCast(xser.Deserialize(s), List(Of PlanType))
        Return res
    End Function

    Public Shared Function LoadFromFile(ByVal path As String) As List(Of PlanType)
        Using sr As New IO.StreamReader(path)
            Return LoadFromTextReader(sr)
        End Using
    End Function
#End Region

#Region "Méthodes partagées"
    Public Shared Function ChargerPlansTypes() As List(Of PlanType)
        Dim path As String = CheminFichier
        If Not IO.File.Exists(path) Then
            Return New List(Of PlanType)
        Else
            Return LoadFromFile(path)
        End If
    End Function

    Public Shared Function Trouver() As List(Of PlanType)
        'Dim res As New List(Of PlanType)
        'Dim path As String = IO.Path.Combine(My.Application.Info.DirectoryPath, "Data\dbPlanType.mdb")
        'If IO.File.Exists(path) Then
        '    res.Add(New PlanType("Cogédis", path))
        'End If
        'path = IO.Path.Combine(My.Application.Info.DirectoryPath, "Data\dbPlanTypeBIC.mdb")
        'If IO.File.Exists(path) Then
        '    res.Add(New PlanType("BIC", path))
        'End If
        Dim dataDir As String = IO.Path.Combine(My.Application.Info.DirectoryPath, "Data")
        Dim res As List(Of PlanType) = ChargerPlansTypes()
        For i As Integer = res.Count - 1 To 0 Step -1
            Dim pt As PlanType = res(i)
            If Not IO.Path.IsPathRooted(pt.Chemin) Then
                pt.Chemin = IO.Path.Combine(dataDir, pt.Chemin)
            End If
            If Not IO.File.Exists(pt.Chemin) Then
                res.RemoveAt(i)
            End If
        Next
        Return res
    End Function
#End Region

End Class
