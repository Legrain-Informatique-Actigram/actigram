Imports System.Xml.Serialization

Public Class Exploitation
    Implements ICloneable

    Private Const NOMFICHIER As String = "Exploitations.xml"

#Region "Props"
    Private _codeExpl As String
    <XmlAttribute()> _
    Public Property CodeExpl() As String
        Get
            Return _codeExpl
        End Get
        Set(ByVal value As String)
            _codeExpl = value
        End Set
    End Property

    Private _nom As String
    <XmlAttribute()> _
    Public Property Nom() As String
        Get
            Return _nom
        End Get
        Set(ByVal value As String)
            _nom = value
        End Set
    End Property

    Private _cheminBase As String
    Public Property CheminBase() As String
        Get
            Return _cheminBase
        End Get
        Set(ByVal value As String)
            _cheminBase = value
        End Set
    End Property

    Private _cheminBasePlanType As String
    Public Property CheminBasePlanType() As String
        Get
            Return _cheminBasePlanType
        End Get
        Set(ByVal value As String)
            _cheminBasePlanType = value
        End Set
    End Property

    <XmlIgnore()> _
    Public ReadOnly Property Display() As String
        Get
            Return String.Format("{0} - {1}", Me.CodeExpl, Me.Nom)
        End Get
    End Property

    Public Shared ReadOnly Property CheminFichier() As String
        Get
            Return IO.Path.Combine(AgrigestEDIAppDataPath, NOMFICHIER)
        End Get
    End Property

    Public Shared ReadOnly Property AgrigestEDIAppDataPath() As String
        Get
            Dim path As String = IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), String.Format("{0}\{1}", My.Application.Info.CompanyName, My.Application.Info.Description))
            If Not IO.Directory.Exists(path) Then
                Return ""
            Else
                Return path
            End If
        End Get
    End Property
#End Region

#Region "Gestion XML"
    Public Shared Function LoadFromString(ByVal s As String) As List(Of Exploitation)
        Using st As New IO.StringReader(s)
            Return LoadFromTextReader(st)
        End Using
    End Function

    Private Shared Function LoadFromTextReader(ByVal s As IO.TextReader) As List(Of Exploitation)
        Dim res As List(Of Exploitation)
        Dim xser As New XmlSerializer(GetType(List(Of Exploitation)))
        res = DirectCast(xser.Deserialize(s), List(Of Exploitation))
        Return res
    End Function

    Private Shared Sub SaveToTextReader(ByVal s As IO.TextWriter, ByVal list As List(Of Exploitation))
        Dim xser As New XmlSerializer(GetType(List(Of Exploitation)))
        xser.Serialize(s, list)
    End Sub

    Public Shared Function LoadFromFile(ByVal path As String) As List(Of Exploitation)
        Using sr As New IO.StreamReader(path)
            Return LoadFromTextReader(sr)
        End Using
    End Function

    Public Shared Sub SaveToFile(ByVal path As String, ByVal list As List(Of Exploitation))
        Using sw As New IO.StreamWriter(path)
            SaveToTextReader(sw, list)
        End Using
    End Sub
#End Region

#Region "Shared"
    Public Shared Function ChargerExploitations() As List(Of Exploitation)
        Dim path As String = CheminFichier
        If Not IO.File.Exists(path) Then
            Return Nothing
        End If
        Return LoadFromFile(path)
    End Function

    Public Shared Function Trouver(ByVal codeExpl As String) As Exploitation
        Dim list As List(Of Exploitation) = ChargerExploitations()
        Return Trouver(list, codeExpl)
    End Function

    Public Shared Function Trouver(ByVal list As List(Of Exploitation), ByVal codeExpl As String) As Exploitation
        For Each expl As Exploitation In list
            If expl.CodeExpl = codeExpl Then
                Return expl
            End If
        Next
        Return Nothing
    End Function

    Public Shared Function CompareByCodeExpl(ByVal ex1 As Exploitation, ByVal ex2 As Exploitation) As Integer
        Return String.Compare(ex1.CodeExpl, ex2.CodeExpl, True)
    End Function

    Public Shared Sub Copy(ByVal source As Exploitation, ByVal dest As Exploitation)
        dest.CodeExpl = source.CodeExpl
        dest.Nom = source.Nom
        dest.CheminBase = source.CheminBase
        dest.CheminBasePlanType = source.CheminBasePlanType
    End Sub
#End Region

    Public Function Clone() As Object Implements System.ICloneable.Clone
        Dim e As New Exploitation
        Copy(Me, e)
        Return e
    End Function

End Class