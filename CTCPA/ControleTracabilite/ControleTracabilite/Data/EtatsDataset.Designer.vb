'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5477
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("EtatsDataset"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class EtatsDataset
    Inherits Global.System.Data.DataSet
    
    Private tableEtatTracaLot As EtatTracaLotDataTable
    
    Private tableListeLots As ListeLotsDataTable
    
    Private tableEtatTracaMP As EtatTracaMPDataTable
    
    Private tableEtatNonConf As EtatNonConfDataTable
    
    Private tableEtiqCodeBarre As EtiqCodeBarreDataTable
    
    Private tableEtiqCodeBarreMouv As EtiqCodeBarreMouvDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("EtatTracaLot")) Is Nothing) Then
                MyBase.Tables.Add(New EtatTracaLotDataTable(ds.Tables("EtatTracaLot")))
            End If
            If (Not (ds.Tables("ListeLots")) Is Nothing) Then
                MyBase.Tables.Add(New ListeLotsDataTable(ds.Tables("ListeLots")))
            End If
            If (Not (ds.Tables("EtatTracaMP")) Is Nothing) Then
                MyBase.Tables.Add(New EtatTracaMPDataTable(ds.Tables("EtatTracaMP")))
            End If
            If (Not (ds.Tables("EtatNonConf")) Is Nothing) Then
                MyBase.Tables.Add(New EtatNonConfDataTable(ds.Tables("EtatNonConf")))
            End If
            If (Not (ds.Tables("EtiqCodeBarre")) Is Nothing) Then
                MyBase.Tables.Add(New EtiqCodeBarreDataTable(ds.Tables("EtiqCodeBarre")))
            End If
            If (Not (ds.Tables("EtiqCodeBarreMouv")) Is Nothing) Then
                MyBase.Tables.Add(New EtiqCodeBarreMouvDataTable(ds.Tables("EtiqCodeBarreMouv")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EtatTracaLot() As EtatTracaLotDataTable
        Get
            Return Me.tableEtatTracaLot
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ListeLots() As ListeLotsDataTable
        Get
            Return Me.tableListeLots
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EtatTracaMP() As EtatTracaMPDataTable
        Get
            Return Me.tableEtatTracaMP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EtatNonConf() As EtatNonConfDataTable
        Get
            Return Me.tableEtatNonConf
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EtiqCodeBarre() As EtiqCodeBarreDataTable
        Get
            Return Me.tableEtiqCodeBarre
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EtiqCodeBarreMouv() As EtiqCodeBarreMouvDataTable
        Get
            Return Me.tableEtiqCodeBarreMouv
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As EtatsDataset = CType(MyBase.Clone,EtatsDataset)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("EtatTracaLot")) Is Nothing) Then
                MyBase.Tables.Add(New EtatTracaLotDataTable(ds.Tables("EtatTracaLot")))
            End If
            If (Not (ds.Tables("ListeLots")) Is Nothing) Then
                MyBase.Tables.Add(New ListeLotsDataTable(ds.Tables("ListeLots")))
            End If
            If (Not (ds.Tables("EtatTracaMP")) Is Nothing) Then
                MyBase.Tables.Add(New EtatTracaMPDataTable(ds.Tables("EtatTracaMP")))
            End If
            If (Not (ds.Tables("EtatNonConf")) Is Nothing) Then
                MyBase.Tables.Add(New EtatNonConfDataTable(ds.Tables("EtatNonConf")))
            End If
            If (Not (ds.Tables("EtiqCodeBarre")) Is Nothing) Then
                MyBase.Tables.Add(New EtiqCodeBarreDataTable(ds.Tables("EtiqCodeBarre")))
            End If
            If (Not (ds.Tables("EtiqCodeBarreMouv")) Is Nothing) Then
                MyBase.Tables.Add(New EtiqCodeBarreMouvDataTable(ds.Tables("EtiqCodeBarreMouv")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableEtatTracaLot = CType(MyBase.Tables("EtatTracaLot"),EtatTracaLotDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEtatTracaLot) Is Nothing) Then
                Me.tableEtatTracaLot.InitVars
            End If
        End If
        Me.tableListeLots = CType(MyBase.Tables("ListeLots"),ListeLotsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableListeLots) Is Nothing) Then
                Me.tableListeLots.InitVars
            End If
        End If
        Me.tableEtatTracaMP = CType(MyBase.Tables("EtatTracaMP"),EtatTracaMPDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEtatTracaMP) Is Nothing) Then
                Me.tableEtatTracaMP.InitVars
            End If
        End If
        Me.tableEtatNonConf = CType(MyBase.Tables("EtatNonConf"),EtatNonConfDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEtatNonConf) Is Nothing) Then
                Me.tableEtatNonConf.InitVars
            End If
        End If
        Me.tableEtiqCodeBarre = CType(MyBase.Tables("EtiqCodeBarre"),EtiqCodeBarreDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEtiqCodeBarre) Is Nothing) Then
                Me.tableEtiqCodeBarre.InitVars
            End If
        End If
        Me.tableEtiqCodeBarreMouv = CType(MyBase.Tables("EtiqCodeBarreMouv"),EtiqCodeBarreMouvDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEtiqCodeBarreMouv) Is Nothing) Then
                Me.tableEtiqCodeBarreMouv.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "EtatsDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/EtatsDataset.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableEtatTracaLot = New EtatTracaLotDataTable
        MyBase.Tables.Add(Me.tableEtatTracaLot)
        Me.tableListeLots = New ListeLotsDataTable
        MyBase.Tables.Add(Me.tableListeLots)
        Me.tableEtatTracaMP = New EtatTracaMPDataTable
        MyBase.Tables.Add(Me.tableEtatTracaMP)
        Me.tableEtatNonConf = New EtatNonConfDataTable
        MyBase.Tables.Add(Me.tableEtatNonConf)
        Me.tableEtiqCodeBarre = New EtiqCodeBarreDataTable
        MyBase.Tables.Add(Me.tableEtiqCodeBarre)
        Me.tableEtiqCodeBarreMouv = New EtiqCodeBarreMouvDataTable
        MyBase.Tables.Add(Me.tableEtiqCodeBarreMouv)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEtatTracaLot() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeListeLots() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEtatTracaMP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEtatNonConf() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEtiqCodeBarre() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEtiqCodeBarreMouv() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As EtatsDataset = New EtatsDataset
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub EtatTracaLotRowChangeEventHandler(ByVal sender As Object, ByVal e As EtatTracaLotRowChangeEvent)
    
    Public Delegate Sub ListeLotsRowChangeEventHandler(ByVal sender As Object, ByVal e As ListeLotsRowChangeEvent)
    
    Public Delegate Sub EtatTracaMPRowChangeEventHandler(ByVal sender As Object, ByVal e As EtatTracaMPRowChangeEvent)
    
    Public Delegate Sub EtatNonConfRowChangeEventHandler(ByVal sender As Object, ByVal e As EtatNonConfRowChangeEvent)
    
    Public Delegate Sub EtiqCodeBarreRowChangeEventHandler(ByVal sender As Object, ByVal e As EtiqCodeBarreRowChangeEvent)
    
    Public Delegate Sub EtiqCodeBarreMouvRowChangeEventHandler(ByVal sender As Object, ByVal e As EtiqCodeBarreMouvRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EtatTracaLotDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnom As Global.System.Data.DataColumn
        
        Private columnnfacture As Global.System.Data.DataColumn
        
        Private columndatefacture As Global.System.Data.DataColumn
        
        Private columnnlot As Global.System.Data.DataColumn
        
        Private columncodeproduit As Global.System.Data.DataColumn
        
        Private columnlibelle As Global.System.Data.DataColumn
        
        Private columnunite1 As Global.System.Data.DataColumn
        
        Private columnlibunite1 As Global.System.Data.DataColumn
        
        Private columnunite2 As Global.System.Data.DataColumn
        
        Private columnlibunite2 As Global.System.Data.DataColumn
        
        Private columnndevis As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EtatTracaLot"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nfactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnfacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datefactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatefacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nlotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnlot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeproduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodeproduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnunite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libunite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibunite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnunite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libunite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibunite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ndevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnndevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EtatTracaLotRow
            Get
                Return CType(Me.Rows(index),EtatTracaLotRow)
            End Get
        End Property
        
        Public Event EtatTracaLotRowChanging As EtatTracaLotRowChangeEventHandler
        
        Public Event EtatTracaLotRowChanged As EtatTracaLotRowChangeEventHandler
        
        Public Event EtatTracaLotRowDeleting As EtatTracaLotRowChangeEventHandler
        
        Public Event EtatTracaLotRowDeleted As EtatTracaLotRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEtatTracaLotRow(ByVal row As EtatTracaLotRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEtatTracaLotRow(ByVal nom As String, ByVal nfacture As Decimal, ByVal datefacture As Date, ByVal nlot As String, ByVal codeproduit As String, ByVal libelle As String, ByVal unite1 As Decimal, ByVal libunite1 As String, ByVal unite2 As Decimal, ByVal libunite2 As String, ByVal ndevis As Decimal) As EtatTracaLotRow
            Dim rowEtatTracaLotRow As EtatTracaLotRow = CType(Me.NewRow,EtatTracaLotRow)
            Dim columnValuesArray() As Object = New Object() {nom, nfacture, datefacture, nlot, codeproduit, libelle, unite1, libunite1, unite2, libunite2, ndevis}
            rowEtatTracaLotRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEtatTracaLotRow)
            Return rowEtatTracaLotRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EtatTracaLotDataTable = CType(MyBase.Clone,EtatTracaLotDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EtatTracaLotDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnom = MyBase.Columns("nom")
            Me.columnnfacture = MyBase.Columns("nfacture")
            Me.columndatefacture = MyBase.Columns("datefacture")
            Me.columnnlot = MyBase.Columns("nlot")
            Me.columncodeproduit = MyBase.Columns("codeproduit")
            Me.columnlibelle = MyBase.Columns("libelle")
            Me.columnunite1 = MyBase.Columns("unite1")
            Me.columnlibunite1 = MyBase.Columns("libunite1")
            Me.columnunite2 = MyBase.Columns("unite2")
            Me.columnlibunite2 = MyBase.Columns("libunite2")
            Me.columnndevis = MyBase.Columns("ndevis")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnom = New Global.System.Data.DataColumn("nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnom)
            Me.columnnfacture = New Global.System.Data.DataColumn("nfacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnfacture)
            Me.columndatefacture = New Global.System.Data.DataColumn("datefacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatefacture)
            Me.columnnlot = New Global.System.Data.DataColumn("nlot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnlot)
            Me.columncodeproduit = New Global.System.Data.DataColumn("codeproduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodeproduit)
            Me.columnlibelle = New Global.System.Data.DataColumn("libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibelle)
            Me.columnunite1 = New Global.System.Data.DataColumn("unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunite1)
            Me.columnlibunite1 = New Global.System.Data.DataColumn("libunite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibunite1)
            Me.columnunite2 = New Global.System.Data.DataColumn("unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunite2)
            Me.columnlibunite2 = New Global.System.Data.DataColumn("libunite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibunite2)
            Me.columnndevis = New Global.System.Data.DataColumn("ndevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnndevis)
            Me.columnnom.MaxLength = 255
            Me.columnnlot.MaxLength = 50
            Me.columncodeproduit.MaxLength = 50
            Me.columnlibelle.MaxLength = 50
            Me.columnlibunite1.MaxLength = 50
            Me.columnlibunite2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEtatTracaLotRow() As EtatTracaLotRow
            Return CType(Me.NewRow,EtatTracaLotRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EtatTracaLotRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EtatTracaLotRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EtatTracaLotRowChangedEvent) Is Nothing) Then
                RaiseEvent EtatTracaLotRowChanged(Me, New EtatTracaLotRowChangeEvent(CType(e.Row,EtatTracaLotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EtatTracaLotRowChangingEvent) Is Nothing) Then
                RaiseEvent EtatTracaLotRowChanging(Me, New EtatTracaLotRowChangeEvent(CType(e.Row,EtatTracaLotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EtatTracaLotRowDeletedEvent) Is Nothing) Then
                RaiseEvent EtatTracaLotRowDeleted(Me, New EtatTracaLotRowChangeEvent(CType(e.Row,EtatTracaLotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EtatTracaLotRowDeletingEvent) Is Nothing) Then
                RaiseEvent EtatTracaLotRowDeleting(Me, New EtatTracaLotRowChangeEvent(CType(e.Row,EtatTracaLotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEtatTracaLotRow(ByVal row As EtatTracaLotRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EtatsDataset = New EtatsDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EtatTracaLotDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ListeLotsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnLot As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ListeLots"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ListeLotsRow
            Get
                Return CType(Me.Rows(index),ListeLotsRow)
            End Get
        End Property
        
        Public Event ListeLotsRowChanging As ListeLotsRowChangeEventHandler
        
        Public Event ListeLotsRowChanged As ListeLotsRowChangeEventHandler
        
        Public Event ListeLotsRowDeleting As ListeLotsRowChangeEventHandler
        
        Public Event ListeLotsRowDeleted As ListeLotsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddListeLotsRow(ByVal row As ListeLotsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddListeLotsRow(ByVal nLot As String) As ListeLotsRow
            Dim rowListeLotsRow As ListeLotsRow = CType(Me.NewRow,ListeLotsRow)
            Dim columnValuesArray() As Object = New Object() {nLot}
            rowListeLotsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowListeLotsRow)
            Return rowListeLotsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ListeLotsDataTable = CType(MyBase.Clone,ListeLotsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ListeLotsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnLot = MyBase.Columns("nLot")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnLot = New Global.System.Data.DataColumn("nLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLot)
            Me.columnnLot.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewListeLotsRow() As ListeLotsRow
            Return CType(Me.NewRow,ListeLotsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ListeLotsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ListeLotsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ListeLotsRowChangedEvent) Is Nothing) Then
                RaiseEvent ListeLotsRowChanged(Me, New ListeLotsRowChangeEvent(CType(e.Row,ListeLotsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ListeLotsRowChangingEvent) Is Nothing) Then
                RaiseEvent ListeLotsRowChanging(Me, New ListeLotsRowChangeEvent(CType(e.Row,ListeLotsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ListeLotsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ListeLotsRowDeleted(Me, New ListeLotsRowChangeEvent(CType(e.Row,ListeLotsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ListeLotsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ListeLotsRowDeleting(Me, New ListeLotsRowChangeEvent(CType(e.Row,ListeLotsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveListeLotsRow(ByVal row As ListeLotsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EtatsDataset = New EtatsDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ListeLotsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EtatTracaMPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnom As Global.System.Data.DataColumn
        
        Private columnnfacture As Global.System.Data.DataColumn
        
        Private columndatefacture As Global.System.Data.DataColumn
        
        Private columncodeproduit As Global.System.Data.DataColumn
        
        Private columnlibelle As Global.System.Data.DataColumn
        
        Private columnnlot As Global.System.Data.DataColumn
        
        Private columnunite1 As Global.System.Data.DataColumn
        
        Private columnlibunite1 As Global.System.Data.DataColumn
        
        Private columnunite2 As Global.System.Data.DataColumn
        
        Private columnlibunite2 As Global.System.Data.DataColumn
        
        Private columnndevis As Global.System.Data.DataColumn
        
        Private columnnentreprise As Global.System.Data.DataColumn
        
        Private columnnlotmp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EtatTracaMP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nfactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnfacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datefactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatefacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeproduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodeproduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nlotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnlot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnunite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libunite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibunite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnunite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libunite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibunite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ndevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnndevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nentrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnentreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nlotmpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnlotmp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EtatTracaMPRow
            Get
                Return CType(Me.Rows(index),EtatTracaMPRow)
            End Get
        End Property
        
        Public Event EtatTracaMPRowChanging As EtatTracaMPRowChangeEventHandler
        
        Public Event EtatTracaMPRowChanged As EtatTracaMPRowChangeEventHandler
        
        Public Event EtatTracaMPRowDeleting As EtatTracaMPRowChangeEventHandler
        
        Public Event EtatTracaMPRowDeleted As EtatTracaMPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEtatTracaMPRow(ByVal row As EtatTracaMPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEtatTracaMPRow(ByVal nom As String, ByVal nfacture As Decimal, ByVal datefacture As Date, ByVal codeproduit As String, ByVal libelle As String, ByVal nlot As String, ByVal unite1 As Decimal, ByVal libunite1 As String, ByVal unite2 As Decimal, ByVal libunite2 As String, ByVal ndevis As Decimal, ByVal nentreprise As Decimal, ByVal nlotmp As String) As EtatTracaMPRow
            Dim rowEtatTracaMPRow As EtatTracaMPRow = CType(Me.NewRow,EtatTracaMPRow)
            Dim columnValuesArray() As Object = New Object() {nom, nfacture, datefacture, codeproduit, libelle, nlot, unite1, libunite1, unite2, libunite2, ndevis, nentreprise, nlotmp}
            rowEtatTracaMPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEtatTracaMPRow)
            Return rowEtatTracaMPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EtatTracaMPDataTable = CType(MyBase.Clone,EtatTracaMPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EtatTracaMPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnom = MyBase.Columns("nom")
            Me.columnnfacture = MyBase.Columns("nfacture")
            Me.columndatefacture = MyBase.Columns("datefacture")
            Me.columncodeproduit = MyBase.Columns("codeproduit")
            Me.columnlibelle = MyBase.Columns("libelle")
            Me.columnnlot = MyBase.Columns("nlot")
            Me.columnunite1 = MyBase.Columns("unite1")
            Me.columnlibunite1 = MyBase.Columns("libunite1")
            Me.columnunite2 = MyBase.Columns("unite2")
            Me.columnlibunite2 = MyBase.Columns("libunite2")
            Me.columnndevis = MyBase.Columns("ndevis")
            Me.columnnentreprise = MyBase.Columns("nentreprise")
            Me.columnnlotmp = MyBase.Columns("nlotmp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnom = New Global.System.Data.DataColumn("nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnom)
            Me.columnnfacture = New Global.System.Data.DataColumn("nfacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnfacture)
            Me.columndatefacture = New Global.System.Data.DataColumn("datefacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatefacture)
            Me.columncodeproduit = New Global.System.Data.DataColumn("codeproduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodeproduit)
            Me.columnlibelle = New Global.System.Data.DataColumn("libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibelle)
            Me.columnnlot = New Global.System.Data.DataColumn("nlot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnlot)
            Me.columnunite1 = New Global.System.Data.DataColumn("unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunite1)
            Me.columnlibunite1 = New Global.System.Data.DataColumn("libunite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibunite1)
            Me.columnunite2 = New Global.System.Data.DataColumn("unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunite2)
            Me.columnlibunite2 = New Global.System.Data.DataColumn("libunite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibunite2)
            Me.columnndevis = New Global.System.Data.DataColumn("ndevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnndevis)
            Me.columnnentreprise = New Global.System.Data.DataColumn("nentreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnentreprise)
            Me.columnnlotmp = New Global.System.Data.DataColumn("nlotmp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnlotmp)
            Me.columnnom.MaxLength = 255
            Me.columncodeproduit.MaxLength = 50
            Me.columnlibelle.MaxLength = 50
            Me.columnnlot.MaxLength = 50
            Me.columnunite1.ReadOnly = true
            Me.columnlibunite1.MaxLength = 50
            Me.columnunite2.ReadOnly = true
            Me.columnlibunite2.MaxLength = 50
            Me.columnnlotmp.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEtatTracaMPRow() As EtatTracaMPRow
            Return CType(Me.NewRow,EtatTracaMPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EtatTracaMPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EtatTracaMPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EtatTracaMPRowChangedEvent) Is Nothing) Then
                RaiseEvent EtatTracaMPRowChanged(Me, New EtatTracaMPRowChangeEvent(CType(e.Row,EtatTracaMPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EtatTracaMPRowChangingEvent) Is Nothing) Then
                RaiseEvent EtatTracaMPRowChanging(Me, New EtatTracaMPRowChangeEvent(CType(e.Row,EtatTracaMPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EtatTracaMPRowDeletedEvent) Is Nothing) Then
                RaiseEvent EtatTracaMPRowDeleted(Me, New EtatTracaMPRowChangeEvent(CType(e.Row,EtatTracaMPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EtatTracaMPRowDeletingEvent) Is Nothing) Then
                RaiseEvent EtatTracaMPRowDeleting(Me, New EtatTracaMPRowChangeEvent(CType(e.Row,EtatTracaMPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEtatTracaMPRow(ByVal row As EtatTracaMPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EtatsDataset = New EtatsDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EtatTracaMPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EtatNonConfDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columndtLot As Global.System.Data.DataColumn
        
        Private columnnLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columngroupe As Global.System.Data.DataColumn
        
        Private columnlibelle As Global.System.Data.DataColumn
        
        Private columnResultat As Global.System.Data.DataColumn
        
        Private columnnresultatbareme As Global.System.Data.DataColumn
        
        Private columnactioncorrective As Global.System.Data.DataColumn
        
        Private columnActionCorrectiveEffectuee As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EtatNonConf"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dtLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property groupeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngroupe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResultatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResultat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nresultatbaremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnresultatbareme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property actioncorrectiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactioncorrective
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActionCorrectiveEffectueeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActionCorrectiveEffectuee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EtatNonConfRow
            Get
                Return CType(Me.Rows(index),EtatNonConfRow)
            End Get
        End Property
        
        Public Event EtatNonConfRowChanging As EtatNonConfRowChangeEventHandler
        
        Public Event EtatNonConfRowChanged As EtatNonConfRowChangeEventHandler
        
        Public Event EtatNonConfRowDeleting As EtatNonConfRowChangeEventHandler
        
        Public Event EtatNonConfRowDeleted As EtatNonConfRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEtatNonConfRow(ByVal row As EtatNonConfRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEtatNonConfRow(ByVal dtLot As Date, ByVal nLot As String, ByVal CodeProduit As String, ByVal groupe As String, ByVal libelle As String, ByVal Resultat As String, ByVal actioncorrective As String, ByVal ActionCorrectiveEffectuee As Boolean) As EtatNonConfRow
            Dim rowEtatNonConfRow As EtatNonConfRow = CType(Me.NewRow,EtatNonConfRow)
            Dim columnValuesArray() As Object = New Object() {dtLot, nLot, CodeProduit, groupe, libelle, Resultat, Nothing, actioncorrective, ActionCorrectiveEffectuee}
            rowEtatNonConfRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEtatNonConfRow)
            Return rowEtatNonConfRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EtatNonConfDataTable = CType(MyBase.Clone,EtatNonConfDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EtatNonConfDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndtLot = MyBase.Columns("dtLot")
            Me.columnnLot = MyBase.Columns("nLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columngroupe = MyBase.Columns("groupe")
            Me.columnlibelle = MyBase.Columns("libelle")
            Me.columnResultat = MyBase.Columns("Resultat")
            Me.columnnresultatbareme = MyBase.Columns("nresultatbareme")
            Me.columnactioncorrective = MyBase.Columns("actioncorrective")
            Me.columnActionCorrectiveEffectuee = MyBase.Columns("ActionCorrectiveEffectuee")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndtLot = New Global.System.Data.DataColumn("dtLot", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtLot)
            Me.columnnLot = New Global.System.Data.DataColumn("nLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columngroupe = New Global.System.Data.DataColumn("groupe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroupe)
            Me.columnlibelle = New Global.System.Data.DataColumn("libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibelle)
            Me.columnResultat = New Global.System.Data.DataColumn("Resultat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResultat)
            Me.columnnresultatbareme = New Global.System.Data.DataColumn("nresultatbareme", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnresultatbareme)
            Me.columnactioncorrective = New Global.System.Data.DataColumn("actioncorrective", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactioncorrective)
            Me.columnActionCorrectiveEffectuee = New Global.System.Data.DataColumn("ActionCorrectiveEffectuee", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActionCorrectiveEffectuee)
            Me.columnnLot.AllowDBNull = false
            Me.columnnLot.MaxLength = 255
            Me.columnCodeProduit.AllowDBNull = false
            Me.columnCodeProduit.MaxLength = 255
            Me.columngroupe.MaxLength = 100
            Me.columnlibelle.MaxLength = 255
            Me.columnResultat.MaxLength = 255
            Me.columnnresultatbareme.AutoIncrement = true
            Me.columnnresultatbareme.AllowDBNull = false
            Me.columnnresultatbareme.ReadOnly = true
            Me.columnactioncorrective.MaxLength = 1073741823
            Me.columnActionCorrectiveEffectuee.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEtatNonConfRow() As EtatNonConfRow
            Return CType(Me.NewRow,EtatNonConfRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EtatNonConfRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EtatNonConfRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EtatNonConfRowChangedEvent) Is Nothing) Then
                RaiseEvent EtatNonConfRowChanged(Me, New EtatNonConfRowChangeEvent(CType(e.Row,EtatNonConfRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EtatNonConfRowChangingEvent) Is Nothing) Then
                RaiseEvent EtatNonConfRowChanging(Me, New EtatNonConfRowChangeEvent(CType(e.Row,EtatNonConfRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EtatNonConfRowDeletedEvent) Is Nothing) Then
                RaiseEvent EtatNonConfRowDeleted(Me, New EtatNonConfRowChangeEvent(CType(e.Row,EtatNonConfRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EtatNonConfRowDeletingEvent) Is Nothing) Then
                RaiseEvent EtatNonConfRowDeleting(Me, New EtatNonConfRowChangeEvent(CType(e.Row,EtatNonConfRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEtatNonConfRow(ByVal row As EtatNonConfRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EtatsDataset = New EtatsDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EtatNonConfDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EtiqCodeBarreDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnomFournisseur As Global.System.Data.DataColumn
        
        Private columnnfacture As Global.System.Data.DataColumn
        
        Private columndatefacture As Global.System.Data.DataColumn
        
        Private columncodeproduit As Global.System.Data.DataColumn
        
        Private columnlibelle As Global.System.Data.DataColumn
        
        Private columnnlot As Global.System.Data.DataColumn
        
        Private columnlibunite1 As Global.System.Data.DataColumn
        
        Private columnunite1 As Global.System.Data.DataColumn
        
        Private columnlibunite2 As Global.System.Data.DataColumn
        
        Private columnunite2 As Global.System.Data.DataColumn
        
        Private columnCodeBarre As Global.System.Data.DataColumn
        
        Private columnFormattedCodeBarre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EtiqCodeBarre"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomFournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nfactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnfacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datefactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatefacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeproduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodeproduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nlotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnlot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libunite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibunite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnunite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libunite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibunite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnunite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeBarreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeBarre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormattedCodeBarreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormattedCodeBarre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EtiqCodeBarreRow
            Get
                Return CType(Me.Rows(index),EtiqCodeBarreRow)
            End Get
        End Property
        
        Public Event EtiqCodeBarreRowChanging As EtiqCodeBarreRowChangeEventHandler
        
        Public Event EtiqCodeBarreRowChanged As EtiqCodeBarreRowChangeEventHandler
        
        Public Event EtiqCodeBarreRowDeleting As EtiqCodeBarreRowChangeEventHandler
        
        Public Event EtiqCodeBarreRowDeleted As EtiqCodeBarreRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEtiqCodeBarreRow(ByVal row As EtiqCodeBarreRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEtiqCodeBarreRow(ByVal nomFournisseur As String, ByVal nfacture As Decimal, ByVal datefacture As Date, ByVal codeproduit As String, ByVal libelle As String, ByVal nlot As String, ByVal libunite1 As String, ByVal unite1 As Decimal, ByVal libunite2 As String, ByVal unite2 As Decimal, ByVal CodeBarre As String, ByVal FormattedCodeBarre As String) As EtiqCodeBarreRow
            Dim rowEtiqCodeBarreRow As EtiqCodeBarreRow = CType(Me.NewRow,EtiqCodeBarreRow)
            Dim columnValuesArray() As Object = New Object() {nomFournisseur, nfacture, datefacture, codeproduit, libelle, nlot, libunite1, unite1, libunite2, unite2, CodeBarre, FormattedCodeBarre}
            rowEtiqCodeBarreRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEtiqCodeBarreRow)
            Return rowEtiqCodeBarreRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EtiqCodeBarreDataTable = CType(MyBase.Clone,EtiqCodeBarreDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EtiqCodeBarreDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnomFournisseur = MyBase.Columns("nomFournisseur")
            Me.columnnfacture = MyBase.Columns("nfacture")
            Me.columndatefacture = MyBase.Columns("datefacture")
            Me.columncodeproduit = MyBase.Columns("codeproduit")
            Me.columnlibelle = MyBase.Columns("libelle")
            Me.columnnlot = MyBase.Columns("nlot")
            Me.columnlibunite1 = MyBase.Columns("libunite1")
            Me.columnunite1 = MyBase.Columns("unite1")
            Me.columnlibunite2 = MyBase.Columns("libunite2")
            Me.columnunite2 = MyBase.Columns("unite2")
            Me.columnCodeBarre = MyBase.Columns("CodeBarre")
            Me.columnFormattedCodeBarre = MyBase.Columns("FormattedCodeBarre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnomFournisseur = New Global.System.Data.DataColumn("nomFournisseur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomFournisseur)
            Me.columnnfacture = New Global.System.Data.DataColumn("nfacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnfacture)
            Me.columndatefacture = New Global.System.Data.DataColumn("datefacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatefacture)
            Me.columncodeproduit = New Global.System.Data.DataColumn("codeproduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodeproduit)
            Me.columnlibelle = New Global.System.Data.DataColumn("libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibelle)
            Me.columnnlot = New Global.System.Data.DataColumn("nlot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnlot)
            Me.columnlibunite1 = New Global.System.Data.DataColumn("libunite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibunite1)
            Me.columnunite1 = New Global.System.Data.DataColumn("unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunite1)
            Me.columnlibunite2 = New Global.System.Data.DataColumn("libunite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibunite2)
            Me.columnunite2 = New Global.System.Data.DataColumn("unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunite2)
            Me.columnCodeBarre = New Global.System.Data.DataColumn("CodeBarre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeBarre)
            Me.columnFormattedCodeBarre = New Global.System.Data.DataColumn("FormattedCodeBarre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormattedCodeBarre)
            Me.columnnomFournisseur.Caption = "nom"
            Me.columnnomFournisseur.MaxLength = 255
            Me.columncodeproduit.MaxLength = 50
            Me.columnlibelle.MaxLength = 255
            Me.columnnlot.MaxLength = 50
            Me.columnlibunite1.MaxLength = 50
            Me.columnlibunite2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEtiqCodeBarreRow() As EtiqCodeBarreRow
            Return CType(Me.NewRow,EtiqCodeBarreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EtiqCodeBarreRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EtiqCodeBarreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EtiqCodeBarreRowChangedEvent) Is Nothing) Then
                RaiseEvent EtiqCodeBarreRowChanged(Me, New EtiqCodeBarreRowChangeEvent(CType(e.Row,EtiqCodeBarreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EtiqCodeBarreRowChangingEvent) Is Nothing) Then
                RaiseEvent EtiqCodeBarreRowChanging(Me, New EtiqCodeBarreRowChangeEvent(CType(e.Row,EtiqCodeBarreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EtiqCodeBarreRowDeletedEvent) Is Nothing) Then
                RaiseEvent EtiqCodeBarreRowDeleted(Me, New EtiqCodeBarreRowChangeEvent(CType(e.Row,EtiqCodeBarreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EtiqCodeBarreRowDeletingEvent) Is Nothing) Then
                RaiseEvent EtiqCodeBarreRowDeleting(Me, New EtiqCodeBarreRowChangeEvent(CType(e.Row,EtiqCodeBarreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEtiqCodeBarreRow(ByVal row As EtiqCodeBarreRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EtatsDataset = New EtatsDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EtiqCodeBarreDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EtiqCodeBarreMouvDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnPiece As Global.System.Data.DataColumn
        
        Private columnDateMouvement As Global.System.Data.DataColumn
        
        Private columncodeproduit As Global.System.Data.DataColumn
        
        Private columnlibelle As Global.System.Data.DataColumn
        
        Private columnnlot As Global.System.Data.DataColumn
        
        Private columnlibunite1 As Global.System.Data.DataColumn
        
        Private columnunite1 As Global.System.Data.DataColumn
        
        Private columnlibunite2 As Global.System.Data.DataColumn
        
        Private columnunite2 As Global.System.Data.DataColumn
        
        Private columnCodeBarre As Global.System.Data.DataColumn
        
        Private columnFormattedCodeBarre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EtiqCodeBarreMouv"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPieceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPiece
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateMouvementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateMouvement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeproduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodeproduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nlotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnlot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libunite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibunite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnunite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libunite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlibunite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnunite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeBarreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeBarre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormattedCodeBarreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormattedCodeBarre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EtiqCodeBarreMouvRow
            Get
                Return CType(Me.Rows(index),EtiqCodeBarreMouvRow)
            End Get
        End Property
        
        Public Event EtiqCodeBarreMouvRowChanging As EtiqCodeBarreMouvRowChangeEventHandler
        
        Public Event EtiqCodeBarreMouvRowChanged As EtiqCodeBarreMouvRowChangeEventHandler
        
        Public Event EtiqCodeBarreMouvRowDeleting As EtiqCodeBarreMouvRowChangeEventHandler
        
        Public Event EtiqCodeBarreMouvRowDeleted As EtiqCodeBarreMouvRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEtiqCodeBarreMouvRow(ByVal row As EtiqCodeBarreMouvRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEtiqCodeBarreMouvRow(ByVal nPiece As String, ByVal DateMouvement As Date, ByVal codeproduit As String, ByVal libelle As String, ByVal nlot As String, ByVal libunite1 As String, ByVal unite1 As Decimal, ByVal libunite2 As String, ByVal unite2 As Decimal, ByVal CodeBarre As String, ByVal FormattedCodeBarre As String) As EtiqCodeBarreMouvRow
            Dim rowEtiqCodeBarreMouvRow As EtiqCodeBarreMouvRow = CType(Me.NewRow,EtiqCodeBarreMouvRow)
            Dim columnValuesArray() As Object = New Object() {nPiece, DateMouvement, codeproduit, libelle, nlot, libunite1, unite1, libunite2, unite2, CodeBarre, FormattedCodeBarre}
            rowEtiqCodeBarreMouvRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEtiqCodeBarreMouvRow)
            Return rowEtiqCodeBarreMouvRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EtiqCodeBarreMouvDataTable = CType(MyBase.Clone,EtiqCodeBarreMouvDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EtiqCodeBarreMouvDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnPiece = MyBase.Columns("nPiece")
            Me.columnDateMouvement = MyBase.Columns("DateMouvement")
            Me.columncodeproduit = MyBase.Columns("codeproduit")
            Me.columnlibelle = MyBase.Columns("libelle")
            Me.columnnlot = MyBase.Columns("nlot")
            Me.columnlibunite1 = MyBase.Columns("libunite1")
            Me.columnunite1 = MyBase.Columns("unite1")
            Me.columnlibunite2 = MyBase.Columns("libunite2")
            Me.columnunite2 = MyBase.Columns("unite2")
            Me.columnCodeBarre = MyBase.Columns("CodeBarre")
            Me.columnFormattedCodeBarre = MyBase.Columns("FormattedCodeBarre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnPiece = New Global.System.Data.DataColumn("nPiece", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPiece)
            Me.columnDateMouvement = New Global.System.Data.DataColumn("DateMouvement", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateMouvement)
            Me.columncodeproduit = New Global.System.Data.DataColumn("codeproduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodeproduit)
            Me.columnlibelle = New Global.System.Data.DataColumn("libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibelle)
            Me.columnnlot = New Global.System.Data.DataColumn("nlot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnlot)
            Me.columnlibunite1 = New Global.System.Data.DataColumn("libunite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibunite1)
            Me.columnunite1 = New Global.System.Data.DataColumn("unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunite1)
            Me.columnlibunite2 = New Global.System.Data.DataColumn("libunite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlibunite2)
            Me.columnunite2 = New Global.System.Data.DataColumn("unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunite2)
            Me.columnCodeBarre = New Global.System.Data.DataColumn("CodeBarre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeBarre)
            Me.columnFormattedCodeBarre = New Global.System.Data.DataColumn("FormattedCodeBarre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormattedCodeBarre)
            Me.columnDateMouvement.Caption = "datefacture"
            Me.columncodeproduit.MaxLength = 50
            Me.columnlibelle.MaxLength = 255
            Me.columnnlot.MaxLength = 50
            Me.columnlibunite1.MaxLength = 50
            Me.columnlibunite2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEtiqCodeBarreMouvRow() As EtiqCodeBarreMouvRow
            Return CType(Me.NewRow,EtiqCodeBarreMouvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EtiqCodeBarreMouvRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EtiqCodeBarreMouvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EtiqCodeBarreMouvRowChangedEvent) Is Nothing) Then
                RaiseEvent EtiqCodeBarreMouvRowChanged(Me, New EtiqCodeBarreMouvRowChangeEvent(CType(e.Row,EtiqCodeBarreMouvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EtiqCodeBarreMouvRowChangingEvent) Is Nothing) Then
                RaiseEvent EtiqCodeBarreMouvRowChanging(Me, New EtiqCodeBarreMouvRowChangeEvent(CType(e.Row,EtiqCodeBarreMouvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EtiqCodeBarreMouvRowDeletedEvent) Is Nothing) Then
                RaiseEvent EtiqCodeBarreMouvRowDeleted(Me, New EtiqCodeBarreMouvRowChangeEvent(CType(e.Row,EtiqCodeBarreMouvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EtiqCodeBarreMouvRowDeletingEvent) Is Nothing) Then
                RaiseEvent EtiqCodeBarreMouvRowDeleting(Me, New EtiqCodeBarreMouvRowChangeEvent(CType(e.Row,EtiqCodeBarreMouvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEtiqCodeBarreMouvRow(ByVal row As EtiqCodeBarreMouvRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EtatsDataset = New EtatsDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EtiqCodeBarreMouvDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EtatTracaLotRow
        Inherits Global.System.Data.DataRow
        
        Private tableEtatTracaLot As EtatTracaLotDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEtatTracaLot = CType(Me.Table,EtatTracaLotDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.nomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nom' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.nomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nfacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.nfactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nfacture' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.nfactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datefacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.datefactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'datefacture' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.datefactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nlot() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.nlotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nlot' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.nlotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codeproduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.codeproduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'codeproduit' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.codeproduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.libelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libelle' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.libelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unite1' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libunite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.libunite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libunite1' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.libunite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unite2' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libunite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.libunite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libunite2' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.libunite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ndevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaLot.ndevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ndevis' in table 'EtatTracaLot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaLot.ndevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.nomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomNull()
            Me(Me.tableEtatTracaLot.nomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnfactureNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.nfactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnfactureNull()
            Me(Me.tableEtatTracaLot.nfactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdatefactureNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.datefactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdatefactureNull()
            Me(Me.tableEtatTracaLot.datefactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnlotNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.nlotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnlotNull()
            Me(Me.tableEtatTracaLot.nlotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeproduitNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.codeproduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeproduitNull()
            Me(Me.tableEtatTracaLot.codeproduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslibelleNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.libelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlibelleNull()
            Me(Me.tableEtatTracaLot.libelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isunite1Null() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setunite1Null()
            Me(Me.tableEtatTracaLot.unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islibunite1Null() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.libunite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlibunite1Null()
            Me(Me.tableEtatTracaLot.libunite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isunite2Null() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setunite2Null()
            Me(Me.tableEtatTracaLot.unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islibunite2Null() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.libunite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlibunite2Null()
            Me(Me.tableEtatTracaLot.libunite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsndevisNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaLot.ndevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetndevisNull()
            Me(Me.tableEtatTracaLot.ndevisColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ListeLotsRow
        Inherits Global.System.Data.DataRow
        
        Private tableListeLots As ListeLotsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableListeLots = CType(Me.Table,ListeLotsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableListeLots.nLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLot' in table 'ListeLots' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListeLots.nLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLotNull() As Boolean
            Return Me.IsNull(Me.tableListeLots.nLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLotNull()
            Me(Me.tableListeLots.nLotColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EtatTracaMPRow
        Inherits Global.System.Data.DataRow
        
        Private tableEtatTracaMP As EtatTracaMPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEtatTracaMP = CType(Me.Table,EtatTracaMPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.nomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nom' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.nomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nfacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.nfactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nfacture' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.nfactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datefacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.datefactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'datefacture' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.datefactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codeproduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.codeproduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'codeproduit' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.codeproduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.libelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libelle' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.libelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nlot() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.nlotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nlot' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.nlotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unite1' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libunite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.libunite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libunite1' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.libunite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unite2' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libunite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.libunite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libunite2' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.libunite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ndevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.ndevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ndevis' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.ndevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nentreprise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.nentrepriseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nentreprise' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.nentrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nlotmp() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatTracaMP.nlotmpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nlotmp' in table 'EtatTracaMP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatTracaMP.nlotmpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.nomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomNull()
            Me(Me.tableEtatTracaMP.nomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnfactureNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.nfactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnfactureNull()
            Me(Me.tableEtatTracaMP.nfactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdatefactureNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.datefactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdatefactureNull()
            Me(Me.tableEtatTracaMP.datefactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeproduitNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.codeproduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeproduitNull()
            Me(Me.tableEtatTracaMP.codeproduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslibelleNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.libelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlibelleNull()
            Me(Me.tableEtatTracaMP.libelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnlotNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.nlotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnlotNull()
            Me(Me.tableEtatTracaMP.nlotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isunite1Null() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setunite1Null()
            Me(Me.tableEtatTracaMP.unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islibunite1Null() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.libunite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlibunite1Null()
            Me(Me.tableEtatTracaMP.libunite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isunite2Null() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setunite2Null()
            Me(Me.tableEtatTracaMP.unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islibunite2Null() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.libunite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlibunite2Null()
            Me(Me.tableEtatTracaMP.libunite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsndevisNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.ndevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetndevisNull()
            Me(Me.tableEtatTracaMP.ndevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnentrepriseNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.nentrepriseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnentrepriseNull()
            Me(Me.tableEtatTracaMP.nentrepriseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnlotmpNull() As Boolean
            Return Me.IsNull(Me.tableEtatTracaMP.nlotmpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnlotmpNull()
            Me(Me.tableEtatTracaMP.nlotmpColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EtatNonConfRow
        Inherits Global.System.Data.DataRow
        
        Private tableEtatNonConf As EtatNonConfDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEtatNonConf = CType(Me.Table,EtatNonConfDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtLot() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEtatNonConf.dtLotColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dtLot' in table 'EtatNonConf' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatNonConf.dtLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLot() As String
            Get
                Return CType(Me(Me.tableEtatNonConf.nLotColumn),String)
            End Get
            Set
                Me(Me.tableEtatNonConf.nLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Return CType(Me(Me.tableEtatNonConf.CodeProduitColumn),String)
            End Get
            Set
                Me(Me.tableEtatNonConf.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property groupe() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatNonConf.groupeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'groupe' in table 'EtatNonConf' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatNonConf.groupeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatNonConf.libelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libelle' in table 'EtatNonConf' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatNonConf.libelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Resultat() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatNonConf.ResultatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Resultat' in table 'EtatNonConf' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatNonConf.ResultatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nresultatbareme() As Integer
            Get
                Return CType(Me(Me.tableEtatNonConf.nresultatbaremeColumn),Integer)
            End Get
            Set
                Me(Me.tableEtatNonConf.nresultatbaremeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property actioncorrective() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatNonConf.actioncorrectiveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'actioncorrective' in table 'EtatNonConf' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatNonConf.actioncorrectiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActionCorrectiveEffectuee() As Boolean
            Get
                Return CType(Me(Me.tableEtatNonConf.ActionCorrectiveEffectueeColumn),Boolean)
            End Get
            Set
                Me(Me.tableEtatNonConf.ActionCorrectiveEffectueeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdtLotNull() As Boolean
            Return Me.IsNull(Me.tableEtatNonConf.dtLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdtLotNull()
            Me(Me.tableEtatNonConf.dtLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgroupeNull() As Boolean
            Return Me.IsNull(Me.tableEtatNonConf.groupeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgroupeNull()
            Me(Me.tableEtatNonConf.groupeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslibelleNull() As Boolean
            Return Me.IsNull(Me.tableEtatNonConf.libelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlibelleNull()
            Me(Me.tableEtatNonConf.libelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResultatNull() As Boolean
            Return Me.IsNull(Me.tableEtatNonConf.ResultatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResultatNull()
            Me(Me.tableEtatNonConf.ResultatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsactioncorrectiveNull() As Boolean
            Return Me.IsNull(Me.tableEtatNonConf.actioncorrectiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetactioncorrectiveNull()
            Me(Me.tableEtatNonConf.actioncorrectiveColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EtiqCodeBarreRow
        Inherits Global.System.Data.DataRow
        
        Private tableEtiqCodeBarre As EtiqCodeBarreDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEtiqCodeBarre = CType(Me.Table,EtiqCodeBarreDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomFournisseur() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.nomFournisseurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nomFournisseur' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.nomFournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nfacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.nfactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nfacture' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.nfactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datefacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.datefactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'datefacture' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.datefactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codeproduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.codeproduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'codeproduit' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.codeproduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.libelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libelle' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.libelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nlot() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.nlotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nlot' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.nlotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libunite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.libunite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libunite1' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.libunite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unite1' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libunite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.libunite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libunite2' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.libunite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unite2' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeBarre() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.CodeBarreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeBarre' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.CodeBarreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormattedCodeBarre() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarre.FormattedCodeBarreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormattedCodeBarre' in table 'EtiqCodeBarre' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarre.FormattedCodeBarreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.nomFournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomFournisseurNull()
            Me(Me.tableEtiqCodeBarre.nomFournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnfactureNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.nfactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnfactureNull()
            Me(Me.tableEtiqCodeBarre.nfactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdatefactureNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.datefactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdatefactureNull()
            Me(Me.tableEtiqCodeBarre.datefactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeproduitNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.codeproduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeproduitNull()
            Me(Me.tableEtiqCodeBarre.codeproduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslibelleNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.libelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlibelleNull()
            Me(Me.tableEtiqCodeBarre.libelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnlotNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.nlotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnlotNull()
            Me(Me.tableEtiqCodeBarre.nlotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islibunite1Null() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.libunite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlibunite1Null()
            Me(Me.tableEtiqCodeBarre.libunite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isunite1Null() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setunite1Null()
            Me(Me.tableEtiqCodeBarre.unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islibunite2Null() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.libunite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlibunite2Null()
            Me(Me.tableEtiqCodeBarre.libunite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isunite2Null() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setunite2Null()
            Me(Me.tableEtiqCodeBarre.unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeBarreNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.CodeBarreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeBarreNull()
            Me(Me.tableEtiqCodeBarre.CodeBarreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormattedCodeBarreNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarre.FormattedCodeBarreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormattedCodeBarreNull()
            Me(Me.tableEtiqCodeBarre.FormattedCodeBarreColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EtiqCodeBarreMouvRow
        Inherits Global.System.Data.DataRow
        
        Private tableEtiqCodeBarreMouv As EtiqCodeBarreMouvDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEtiqCodeBarreMouv = CType(Me.Table,EtiqCodeBarreMouvDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPiece() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.nPieceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPiece' in table 'EtiqCodeBarreMouv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.nPieceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateMouvement() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.DateMouvementColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateMouvement' in table 'EtiqCodeBarreMouv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.DateMouvementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codeproduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.codeproduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'codeproduit' in table 'EtiqCodeBarreMouv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.codeproduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.libelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libelle' in table 'EtiqCodeBarreMouv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.libelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nlot() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.nlotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nlot' in table 'EtiqCodeBarreMouv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.nlotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libunite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.libunite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libunite1' in table 'EtiqCodeBarreMouv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.libunite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unite1' in table 'EtiqCodeBarreMouv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property libunite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.libunite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'libunite2' in table 'EtiqCodeBarreMouv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.libunite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unite2' in table 'EtiqCodeBarreMouv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeBarre() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.CodeBarreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeBarre' in table 'EtiqCodeBarreMouv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.CodeBarreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormattedCodeBarre() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtiqCodeBarreMouv.FormattedCodeBarreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormattedCodeBarre' in table 'EtiqCodeBarreMouv' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEtiqCodeBarreMouv.FormattedCodeBarreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPieceNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.nPieceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPieceNull()
            Me(Me.tableEtiqCodeBarreMouv.nPieceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateMouvementNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.DateMouvementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateMouvementNull()
            Me(Me.tableEtiqCodeBarreMouv.DateMouvementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeproduitNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.codeproduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeproduitNull()
            Me(Me.tableEtiqCodeBarreMouv.codeproduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslibelleNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.libelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlibelleNull()
            Me(Me.tableEtiqCodeBarreMouv.libelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnlotNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.nlotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnlotNull()
            Me(Me.tableEtiqCodeBarreMouv.nlotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islibunite1Null() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.libunite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlibunite1Null()
            Me(Me.tableEtiqCodeBarreMouv.libunite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isunite1Null() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setunite1Null()
            Me(Me.tableEtiqCodeBarreMouv.unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islibunite2Null() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.libunite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlibunite2Null()
            Me(Me.tableEtiqCodeBarreMouv.libunite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isunite2Null() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setunite2Null()
            Me(Me.tableEtiqCodeBarreMouv.unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeBarreNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.CodeBarreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeBarreNull()
            Me(Me.tableEtiqCodeBarreMouv.CodeBarreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormattedCodeBarreNull() As Boolean
            Return Me.IsNull(Me.tableEtiqCodeBarreMouv.FormattedCodeBarreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormattedCodeBarreNull()
            Me(Me.tableEtiqCodeBarreMouv.FormattedCodeBarreColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EtatTracaLotRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EtatTracaLotRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EtatTracaLotRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EtatTracaLotRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ListeLotsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ListeLotsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ListeLotsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ListeLotsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EtatTracaMPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EtatTracaMPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EtatTracaMPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EtatTracaMPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EtatNonConfRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EtatNonConfRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EtatNonConfRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EtatNonConfRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EtiqCodeBarreRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EtiqCodeBarreRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EtiqCodeBarreRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EtiqCodeBarreRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EtiqCodeBarreMouvRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EtiqCodeBarreMouvRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EtiqCodeBarreMouvRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EtiqCodeBarreMouvRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace EtatsDatasetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EtatTracaLotTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EtatTracaLot"
            tableMapping.ColumnMappings.Add("nom", "nom")
            tableMapping.ColumnMappings.Add("nfacture", "nfacture")
            tableMapping.ColumnMappings.Add("datefacture", "datefacture")
            tableMapping.ColumnMappings.Add("nlot", "nlot")
            tableMapping.ColumnMappings.Add("codeproduit", "codeproduit")
            tableMapping.ColumnMappings.Add("libelle", "libelle")
            tableMapping.ColumnMappings.Add("unite1", "unite1")
            tableMapping.ColumnMappings.Add("libunite1", "libunite1")
            tableMapping.ColumnMappings.Add("unite2", "unite2")
            tableMapping.ColumnMappings.Add("libunite2", "libunite2")
            tableMapping.ColumnMappings.Add("ndevis", "ndevis")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.ControleTracabilite.My.MySettings.Default.ConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.EtatTracaLot"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLot", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As EtatsDataset.EtatTracaLotDataTable, ByVal nLot As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (nLot Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(nLot,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal nLot As String) As EtatsDataset.EtatTracaLotDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (nLot Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(nLot,String)
            End If
            Dim dataTable As EtatsDataset.EtatTracaLotDataTable = New EtatsDataset.EtatTracaLotDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ListeLotsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ListeLots"
            tableMapping.ColumnMappings.Add("nLot", "nLot")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.ControleTracabilite.My.MySettings.Default.ConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select distinct nLot from Mouvement_Detail Where Unite1>0"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As EtatsDataset.ListeLotsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As EtatsDataset.ListeLotsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As EtatsDataset.ListeLotsDataTable = New EtatsDataset.ListeLotsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EtatTracaMPTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EtatTracaMP"
            tableMapping.ColumnMappings.Add("nom", "nom")
            tableMapping.ColumnMappings.Add("nfacture", "nfacture")
            tableMapping.ColumnMappings.Add("datefacture", "datefacture")
            tableMapping.ColumnMappings.Add("codeproduit", "codeproduit")
            tableMapping.ColumnMappings.Add("libelle", "libelle")
            tableMapping.ColumnMappings.Add("nlot", "nlot")
            tableMapping.ColumnMappings.Add("unite1", "unite1")
            tableMapping.ColumnMappings.Add("libunite1", "libunite1")
            tableMapping.ColumnMappings.Add("unite2", "unite2")
            tableMapping.ColumnMappings.Add("libunite2", "libunite2")
            tableMapping.ColumnMappings.Add("ndevis", "ndevis")
            tableMapping.ColumnMappings.Add("nentreprise", "nentreprise")
            tableMapping.ColumnMappings.Add("nlotmp", "nlotmp")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.ControleTracabilite.My.MySettings.Default.ConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.EtatTracaMP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codeProduit", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As EtatsDataset.EtatTracaMPDataTable, ByVal codeProduit As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codeProduit Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codeProduit,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codeProduit As String) As EtatsDataset.EtatTracaMPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codeProduit Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codeProduit,String)
            End If
            Dim dataTable As EtatsDataset.EtatTracaMPDataTable = New EtatsDataset.EtatTracaMPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EtatNonConfTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EtatNonConf"
            tableMapping.ColumnMappings.Add("dtLot", "dtLot")
            tableMapping.ColumnMappings.Add("nLot", "nLot")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("groupe", "groupe")
            tableMapping.ColumnMappings.Add("libelle", "libelle")
            tableMapping.ColumnMappings.Add("Resultat", "Resultat")
            tableMapping.ColumnMappings.Add("nresultatbareme", "nresultatbareme")
            tableMapping.ColumnMappings.Add("actioncorrective", "actioncorrective")
            tableMapping.ColumnMappings.Add("ActionCorrectiveEffectuee", "ActionCorrectiveEffectuee")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.ControleTracabilite.My.MySettings.Default.ConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.EtatNonConf"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtDeb", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtFin", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As EtatsDataset.EtatNonConfDataTable, ByVal dtDeb As Global.System.Nullable(Of Date), ByVal dtFin As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (dtDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dtFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(dtFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal dtDeb As Global.System.Nullable(Of Date), ByVal dtFin As Global.System.Nullable(Of Date)) As EtatsDataset.EtatNonConfDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (dtDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dtFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(dtFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As EtatsDataset.EtatNonConfDataTable = New EtatsDataset.EtatNonConfDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
