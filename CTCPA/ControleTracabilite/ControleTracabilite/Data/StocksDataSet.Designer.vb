'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5477
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("StocksDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class StocksDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableLotsProduits As LotsProduitsDataTable
    
    Private tableInventaire As InventaireDataTable
    
    Private tableEtatStock As EtatStockDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.ExcludeSchema) Then
                Me.InitExpressions
            End If
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("LotsProduits")) Is Nothing) Then
                MyBase.Tables.Add(New LotsProduitsDataTable(ds.Tables("LotsProduits")))
            End If
            If (Not (ds.Tables("Inventaire")) Is Nothing) Then
                MyBase.Tables.Add(New InventaireDataTable(ds.Tables("Inventaire")))
            End If
            If (Not (ds.Tables("EtatStock")) Is Nothing) Then
                MyBase.Tables.Add(New EtatStockDataTable(ds.Tables("EtatStock")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LotsProduits() As LotsProduitsDataTable
        Get
            Return Me.tableLotsProduits
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inventaire() As InventaireDataTable
        Get
            Return Me.tableInventaire
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EtatStock() As EtatStockDataTable
        Get
            Return Me.tableEtatStock
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As StocksDataSet = CType(MyBase.Clone,StocksDataSet)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("LotsProduits")) Is Nothing) Then
                MyBase.Tables.Add(New LotsProduitsDataTable(ds.Tables("LotsProduits")))
            End If
            If (Not (ds.Tables("Inventaire")) Is Nothing) Then
                MyBase.Tables.Add(New InventaireDataTable(ds.Tables("Inventaire")))
            End If
            If (Not (ds.Tables("EtatStock")) Is Nothing) Then
                MyBase.Tables.Add(New EtatStockDataTable(ds.Tables("EtatStock")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableLotsProduits = CType(MyBase.Tables("LotsProduits"),LotsProduitsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLotsProduits) Is Nothing) Then
                Me.tableLotsProduits.InitVars
            End If
        End If
        Me.tableInventaire = CType(MyBase.Tables("Inventaire"),InventaireDataTable)
        If (initTable = true) Then
            If (Not (Me.tableInventaire) Is Nothing) Then
                Me.tableInventaire.InitVars
            End If
        End If
        Me.tableEtatStock = CType(MyBase.Tables("EtatStock"),EtatStockDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEtatStock) Is Nothing) Then
                Me.tableEtatStock.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "StocksDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/StocksDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableLotsProduits = New LotsProduitsDataTable
        MyBase.Tables.Add(Me.tableLotsProduits)
        Me.tableInventaire = New InventaireDataTable(false)
        MyBase.Tables.Add(Me.tableInventaire)
        Me.tableEtatStock = New EtatStockDataTable(false)
        MyBase.Tables.Add(Me.tableEtatStock)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLotsProduits() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeInventaire() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEtatStock() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As StocksDataSet = New StocksDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.Inventaire.EcartU1Column.Expression = "iif(QteU1 is null,0,QteU1)-iif(QteU1Depart is null,0,QteU1Depart)"
        Me.Inventaire.EcartU2Column.Expression = "iif(QteU2 is null,0,QteU2)-iif(QteU2Depart is null,0,QteU2Depart)"
        Me.EtatStock.AttentionColumn.Expression = "iif(Disponible Is Null,StockActuel>SeuilStock,Disponible>SeuilStock)"
        Me.EtatStock.DisponibleColumn.Expression = "Depart+Entrée+Sortie+EnCommande"
        Me.EtatStock.StockActuelColumn.Expression = "Depart+Entrée+Sortie"
        Me.EtatStock.StockActuelU2Column.Expression = "DepartU2+EntréeU2+SortieU2"
    End Sub
    
    Public Delegate Sub LotsProduitsRowChangeEventHandler(ByVal sender As Object, ByVal e As LotsProduitsRowChangeEvent)
    
    Public Delegate Sub InventaireRowChangeEventHandler(ByVal sender As Object, ByVal e As InventaireRowChangeEvent)
    
    Public Delegate Sub EtatStockRowChangeEventHandler(ByVal sender As Object, ByVal e As EtatStockRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LotsProduitsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncodeproduit As Global.System.Data.DataColumn
        
        Private columnnlot As Global.System.Data.DataColumn
        
        Private columnDt As Global.System.Data.DataColumn
        
        Private columntp As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LotsProduits"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeproduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodeproduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nlotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnlot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LotsProduitsRow
            Get
                Return CType(Me.Rows(index),LotsProduitsRow)
            End Get
        End Property
        
        Public Event LotsProduitsRowChanging As LotsProduitsRowChangeEventHandler
        
        Public Event LotsProduitsRowChanged As LotsProduitsRowChangeEventHandler
        
        Public Event LotsProduitsRowDeleting As LotsProduitsRowChangeEventHandler
        
        Public Event LotsProduitsRowDeleted As LotsProduitsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLotsProduitsRow(ByVal row As LotsProduitsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLotsProduitsRow(ByVal codeproduit As String, ByVal nlot As String, ByVal Dt As Date, ByVal tp As String, ByVal Description As String) As LotsProduitsRow
            Dim rowLotsProduitsRow As LotsProduitsRow = CType(Me.NewRow,LotsProduitsRow)
            Dim columnValuesArray() As Object = New Object() {codeproduit, nlot, Dt, tp, Description}
            rowLotsProduitsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLotsProduitsRow)
            Return rowLotsProduitsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LotsProduitsDataTable = CType(MyBase.Clone,LotsProduitsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LotsProduitsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodeproduit = MyBase.Columns("codeproduit")
            Me.columnnlot = MyBase.Columns("nlot")
            Me.columnDt = MyBase.Columns("Dt")
            Me.columntp = MyBase.Columns("tp")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodeproduit = New Global.System.Data.DataColumn("codeproduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodeproduit)
            Me.columnnlot = New Global.System.Data.DataColumn("nlot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnlot)
            Me.columnDt = New Global.System.Data.DataColumn("Dt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDt)
            Me.columntp = New Global.System.Data.DataColumn("tp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntp)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columncodeproduit.ReadOnly = true
            Me.columncodeproduit.MaxLength = 255
            Me.columnnlot.ReadOnly = true
            Me.columnnlot.MaxLength = 50
            Me.columnDt.ReadOnly = true
            Me.columntp.ReadOnly = true
            Me.columntp.MaxLength = 50
            Me.columnDescription.ReadOnly = true
            Me.columnDescription.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLotsProduitsRow() As LotsProduitsRow
            Return CType(Me.NewRow,LotsProduitsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LotsProduitsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LotsProduitsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LotsProduitsRowChangedEvent) Is Nothing) Then
                RaiseEvent LotsProduitsRowChanged(Me, New LotsProduitsRowChangeEvent(CType(e.Row,LotsProduitsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LotsProduitsRowChangingEvent) Is Nothing) Then
                RaiseEvent LotsProduitsRowChanging(Me, New LotsProduitsRowChangeEvent(CType(e.Row,LotsProduitsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LotsProduitsRowDeletedEvent) Is Nothing) Then
                RaiseEvent LotsProduitsRowDeleted(Me, New LotsProduitsRowChangeEvent(CType(e.Row,LotsProduitsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LotsProduitsRowDeletingEvent) Is Nothing) Then
                RaiseEvent LotsProduitsRowDeleting(Me, New LotsProduitsRowChangeEvent(CType(e.Row,LotsProduitsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLotsProduitsRow(ByVal row As LotsProduitsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StocksDataSet = New StocksDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LotsProduitsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class InventaireDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFamille As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnU1U2Independant As Global.System.Data.DataColumn
        
        Private columnCoefU2 As Global.System.Data.DataColumn
        
        Private columnDepot As Global.System.Data.DataColumn
        
        Private columnnLot As Global.System.Data.DataColumn
        
        Private columnQteU1Depart As Global.System.Data.DataColumn
        
        Private columnQteU1 As Global.System.Data.DataColumn
        
        Private columnDepartU1 As Global.System.Data.DataColumn
        
        Private columnEntréeU1 As Global.System.Data.DataColumn
        
        Private columnSortieU1 As Global.System.Data.DataColumn
        
        Private columnDepartU2 As Global.System.Data.DataColumn
        
        Private columnEntréeU2 As Global.System.Data.DataColumn
        
        Private columnSortieU2 As Global.System.Data.DataColumn
        
        Private columnQteU2Depart As Global.System.Data.DataColumn
        
        Private columnQteU2 As Global.System.Data.DataColumn
        
        Private columnEcartU1 As Global.System.Data.DataColumn
        
        Private columnEcartU2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Inventaire"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FamilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1U2IndependantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1U2Independant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QteU1DepartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQteU1Depart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QteU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQteU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntréeU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntréeU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SortieU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSortieU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntréeU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntréeU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SortieU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSortieU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QteU2DepartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQteU2Depart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QteU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQteU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EcartU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEcartU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EcartU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEcartU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As InventaireRow
            Get
                Return CType(Me.Rows(index),InventaireRow)
            End Get
        End Property
        
        Public Event InventaireRowChanging As InventaireRowChangeEventHandler
        
        Public Event InventaireRowChanged As InventaireRowChangeEventHandler
        
        Public Event InventaireRowDeleting As InventaireRowChangeEventHandler
        
        Public Event InventaireRowDeleted As InventaireRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddInventaireRow(ByVal row As InventaireRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddInventaireRow( _
                    ByVal Famille As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibUnite1 As String,  _
                    ByVal LibUnite2 As String,  _
                    ByVal U1U2Independant As Boolean,  _
                    ByVal CoefU2 As Decimal,  _
                    ByVal Depot As String,  _
                    ByVal nLot As String,  _
                    ByVal QteU1Depart As Decimal,  _
                    ByVal QteU1 As Decimal,  _
                    ByVal DepartU1 As Decimal,  _
                    ByVal EntréeU1 As Decimal,  _
                    ByVal SortieU1 As Decimal,  _
                    ByVal DepartU2 As Decimal,  _
                    ByVal EntréeU2 As Decimal,  _
                    ByVal SortieU2 As Decimal,  _
                    ByVal QteU2Depart As Decimal,  _
                    ByVal QteU2 As Decimal,  _
                    ByVal EcartU1 As Decimal,  _
                    ByVal EcartU2 As Decimal) As InventaireRow
            Dim rowInventaireRow As InventaireRow = CType(Me.NewRow,InventaireRow)
            Dim columnValuesArray() As Object = New Object() {Famille, CodeProduit, Libelle, LibUnite1, LibUnite2, U1U2Independant, CoefU2, Depot, nLot, QteU1Depart, QteU1, DepartU1, EntréeU1, SortieU1, DepartU2, EntréeU2, SortieU2, QteU2Depart, QteU2, EcartU1, EcartU2}
            rowInventaireRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowInventaireRow)
            Return rowInventaireRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddInventaireRow( _
                    ByVal Famille As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibUnite1 As String,  _
                    ByVal LibUnite2 As String,  _
                    ByVal U1U2Independant As Boolean,  _
                    ByVal CoefU2 As Decimal,  _
                    ByVal Depot As String,  _
                    ByVal nLot As String,  _
                    ByVal QteU1Depart As Decimal,  _
                    ByVal QteU1 As Decimal,  _
                    ByVal DepartU1 As Decimal,  _
                    ByVal EntréeU1 As Decimal,  _
                    ByVal SortieU1 As Decimal,  _
                    ByVal DepartU2 As Decimal,  _
                    ByVal EntréeU2 As Decimal,  _
                    ByVal SortieU2 As Decimal,  _
                    ByVal QteU2Depart As Decimal,  _
                    ByVal QteU2 As Decimal) As InventaireRow
            Dim rowInventaireRow As InventaireRow = CType(Me.NewRow,InventaireRow)
            Dim columnValuesArray() As Object = New Object() {Famille, CodeProduit, Libelle, LibUnite1, LibUnite2, U1U2Independant, CoefU2, Depot, nLot, QteU1Depart, QteU1, DepartU1, EntréeU1, SortieU1, DepartU2, EntréeU2, SortieU2, QteU2Depart, QteU2, Nothing, Nothing}
            rowInventaireRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowInventaireRow)
            Return rowInventaireRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As InventaireDataTable = CType(MyBase.Clone,InventaireDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New InventaireDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFamille = MyBase.Columns("Famille")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnU1U2Independant = MyBase.Columns("U1U2Independant")
            Me.columnCoefU2 = MyBase.Columns("CoefU2")
            Me.columnDepot = MyBase.Columns("Depot")
            Me.columnnLot = MyBase.Columns("nLot")
            Me.columnQteU1Depart = MyBase.Columns("QteU1Depart")
            Me.columnQteU1 = MyBase.Columns("QteU1")
            Me.columnDepartU1 = MyBase.Columns("DepartU1")
            Me.columnEntréeU1 = MyBase.Columns("EntréeU1")
            Me.columnSortieU1 = MyBase.Columns("SortieU1")
            Me.columnDepartU2 = MyBase.Columns("DepartU2")
            Me.columnEntréeU2 = MyBase.Columns("EntréeU2")
            Me.columnSortieU2 = MyBase.Columns("SortieU2")
            Me.columnQteU2Depart = MyBase.Columns("QteU2Depart")
            Me.columnQteU2 = MyBase.Columns("QteU2")
            Me.columnEcartU1 = MyBase.Columns("EcartU1")
            Me.columnEcartU2 = MyBase.Columns("EcartU2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFamille = New Global.System.Data.DataColumn("Famille", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnU1U2Independant = New Global.System.Data.DataColumn("U1U2Independant", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1U2Independant)
            Me.columnCoefU2 = New Global.System.Data.DataColumn("CoefU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefU2)
            Me.columnDepot = New Global.System.Data.DataColumn("Depot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepot)
            Me.columnnLot = New Global.System.Data.DataColumn("nLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLot)
            Me.columnQteU1Depart = New Global.System.Data.DataColumn("QteU1Depart", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQteU1Depart)
            Me.columnQteU1 = New Global.System.Data.DataColumn("QteU1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQteU1)
            Me.columnDepartU1 = New Global.System.Data.DataColumn("DepartU1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartU1)
            Me.columnEntréeU1 = New Global.System.Data.DataColumn("EntréeU1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntréeU1)
            Me.columnSortieU1 = New Global.System.Data.DataColumn("SortieU1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSortieU1)
            Me.columnDepartU2 = New Global.System.Data.DataColumn("DepartU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartU2)
            Me.columnEntréeU2 = New Global.System.Data.DataColumn("EntréeU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntréeU2)
            Me.columnSortieU2 = New Global.System.Data.DataColumn("SortieU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSortieU2)
            Me.columnQteU2Depart = New Global.System.Data.DataColumn("QteU2Depart", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQteU2Depart)
            Me.columnQteU2 = New Global.System.Data.DataColumn("QteU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQteU2)
            Me.columnEcartU1 = New Global.System.Data.DataColumn("EcartU1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEcartU1)
            Me.columnEcartU2 = New Global.System.Data.DataColumn("EcartU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEcartU2)
            Me.columnFamille.MaxLength = 255
            Me.columnCodeProduit.AllowDBNull = false
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 255
            Me.columnLibUnite1.ReadOnly = true
            Me.columnLibUnite1.MaxLength = 2
            Me.columnLibUnite2.ReadOnly = true
            Me.columnLibUnite2.MaxLength = 2
            Me.columnDepot.ReadOnly = true
            Me.columnDepot.MaxLength = 50
            Me.columnnLot.ReadOnly = true
            Me.columnnLot.MaxLength = 50
            Me.columnQteU1Depart.DefaultValue = CType(0,Decimal)
            Me.columnQteU1.DefaultValue = CType(0,Decimal)
            Me.columnDepartU1.DefaultValue = CType(0,Decimal)
            Me.columnEntréeU1.DefaultValue = CType(0,Decimal)
            Me.columnSortieU1.DefaultValue = CType(0,Decimal)
            Me.columnDepartU2.DefaultValue = CType(0,Decimal)
            Me.columnEntréeU2.DefaultValue = CType(0,Decimal)
            Me.columnSortieU2.DefaultValue = CType(0,Decimal)
            Me.columnQteU2Depart.DefaultValue = CType(0,Decimal)
            Me.columnQteU2.DefaultValue = CType(0,Decimal)
            Me.columnEcartU1.ReadOnly = true
            Me.columnEcartU2.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewInventaireRow() As InventaireRow
            Return CType(Me.NewRow,InventaireRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New InventaireRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(InventaireRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.EcartU1Column.Expression = "iif(QteU1 is null,0,QteU1)-iif(QteU1Depart is null,0,QteU1Depart)"
            Me.EcartU2Column.Expression = "iif(QteU2 is null,0,QteU2)-iif(QteU2Depart is null,0,QteU2Depart)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InventaireRowChangedEvent) Is Nothing) Then
                RaiseEvent InventaireRowChanged(Me, New InventaireRowChangeEvent(CType(e.Row,InventaireRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InventaireRowChangingEvent) Is Nothing) Then
                RaiseEvent InventaireRowChanging(Me, New InventaireRowChangeEvent(CType(e.Row,InventaireRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InventaireRowDeletedEvent) Is Nothing) Then
                RaiseEvent InventaireRowDeleted(Me, New InventaireRowChangeEvent(CType(e.Row,InventaireRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InventaireRowDeletingEvent) Is Nothing) Then
                RaiseEvent InventaireRowDeleting(Me, New InventaireRowChangeEvent(CType(e.Row,InventaireRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveInventaireRow(ByVal row As InventaireRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StocksDataSet = New StocksDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "InventaireDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EtatStockDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDepot As Global.System.Data.DataColumn
        
        Private columnnLot As Global.System.Data.DataColumn
        
        Private columnFamille As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnDepart As Global.System.Data.DataColumn
        
        Private columnEntrée As Global.System.Data.DataColumn
        
        Private columnSortie As Global.System.Data.DataColumn
        
        Private columnEnCommande As Global.System.Data.DataColumn
        
        Private columnDepartU2 As Global.System.Data.DataColumn
        
        Private columnEntréeU2 As Global.System.Data.DataColumn
        
        Private columnSortieU2 As Global.System.Data.DataColumn
        
        Private columnEnCommandeU2 As Global.System.Data.DataColumn
        
        Private columnBRTermine As Global.System.Data.DataColumn
        
        Private columnBRDate As Global.System.Data.DataColumn
        
        Private columnSeuilStock As Global.System.Data.DataColumn
        
        Private columnAttention As Global.System.Data.DataColumn
        
        Private columnDisponible As Global.System.Data.DataColumn
        
        Private columnStockActuel As Global.System.Data.DataColumn
        
        Private columnStockActuelU2 As Global.System.Data.DataColumn
        
        Private columnProduitAchat As Global.System.Data.DataColumn
        
        Private columnProduitVente As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "EtatStock"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FamilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntréeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntrée
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SortieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSortie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnCommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntréeU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntréeU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SortieU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSortieU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnCommandeU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnCommandeU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BRTermineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBRTermine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BRDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBRDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeuilStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeuilStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AttentionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAttention
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisponibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisponible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StockActuelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStockActuel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StockActuelU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStockActuelU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitAchatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitAchat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EtatStockRow
            Get
                Return CType(Me.Rows(index),EtatStockRow)
            End Get
        End Property
        
        Public Event EtatStockRowChanging As EtatStockRowChangeEventHandler
        
        Public Event EtatStockRowChanged As EtatStockRowChangeEventHandler
        
        Public Event EtatStockRowDeleting As EtatStockRowChangeEventHandler
        
        Public Event EtatStockRowDeleted As EtatStockRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEtatStockRow(ByVal row As EtatStockRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEtatStockRow( _
                    ByVal Depot As String,  _
                    ByVal nLot As String,  _
                    ByVal Famille As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibUnite1 As String,  _
                    ByVal LibUnite2 As String,  _
                    ByVal Depart As Decimal,  _
                    ByVal Entrée As Decimal,  _
                    ByVal Sortie As Decimal,  _
                    ByVal EnCommande As Decimal,  _
                    ByVal DepartU2 As Decimal,  _
                    ByVal EntréeU2 As Decimal,  _
                    ByVal SortieU2 As Decimal,  _
                    ByVal EnCommandeU2 As Decimal,  _
                    ByVal BRTermine As Boolean,  _
                    ByVal BRDate As Date,  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal Attention As Boolean,  _
                    ByVal Disponible As Decimal,  _
                    ByVal StockActuel As Decimal,  _
                    ByVal StockActuelU2 As Decimal,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean) As EtatStockRow
            Dim rowEtatStockRow As EtatStockRow = CType(Me.NewRow,EtatStockRow)
            Dim columnValuesArray() As Object = New Object() {Depot, nLot, Famille, CodeProduit, Libelle, LibUnite1, LibUnite2, Depart, Entrée, Sortie, EnCommande, DepartU2, EntréeU2, SortieU2, EnCommandeU2, BRTermine, BRDate, SeuilStock, Attention, Disponible, StockActuel, StockActuelU2, ProduitAchat, ProduitVente}
            rowEtatStockRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEtatStockRow)
            Return rowEtatStockRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEtatStockRow( _
                    ByVal Depot As String,  _
                    ByVal nLot As String,  _
                    ByVal Famille As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibUnite1 As String,  _
                    ByVal LibUnite2 As String,  _
                    ByVal Depart As Decimal,  _
                    ByVal Entrée As Decimal,  _
                    ByVal Sortie As Decimal,  _
                    ByVal EnCommande As Decimal,  _
                    ByVal DepartU2 As Decimal,  _
                    ByVal EntréeU2 As Decimal,  _
                    ByVal SortieU2 As Decimal,  _
                    ByVal EnCommandeU2 As Decimal,  _
                    ByVal BRTermine As Boolean,  _
                    ByVal BRDate As Date,  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean) As EtatStockRow
            Dim rowEtatStockRow As EtatStockRow = CType(Me.NewRow,EtatStockRow)
            Dim columnValuesArray() As Object = New Object() {Depot, nLot, Famille, CodeProduit, Libelle, LibUnite1, LibUnite2, Depart, Entrée, Sortie, EnCommande, DepartU2, EntréeU2, SortieU2, EnCommandeU2, BRTermine, BRDate, SeuilStock, Nothing, Nothing, Nothing, Nothing, ProduitAchat, ProduitVente}
            rowEtatStockRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEtatStockRow)
            Return rowEtatStockRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EtatStockDataTable = CType(MyBase.Clone,EtatStockDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EtatStockDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDepot = MyBase.Columns("Depot")
            Me.columnnLot = MyBase.Columns("nLot")
            Me.columnFamille = MyBase.Columns("Famille")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnDepart = MyBase.Columns("Depart")
            Me.columnEntrée = MyBase.Columns("Entrée")
            Me.columnSortie = MyBase.Columns("Sortie")
            Me.columnEnCommande = MyBase.Columns("EnCommande")
            Me.columnDepartU2 = MyBase.Columns("DepartU2")
            Me.columnEntréeU2 = MyBase.Columns("EntréeU2")
            Me.columnSortieU2 = MyBase.Columns("SortieU2")
            Me.columnEnCommandeU2 = MyBase.Columns("EnCommandeU2")
            Me.columnBRTermine = MyBase.Columns("BRTermine")
            Me.columnBRDate = MyBase.Columns("BRDate")
            Me.columnSeuilStock = MyBase.Columns("SeuilStock")
            Me.columnAttention = MyBase.Columns("Attention")
            Me.columnDisponible = MyBase.Columns("Disponible")
            Me.columnStockActuel = MyBase.Columns("StockActuel")
            Me.columnStockActuelU2 = MyBase.Columns("StockActuelU2")
            Me.columnProduitAchat = MyBase.Columns("ProduitAchat")
            Me.columnProduitVente = MyBase.Columns("ProduitVente")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDepot = New Global.System.Data.DataColumn("Depot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepot)
            Me.columnnLot = New Global.System.Data.DataColumn("nLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLot)
            Me.columnFamille = New Global.System.Data.DataColumn("Famille", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnDepart = New Global.System.Data.DataColumn("Depart", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepart)
            Me.columnEntrée = New Global.System.Data.DataColumn("Entrée", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntrée)
            Me.columnSortie = New Global.System.Data.DataColumn("Sortie", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSortie)
            Me.columnEnCommande = New Global.System.Data.DataColumn("EnCommande", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnCommande)
            Me.columnDepartU2 = New Global.System.Data.DataColumn("DepartU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartU2)
            Me.columnEntréeU2 = New Global.System.Data.DataColumn("EntréeU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntréeU2)
            Me.columnSortieU2 = New Global.System.Data.DataColumn("SortieU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSortieU2)
            Me.columnEnCommandeU2 = New Global.System.Data.DataColumn("EnCommandeU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnCommandeU2)
            Me.columnBRTermine = New Global.System.Data.DataColumn("BRTermine", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBRTermine)
            Me.columnBRDate = New Global.System.Data.DataColumn("BRDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBRDate)
            Me.columnSeuilStock = New Global.System.Data.DataColumn("SeuilStock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeuilStock)
            Me.columnAttention = New Global.System.Data.DataColumn("Attention", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAttention)
            Me.columnDisponible = New Global.System.Data.DataColumn("Disponible", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisponible)
            Me.columnStockActuel = New Global.System.Data.DataColumn("StockActuel", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockActuel)
            Me.columnStockActuelU2 = New Global.System.Data.DataColumn("StockActuelU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockActuelU2)
            Me.columnProduitAchat = New Global.System.Data.DataColumn("ProduitAchat", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitAchat)
            Me.columnProduitVente = New Global.System.Data.DataColumn("ProduitVente", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitVente)
            Me.columnDepot.ReadOnly = true
            Me.columnDepot.MaxLength = 50
            Me.columnnLot.ReadOnly = true
            Me.columnnLot.MaxLength = 50
            Me.columnFamille.MaxLength = 255
            Me.columnCodeProduit.ReadOnly = true
            Me.columnCodeProduit.MaxLength = 50
            Me.columnLibelle.MaxLength = 255
            Me.columnLibUnite1.ReadOnly = true
            Me.columnLibUnite1.MaxLength = 50
            Me.columnLibUnite2.ReadOnly = true
            Me.columnLibUnite2.MaxLength = 50
            Me.columnDepart.ReadOnly = true
            Me.columnEntrée.ReadOnly = true
            Me.columnSortie.ReadOnly = true
            Me.columnEnCommande.ReadOnly = true
            Me.columnDepartU2.ReadOnly = true
            Me.columnEntréeU2.ReadOnly = true
            Me.columnSortieU2.ReadOnly = true
            Me.columnEnCommandeU2.ReadOnly = true
            Me.columnSeuilStock.DefaultValue = CType(0,Decimal)
            Me.columnAttention.ReadOnly = true
            Me.columnAttention.DefaultValue = CType(true,Boolean)
            Me.columnDisponible.ReadOnly = true
            Me.columnStockActuel.ReadOnly = true
            Me.columnStockActuelU2.ReadOnly = true
            Me.columnProduitAchat.DefaultValue = CType(false,Boolean)
            Me.columnProduitVente.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEtatStockRow() As EtatStockRow
            Return CType(Me.NewRow,EtatStockRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EtatStockRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EtatStockRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.AttentionColumn.Expression = "iif(Disponible Is Null,StockActuel>SeuilStock,Disponible>SeuilStock)"
            Me.DisponibleColumn.Expression = "Depart+Entrée+Sortie+EnCommande"
            Me.StockActuelColumn.Expression = "Depart+Entrée+Sortie"
            Me.StockActuelU2Column.Expression = "DepartU2+EntréeU2+SortieU2"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EtatStockRowChangedEvent) Is Nothing) Then
                RaiseEvent EtatStockRowChanged(Me, New EtatStockRowChangeEvent(CType(e.Row,EtatStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EtatStockRowChangingEvent) Is Nothing) Then
                RaiseEvent EtatStockRowChanging(Me, New EtatStockRowChangeEvent(CType(e.Row,EtatStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EtatStockRowDeletedEvent) Is Nothing) Then
                RaiseEvent EtatStockRowDeleted(Me, New EtatStockRowChangeEvent(CType(e.Row,EtatStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EtatStockRowDeletingEvent) Is Nothing) Then
                RaiseEvent EtatStockRowDeleting(Me, New EtatStockRowChangeEvent(CType(e.Row,EtatStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEtatStockRow(ByVal row As EtatStockRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StocksDataSet = New StocksDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EtatStockDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LotsProduitsRow
        Inherits Global.System.Data.DataRow
        
        Private tableLotsProduits As LotsProduitsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLotsProduits = CType(Me.Table,LotsProduitsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codeproduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableLotsProduits.codeproduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'codeproduit' in table 'LotsProduits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLotsProduits.codeproduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nlot() As String
            Get
                Try 
                    Return CType(Me(Me.tableLotsProduits.nlotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nlot' in table 'LotsProduits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLotsProduits.nlotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dt() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLotsProduits.DtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dt' in table 'LotsProduits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLotsProduits.DtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tp() As String
            Get
                Try 
                    Return CType(Me(Me.tableLotsProduits.tpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tp' in table 'LotsProduits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLotsProduits.tpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableLotsProduits.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'LotsProduits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLotsProduits.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeproduitNull() As Boolean
            Return Me.IsNull(Me.tableLotsProduits.codeproduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeproduitNull()
            Me(Me.tableLotsProduits.codeproduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnlotNull() As Boolean
            Return Me.IsNull(Me.tableLotsProduits.nlotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnlotNull()
            Me(Me.tableLotsProduits.nlotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDtNull() As Boolean
            Return Me.IsNull(Me.tableLotsProduits.DtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDtNull()
            Me(Me.tableLotsProduits.DtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstpNull() As Boolean
            Return Me.IsNull(Me.tableLotsProduits.tpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettpNull()
            Me(Me.tableLotsProduits.tpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableLotsProduits.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableLotsProduits.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class InventaireRow
        Inherits Global.System.Data.DataRow
        
        Private tableInventaire As InventaireDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableInventaire = CType(Me.Table,InventaireDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille() As String
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.FamilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.FamilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Return CType(Me(Me.tableInventaire.CodeProduitColumn),String)
            End Get
            Set
                Me(Me.tableInventaire.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite2' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1U2Independant() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.U1U2IndependantColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U1U2Independant' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.U1U2IndependantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.CoefU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefU2' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.CoefU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depot() As String
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.DepotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depot' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.DepotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.nLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLot' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.nLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QteU1Depart() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.QteU1DepartColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QteU1Depart' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.QteU1DepartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QteU1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.QteU1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QteU1' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.QteU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartU1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.DepartU1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepartU1' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.DepartU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntréeU1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.EntréeU1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntréeU1' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.EntréeU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SortieU1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.SortieU1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SortieU1' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.SortieU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.DepartU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepartU2' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.DepartU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntréeU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.EntréeU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntréeU2' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.EntréeU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SortieU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.SortieU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SortieU2' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.SortieU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QteU2Depart() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.QteU2DepartColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QteU2Depart' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.QteU2DepartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QteU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.QteU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QteU2' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.QteU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EcartU1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.EcartU1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EcartU1' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.EcartU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EcartU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInventaire.EcartU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EcartU2' in table 'Inventaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventaire.EcartU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamilleNull() As Boolean
            Return Me.IsNull(Me.tableInventaire.FamilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamilleNull()
            Me(Me.tableInventaire.FamilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableInventaire.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableInventaire.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableInventaire.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableInventaire.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1U2IndependantNull() As Boolean
            Return Me.IsNull(Me.tableInventaire.U1U2IndependantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1U2IndependantNull()
            Me(Me.tableInventaire.U1U2IndependantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefU2Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.CoefU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefU2Null()
            Me(Me.tableInventaire.CoefU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepotNull() As Boolean
            Return Me.IsNull(Me.tableInventaire.DepotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepotNull()
            Me(Me.tableInventaire.DepotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLotNull() As Boolean
            Return Me.IsNull(Me.tableInventaire.nLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLotNull()
            Me(Me.tableInventaire.nLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQteU1DepartNull() As Boolean
            Return Me.IsNull(Me.tableInventaire.QteU1DepartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQteU1DepartNull()
            Me(Me.tableInventaire.QteU1DepartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQteU1Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.QteU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQteU1Null()
            Me(Me.tableInventaire.QteU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartU1Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.DepartU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartU1Null()
            Me(Me.tableInventaire.DepartU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntréeU1Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.EntréeU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntréeU1Null()
            Me(Me.tableInventaire.EntréeU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSortieU1Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.SortieU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSortieU1Null()
            Me(Me.tableInventaire.SortieU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartU2Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.DepartU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartU2Null()
            Me(Me.tableInventaire.DepartU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntréeU2Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.EntréeU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntréeU2Null()
            Me(Me.tableInventaire.EntréeU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSortieU2Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.SortieU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSortieU2Null()
            Me(Me.tableInventaire.SortieU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQteU2DepartNull() As Boolean
            Return Me.IsNull(Me.tableInventaire.QteU2DepartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQteU2DepartNull()
            Me(Me.tableInventaire.QteU2DepartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQteU2Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.QteU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQteU2Null()
            Me(Me.tableInventaire.QteU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEcartU1Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.EcartU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEcartU1Null()
            Me(Me.tableInventaire.EcartU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEcartU2Null() As Boolean
            Return Me.IsNull(Me.tableInventaire.EcartU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEcartU2Null()
            Me(Me.tableInventaire.EcartU2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EtatStockRow
        Inherits Global.System.Data.DataRow
        
        Private tableEtatStock As EtatStockDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEtatStock = CType(Me.Table,EtatStockDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depot() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.DepotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depot' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.DepotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.nLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLot' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.nLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.FamilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.FamilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite2' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depart() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.DepartColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depart' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.DepartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Entrée() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.EntréeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Entrée' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.EntréeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sortie() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.SortieColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sortie' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.SortieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnCommande() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.EnCommandeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EnCommande' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.EnCommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.DepartU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepartU2' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.DepartU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntréeU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.EntréeU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntréeU2' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.EntréeU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SortieU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.SortieU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SortieU2' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.SortieU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnCommandeU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.EnCommandeU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EnCommandeU2' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.EnCommandeU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BRTermine() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.BRTermineColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BRTermine' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.BRTermineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BRDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.BRDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BRDate' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.BRDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeuilStock() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.SeuilStockColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeuilStock' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.SeuilStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Attention() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.AttentionColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Attention' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.AttentionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disponible() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.DisponibleColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Disponible' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.DisponibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StockActuel() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.StockActuelColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StockActuel' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.StockActuelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StockActuelU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.StockActuelU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StockActuelU2' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.StockActuelU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitAchat() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.ProduitAchatColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProduitAchat' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.ProduitAchatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitVente() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEtatStock.ProduitVenteColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProduitVente' in table 'EtatStock' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEtatStock.ProduitVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepotNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.DepotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepotNull()
            Me(Me.tableEtatStock.DepotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLotNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.nLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLotNull()
            Me(Me.tableEtatStock.nLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamilleNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.FamilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamilleNull()
            Me(Me.tableEtatStock.FamilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableEtatStock.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableEtatStock.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableEtatStock.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableEtatStock.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableEtatStock.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableEtatStock.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.DepartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartNull()
            Me(Me.tableEtatStock.DepartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntréeNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.EntréeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntréeNull()
            Me(Me.tableEtatStock.EntréeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSortieNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.SortieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSortieNull()
            Me(Me.tableEtatStock.SortieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnCommandeNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.EnCommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnCommandeNull()
            Me(Me.tableEtatStock.EnCommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartU2Null() As Boolean
            Return Me.IsNull(Me.tableEtatStock.DepartU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartU2Null()
            Me(Me.tableEtatStock.DepartU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntréeU2Null() As Boolean
            Return Me.IsNull(Me.tableEtatStock.EntréeU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntréeU2Null()
            Me(Me.tableEtatStock.EntréeU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSortieU2Null() As Boolean
            Return Me.IsNull(Me.tableEtatStock.SortieU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSortieU2Null()
            Me(Me.tableEtatStock.SortieU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnCommandeU2Null() As Boolean
            Return Me.IsNull(Me.tableEtatStock.EnCommandeU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnCommandeU2Null()
            Me(Me.tableEtatStock.EnCommandeU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBRTermineNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.BRTermineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBRTermineNull()
            Me(Me.tableEtatStock.BRTermineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBRDateNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.BRDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBRDateNull()
            Me(Me.tableEtatStock.BRDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeuilStockNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.SeuilStockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeuilStockNull()
            Me(Me.tableEtatStock.SeuilStockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAttentionNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.AttentionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAttentionNull()
            Me(Me.tableEtatStock.AttentionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisponibleNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.DisponibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisponibleNull()
            Me(Me.tableEtatStock.DisponibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStockActuelNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.StockActuelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStockActuelNull()
            Me(Me.tableEtatStock.StockActuelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStockActuelU2Null() As Boolean
            Return Me.IsNull(Me.tableEtatStock.StockActuelU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStockActuelU2Null()
            Me(Me.tableEtatStock.StockActuelU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProduitAchatNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.ProduitAchatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProduitAchatNull()
            Me(Me.tableEtatStock.ProduitAchatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProduitVenteNull() As Boolean
            Return Me.IsNull(Me.tableEtatStock.ProduitVenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProduitVenteNull()
            Me(Me.tableEtatStock.ProduitVenteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LotsProduitsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LotsProduitsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LotsProduitsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LotsProduitsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class InventaireRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As InventaireRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As InventaireRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As InventaireRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EtatStockRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EtatStockRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EtatStockRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EtatStockRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace StocksDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LotsProduitsTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LotsProduits"
            tableMapping.ColumnMappings.Add("codeproduit", "codeproduit")
            tableMapping.ColumnMappings.Add("nlot", "nlot")
            tableMapping.ColumnMappings.Add("Dt", "Dt")
            tableMapping.ColumnMappings.Add("tp", "tp")
            tableMapping.ColumnMappings.Add("Description", "Description")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.ControleTracabilite.My.MySettings.Default.ConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select distinct codeproduit,nlot ,m.DateMouvement as Dt,m.TypeMouvement as tp,m.D"& _ 
                "escription"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from mouvement_detail md"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join mouvement m on m.nmouvement=md."& _ 
                "nmouvement"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where nlot is not null and codeproduit is not null "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (m.TypeMouv"& _ 
                "ement ='Entrées' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"OR m.TypeMouvement ='Fabrication' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"OR (m.TypeMouvement='Co"& _ 
                "nditionnement' AND unite1>0))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Select distinct codeproduit,nlot ,br.datef"& _ 
                "acture as Dt,'Réception' as tp,e.Nom"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from abonreception_detail brd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join "& _ 
                "abonreception br on brd.ndevis=br.ndevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join entreprise e on br.nclient="& _ 
                "e.nentreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where nlot is not null and codeproduit is not null"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "Select distinct codeproduit,nlot ,m.DateMouvement as Dt,m.TypeMouvement as tp,m.D"& _ 
                "escription"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from mouvement_detail md"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join mouvement m on m.nmouvement=md."& _ 
                "nmouvement"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where nlot is not null and codeproduit is not null "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (m.TypeMouv"& _ 
                "ement ='Entrées' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"OR m.TypeMouvement ='Fabrication' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"OR (m.TypeMouvement='Co"& _ 
                "nditionnement' AND unite1>0))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and codeproduit=@codeproduit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and m.nMouvement<>@"& _ 
                "nMouvement"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Select distinct codeproduit,nlot ,br.datefacture as Dt,'Récep"& _ 
                "tion' as tp,e.Nom"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from abonreception_detail brd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join abonreception br on"& _ 
                " brd.ndevis=br.ndevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join entreprise e on br.nclient=e.nentreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"wher"& _ 
                "e nlot is not null and codeproduit is not null"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and codeproduit=@codeproduit"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codeproduit", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nMouvement", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StocksDataSet.LotsProduitsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StocksDataSet.LotsProduitsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StocksDataSet.LotsProduitsDataTable = New StocksDataSet.LotsProduitsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodeProduit(ByVal dataTable As StocksDataSet.LotsProduitsDataTable, ByVal codeproduit As String, ByVal nMouvement As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (codeproduit Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(codeproduit,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(nMouvement,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodeProduit(ByVal codeproduit As String, ByVal nMouvement As Decimal) As StocksDataSet.LotsProduitsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (codeproduit Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(codeproduit,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(nMouvement,Decimal)
            Dim dataTable As StocksDataSet.LotsProduitsDataTable = New StocksDataSet.LotsProduitsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class InventaireTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Inventaire"
            tableMapping.ColumnMappings.Add("Famille", "Famille")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("LibUnite1", "LibUnite1")
            tableMapping.ColumnMappings.Add("LibUnite2", "LibUnite2")
            tableMapping.ColumnMappings.Add("U1U2Independant", "U1U2Independant")
            tableMapping.ColumnMappings.Add("CoefU2", "CoefU2")
            tableMapping.ColumnMappings.Add("Depot", "Depot")
            tableMapping.ColumnMappings.Add("nLot", "nLot")
            tableMapping.ColumnMappings.Add("QteU1Depart", "QteU1Depart")
            tableMapping.ColumnMappings.Add("QteU1", "QteU1")
            tableMapping.ColumnMappings.Add("DepartU1", "DepartU1")
            tableMapping.ColumnMappings.Add("EntréeU1", "EntréeU1")
            tableMapping.ColumnMappings.Add("SortieU1", "SortieU1")
            tableMapping.ColumnMappings.Add("DepartU2", "DepartU2")
            tableMapping.ColumnMappings.Add("EntréeU2", "EntréeU2")
            tableMapping.ColumnMappings.Add("SortieU2", "SortieU2")
            tableMapping.ColumnMappings.Add("QteU2Depart", "QteU2Depart")
            tableMapping.ColumnMappings.Add("QteU2", "QteU2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.ControleTracabilite.My.MySettings.Default.ConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.CalculInventaireSchema"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtDeb", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtFin", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@depot", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gestionLot", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "EXEC dbo.CalculInventaire @dtDeb, @dtFin, @depot, @gestionLot"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtDeb", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtFin", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@depot", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gestionLot", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StocksDataSet.InventaireDataTable, ByVal dtDeb As Global.System.Nullable(Of Date), ByVal dtFin As Global.System.Nullable(Of Date), ByVal depot As String, ByVal gestionLot As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (dtDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dtFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(dtFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (depot Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(depot,String)
            End If
            If (gestionLot.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(gestionLot.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal dtDeb As Global.System.Nullable(Of Date), ByVal dtFin As Global.System.Nullable(Of Date), ByVal depot As String, ByVal gestionLot As Global.System.Nullable(Of Boolean)) As StocksDataSet.InventaireDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (dtDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dtFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(dtFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (depot Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(depot,String)
            End If
            If (gestionLot.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(gestionLot.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As StocksDataSet.InventaireDataTable = New StocksDataSet.InventaireDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillInv(ByVal dataTable As StocksDataSet.InventaireDataTable, ByVal dtDeb As Global.System.Nullable(Of Date), ByVal dtFin As Global.System.Nullable(Of Date), ByVal depot As String, ByVal gestionLot As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (dtDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dtFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(dtFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (depot Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(depot,String)
            End If
            If (gestionLot.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(gestionLot.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataInv(ByVal dtDeb As Global.System.Nullable(Of Date), ByVal dtFin As Global.System.Nullable(Of Date), ByVal depot As String, ByVal gestionLot As Global.System.Nullable(Of Boolean)) As StocksDataSet.InventaireDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (dtDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dtFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(dtFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (depot Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(depot,String)
            End If
            If (gestionLot.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(gestionLot.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As StocksDataSet.InventaireDataTable = New StocksDataSet.InventaireDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EtatStockTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EtatStock"
            tableMapping.ColumnMappings.Add("Depot", "Depot")
            tableMapping.ColumnMappings.Add("nLot", "nLot")
            tableMapping.ColumnMappings.Add("Famille", "Famille")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("LibUnite1", "LibUnite1")
            tableMapping.ColumnMappings.Add("LibUnite2", "LibUnite2")
            tableMapping.ColumnMappings.Add("Depart", "Depart")
            tableMapping.ColumnMappings.Add("Entrée", "Entrée")
            tableMapping.ColumnMappings.Add("Sortie", "Sortie")
            tableMapping.ColumnMappings.Add("EnCommande", "EnCommande")
            tableMapping.ColumnMappings.Add("DepartU2", "DepartU2")
            tableMapping.ColumnMappings.Add("EntréeU2", "EntréeU2")
            tableMapping.ColumnMappings.Add("SortieU2", "SortieU2")
            tableMapping.ColumnMappings.Add("EnCommandeU2", "EnCommandeU2")
            tableMapping.ColumnMappings.Add("SeuilStock", "SeuilStock")
            tableMapping.ColumnMappings.Add("ProduitAchat", "ProduitAchat")
            tableMapping.ColumnMappings.Add("ProduitVente", "ProduitVente")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.ControleTracabilite.My.MySettings.Default.ConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.CalculEtatStockSchema"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtDeb", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtFin", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@depot", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gestionLot", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "EXEC dbo.CalculEtatStock @dtDeb, @dtFin, @depot, @gestionLot, @afficheBRTermine"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtDeb", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtFin", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@depot", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gestionLot", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@afficheBRTermine", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "EXEC dbo.CalculEtatStock @dtDeb, @dtFin, 'Global', 1"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtDeb", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtFin", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      declare @dtDeb datetime, @dtFin datetime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       set @dtDeb = getdate()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      set @dtFin = getdate()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   EXEC dbo.CalculEtatStock @dtDeb , @dtFin ,'Global',1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "             "
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StocksDataSet.EtatStockDataTable, ByVal dtDeb As Global.System.Nullable(Of Date), ByVal dtFin As Global.System.Nullable(Of Date), ByVal depot As String, ByVal gestionLot As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (dtDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dtFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(dtFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (depot Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(depot,String)
            End If
            If (gestionLot.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(gestionLot.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal dtDeb As Global.System.Nullable(Of Date), ByVal dtFin As Global.System.Nullable(Of Date), ByVal depot As String, ByVal gestionLot As Global.System.Nullable(Of Boolean)) As StocksDataSet.EtatStockDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (dtDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dtFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(dtFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (depot Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(depot,String)
            End If
            If (gestionLot.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(gestionLot.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As StocksDataSet.EtatStockDataTable = New StocksDataSet.EtatStockDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillEtatStock(ByVal dataTable As StocksDataSet.EtatStockDataTable, ByVal dtDeb As Global.System.Nullable(Of Date), ByVal dtFin As Global.System.Nullable(Of Date), ByVal depot As String, ByVal gestionLot As Global.System.Nullable(Of Boolean), ByVal afficheBRTermine As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (dtDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dtFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(dtFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (depot Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(depot,String)
            End If
            If (gestionLot.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(gestionLot.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (afficheBRTermine.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(afficheBRTermine.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetEtatStockData(ByVal dtDeb As Global.System.Nullable(Of Date), ByVal dtFin As Global.System.Nullable(Of Date), ByVal depot As String, ByVal gestionLot As Global.System.Nullable(Of Boolean), ByVal afficheBRTermine As Global.System.Nullable(Of Boolean)) As StocksDataSet.EtatStockDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (dtDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dtFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(dtFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (depot Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(depot,String)
            End If
            If (gestionLot.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(gestionLot.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (afficheBRTermine.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(afficheBRTermine.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As StocksDataSet.EtatStockDataTable = New StocksDataSet.EtatStockDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillEtatStockGlobalByDate(ByVal dataTable As StocksDataSet.EtatStockDataTable, ByVal dtDeb As Date, ByVal dtFin As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(dtDeb,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtFin,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetEtatStockGlobalDataByDate(ByVal dtDeb As Date, ByVal dtFin As Date) As StocksDataSet.EtatStockDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(dtDeb,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(dtFin,Date)
            Dim dataTable As StocksDataSet.EtatStockDataTable = New StocksDataSet.EtatStockDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillStockGlobalActuel(ByVal dataTable As StocksDataSet.EtatStockDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetStockGlobalActuelData() As StocksDataSet.EtatStockDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Dim dataTable As StocksDataSet.EtatStockDataTable = New StocksDataSet.EtatStockDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
