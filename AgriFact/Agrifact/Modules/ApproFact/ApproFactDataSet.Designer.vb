'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5477
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ApproFactDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ApproFactDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableProduit As ProduitDataTable
    
    Private tableFamille As FamilleDataTable
    
    Private tableImprBilanVenteApproFact As ImprBilanVenteApproFactDataTable
    
    Private tableParametres As ParametresDataTable
    
    Private tableEntreprise As EntrepriseDataTable
    
    Private tablePersonne As PersonneDataTable
    
    Private tableTelephone As TelephoneDataTable
    
    Private tableTelephoneEntreprise As TelephoneEntrepriseDataTable
    
    Private tableCodeInsee As CodeInseeDataTable
    
    Private tableExportBilanVenteApproFact As ExportBilanVenteApproFactDataTable
    
    Private relationFK_Produit_Famille As Global.System.Data.DataRelation
    
    Private relationFK_Personne_Entreprise As Global.System.Data.DataRelation
    
    Private relationFK_Telephone_Personne As Global.System.Data.DataRelation
    
    Private relationFK_TelephoneEntreprise_Entreprise As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Produit")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitDataTable(ds.Tables("Produit")))
            End If
            If (Not (ds.Tables("Famille")) Is Nothing) Then
                MyBase.Tables.Add(New FamilleDataTable(ds.Tables("Famille")))
            End If
            If (Not (ds.Tables("ImprBilanVenteApproFact")) Is Nothing) Then
                MyBase.Tables.Add(New ImprBilanVenteApproFactDataTable(ds.Tables("ImprBilanVenteApproFact")))
            End If
            If (Not (ds.Tables("Parametres")) Is Nothing) Then
                MyBase.Tables.Add(New ParametresDataTable(ds.Tables("Parametres")))
            End If
            If (Not (ds.Tables("Entreprise")) Is Nothing) Then
                MyBase.Tables.Add(New EntrepriseDataTable(ds.Tables("Entreprise")))
            End If
            If (Not (ds.Tables("Personne")) Is Nothing) Then
                MyBase.Tables.Add(New PersonneDataTable(ds.Tables("Personne")))
            End If
            If (Not (ds.Tables("Telephone")) Is Nothing) Then
                MyBase.Tables.Add(New TelephoneDataTable(ds.Tables("Telephone")))
            End If
            If (Not (ds.Tables("TelephoneEntreprise")) Is Nothing) Then
                MyBase.Tables.Add(New TelephoneEntrepriseDataTable(ds.Tables("TelephoneEntreprise")))
            End If
            If (Not (ds.Tables("CodeInsee")) Is Nothing) Then
                MyBase.Tables.Add(New CodeInseeDataTable(ds.Tables("CodeInsee")))
            End If
            If (Not (ds.Tables("ExportBilanVenteApproFact")) Is Nothing) Then
                MyBase.Tables.Add(New ExportBilanVenteApproFactDataTable(ds.Tables("ExportBilanVenteApproFact")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Produit() As ProduitDataTable
        Get
            Return Me.tableProduit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Famille() As FamilleDataTable
        Get
            Return Me.tableFamille
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImprBilanVenteApproFact() As ImprBilanVenteApproFactDataTable
        Get
            Return Me.tableImprBilanVenteApproFact
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Parametres() As ParametresDataTable
        Get
            Return Me.tableParametres
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Entreprise() As EntrepriseDataTable
        Get
            Return Me.tableEntreprise
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Personne() As PersonneDataTable
        Get
            Return Me.tablePersonne
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Telephone() As TelephoneDataTable
        Get
            Return Me.tableTelephone
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TelephoneEntreprise() As TelephoneEntrepriseDataTable
        Get
            Return Me.tableTelephoneEntreprise
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CodeInsee() As CodeInseeDataTable
        Get
            Return Me.tableCodeInsee
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ExportBilanVenteApproFact() As ExportBilanVenteApproFactDataTable
        Get
            Return Me.tableExportBilanVenteApproFact
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ApproFactDataSet = CType(MyBase.Clone,ApproFactDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Produit")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitDataTable(ds.Tables("Produit")))
            End If
            If (Not (ds.Tables("Famille")) Is Nothing) Then
                MyBase.Tables.Add(New FamilleDataTable(ds.Tables("Famille")))
            End If
            If (Not (ds.Tables("ImprBilanVenteApproFact")) Is Nothing) Then
                MyBase.Tables.Add(New ImprBilanVenteApproFactDataTable(ds.Tables("ImprBilanVenteApproFact")))
            End If
            If (Not (ds.Tables("Parametres")) Is Nothing) Then
                MyBase.Tables.Add(New ParametresDataTable(ds.Tables("Parametres")))
            End If
            If (Not (ds.Tables("Entreprise")) Is Nothing) Then
                MyBase.Tables.Add(New EntrepriseDataTable(ds.Tables("Entreprise")))
            End If
            If (Not (ds.Tables("Personne")) Is Nothing) Then
                MyBase.Tables.Add(New PersonneDataTable(ds.Tables("Personne")))
            End If
            If (Not (ds.Tables("Telephone")) Is Nothing) Then
                MyBase.Tables.Add(New TelephoneDataTable(ds.Tables("Telephone")))
            End If
            If (Not (ds.Tables("TelephoneEntreprise")) Is Nothing) Then
                MyBase.Tables.Add(New TelephoneEntrepriseDataTable(ds.Tables("TelephoneEntreprise")))
            End If
            If (Not (ds.Tables("CodeInsee")) Is Nothing) Then
                MyBase.Tables.Add(New CodeInseeDataTable(ds.Tables("CodeInsee")))
            End If
            If (Not (ds.Tables("ExportBilanVenteApproFact")) Is Nothing) Then
                MyBase.Tables.Add(New ExportBilanVenteApproFactDataTable(ds.Tables("ExportBilanVenteApproFact")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProduit = CType(MyBase.Tables("Produit"),ProduitDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduit) Is Nothing) Then
                Me.tableProduit.InitVars
            End If
        End If
        Me.tableFamille = CType(MyBase.Tables("Famille"),FamilleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFamille) Is Nothing) Then
                Me.tableFamille.InitVars
            End If
        End If
        Me.tableImprBilanVenteApproFact = CType(MyBase.Tables("ImprBilanVenteApproFact"),ImprBilanVenteApproFactDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImprBilanVenteApproFact) Is Nothing) Then
                Me.tableImprBilanVenteApproFact.InitVars
            End If
        End If
        Me.tableParametres = CType(MyBase.Tables("Parametres"),ParametresDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParametres) Is Nothing) Then
                Me.tableParametres.InitVars
            End If
        End If
        Me.tableEntreprise = CType(MyBase.Tables("Entreprise"),EntrepriseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEntreprise) Is Nothing) Then
                Me.tableEntreprise.InitVars
            End If
        End If
        Me.tablePersonne = CType(MyBase.Tables("Personne"),PersonneDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePersonne) Is Nothing) Then
                Me.tablePersonne.InitVars
            End If
        End If
        Me.tableTelephone = CType(MyBase.Tables("Telephone"),TelephoneDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTelephone) Is Nothing) Then
                Me.tableTelephone.InitVars
            End If
        End If
        Me.tableTelephoneEntreprise = CType(MyBase.Tables("TelephoneEntreprise"),TelephoneEntrepriseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTelephoneEntreprise) Is Nothing) Then
                Me.tableTelephoneEntreprise.InitVars
            End If
        End If
        Me.tableCodeInsee = CType(MyBase.Tables("CodeInsee"),CodeInseeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCodeInsee) Is Nothing) Then
                Me.tableCodeInsee.InitVars
            End If
        End If
        Me.tableExportBilanVenteApproFact = CType(MyBase.Tables("ExportBilanVenteApproFact"),ExportBilanVenteApproFactDataTable)
        If (initTable = true) Then
            If (Not (Me.tableExportBilanVenteApproFact) Is Nothing) Then
                Me.tableExportBilanVenteApproFact.InitVars
            End If
        End If
        Me.relationFK_Produit_Famille = Me.Relations("FK_Produit_Famille")
        Me.relationFK_Personne_Entreprise = Me.Relations("FK_Personne_Entreprise")
        Me.relationFK_Telephone_Personne = Me.Relations("FK_Telephone_Personne")
        Me.relationFK_TelephoneEntreprise_Entreprise = Me.Relations("FK_TelephoneEntreprise_Entreprise")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ApproFactDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ApproFactDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableProduit = New ProduitDataTable
        MyBase.Tables.Add(Me.tableProduit)
        Me.tableFamille = New FamilleDataTable
        MyBase.Tables.Add(Me.tableFamille)
        Me.tableImprBilanVenteApproFact = New ImprBilanVenteApproFactDataTable
        MyBase.Tables.Add(Me.tableImprBilanVenteApproFact)
        Me.tableParametres = New ParametresDataTable
        MyBase.Tables.Add(Me.tableParametres)
        Me.tableEntreprise = New EntrepriseDataTable
        MyBase.Tables.Add(Me.tableEntreprise)
        Me.tablePersonne = New PersonneDataTable
        MyBase.Tables.Add(Me.tablePersonne)
        Me.tableTelephone = New TelephoneDataTable
        MyBase.Tables.Add(Me.tableTelephone)
        Me.tableTelephoneEntreprise = New TelephoneEntrepriseDataTable
        MyBase.Tables.Add(Me.tableTelephoneEntreprise)
        Me.tableCodeInsee = New CodeInseeDataTable
        MyBase.Tables.Add(Me.tableCodeInsee)
        Me.tableExportBilanVenteApproFact = New ExportBilanVenteApproFactDataTable
        MyBase.Tables.Add(Me.tableExportBilanVenteApproFact)
        Me.relationFK_Produit_Famille = New Global.System.Data.DataRelation("FK_Produit_Famille", New Global.System.Data.DataColumn() {Me.tableFamille.nFamilleColumn}, New Global.System.Data.DataColumn() {Me.tableProduit.Famille1Column}, false)
        Me.Relations.Add(Me.relationFK_Produit_Famille)
        Me.relationFK_Personne_Entreprise = New Global.System.Data.DataRelation("FK_Personne_Entreprise", New Global.System.Data.DataColumn() {Me.tableEntreprise.nEntrepriseColumn}, New Global.System.Data.DataColumn() {Me.tablePersonne.nEntrepriseColumn}, false)
        Me.Relations.Add(Me.relationFK_Personne_Entreprise)
        Me.relationFK_Telephone_Personne = New Global.System.Data.DataRelation("FK_Telephone_Personne", New Global.System.Data.DataColumn() {Me.tablePersonne.nPersonneColumn}, New Global.System.Data.DataColumn() {Me.tableTelephone.nPersonneColumn}, false)
        Me.Relations.Add(Me.relationFK_Telephone_Personne)
        Me.relationFK_TelephoneEntreprise_Entreprise = New Global.System.Data.DataRelation("FK_TelephoneEntreprise_Entreprise", New Global.System.Data.DataColumn() {Me.tableEntreprise.nEntrepriseColumn}, New Global.System.Data.DataColumn() {Me.tableTelephoneEntreprise.nEntrepriseColumn}, false)
        Me.Relations.Add(Me.relationFK_TelephoneEntreprise_Entreprise)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFamille() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImprBilanVenteApproFact() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeParametres() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEntreprise() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePersonne() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTelephone() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTelephoneEntreprise() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCodeInsee() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeExportBilanVenteApproFact() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ApproFactDataSet = New ApproFactDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ProduitRowChangeEventHandler(ByVal sender As Object, ByVal e As ProduitRowChangeEvent)
    
    Public Delegate Sub FamilleRowChangeEventHandler(ByVal sender As Object, ByVal e As FamilleRowChangeEvent)
    
    Public Delegate Sub ImprBilanVenteApproFactRowChangeEventHandler(ByVal sender As Object, ByVal e As ImprBilanVenteApproFactRowChangeEvent)
    
    Public Delegate Sub ParametresRowChangeEventHandler(ByVal sender As Object, ByVal e As ParametresRowChangeEvent)
    
    Public Delegate Sub EntrepriseRowChangeEventHandler(ByVal sender As Object, ByVal e As EntrepriseRowChangeEvent)
    
    Public Delegate Sub PersonneRowChangeEventHandler(ByVal sender As Object, ByVal e As PersonneRowChangeEvent)
    
    Public Delegate Sub TelephoneRowChangeEventHandler(ByVal sender As Object, ByVal e As TelephoneRowChangeEvent)
    
    Public Delegate Sub TelephoneEntrepriseRowChangeEventHandler(ByVal sender As Object, ByVal e As TelephoneEntrepriseRowChangeEvent)
    
    Public Delegate Sub CodeInseeRowChangeEventHandler(ByVal sender As Object, ByVal e As CodeInseeRowChangeEvent)
    
    Public Delegate Sub ExportBilanVenteApproFactRowChangeEventHandler(ByVal sender As Object, ByVal e As ExportBilanVenteApproFactRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProduitDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnProduit As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnLibelleLong As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnPrixAHT As Global.System.Data.DataColumn
        
        Private columnPrixATTC As Global.System.Data.DataColumn
        
        Private columnPrixVHT As Global.System.Data.DataColumn
        
        Private columnPrixVTTC As Global.System.Data.DataColumn
        
        Private columnIsPrixHT As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnProduitAchat As Global.System.Data.DataColumn
        
        Private columnProduitVente As Global.System.Data.DataColumn
        
        Private columnNCompteA As Global.System.Data.DataColumn
        
        Private columnNActiviteA As Global.System.Data.DataColumn
        
        Private columnNCompteV As Global.System.Data.DataColumn
        
        Private columnNActiviteV As Global.System.Data.DataColumn
        
        Private columnFamille1 As Global.System.Data.DataColumn
        
        Private columnFamille2 As Global.System.Data.DataColumn
        
        Private columnFamille3 As Global.System.Data.DataColumn
        
        Private columnU1U2Independant As Global.System.Data.DataColumn
        
        Private columnU1xU2 As Global.System.Data.DataColumn
        
        Private columnCodeBarre As Global.System.Data.DataColumn
        
        Private columnInactif As Global.System.Data.DataColumn
        
        Private columnCoefU2 As Global.System.Data.DataColumn
        
        Private columnTypeFacturation As Global.System.Data.DataColumn
        
        Private columnCoefAV As Global.System.Data.DataColumn
        
        Private columnProduitCompose As Global.System.Data.DataColumn
        
        Private columnImage As Global.System.Data.DataColumn
        
        Private columnGestionStock As Global.System.Data.DataColumn
        
        Private columnDecompteAuto As Global.System.Data.DataColumn
        
        Private columnRefFournisseur As Global.System.Data.DataColumn
        
        Private columnnFournisseur As Global.System.Data.DataColumn
        
        Private columnIsSortieImpr As Global.System.Data.DataColumn
        
        Private columnIsEnVente As Global.System.Data.DataColumn
        
        Private columnAMM As Global.System.Data.DataColumn
        
        Private columnTAXSM As Global.System.Data.DataColumn
        
        Private columnIsAMM As Global.System.Data.DataColumn
        
        Private columnDateMaj As Global.System.Data.DataColumn
        
        Private columnisComm As Global.System.Data.DataColumn
        
        Private columnConditionnement As Global.System.Data.DataColumn
        
        Private columnSeuilStock As Global.System.Data.DataColumn
        
        Private columnNCompteX As Global.System.Data.DataColumn
        
        Private columnNActiviteX As Global.System.Data.DataColumn
        
        Private columnIngredients As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Produit"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleLongColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelleLong
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixAHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixAHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixATTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixATTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPrixHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPrixHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitAchatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitAchat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1U2IndependantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1U2Independant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1xU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1xU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeBarreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeBarre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InactifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefAVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefAV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitComposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitCompose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GestionStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGestionStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DecompteAutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDecompteAuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefFournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSortieImprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSortieImpr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsEnVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsEnVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXSMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXSM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsAMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsAMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateMajColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateMaj
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isCommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConditionnementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConditionnement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeuilStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeuilStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngredientsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngredients
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProduitRow
            Get
                Return CType(Me.Rows(index),ProduitRow)
            End Get
        End Property
        
        Public Event ProduitRowChanging As ProduitRowChangeEventHandler
        
        Public Event ProduitRowChanged As ProduitRowChangeEventHandler
        
        Public Event ProduitRowDeleting As ProduitRowChangeEventHandler
        
        Public Event ProduitRowDeleted As ProduitRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduitRow(ByVal row As ProduitRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduitRow( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Decimal,  _
                    ByVal PrixATTC As Decimal,  _
                    ByVal PrixVHT As Decimal,  _
                    ByVal PrixVTTC As Decimal,  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal parentFamilleRowByFK_Produit_Famille As FamilleRow,  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Boolean,  _
                    ByVal U1xU2 As Decimal,  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Boolean,  _
                    ByVal CoefU2 As Decimal,  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Decimal,  _
                    ByVal ProduitCompose As Boolean,  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Boolean,  _
                    ByVal DecompteAuto As Boolean,  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Decimal,  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Decimal,  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Date,  _
                    ByVal isComm As Boolean,  _
                    ByVal Conditionnement As Integer,  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String) As ProduitRow
            Dim rowProduitRow As ProduitRow = CType(Me.NewRow,ProduitRow)
            Dim columnValuesArray() As Object = New Object() {nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NActiviteV, Nothing, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredients}
            If (Not (parentFamilleRowByFK_Produit_Famille) Is Nothing) Then
                columnValuesArray(18) = parentFamilleRowByFK_Produit_Famille(0)
            End If
            rowProduitRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduitRow)
            Return rowProduitRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynProduit(ByVal nProduit As Decimal) As ProduitRow
            Return CType(Me.Rows.Find(New Object() {nProduit}),ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProduitDataTable = CType(MyBase.Clone,ProduitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProduitDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnProduit = MyBase.Columns("nProduit")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnLibelleLong = MyBase.Columns("LibelleLong")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnPrixAHT = MyBase.Columns("PrixAHT")
            Me.columnPrixATTC = MyBase.Columns("PrixATTC")
            Me.columnPrixVHT = MyBase.Columns("PrixVHT")
            Me.columnPrixVTTC = MyBase.Columns("PrixVTTC")
            Me.columnIsPrixHT = MyBase.Columns("IsPrixHT")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnProduitAchat = MyBase.Columns("ProduitAchat")
            Me.columnProduitVente = MyBase.Columns("ProduitVente")
            Me.columnNCompteA = MyBase.Columns("NCompteA")
            Me.columnNActiviteA = MyBase.Columns("NActiviteA")
            Me.columnNCompteV = MyBase.Columns("NCompteV")
            Me.columnNActiviteV = MyBase.Columns("NActiviteV")
            Me.columnFamille1 = MyBase.Columns("Famille1")
            Me.columnFamille2 = MyBase.Columns("Famille2")
            Me.columnFamille3 = MyBase.Columns("Famille3")
            Me.columnU1U2Independant = MyBase.Columns("U1U2Independant")
            Me.columnU1xU2 = MyBase.Columns("U1xU2")
            Me.columnCodeBarre = MyBase.Columns("CodeBarre")
            Me.columnInactif = MyBase.Columns("Inactif")
            Me.columnCoefU2 = MyBase.Columns("CoefU2")
            Me.columnTypeFacturation = MyBase.Columns("TypeFacturation")
            Me.columnCoefAV = MyBase.Columns("CoefAV")
            Me.columnProduitCompose = MyBase.Columns("ProduitCompose")
            Me.columnImage = MyBase.Columns("Image")
            Me.columnGestionStock = MyBase.Columns("GestionStock")
            Me.columnDecompteAuto = MyBase.Columns("DecompteAuto")
            Me.columnRefFournisseur = MyBase.Columns("RefFournisseur")
            Me.columnnFournisseur = MyBase.Columns("nFournisseur")
            Me.columnIsSortieImpr = MyBase.Columns("IsSortieImpr")
            Me.columnIsEnVente = MyBase.Columns("IsEnVente")
            Me.columnAMM = MyBase.Columns("AMM")
            Me.columnTAXSM = MyBase.Columns("TAXSM")
            Me.columnIsAMM = MyBase.Columns("IsAMM")
            Me.columnDateMaj = MyBase.Columns("DateMaj")
            Me.columnisComm = MyBase.Columns("isComm")
            Me.columnConditionnement = MyBase.Columns("Conditionnement")
            Me.columnSeuilStock = MyBase.Columns("SeuilStock")
            Me.columnNCompteX = MyBase.Columns("NCompteX")
            Me.columnNActiviteX = MyBase.Columns("NActiviteX")
            Me.columnIngredients = MyBase.Columns("Ingredients")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnProduit = New Global.System.Data.DataColumn("nProduit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnProduit)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnLibelleLong = New Global.System.Data.DataColumn("LibelleLong", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelleLong)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnPrixAHT = New Global.System.Data.DataColumn("PrixAHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixAHT)
            Me.columnPrixATTC = New Global.System.Data.DataColumn("PrixATTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixATTC)
            Me.columnPrixVHT = New Global.System.Data.DataColumn("PrixVHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVHT)
            Me.columnPrixVTTC = New Global.System.Data.DataColumn("PrixVTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVTTC)
            Me.columnIsPrixHT = New Global.System.Data.DataColumn("IsPrixHT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPrixHT)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnProduitAchat = New Global.System.Data.DataColumn("ProduitAchat", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitAchat)
            Me.columnProduitVente = New Global.System.Data.DataColumn("ProduitVente", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitVente)
            Me.columnNCompteA = New Global.System.Data.DataColumn("NCompteA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteA)
            Me.columnNActiviteA = New Global.System.Data.DataColumn("NActiviteA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteA)
            Me.columnNCompteV = New Global.System.Data.DataColumn("NCompteV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteV)
            Me.columnNActiviteV = New Global.System.Data.DataColumn("NActiviteV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteV)
            Me.columnFamille1 = New Global.System.Data.DataColumn("Famille1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille1)
            Me.columnFamille2 = New Global.System.Data.DataColumn("Famille2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille2)
            Me.columnFamille3 = New Global.System.Data.DataColumn("Famille3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille3)
            Me.columnU1U2Independant = New Global.System.Data.DataColumn("U1U2Independant", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1U2Independant)
            Me.columnU1xU2 = New Global.System.Data.DataColumn("U1xU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1xU2)
            Me.columnCodeBarre = New Global.System.Data.DataColumn("CodeBarre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeBarre)
            Me.columnInactif = New Global.System.Data.DataColumn("Inactif", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactif)
            Me.columnCoefU2 = New Global.System.Data.DataColumn("CoefU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefU2)
            Me.columnTypeFacturation = New Global.System.Data.DataColumn("TypeFacturation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeFacturation)
            Me.columnCoefAV = New Global.System.Data.DataColumn("CoefAV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefAV)
            Me.columnProduitCompose = New Global.System.Data.DataColumn("ProduitCompose", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitCompose)
            Me.columnImage = New Global.System.Data.DataColumn("Image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImage)
            Me.columnGestionStock = New Global.System.Data.DataColumn("GestionStock", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGestionStock)
            Me.columnDecompteAuto = New Global.System.Data.DataColumn("DecompteAuto", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDecompteAuto)
            Me.columnRefFournisseur = New Global.System.Data.DataColumn("RefFournisseur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefFournisseur)
            Me.columnnFournisseur = New Global.System.Data.DataColumn("nFournisseur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFournisseur)
            Me.columnIsSortieImpr = New Global.System.Data.DataColumn("IsSortieImpr", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSortieImpr)
            Me.columnIsEnVente = New Global.System.Data.DataColumn("IsEnVente", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsEnVente)
            Me.columnAMM = New Global.System.Data.DataColumn("AMM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMM)
            Me.columnTAXSM = New Global.System.Data.DataColumn("TAXSM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXSM)
            Me.columnIsAMM = New Global.System.Data.DataColumn("IsAMM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAMM)
            Me.columnDateMaj = New Global.System.Data.DataColumn("DateMaj", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateMaj)
            Me.columnisComm = New Global.System.Data.DataColumn("isComm", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisComm)
            Me.columnConditionnement = New Global.System.Data.DataColumn("Conditionnement", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConditionnement)
            Me.columnSeuilStock = New Global.System.Data.DataColumn("SeuilStock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeuilStock)
            Me.columnNCompteX = New Global.System.Data.DataColumn("NCompteX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteX)
            Me.columnNActiviteX = New Global.System.Data.DataColumn("NActiviteX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteX)
            Me.columnIngredients = New Global.System.Data.DataColumn("Ingredients", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngredients)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnProduit}, true))
            Me.columnnProduit.AllowDBNull = false
            Me.columnnProduit.Unique = true
            Me.columnCodeProduit.AllowDBNull = false
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 255
            Me.columnLibelleLong.MaxLength = 1073741823
            Me.columnTTVA.MaxLength = 50
            Me.columnIsPrixHT.AllowDBNull = false
            Me.columnUnite1.MaxLength = 2
            Me.columnUnite2.MaxLength = 2
            Me.columnProduitAchat.AllowDBNull = false
            Me.columnProduitVente.AllowDBNull = false
            Me.columnNCompteA.MaxLength = 8
            Me.columnNActiviteA.MaxLength = 4
            Me.columnNCompteV.MaxLength = 8
            Me.columnNActiviteV.MaxLength = 8
            Me.columnFamille2.MaxLength = 50
            Me.columnFamille3.MaxLength = 50
            Me.columnCodeBarre.MaxLength = 13
            Me.columnTypeFacturation.MaxLength = 50
            Me.columnImage.MaxLength = 1073741823
            Me.columnRefFournisseur.MaxLength = 255
            Me.columnIsSortieImpr.AllowDBNull = false
            Me.columnIsEnVente.AllowDBNull = false
            Me.columnAMM.MaxLength = 10
            Me.columnIsAMM.AllowDBNull = false
            Me.columnSeuilStock.AllowDBNull = false
            Me.columnNCompteX.MaxLength = 8
            Me.columnNActiviteX.MaxLength = 4
            Me.columnIngredients.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduitRow() As ProduitRow
            Return CType(Me.NewRow,ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProduitRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProduitRowChangedEvent) Is Nothing) Then
                RaiseEvent ProduitRowChanged(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProduitRowChangingEvent) Is Nothing) Then
                RaiseEvent ProduitRowChanging(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProduitRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProduitRowDeleted(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProduitRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProduitRowDeleting(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduitRow(ByVal row As ProduitRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApproFactDataSet = New ApproFactDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProduitDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FamilleDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnFamille As Global.System.Data.DataColumn
        
        Private columnFamille As Global.System.Data.DataColumn
        
        Private columnnGroupe As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Famille"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFamilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFamille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FamilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nGroupeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnGroupe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FamilleRow
            Get
                Return CType(Me.Rows(index),FamilleRow)
            End Get
        End Property
        
        Public Event FamilleRowChanging As FamilleRowChangeEventHandler
        
        Public Event FamilleRowChanged As FamilleRowChangeEventHandler
        
        Public Event FamilleRowDeleting As FamilleRowChangeEventHandler
        
        Public Event FamilleRowDeleted As FamilleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFamilleRow(ByVal row As FamilleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFamilleRow(ByVal nFamille As Short, ByVal Famille As String, ByVal nGroupe As Short, ByVal Description As String) As FamilleRow
            Dim rowFamilleRow As FamilleRow = CType(Me.NewRow,FamilleRow)
            Dim columnValuesArray() As Object = New Object() {nFamille, Famille, nGroupe, Description}
            rowFamilleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFamilleRow)
            Return rowFamilleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynFamille(ByVal nFamille As Short) As FamilleRow
            Return CType(Me.Rows.Find(New Object() {nFamille}),FamilleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FamilleDataTable = CType(MyBase.Clone,FamilleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FamilleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnFamille = MyBase.Columns("nFamille")
            Me.columnFamille = MyBase.Columns("Famille")
            Me.columnnGroupe = MyBase.Columns("nGroupe")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnFamille = New Global.System.Data.DataColumn("nFamille", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFamille)
            Me.columnFamille = New Global.System.Data.DataColumn("Famille", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille)
            Me.columnnGroupe = New Global.System.Data.DataColumn("nGroupe", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnGroupe)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnFamille}, true))
            Me.columnnFamille.AllowDBNull = false
            Me.columnnFamille.Unique = true
            Me.columnFamille.MaxLength = 255
            Me.columnDescription.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFamilleRow() As FamilleRow
            Return CType(Me.NewRow,FamilleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FamilleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FamilleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FamilleRowChangedEvent) Is Nothing) Then
                RaiseEvent FamilleRowChanged(Me, New FamilleRowChangeEvent(CType(e.Row,FamilleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FamilleRowChangingEvent) Is Nothing) Then
                RaiseEvent FamilleRowChanging(Me, New FamilleRowChangeEvent(CType(e.Row,FamilleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FamilleRowDeletedEvent) Is Nothing) Then
                RaiseEvent FamilleRowDeleted(Me, New FamilleRowChangeEvent(CType(e.Row,FamilleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FamilleRowDeletingEvent) Is Nothing) Then
                RaiseEvent FamilleRowDeleting(Me, New FamilleRowChangeEvent(CType(e.Row,FamilleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFamilleRow(ByVal row As FamilleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApproFactDataSet = New ApproFactDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FamilleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImprBilanVenteApproFactDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnAMM As Global.System.Data.DataColumn
        
        Private columnCodePostal As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImprBilanVenteApproFact"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodePostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodePostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImprBilanVenteApproFactRow
            Get
                Return CType(Me.Rows(index),ImprBilanVenteApproFactRow)
            End Get
        End Property
        
        Public Event ImprBilanVenteApproFactRowChanging As ImprBilanVenteApproFactRowChangeEventHandler
        
        Public Event ImprBilanVenteApproFactRowChanged As ImprBilanVenteApproFactRowChangeEventHandler
        
        Public Event ImprBilanVenteApproFactRowDeleting As ImprBilanVenteApproFactRowChangeEventHandler
        
        Public Event ImprBilanVenteApproFactRowDeleted As ImprBilanVenteApproFactRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImprBilanVenteApproFactRow(ByVal row As ImprBilanVenteApproFactRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImprBilanVenteApproFactRow(ByVal Libelle As String, ByVal AMM As String, ByVal CodePostal As String, ByVal nFacture As Decimal, ByVal DateFacture As Date, ByVal MontantLigneHT As Decimal, ByVal Unite1 As Decimal, ByVal LibUnite1 As String) As ImprBilanVenteApproFactRow
            Dim rowImprBilanVenteApproFactRow As ImprBilanVenteApproFactRow = CType(Me.NewRow,ImprBilanVenteApproFactRow)
            Dim columnValuesArray() As Object = New Object() {Libelle, AMM, CodePostal, nFacture, DateFacture, MontantLigneHT, Unite1, LibUnite1}
            rowImprBilanVenteApproFactRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImprBilanVenteApproFactRow)
            Return rowImprBilanVenteApproFactRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImprBilanVenteApproFactDataTable = CType(MyBase.Clone,ImprBilanVenteApproFactDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImprBilanVenteApproFactDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnAMM = MyBase.Columns("AMM")
            Me.columnCodePostal = MyBase.Columns("CodePostal")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnAMM = New Global.System.Data.DataColumn("AMM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMM)
            Me.columnCodePostal = New Global.System.Data.DataColumn("CodePostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodePostal)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnLibelle.MaxLength = 255
            Me.columnAMM.MaxLength = 10
            Me.columnCodePostal.MaxLength = 255
            Me.columnLibUnite1.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImprBilanVenteApproFactRow() As ImprBilanVenteApproFactRow
            Return CType(Me.NewRow,ImprBilanVenteApproFactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImprBilanVenteApproFactRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImprBilanVenteApproFactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImprBilanVenteApproFactRowChangedEvent) Is Nothing) Then
                RaiseEvent ImprBilanVenteApproFactRowChanged(Me, New ImprBilanVenteApproFactRowChangeEvent(CType(e.Row,ImprBilanVenteApproFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImprBilanVenteApproFactRowChangingEvent) Is Nothing) Then
                RaiseEvent ImprBilanVenteApproFactRowChanging(Me, New ImprBilanVenteApproFactRowChangeEvent(CType(e.Row,ImprBilanVenteApproFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImprBilanVenteApproFactRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImprBilanVenteApproFactRowDeleted(Me, New ImprBilanVenteApproFactRowChangeEvent(CType(e.Row,ImprBilanVenteApproFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImprBilanVenteApproFactRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImprBilanVenteApproFactRowDeleting(Me, New ImprBilanVenteApproFactRowChangeEvent(CType(e.Row,ImprBilanVenteApproFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImprBilanVenteApproFactRow(ByVal row As ImprBilanVenteApproFactRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApproFactDataSet = New ApproFactDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImprBilanVenteApproFactDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ParametresDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnParametre As Global.System.Data.DataColumn
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnCle As Global.System.Data.DataColumn
        
        Private columnTypePiece As Global.System.Data.DataColumn
        
        Private columnValeur As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Parametres"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nParametreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnParametre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypePieceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypePiece
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParametresRow
            Get
                Return CType(Me.Rows(index),ParametresRow)
            End Get
        End Property
        
        Public Event ParametresRowChanging As ParametresRowChangeEventHandler
        
        Public Event ParametresRowChanged As ParametresRowChangeEventHandler
        
        Public Event ParametresRowDeleting As ParametresRowChangeEventHandler
        
        Public Event ParametresRowDeleted As ParametresRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddParametresRow(ByVal row As ParametresRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddParametresRow(ByVal Logo() As Byte, ByVal Cle As String, ByVal TypePiece As String, ByVal Valeur As String) As ParametresRow
            Dim rowParametresRow As ParametresRow = CType(Me.NewRow,ParametresRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Logo, Cle, TypePiece, Valeur}
            rowParametresRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParametresRow)
            Return rowParametresRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynParametre(ByVal nParametre As Decimal) As ParametresRow
            Return CType(Me.Rows.Find(New Object() {nParametre}),ParametresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ParametresDataTable = CType(MyBase.Clone,ParametresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ParametresDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnParametre = MyBase.Columns("nParametre")
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnCle = MyBase.Columns("Cle")
            Me.columnTypePiece = MyBase.Columns("TypePiece")
            Me.columnValeur = MyBase.Columns("Valeur")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnParametre = New Global.System.Data.DataColumn("nParametre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnParametre)
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnCle = New Global.System.Data.DataColumn("Cle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCle)
            Me.columnTypePiece = New Global.System.Data.DataColumn("TypePiece", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypePiece)
            Me.columnValeur = New Global.System.Data.DataColumn("Valeur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValeur)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnParametre}, true))
            Me.columnnParametre.AutoIncrement = true
            Me.columnnParametre.AllowDBNull = false
            Me.columnnParametre.ReadOnly = true
            Me.columnnParametre.Unique = true
            Me.columnCle.MaxLength = 50
            Me.columnTypePiece.MaxLength = 50
            Me.columnValeur.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewParametresRow() As ParametresRow
            Return CType(Me.NewRow,ParametresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ParametresRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ParametresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParametresRowChangedEvent) Is Nothing) Then
                RaiseEvent ParametresRowChanged(Me, New ParametresRowChangeEvent(CType(e.Row,ParametresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParametresRowChangingEvent) Is Nothing) Then
                RaiseEvent ParametresRowChanging(Me, New ParametresRowChangeEvent(CType(e.Row,ParametresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParametresRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParametresRowDeleted(Me, New ParametresRowChangeEvent(CType(e.Row,ParametresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParametresRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParametresRowDeleting(Me, New ParametresRowChangeEvent(CType(e.Row,ParametresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveParametresRow(ByVal row As ParametresRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApproFactDataSet = New ApproFactDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParametresDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EntrepriseDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnEntreprise As Global.System.Data.DataColumn
        
        Private columnDateCreation As Global.System.Data.DataColumn
        
        Private columnDateModification As Global.System.Data.DataColumn
        
        Private columnInfoMAJ As Global.System.Data.DataColumn
        
        Private columnTypeEntreprise As Global.System.Data.DataColumn
        
        Private columnnOrganisme As Global.System.Data.DataColumn
        
        Private columnnMaisonMere As Global.System.Data.DataColumn
        
        Private columnDep As Global.System.Data.DataColumn
        
        Private columnNom As Global.System.Data.DataColumn
        
        Private columnAdresse As Global.System.Data.DataColumn
        
        Private columnCodePostal As Global.System.Data.DataColumn
        
        Private columnVille As Global.System.Data.DataColumn
        
        Private columnPays As Global.System.Data.DataColumn
        
        Private columnTypeClient As Global.System.Data.DataColumn
        
        Private columnModePaiement As Global.System.Data.DataColumn
        
        Private columnEcheance As Global.System.Data.DataColumn
        
        Private columnBanque As Global.System.Data.DataColumn
        
        Private columnRIB As Global.System.Data.DataColumn
        
        Private columnCA As Global.System.Data.DataColumn
        
        Private columnEMail As Global.System.Data.DataColumn
        
        Private columnSiteInternet As Global.System.Data.DataColumn
        
        Private columnObservations As Global.System.Data.DataColumn
        
        Private columnFinMois As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        Private columnFournisseur As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnSuffixePostal As Global.System.Data.DataColumn
        
        Private columnAdresseLiv As Global.System.Data.DataColumn
        
        Private columnCodePostalLiv As Global.System.Data.DataColumn
        
        Private columnVilleLiv As Global.System.Data.DataColumn
        
        Private columnPaysLiv As Global.System.Data.DataColumn
        
        Private columnInactif As Global.System.Data.DataColumn
        
        Private columnLoginSite As Global.System.Data.DataColumn
        
        Private columnPwdSite As Global.System.Data.DataColumn
        
        Private columnIdSite As Global.System.Data.DataColumn
        
        Private columnNCompteF As Global.System.Data.DataColumn
        
        Private columnNActiviteF As Global.System.Data.DataColumn
        
        Private columnNCompteC As Global.System.Data.DataColumn
        
        Private columnNActiviteC As Global.System.Data.DataColumn
        
        Private columnnTarif As Global.System.Data.DataColumn
        
        Private columnCivilite As Global.System.Data.DataColumn
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnLicence As Global.System.Data.DataColumn
        
        Private columnCritere2 As Global.System.Data.DataColumn
        
        Private columnCritere3 As Global.System.Data.DataColumn
        
        Private columnCritere4 As Global.System.Data.DataColumn
        
        Private columnNTVAIntraCom As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnFormeJuridique As Global.System.Data.DataColumn
        
        Private columnCibleCommercial As Global.System.Data.DataColumn
        
        Private columnIsExport As Global.System.Data.DataColumn
        
        Private columnNomFacturation As Global.System.Data.DataColumn
        
        Private columnNomLivraison As Global.System.Data.DataColumn
        
        Private columnEditionBLNonChiffre As Global.System.Data.DataColumn
        
        Private columnObservationLivraison As Global.System.Data.DataColumn
        
        Private columnIndEscompteSpecifique As Global.System.Data.DataColumn
        
        Private columnTauxEscompteSpecifique As Global.System.Data.DataColumn
        
        Private columnDelaiValiditeEscompte As Global.System.Data.DataColumn
        
        Private columnLitigeEnCours As Global.System.Data.DataColumn
        
        Private columnEnCoursMax As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Entreprise"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateModificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateModification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InfoMAJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInfoMAJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrganismeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrganisme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nMaisonMereColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnMaisonMere
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodePostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodePostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModePaiementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModePaiement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SiteInternetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteInternet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinMoisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinMois
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuffixePostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuffixePostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodePostalLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodePostalLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VilleLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVilleLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaysLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaysLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InactifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoginSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoginSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PwdSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPwdSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTarifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTarif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiviliteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCivilite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LicenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLicence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NTVAIntraComColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTVAIntraCom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormeJuridiqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormeJuridique
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CibleCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCibleCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsExportColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsExport
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomLivraisonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomLivraison
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EditionBLNonChiffreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEditionBLNonChiffre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationLivraisonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservationLivraison
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IndEscompteSpecifiqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndEscompteSpecifique
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TauxEscompteSpecifiqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTauxEscompteSpecifique
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DelaiValiditeEscompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelaiValiditeEscompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LitigeEnCoursColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLitigeEnCours
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnCoursMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnCoursMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EntrepriseRow
            Get
                Return CType(Me.Rows(index),EntrepriseRow)
            End Get
        End Property
        
        Public Event EntrepriseRowChanging As EntrepriseRowChangeEventHandler
        
        Public Event EntrepriseRowChanged As EntrepriseRowChangeEventHandler
        
        Public Event EntrepriseRowDeleting As EntrepriseRowChangeEventHandler
        
        Public Event EntrepriseRowDeleted As EntrepriseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEntrepriseRow(ByVal row As EntrepriseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEntrepriseRow( _
                    ByVal nEntreprise As Decimal,  _
                    ByVal DateCreation As Date,  _
                    ByVal DateModification As Date,  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypeEntreprise As String,  _
                    ByVal nOrganisme As String,  _
                    ByVal nMaisonMere As Decimal,  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal TypeClient As String,  _
                    ByVal ModePaiement As String,  _
                    ByVal Echeance As Decimal,  _
                    ByVal Banque As String,  _
                    ByVal RIB As String,  _
                    ByVal CA As Single,  _
                    ByVal EMail As String,  _
                    ByVal SiteInternet As String,  _
                    ByVal Observations As String,  _
                    ByVal FinMois As Boolean,  _
                    ByVal Remise As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal Fournisseur As Boolean,  _
                    ByVal Client As Boolean,  _
                    ByVal SuffixePostal As String,  _
                    ByVal AdresseLiv As String,  _
                    ByVal CodePostalLiv As String,  _
                    ByVal VilleLiv As String,  _
                    ByVal PaysLiv As String,  _
                    ByVal Inactif As Boolean,  _
                    ByVal LoginSite As String,  _
                    ByVal PwdSite As String,  _
                    ByVal IdSite As Decimal,  _
                    ByVal NCompteF As String,  _
                    ByVal NActiviteF As String,  _
                    ByVal NCompteC As String,  _
                    ByVal NActiviteC As String,  _
                    ByVal nTarif As Decimal,  _
                    ByVal Civilite As String,  _
                    ByVal Logo() As Byte,  _
                    ByVal Licence As String,  _
                    ByVal Critere2 As String,  _
                    ByVal Critere3 As String,  _
                    ByVal Critere4 As String,  _
                    ByVal NTVAIntraCom As String,  _
                    ByVal nCommercial As Integer,  _
                    ByVal FormeJuridique As String,  _
                    ByVal CibleCommercial As String,  _
                    ByVal IsExport As Boolean,  _
                    ByVal NomFacturation As String,  _
                    ByVal NomLivraison As String,  _
                    ByVal EditionBLNonChiffre As Boolean,  _
                    ByVal ObservationLivraison As String,  _
                    ByVal IndEscompteSpecifique As Boolean,  _
                    ByVal TauxEscompteSpecifique As Decimal,  _
                    ByVal DelaiValiditeEscompte As Integer,  _
                    ByVal LitigeEnCours As Boolean,  _
                    ByVal EnCoursMax As Decimal) As EntrepriseRow
            Dim rowEntrepriseRow As EntrepriseRow = CType(Me.NewRow,EntrepriseRow)
            Dim columnValuesArray() As Object = New Object() {nEntreprise, DateCreation, DateModification, InfoMAJ, TypeEntreprise, nOrganisme, nMaisonMere, Dep, Nom, Adresse, CodePostal, Ville, Pays, TypeClient, ModePaiement, Echeance, Banque, RIB, CA, EMail, SiteInternet, Observations, FinMois, Remise, TTVA, FacturationTTC, Fournisseur, Client, SuffixePostal, AdresseLiv, CodePostalLiv, VilleLiv, PaysLiv, Inactif, LoginSite, PwdSite, IdSite, NCompteF, NActiviteF, NCompteC, NActiviteC, nTarif, Civilite, Logo, Licence, Critere2, Critere3, Critere4, NTVAIntraCom, nCommercial, FormeJuridique, CibleCommercial, IsExport, NomFacturation, NomLivraison, EditionBLNonChiffre, ObservationLivraison, IndEscompteSpecifique, TauxEscompteSpecifique, DelaiValiditeEscompte, LitigeEnCours, EnCoursMax}
            rowEntrepriseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEntrepriseRow)
            Return rowEntrepriseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynEntreprise(ByVal nEntreprise As Decimal) As EntrepriseRow
            Return CType(Me.Rows.Find(New Object() {nEntreprise}),EntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EntrepriseDataTable = CType(MyBase.Clone,EntrepriseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EntrepriseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnEntreprise = MyBase.Columns("nEntreprise")
            Me.columnDateCreation = MyBase.Columns("DateCreation")
            Me.columnDateModification = MyBase.Columns("DateModification")
            Me.columnInfoMAJ = MyBase.Columns("InfoMAJ")
            Me.columnTypeEntreprise = MyBase.Columns("TypeEntreprise")
            Me.columnnOrganisme = MyBase.Columns("nOrganisme")
            Me.columnnMaisonMere = MyBase.Columns("nMaisonMere")
            Me.columnDep = MyBase.Columns("Dep")
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnAdresse = MyBase.Columns("Adresse")
            Me.columnCodePostal = MyBase.Columns("CodePostal")
            Me.columnVille = MyBase.Columns("Ville")
            Me.columnPays = MyBase.Columns("Pays")
            Me.columnTypeClient = MyBase.Columns("TypeClient")
            Me.columnModePaiement = MyBase.Columns("ModePaiement")
            Me.columnEcheance = MyBase.Columns("Echeance")
            Me.columnBanque = MyBase.Columns("Banque")
            Me.columnRIB = MyBase.Columns("RIB")
            Me.columnCA = MyBase.Columns("CA")
            Me.columnEMail = MyBase.Columns("EMail")
            Me.columnSiteInternet = MyBase.Columns("SiteInternet")
            Me.columnObservations = MyBase.Columns("Observations")
            Me.columnFinMois = MyBase.Columns("FinMois")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
            Me.columnFournisseur = MyBase.Columns("Fournisseur")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnSuffixePostal = MyBase.Columns("SuffixePostal")
            Me.columnAdresseLiv = MyBase.Columns("AdresseLiv")
            Me.columnCodePostalLiv = MyBase.Columns("CodePostalLiv")
            Me.columnVilleLiv = MyBase.Columns("VilleLiv")
            Me.columnPaysLiv = MyBase.Columns("PaysLiv")
            Me.columnInactif = MyBase.Columns("Inactif")
            Me.columnLoginSite = MyBase.Columns("LoginSite")
            Me.columnPwdSite = MyBase.Columns("PwdSite")
            Me.columnIdSite = MyBase.Columns("IdSite")
            Me.columnNCompteF = MyBase.Columns("NCompteF")
            Me.columnNActiviteF = MyBase.Columns("NActiviteF")
            Me.columnNCompteC = MyBase.Columns("NCompteC")
            Me.columnNActiviteC = MyBase.Columns("NActiviteC")
            Me.columnnTarif = MyBase.Columns("nTarif")
            Me.columnCivilite = MyBase.Columns("Civilite")
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnLicence = MyBase.Columns("Licence")
            Me.columnCritere2 = MyBase.Columns("Critere2")
            Me.columnCritere3 = MyBase.Columns("Critere3")
            Me.columnCritere4 = MyBase.Columns("Critere4")
            Me.columnNTVAIntraCom = MyBase.Columns("NTVAIntraCom")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnFormeJuridique = MyBase.Columns("FormeJuridique")
            Me.columnCibleCommercial = MyBase.Columns("CibleCommercial")
            Me.columnIsExport = MyBase.Columns("IsExport")
            Me.columnNomFacturation = MyBase.Columns("NomFacturation")
            Me.columnNomLivraison = MyBase.Columns("NomLivraison")
            Me.columnEditionBLNonChiffre = MyBase.Columns("EditionBLNonChiffre")
            Me.columnObservationLivraison = MyBase.Columns("ObservationLivraison")
            Me.columnIndEscompteSpecifique = MyBase.Columns("IndEscompteSpecifique")
            Me.columnTauxEscompteSpecifique = MyBase.Columns("TauxEscompteSpecifique")
            Me.columnDelaiValiditeEscompte = MyBase.Columns("DelaiValiditeEscompte")
            Me.columnLitigeEnCours = MyBase.Columns("LitigeEnCours")
            Me.columnEnCoursMax = MyBase.Columns("EnCoursMax")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnEntreprise = New Global.System.Data.DataColumn("nEntreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnEntreprise)
            Me.columnDateCreation = New Global.System.Data.DataColumn("DateCreation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreation)
            Me.columnDateModification = New Global.System.Data.DataColumn("DateModification", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateModification)
            Me.columnInfoMAJ = New Global.System.Data.DataColumn("InfoMAJ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInfoMAJ)
            Me.columnTypeEntreprise = New Global.System.Data.DataColumn("TypeEntreprise", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeEntreprise)
            Me.columnnOrganisme = New Global.System.Data.DataColumn("nOrganisme", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrganisme)
            Me.columnnMaisonMere = New Global.System.Data.DataColumn("nMaisonMere", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnMaisonMere)
            Me.columnDep = New Global.System.Data.DataColumn("Dep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDep)
            Me.columnNom = New Global.System.Data.DataColumn("Nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnAdresse = New Global.System.Data.DataColumn("Adresse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresse)
            Me.columnCodePostal = New Global.System.Data.DataColumn("CodePostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodePostal)
            Me.columnVille = New Global.System.Data.DataColumn("Ville", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVille)
            Me.columnPays = New Global.System.Data.DataColumn("Pays", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPays)
            Me.columnTypeClient = New Global.System.Data.DataColumn("TypeClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeClient)
            Me.columnModePaiement = New Global.System.Data.DataColumn("ModePaiement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModePaiement)
            Me.columnEcheance = New Global.System.Data.DataColumn("Echeance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEcheance)
            Me.columnBanque = New Global.System.Data.DataColumn("Banque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanque)
            Me.columnRIB = New Global.System.Data.DataColumn("RIB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIB)
            Me.columnCA = New Global.System.Data.DataColumn("CA", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCA)
            Me.columnEMail = New Global.System.Data.DataColumn("EMail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMail)
            Me.columnSiteInternet = New Global.System.Data.DataColumn("SiteInternet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteInternet)
            Me.columnObservations = New Global.System.Data.DataColumn("Observations", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservations)
            Me.columnFinMois = New Global.System.Data.DataColumn("FinMois", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinMois)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.columnFournisseur = New Global.System.Data.DataColumn("Fournisseur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFournisseur)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnSuffixePostal = New Global.System.Data.DataColumn("SuffixePostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuffixePostal)
            Me.columnAdresseLiv = New Global.System.Data.DataColumn("AdresseLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseLiv)
            Me.columnCodePostalLiv = New Global.System.Data.DataColumn("CodePostalLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodePostalLiv)
            Me.columnVilleLiv = New Global.System.Data.DataColumn("VilleLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVilleLiv)
            Me.columnPaysLiv = New Global.System.Data.DataColumn("PaysLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaysLiv)
            Me.columnInactif = New Global.System.Data.DataColumn("Inactif", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactif)
            Me.columnLoginSite = New Global.System.Data.DataColumn("LoginSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoginSite)
            Me.columnPwdSite = New Global.System.Data.DataColumn("PwdSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPwdSite)
            Me.columnIdSite = New Global.System.Data.DataColumn("IdSite", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSite)
            Me.columnNCompteF = New Global.System.Data.DataColumn("NCompteF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteF)
            Me.columnNActiviteF = New Global.System.Data.DataColumn("NActiviteF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteF)
            Me.columnNCompteC = New Global.System.Data.DataColumn("NCompteC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteC)
            Me.columnNActiviteC = New Global.System.Data.DataColumn("NActiviteC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteC)
            Me.columnnTarif = New Global.System.Data.DataColumn("nTarif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTarif)
            Me.columnCivilite = New Global.System.Data.DataColumn("Civilite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCivilite)
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnLicence = New Global.System.Data.DataColumn("Licence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLicence)
            Me.columnCritere2 = New Global.System.Data.DataColumn("Critere2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere2)
            Me.columnCritere3 = New Global.System.Data.DataColumn("Critere3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere3)
            Me.columnCritere4 = New Global.System.Data.DataColumn("Critere4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere4)
            Me.columnNTVAIntraCom = New Global.System.Data.DataColumn("NTVAIntraCom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTVAIntraCom)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnFormeJuridique = New Global.System.Data.DataColumn("FormeJuridique", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormeJuridique)
            Me.columnCibleCommercial = New Global.System.Data.DataColumn("CibleCommercial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCibleCommercial)
            Me.columnIsExport = New Global.System.Data.DataColumn("IsExport", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsExport)
            Me.columnNomFacturation = New Global.System.Data.DataColumn("NomFacturation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomFacturation)
            Me.columnNomLivraison = New Global.System.Data.DataColumn("NomLivraison", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomLivraison)
            Me.columnEditionBLNonChiffre = New Global.System.Data.DataColumn("EditionBLNonChiffre", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEditionBLNonChiffre)
            Me.columnObservationLivraison = New Global.System.Data.DataColumn("ObservationLivraison", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservationLivraison)
            Me.columnIndEscompteSpecifique = New Global.System.Data.DataColumn("IndEscompteSpecifique", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndEscompteSpecifique)
            Me.columnTauxEscompteSpecifique = New Global.System.Data.DataColumn("TauxEscompteSpecifique", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTauxEscompteSpecifique)
            Me.columnDelaiValiditeEscompte = New Global.System.Data.DataColumn("DelaiValiditeEscompte", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelaiValiditeEscompte)
            Me.columnLitigeEnCours = New Global.System.Data.DataColumn("LitigeEnCours", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLitigeEnCours)
            Me.columnEnCoursMax = New Global.System.Data.DataColumn("EnCoursMax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnCoursMax)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnEntreprise}, true))
            Me.columnnEntreprise.AllowDBNull = false
            Me.columnnEntreprise.Unique = true
            Me.columnInfoMAJ.MaxLength = 255
            Me.columnTypeEntreprise.MaxLength = 255
            Me.columnnOrganisme.MaxLength = 255
            Me.columnDep.MaxLength = 255
            Me.columnNom.MaxLength = 255
            Me.columnAdresse.MaxLength = 1073741823
            Me.columnCodePostal.MaxLength = 255
            Me.columnVille.MaxLength = 255
            Me.columnPays.MaxLength = 255
            Me.columnTypeClient.MaxLength = 255
            Me.columnModePaiement.MaxLength = 255
            Me.columnBanque.MaxLength = 255
            Me.columnRIB.MaxLength = 255
            Me.columnEMail.MaxLength = 255
            Me.columnSiteInternet.MaxLength = 255
            Me.columnObservations.MaxLength = 1073741823
            Me.columnTTVA.MaxLength = 50
            Me.columnSuffixePostal.MaxLength = 255
            Me.columnAdresseLiv.MaxLength = 1073741823
            Me.columnCodePostalLiv.MaxLength = 50
            Me.columnVilleLiv.MaxLength = 255
            Me.columnPaysLiv.MaxLength = 255
            Me.columnLoginSite.MaxLength = 50
            Me.columnPwdSite.MaxLength = 50
            Me.columnNCompteF.MaxLength = 8
            Me.columnNActiviteF.MaxLength = 8
            Me.columnNCompteC.MaxLength = 8
            Me.columnNActiviteC.MaxLength = 4
            Me.columnCivilite.MaxLength = 50
            Me.columnLicence.MaxLength = 255
            Me.columnCritere2.MaxLength = 255
            Me.columnCritere3.MaxLength = 255
            Me.columnCritere4.MaxLength = 255
            Me.columnNTVAIntraCom.MaxLength = 50
            Me.columnFormeJuridique.MaxLength = 255
            Me.columnCibleCommercial.MaxLength = 1073741823
            Me.columnNomFacturation.MaxLength = 255
            Me.columnNomLivraison.MaxLength = 255
            Me.columnObservationLivraison.MaxLength = 255
            Me.columnIndEscompteSpecifique.AllowDBNull = false
            Me.columnLitigeEnCours.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEntrepriseRow() As EntrepriseRow
            Return CType(Me.NewRow,EntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EntrepriseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EntrepriseRowChangedEvent) Is Nothing) Then
                RaiseEvent EntrepriseRowChanged(Me, New EntrepriseRowChangeEvent(CType(e.Row,EntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EntrepriseRowChangingEvent) Is Nothing) Then
                RaiseEvent EntrepriseRowChanging(Me, New EntrepriseRowChangeEvent(CType(e.Row,EntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EntrepriseRowDeletedEvent) Is Nothing) Then
                RaiseEvent EntrepriseRowDeleted(Me, New EntrepriseRowChangeEvent(CType(e.Row,EntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EntrepriseRowDeletingEvent) Is Nothing) Then
                RaiseEvent EntrepriseRowDeleting(Me, New EntrepriseRowChangeEvent(CType(e.Row,EntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEntrepriseRow(ByVal row As EntrepriseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApproFactDataSet = New ApproFactDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EntrepriseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PersonneDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnPersonne As Global.System.Data.DataColumn
        
        Private columnDateCreation As Global.System.Data.DataColumn
        
        Private columnDateModification As Global.System.Data.DataColumn
        
        Private columnInfoMAJ As Global.System.Data.DataColumn
        
        Private columnTypePersonne As Global.System.Data.DataColumn
        
        Private columnDep As Global.System.Data.DataColumn
        
        Private columnNom As Global.System.Data.DataColumn
        
        Private columnPrenom As Global.System.Data.DataColumn
        
        Private columnnEntreprise As Global.System.Data.DataColumn
        
        Private columnAdresse As Global.System.Data.DataColumn
        
        Private columnCodePostal As Global.System.Data.DataColumn
        
        Private columnVille As Global.System.Data.DataColumn
        
        Private columnPays As Global.System.Data.DataColumn
        
        Private columnNomJeuneFille As Global.System.Data.DataColumn
        
        Private columnTypeClient As Global.System.Data.DataColumn
        
        Private columnFonction As Global.System.Data.DataColumn
        
        Private columnCampagne As Global.System.Data.DataColumn
        
        Private columnDatedeNaissance As Global.System.Data.DataColumn
        
        Private columnLieuNaissance As Global.System.Data.DataColumn
        
        Private columnEMail As Global.System.Data.DataColumn
        
        Private columnAdressehttp As Global.System.Data.DataColumn
        
        Private columnObservations As Global.System.Data.DataColumn
        
        Private columnNpAfficher As Global.System.Data.DataColumn
        
        Private columnNpRecevoirInfo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Personne"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPersonneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPersonne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateModificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateModification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InfoMAJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInfoMAJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypePersonneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypePersonne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrenomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrenom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodePostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodePostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomJeuneFilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomJeuneFille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FonctionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFonction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CampagneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCampagne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatedeNaissanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatedeNaissance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LieuNaissanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLieuNaissance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdressehttpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdressehttp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NpAfficherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNpAfficher
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NpRecevoirInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNpRecevoirInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PersonneRow
            Get
                Return CType(Me.Rows(index),PersonneRow)
            End Get
        End Property
        
        Public Event PersonneRowChanging As PersonneRowChangeEventHandler
        
        Public Event PersonneRowChanged As PersonneRowChangeEventHandler
        
        Public Event PersonneRowDeleting As PersonneRowChangeEventHandler
        
        Public Event PersonneRowDeleted As PersonneRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPersonneRow(ByVal row As PersonneRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPersonneRow( _
                    ByVal nPersonne As Decimal,  _
                    ByVal DateCreation As Date,  _
                    ByVal DateModification As Date,  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypePersonne As String,  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Prenom As String,  _
                    ByVal parentEntrepriseRowByFK_Personne_Entreprise As EntrepriseRow,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal NomJeuneFille As String,  _
                    ByVal TypeClient As String,  _
                    ByVal Fonction As String,  _
                    ByVal Campagne As String,  _
                    ByVal DatedeNaissance As Date,  _
                    ByVal LieuNaissance As String,  _
                    ByVal EMail As String,  _
                    ByVal Adressehttp As String,  _
                    ByVal Observations As String,  _
                    ByVal NpAfficher As Boolean,  _
                    ByVal NpRecevoirInfo As Boolean) As PersonneRow
            Dim rowPersonneRow As PersonneRow = CType(Me.NewRow,PersonneRow)
            Dim columnValuesArray() As Object = New Object() {nPersonne, DateCreation, DateModification, InfoMAJ, TypePersonne, Dep, Nom, Prenom, Nothing, Adresse, CodePostal, Ville, Pays, NomJeuneFille, TypeClient, Fonction, Campagne, DatedeNaissance, LieuNaissance, EMail, Adressehttp, Observations, NpAfficher, NpRecevoirInfo}
            If (Not (parentEntrepriseRowByFK_Personne_Entreprise) Is Nothing) Then
                columnValuesArray(8) = parentEntrepriseRowByFK_Personne_Entreprise(0)
            End If
            rowPersonneRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPersonneRow)
            Return rowPersonneRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynPersonne(ByVal nPersonne As Decimal) As PersonneRow
            Return CType(Me.Rows.Find(New Object() {nPersonne}),PersonneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PersonneDataTable = CType(MyBase.Clone,PersonneDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PersonneDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnPersonne = MyBase.Columns("nPersonne")
            Me.columnDateCreation = MyBase.Columns("DateCreation")
            Me.columnDateModification = MyBase.Columns("DateModification")
            Me.columnInfoMAJ = MyBase.Columns("InfoMAJ")
            Me.columnTypePersonne = MyBase.Columns("TypePersonne")
            Me.columnDep = MyBase.Columns("Dep")
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnPrenom = MyBase.Columns("Prenom")
            Me.columnnEntreprise = MyBase.Columns("nEntreprise")
            Me.columnAdresse = MyBase.Columns("Adresse")
            Me.columnCodePostal = MyBase.Columns("CodePostal")
            Me.columnVille = MyBase.Columns("Ville")
            Me.columnPays = MyBase.Columns("Pays")
            Me.columnNomJeuneFille = MyBase.Columns("NomJeuneFille")
            Me.columnTypeClient = MyBase.Columns("TypeClient")
            Me.columnFonction = MyBase.Columns("Fonction")
            Me.columnCampagne = MyBase.Columns("Campagne")
            Me.columnDatedeNaissance = MyBase.Columns("DatedeNaissance")
            Me.columnLieuNaissance = MyBase.Columns("LieuNaissance")
            Me.columnEMail = MyBase.Columns("EMail")
            Me.columnAdressehttp = MyBase.Columns("Adressehttp")
            Me.columnObservations = MyBase.Columns("Observations")
            Me.columnNpAfficher = MyBase.Columns("NpAfficher")
            Me.columnNpRecevoirInfo = MyBase.Columns("NpRecevoirInfo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnPersonne = New Global.System.Data.DataColumn("nPersonne", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPersonne)
            Me.columnDateCreation = New Global.System.Data.DataColumn("DateCreation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreation)
            Me.columnDateModification = New Global.System.Data.DataColumn("DateModification", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateModification)
            Me.columnInfoMAJ = New Global.System.Data.DataColumn("InfoMAJ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInfoMAJ)
            Me.columnTypePersonne = New Global.System.Data.DataColumn("TypePersonne", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypePersonne)
            Me.columnDep = New Global.System.Data.DataColumn("Dep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDep)
            Me.columnNom = New Global.System.Data.DataColumn("Nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnPrenom = New Global.System.Data.DataColumn("Prenom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrenom)
            Me.columnnEntreprise = New Global.System.Data.DataColumn("nEntreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnEntreprise)
            Me.columnAdresse = New Global.System.Data.DataColumn("Adresse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresse)
            Me.columnCodePostal = New Global.System.Data.DataColumn("CodePostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodePostal)
            Me.columnVille = New Global.System.Data.DataColumn("Ville", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVille)
            Me.columnPays = New Global.System.Data.DataColumn("Pays", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPays)
            Me.columnNomJeuneFille = New Global.System.Data.DataColumn("NomJeuneFille", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomJeuneFille)
            Me.columnTypeClient = New Global.System.Data.DataColumn("TypeClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeClient)
            Me.columnFonction = New Global.System.Data.DataColumn("Fonction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFonction)
            Me.columnCampagne = New Global.System.Data.DataColumn("Campagne", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCampagne)
            Me.columnDatedeNaissance = New Global.System.Data.DataColumn("DatedeNaissance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatedeNaissance)
            Me.columnLieuNaissance = New Global.System.Data.DataColumn("LieuNaissance", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLieuNaissance)
            Me.columnEMail = New Global.System.Data.DataColumn("EMail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMail)
            Me.columnAdressehttp = New Global.System.Data.DataColumn("Adressehttp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdressehttp)
            Me.columnObservations = New Global.System.Data.DataColumn("Observations", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservations)
            Me.columnNpAfficher = New Global.System.Data.DataColumn("NpAfficher", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNpAfficher)
            Me.columnNpRecevoirInfo = New Global.System.Data.DataColumn("NpRecevoirInfo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNpRecevoirInfo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnPersonne}, true))
            Me.columnnPersonne.AllowDBNull = false
            Me.columnnPersonne.Unique = true
            Me.columnInfoMAJ.MaxLength = 255
            Me.columnTypePersonne.MaxLength = 255
            Me.columnDep.MaxLength = 255
            Me.columnNom.MaxLength = 255
            Me.columnPrenom.MaxLength = 255
            Me.columnAdresse.MaxLength = 1073741823
            Me.columnCodePostal.MaxLength = 50
            Me.columnVille.MaxLength = 255
            Me.columnPays.MaxLength = 255
            Me.columnNomJeuneFille.MaxLength = 255
            Me.columnTypeClient.MaxLength = 255
            Me.columnFonction.MaxLength = 255
            Me.columnCampagne.MaxLength = 255
            Me.columnLieuNaissance.MaxLength = 255
            Me.columnEMail.MaxLength = 255
            Me.columnAdressehttp.MaxLength = 255
            Me.columnObservations.MaxLength = 1073741823
            Me.columnNpAfficher.AllowDBNull = false
            Me.columnNpRecevoirInfo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPersonneRow() As PersonneRow
            Return CType(Me.NewRow,PersonneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PersonneRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PersonneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PersonneRowChangedEvent) Is Nothing) Then
                RaiseEvent PersonneRowChanged(Me, New PersonneRowChangeEvent(CType(e.Row,PersonneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PersonneRowChangingEvent) Is Nothing) Then
                RaiseEvent PersonneRowChanging(Me, New PersonneRowChangeEvent(CType(e.Row,PersonneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PersonneRowDeletedEvent) Is Nothing) Then
                RaiseEvent PersonneRowDeleted(Me, New PersonneRowChangeEvent(CType(e.Row,PersonneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PersonneRowDeletingEvent) Is Nothing) Then
                RaiseEvent PersonneRowDeleting(Me, New PersonneRowChangeEvent(CType(e.Row,PersonneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePersonneRow(ByVal row As PersonneRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApproFactDataSet = New ApproFactDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PersonneDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TelephoneDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnPersonne As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnNumero As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Telephone"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPersonneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPersonne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TelephoneRow
            Get
                Return CType(Me.Rows(index),TelephoneRow)
            End Get
        End Property
        
        Public Event TelephoneRowChanging As TelephoneRowChangeEventHandler
        
        Public Event TelephoneRowChanged As TelephoneRowChangeEventHandler
        
        Public Event TelephoneRowDeleting As TelephoneRowChangeEventHandler
        
        Public Event TelephoneRowDeleted As TelephoneRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTelephoneRow(ByVal row As TelephoneRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTelephoneRow(ByVal parentPersonneRowByFK_Telephone_Personne As PersonneRow, ByVal Type As String, ByVal Numero As String) As TelephoneRow
            Dim rowTelephoneRow As TelephoneRow = CType(Me.NewRow,TelephoneRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Type, Numero}
            If (Not (parentPersonneRowByFK_Telephone_Personne) Is Nothing) Then
                columnValuesArray(0) = parentPersonneRowByFK_Telephone_Personne(0)
            End If
            rowTelephoneRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTelephoneRow)
            Return rowTelephoneRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynPersonneType(ByVal nPersonne As Decimal, ByVal Type As String) As TelephoneRow
            Return CType(Me.Rows.Find(New Object() {nPersonne, Type}),TelephoneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TelephoneDataTable = CType(MyBase.Clone,TelephoneDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TelephoneDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnPersonne = MyBase.Columns("nPersonne")
            Me.columnType = MyBase.Columns("Type")
            Me.columnNumero = MyBase.Columns("Numero")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnPersonne = New Global.System.Data.DataColumn("nPersonne", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPersonne)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnPersonne, Me.columnType}, true))
            Me.columnnPersonne.AllowDBNull = false
            Me.columnType.AllowDBNull = false
            Me.columnType.MaxLength = 50
            Me.columnNumero.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTelephoneRow() As TelephoneRow
            Return CType(Me.NewRow,TelephoneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TelephoneRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TelephoneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TelephoneRowChangedEvent) Is Nothing) Then
                RaiseEvent TelephoneRowChanged(Me, New TelephoneRowChangeEvent(CType(e.Row,TelephoneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TelephoneRowChangingEvent) Is Nothing) Then
                RaiseEvent TelephoneRowChanging(Me, New TelephoneRowChangeEvent(CType(e.Row,TelephoneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TelephoneRowDeletedEvent) Is Nothing) Then
                RaiseEvent TelephoneRowDeleted(Me, New TelephoneRowChangeEvent(CType(e.Row,TelephoneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TelephoneRowDeletingEvent) Is Nothing) Then
                RaiseEvent TelephoneRowDeleting(Me, New TelephoneRowChangeEvent(CType(e.Row,TelephoneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTelephoneRow(ByVal row As TelephoneRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApproFactDataSet = New ApproFactDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TelephoneDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TelephoneEntrepriseDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnEntreprise As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnNumero As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TelephoneEntreprise"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TelephoneEntrepriseRow
            Get
                Return CType(Me.Rows(index),TelephoneEntrepriseRow)
            End Get
        End Property
        
        Public Event TelephoneEntrepriseRowChanging As TelephoneEntrepriseRowChangeEventHandler
        
        Public Event TelephoneEntrepriseRowChanged As TelephoneEntrepriseRowChangeEventHandler
        
        Public Event TelephoneEntrepriseRowDeleting As TelephoneEntrepriseRowChangeEventHandler
        
        Public Event TelephoneEntrepriseRowDeleted As TelephoneEntrepriseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTelephoneEntrepriseRow(ByVal row As TelephoneEntrepriseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTelephoneEntrepriseRow(ByVal parentEntrepriseRowByFK_TelephoneEntreprise_Entreprise As EntrepriseRow, ByVal Type As String, ByVal Numero As String) As TelephoneEntrepriseRow
            Dim rowTelephoneEntrepriseRow As TelephoneEntrepriseRow = CType(Me.NewRow,TelephoneEntrepriseRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Type, Numero}
            If (Not (parentEntrepriseRowByFK_TelephoneEntreprise_Entreprise) Is Nothing) Then
                columnValuesArray(0) = parentEntrepriseRowByFK_TelephoneEntreprise_Entreprise(0)
            End If
            rowTelephoneEntrepriseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTelephoneEntrepriseRow)
            Return rowTelephoneEntrepriseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynEntrepriseType(ByVal nEntreprise As Decimal, ByVal Type As String) As TelephoneEntrepriseRow
            Return CType(Me.Rows.Find(New Object() {nEntreprise, Type}),TelephoneEntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TelephoneEntrepriseDataTable = CType(MyBase.Clone,TelephoneEntrepriseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TelephoneEntrepriseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnEntreprise = MyBase.Columns("nEntreprise")
            Me.columnType = MyBase.Columns("Type")
            Me.columnNumero = MyBase.Columns("Numero")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnEntreprise = New Global.System.Data.DataColumn("nEntreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnEntreprise)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnEntreprise, Me.columnType}, true))
            Me.columnnEntreprise.AllowDBNull = false
            Me.columnType.AllowDBNull = false
            Me.columnType.MaxLength = 50
            Me.columnNumero.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTelephoneEntrepriseRow() As TelephoneEntrepriseRow
            Return CType(Me.NewRow,TelephoneEntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TelephoneEntrepriseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TelephoneEntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TelephoneEntrepriseRowChangedEvent) Is Nothing) Then
                RaiseEvent TelephoneEntrepriseRowChanged(Me, New TelephoneEntrepriseRowChangeEvent(CType(e.Row,TelephoneEntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TelephoneEntrepriseRowChangingEvent) Is Nothing) Then
                RaiseEvent TelephoneEntrepriseRowChanging(Me, New TelephoneEntrepriseRowChangeEvent(CType(e.Row,TelephoneEntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TelephoneEntrepriseRowDeletedEvent) Is Nothing) Then
                RaiseEvent TelephoneEntrepriseRowDeleted(Me, New TelephoneEntrepriseRowChangeEvent(CType(e.Row,TelephoneEntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TelephoneEntrepriseRowDeletingEvent) Is Nothing) Then
                RaiseEvent TelephoneEntrepriseRowDeleting(Me, New TelephoneEntrepriseRowChangeEvent(CType(e.Row,TelephoneEntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTelephoneEntrepriseRow(ByVal row As TelephoneEntrepriseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApproFactDataSet = New ApproFactDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TelephoneEntrepriseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CodeInseeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnote As Global.System.Data.DataColumn
        
        Private columnNomVille As Global.System.Data.DataColumn
        
        Private columnCodePostal As Global.System.Data.DataColumn
        
        Private columnCodeINSEE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CodeInsee"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property noteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomVilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomVille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodePostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodePostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeINSEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeINSEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CodeInseeRow
            Get
                Return CType(Me.Rows(index),CodeInseeRow)
            End Get
        End Property
        
        Public Event CodeInseeRowChanging As CodeInseeRowChangeEventHandler
        
        Public Event CodeInseeRowChanged As CodeInseeRowChangeEventHandler
        
        Public Event CodeInseeRowDeleting As CodeInseeRowChangeEventHandler
        
        Public Event CodeInseeRowDeleted As CodeInseeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCodeInseeRow(ByVal row As CodeInseeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCodeInseeRow(ByVal note As Integer, ByVal NomVille As String, ByVal CodePostal As String, ByVal CodeINSEE As Integer) As CodeInseeRow
            Dim rowCodeInseeRow As CodeInseeRow = CType(Me.NewRow,CodeInseeRow)
            Dim columnValuesArray() As Object = New Object() {note, NomVille, CodePostal, CodeINSEE}
            rowCodeInseeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCodeInseeRow)
            Return rowCodeInseeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CodeInseeDataTable = CType(MyBase.Clone,CodeInseeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CodeInseeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnote = MyBase.Columns("note")
            Me.columnNomVille = MyBase.Columns("NomVille")
            Me.columnCodePostal = MyBase.Columns("CodePostal")
            Me.columnCodeINSEE = MyBase.Columns("CodeINSEE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnote = New Global.System.Data.DataColumn("note", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnote)
            Me.columnNomVille = New Global.System.Data.DataColumn("NomVille", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomVille)
            Me.columnCodePostal = New Global.System.Data.DataColumn("CodePostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodePostal)
            Me.columnCodeINSEE = New Global.System.Data.DataColumn("CodeINSEE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeINSEE)
            Me.columnnote.ReadOnly = true
            Me.columnNomVille.MaxLength = 255
            Me.columnCodePostal.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCodeInseeRow() As CodeInseeRow
            Return CType(Me.NewRow,CodeInseeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CodeInseeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CodeInseeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CodeInseeRowChangedEvent) Is Nothing) Then
                RaiseEvent CodeInseeRowChanged(Me, New CodeInseeRowChangeEvent(CType(e.Row,CodeInseeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CodeInseeRowChangingEvent) Is Nothing) Then
                RaiseEvent CodeInseeRowChanging(Me, New CodeInseeRowChangeEvent(CType(e.Row,CodeInseeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CodeInseeRowDeletedEvent) Is Nothing) Then
                RaiseEvent CodeInseeRowDeleted(Me, New CodeInseeRowChangeEvent(CType(e.Row,CodeInseeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CodeInseeRowDeletingEvent) Is Nothing) Then
                RaiseEvent CodeInseeRowDeleting(Me, New CodeInseeRowChangeEvent(CType(e.Row,CodeInseeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCodeInseeRow(ByVal row As CodeInseeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApproFactDataSet = New ApproFactDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CodeInseeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ExportBilanVenteApproFactDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAMM As Global.System.Data.DataColumn
        
        Private columnQUANTITE As Global.System.Data.DataColumn
        
        Private columnCODEPOSTAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ExportBilanVenteApproFact"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QUANTITEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUANTITE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODEPOSTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODEPOSTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ExportBilanVenteApproFactRow
            Get
                Return CType(Me.Rows(index),ExportBilanVenteApproFactRow)
            End Get
        End Property
        
        Public Event ExportBilanVenteApproFactRowChanging As ExportBilanVenteApproFactRowChangeEventHandler
        
        Public Event ExportBilanVenteApproFactRowChanged As ExportBilanVenteApproFactRowChangeEventHandler
        
        Public Event ExportBilanVenteApproFactRowDeleting As ExportBilanVenteApproFactRowChangeEventHandler
        
        Public Event ExportBilanVenteApproFactRowDeleted As ExportBilanVenteApproFactRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddExportBilanVenteApproFactRow(ByVal row As ExportBilanVenteApproFactRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddExportBilanVenteApproFactRow(ByVal AMM As String, ByVal QUANTITE As Decimal, ByVal CODEPOSTAL As String) As ExportBilanVenteApproFactRow
            Dim rowExportBilanVenteApproFactRow As ExportBilanVenteApproFactRow = CType(Me.NewRow,ExportBilanVenteApproFactRow)
            Dim columnValuesArray() As Object = New Object() {AMM, QUANTITE, CODEPOSTAL}
            rowExportBilanVenteApproFactRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowExportBilanVenteApproFactRow)
            Return rowExportBilanVenteApproFactRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ExportBilanVenteApproFactDataTable = CType(MyBase.Clone,ExportBilanVenteApproFactDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ExportBilanVenteApproFactDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAMM = MyBase.Columns("AMM")
            Me.columnQUANTITE = MyBase.Columns("QUANTITE")
            Me.columnCODEPOSTAL = MyBase.Columns("CODEPOSTAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAMM = New Global.System.Data.DataColumn("AMM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMM)
            Me.columnQUANTITE = New Global.System.Data.DataColumn("QUANTITE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUANTITE)
            Me.columnCODEPOSTAL = New Global.System.Data.DataColumn("CODEPOSTAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODEPOSTAL)
            Me.columnAMM.ReadOnly = true
            Me.columnAMM.MaxLength = 4000
            Me.columnQUANTITE.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewExportBilanVenteApproFactRow() As ExportBilanVenteApproFactRow
            Return CType(Me.NewRow,ExportBilanVenteApproFactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ExportBilanVenteApproFactRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ExportBilanVenteApproFactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ExportBilanVenteApproFactRowChangedEvent) Is Nothing) Then
                RaiseEvent ExportBilanVenteApproFactRowChanged(Me, New ExportBilanVenteApproFactRowChangeEvent(CType(e.Row,ExportBilanVenteApproFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ExportBilanVenteApproFactRowChangingEvent) Is Nothing) Then
                RaiseEvent ExportBilanVenteApproFactRowChanging(Me, New ExportBilanVenteApproFactRowChangeEvent(CType(e.Row,ExportBilanVenteApproFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ExportBilanVenteApproFactRowDeletedEvent) Is Nothing) Then
                RaiseEvent ExportBilanVenteApproFactRowDeleted(Me, New ExportBilanVenteApproFactRowChangeEvent(CType(e.Row,ExportBilanVenteApproFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ExportBilanVenteApproFactRowDeletingEvent) Is Nothing) Then
                RaiseEvent ExportBilanVenteApproFactRowDeleting(Me, New ExportBilanVenteApproFactRowChangeEvent(CType(e.Row,ExportBilanVenteApproFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveExportBilanVenteApproFactRow(ByVal row As ExportBilanVenteApproFactRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApproFactDataSet = New ApproFactDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ExportBilanVenteApproFactDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProduitRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduit As ProduitDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduit = CType(Me.Table,ProduitDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nProduit() As Decimal
            Get
                Return CType(Me(Me.tableProduit.nProduitColumn),Decimal)
            End Get
            Set
                Me(Me.tableProduit.nProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Return CType(Me(Me.tableProduit.CodeProduitColumn),String)
            End Get
            Set
                Me(Me.tableProduit.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibelleLong() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.LibelleLongColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibelleLong' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.LibelleLongColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixAHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixAHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixAHT' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixAHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixATTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixATTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixATTC' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixATTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixVHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVHT' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixVHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixVTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVTTC' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixVTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPrixHT() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsPrixHTColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsPrixHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Unite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Unite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitAchat() As Boolean
            Get
                Return CType(Me(Me.tableProduit.ProduitAchatColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.ProduitAchatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitVente() As Boolean
            Get
                Return CType(Me(Me.tableProduit.ProduitVenteColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.ProduitVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteV() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteV() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille1' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille3() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille3' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1U2Independant() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.U1U2IndependantColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U1U2Independant' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.U1U2IndependantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1xU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.U1xU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U1xU2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.U1xU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeBarre() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CodeBarreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeBarre' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CodeBarreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactif() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.InactifColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactif' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.InactifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CoefU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefU2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CoefU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeFacturation() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TypeFacturationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeFacturation' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TypeFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefAV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CoefAVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefAV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CoefAVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitCompose() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ProduitComposeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProduitCompose' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ProduitComposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Image() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ImageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Image' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GestionStock() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.GestionStockColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GestionStock' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.GestionStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DecompteAuto() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.DecompteAutoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DecompteAuto' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.DecompteAutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefFournisseur() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.RefFournisseurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefFournisseur' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.RefFournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFournisseur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.nFournisseurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFournisseur' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.nFournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSortieImpr() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsSortieImprColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsSortieImprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsEnVente() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsEnVenteColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsEnVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMM() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.AMMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMM' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.AMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXSM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TAXSMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXSM' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TAXSMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsAMM() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsAMMColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsAMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateMaj() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProduit.DateMajColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateMaj' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.DateMajColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isComm() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.isCommColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isComm' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.isCommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Conditionnement() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ConditionnementColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Conditionnement' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ConditionnementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeuilStock() As Decimal
            Get
                Return CType(Me(Me.tableProduit.SeuilStockColumn),Decimal)
            End Get
            Set
                Me(Me.tableProduit.SeuilStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteX() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteX' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteX() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteX' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ingredients() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.IngredientsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ingredients' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.IngredientsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FamilleRow() As FamilleRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Produit_Famille")),FamilleRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Produit_Famille"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableProduit.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableProduit.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleLongNull() As Boolean
            Return Me.IsNull(Me.tableProduit.LibelleLongColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleLongNull()
            Me(Me.tableProduit.LibelleLongColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableProduit.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableProduit.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixAHTNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixAHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixAHTNull()
            Me(Me.tableProduit.PrixAHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixATTCNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixATTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixATTCNull()
            Me(Me.tableProduit.PrixATTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVHTNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixVHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVHTNull()
            Me(Me.tableProduit.PrixVHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVTTCNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixVTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVTTCNull()
            Me(Me.tableProduit.PrixVTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableProduit.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableProduit.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteANull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteANull()
            Me(Me.tableProduit.NCompteAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteANull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteANull()
            Me(Me.tableProduit.NActiviteAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteVNull()
            Me(Me.tableProduit.NCompteVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteVNull()
            Me(Me.tableProduit.NActiviteVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille1Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille1Null()
            Me(Me.tableProduit.Famille1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille2Null()
            Me(Me.tableProduit.Famille2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille3Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille3Null()
            Me(Me.tableProduit.Famille3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1U2IndependantNull() As Boolean
            Return Me.IsNull(Me.tableProduit.U1U2IndependantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1U2IndependantNull()
            Me(Me.tableProduit.U1U2IndependantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1xU2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.U1xU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1xU2Null()
            Me(Me.tableProduit.U1xU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeBarreNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CodeBarreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeBarreNull()
            Me(Me.tableProduit.CodeBarreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactifNull() As Boolean
            Return Me.IsNull(Me.tableProduit.InactifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactifNull()
            Me(Me.tableProduit.InactifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefU2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.CoefU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefU2Null()
            Me(Me.tableProduit.CoefU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeFacturationNull() As Boolean
            Return Me.IsNull(Me.tableProduit.TypeFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeFacturationNull()
            Me(Me.tableProduit.TypeFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefAVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CoefAVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefAVNull()
            Me(Me.tableProduit.CoefAVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProduitComposeNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ProduitComposeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProduitComposeNull()
            Me(Me.tableProduit.ProduitComposeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImageNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImageNull()
            Me(Me.tableProduit.ImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGestionStockNull() As Boolean
            Return Me.IsNull(Me.tableProduit.GestionStockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGestionStockNull()
            Me(Me.tableProduit.GestionStockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDecompteAutoNull() As Boolean
            Return Me.IsNull(Me.tableProduit.DecompteAutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDecompteAutoNull()
            Me(Me.tableProduit.DecompteAutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableProduit.RefFournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefFournisseurNull()
            Me(Me.tableProduit.RefFournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableProduit.nFournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFournisseurNull()
            Me(Me.tableProduit.nFournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMMNull() As Boolean
            Return Me.IsNull(Me.tableProduit.AMMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMMNull()
            Me(Me.tableProduit.AMMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXSMNull() As Boolean
            Return Me.IsNull(Me.tableProduit.TAXSMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXSMNull()
            Me(Me.tableProduit.TAXSMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateMajNull() As Boolean
            Return Me.IsNull(Me.tableProduit.DateMajColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateMajNull()
            Me(Me.tableProduit.DateMajColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisCommNull() As Boolean
            Return Me.IsNull(Me.tableProduit.isCommColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisCommNull()
            Me(Me.tableProduit.isCommColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConditionnementNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ConditionnementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConditionnementNull()
            Me(Me.tableProduit.ConditionnementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteXNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteXNull()
            Me(Me.tableProduit.NCompteXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteXNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteXNull()
            Me(Me.tableProduit.NActiviteXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngredientsNull() As Boolean
            Return Me.IsNull(Me.tableProduit.IngredientsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngredientsNull()
            Me(Me.tableProduit.IngredientsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FamilleRow
        Inherits Global.System.Data.DataRow
        
        Private tableFamille As FamilleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFamille = CType(Me.Table,FamilleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFamille() As Short
            Get
                Return CType(Me(Me.tableFamille.nFamilleColumn),Short)
            End Get
            Set
                Me(Me.tableFamille.nFamilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille() As String
            Get
                Try 
                    Return CType(Me(Me.tableFamille.FamilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille' in table 'Famille' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFamille.FamilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nGroupe() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFamille.nGroupeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nGroupe' in table 'Famille' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFamille.nGroupeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableFamille.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Famille' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFamille.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamilleNull() As Boolean
            Return Me.IsNull(Me.tableFamille.FamilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamilleNull()
            Me(Me.tableFamille.FamilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnGroupeNull() As Boolean
            Return Me.IsNull(Me.tableFamille.nGroupeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnGroupeNull()
            Me(Me.tableFamille.nGroupeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableFamille.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableFamille.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProduitRows() As ProduitRow()
            If (Me.Table.ChildRelations("FK_Produit_Famille") Is Nothing) Then
                Return New ProduitRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Produit_Famille")),ProduitRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImprBilanVenteApproFactRow
        Inherits Global.System.Data.DataRow
        
        Private tableImprBilanVenteApproFact As ImprBilanVenteApproFactDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImprBilanVenteApproFact = CType(Me.Table,ImprBilanVenteApproFactDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableImprBilanVenteApproFact.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'ImprBilanVenteApproFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImprBilanVenteApproFact.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMM() As String
            Get
                Try 
                    Return CType(Me(Me.tableImprBilanVenteApproFact.AMMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMM' in table 'ImprBilanVenteApproFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImprBilanVenteApproFact.AMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodePostal() As String
            Get
                Try 
                    Return CType(Me(Me.tableImprBilanVenteApproFact.CodePostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodePostal' in table 'ImprBilanVenteApproFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImprBilanVenteApproFact.CodePostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImprBilanVenteApproFact.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFacture' in table 'ImprBilanVenteApproFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImprBilanVenteApproFact.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImprBilanVenteApproFact.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFacture' in table 'ImprBilanVenteApproFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImprBilanVenteApproFact.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImprBilanVenteApproFact.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneHT' in table 'ImprBilanVenteApproFact' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableImprBilanVenteApproFact.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImprBilanVenteApproFact.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'ImprBilanVenteApproFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImprBilanVenteApproFact.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableImprBilanVenteApproFact.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'ImprBilanVenteApproFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImprBilanVenteApproFact.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableImprBilanVenteApproFact.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableImprBilanVenteApproFact.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMMNull() As Boolean
            Return Me.IsNull(Me.tableImprBilanVenteApproFact.AMMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMMNull()
            Me(Me.tableImprBilanVenteApproFact.AMMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodePostalNull() As Boolean
            Return Me.IsNull(Me.tableImprBilanVenteApproFact.CodePostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodePostalNull()
            Me(Me.tableImprBilanVenteApproFact.CodePostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableImprBilanVenteApproFact.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableImprBilanVenteApproFact.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableImprBilanVenteApproFact.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableImprBilanVenteApproFact.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableImprBilanVenteApproFact.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableImprBilanVenteApproFact.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableImprBilanVenteApproFact.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableImprBilanVenteApproFact.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableImprBilanVenteApproFact.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableImprBilanVenteApproFact.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ParametresRow
        Inherits Global.System.Data.DataRow
        
        Private tableParametres As ParametresDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParametres = CType(Me.Table,ParametresDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nParametre() As Decimal
            Get
                Return CType(Me(Me.tableParametres.nParametreColumn),Decimal)
            End Get
            Set
                Me(Me.tableParametres.nParametreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableParametres.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo' in table 'Parametres' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametres.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cle() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametres.CleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cle' in table 'Parametres' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametres.CleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypePiece() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametres.TypePieceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypePiece' in table 'Parametres' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametres.TypePieceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valeur() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametres.ValeurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Valeur' in table 'Parametres' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametres.ValeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableParametres.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableParametres.LogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCleNull() As Boolean
            Return Me.IsNull(Me.tableParametres.CleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCleNull()
            Me(Me.tableParametres.CleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypePieceNull() As Boolean
            Return Me.IsNull(Me.tableParametres.TypePieceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypePieceNull()
            Me(Me.tableParametres.TypePieceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValeurNull() As Boolean
            Return Me.IsNull(Me.tableParametres.ValeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValeurNull()
            Me(Me.tableParametres.ValeurColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EntrepriseRow
        Inherits Global.System.Data.DataRow
        
        Private tableEntreprise As EntrepriseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEntreprise = CType(Me.Table,EntrepriseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nEntreprise() As Decimal
            Get
                Return CType(Me(Me.tableEntreprise.nEntrepriseColumn),Decimal)
            End Get
            Set
                Me(Me.tableEntreprise.nEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.DateCreationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreation' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.DateCreationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateModification() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.DateModificationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateModification' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.DateModificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InfoMAJ() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.InfoMAJColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InfoMAJ' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.InfoMAJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeEntreprise() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.TypeEntrepriseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeEntreprise' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.TypeEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrganisme() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.nOrganismeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nOrganisme' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.nOrganismeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nMaisonMere() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.nMaisonMereColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nMaisonMere' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.nMaisonMereColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dep() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.DepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dep' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.DepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nom' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adresse() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.AdresseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Adresse' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.AdresseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodePostal() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CodePostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodePostal' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CodePostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ville() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.VilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ville' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.VilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pays() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.PaysColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pays' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.PaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.TypeClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeClient' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.TypeClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModePaiement() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.ModePaiementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModePaiement' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.ModePaiementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Echeance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.EcheanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Echeance' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.EcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Banque() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.BanqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Banque' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.BanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIB() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.RIBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIB' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.RIBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CA() As Single
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CAColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CA' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMail() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.EMailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMail' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.EMailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SiteInternet() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.SiteInternetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SiteInternet' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.SiteInternetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observations() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.ObservationsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observations' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.ObservationsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinMois() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.FinMoisColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinMois' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.FinMoisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FacturationTTC' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fournisseur() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.FournisseurColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fournisseur' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.FournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.ClientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Client' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuffixePostal() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.SuffixePostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuffixePostal' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.SuffixePostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.AdresseLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdresseLiv' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.AdresseLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodePostalLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CodePostalLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodePostalLiv' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CodePostalLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VilleLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.VilleLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VilleLiv' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.VilleLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaysLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.PaysLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaysLiv' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.PaysLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactif() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.InactifColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactif' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.InactifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoginSite() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.LoginSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoginSite' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.LoginSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PwdSite() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.PwdSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PwdSite' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.PwdSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSite() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.IdSiteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdSite' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.IdSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteF() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NCompteFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteF' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NCompteFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteF() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NActiviteFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteF' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NActiviteFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NCompteCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteC' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NCompteCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NActiviteCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteC' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NActiviteCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTarif() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.nTarifColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nTarif' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.nTarifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Civilite() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CiviliteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Civilite' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CiviliteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Licence() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.LicenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Licence' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.LicenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.Critere2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere2' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.Critere2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere3() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.Critere3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere3' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.Critere3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere4() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.Critere4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere4' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.Critere4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NTVAIntraCom() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NTVAIntraComColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTVAIntraCom' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NTVAIntraComColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.nCommercialColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCommercial' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormeJuridique() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.FormeJuridiqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormeJuridique' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.FormeJuridiqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CibleCommercial() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CibleCommercialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CibleCommercial' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CibleCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsExport() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.IsExportColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsExport' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.IsExportColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomFacturation() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NomFacturationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NomFacturation' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NomFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomLivraison() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NomLivraisonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NomLivraison' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NomLivraisonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EditionBLNonChiffre() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.EditionBLNonChiffreColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EditionBLNonChiffre' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.EditionBLNonChiffreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObservationLivraison() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.ObservationLivraisonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObservationLivraison' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.ObservationLivraisonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IndEscompteSpecifique() As Boolean
            Get
                Return CType(Me(Me.tableEntreprise.IndEscompteSpecifiqueColumn),Boolean)
            End Get
            Set
                Me(Me.tableEntreprise.IndEscompteSpecifiqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TauxEscompteSpecifique() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.TauxEscompteSpecifiqueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TauxEscompteSpecifique' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.TauxEscompteSpecifiqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DelaiValiditeEscompte() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.DelaiValiditeEscompteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DelaiValiditeEscompte' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.DelaiValiditeEscompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LitigeEnCours() As Boolean
            Get
                Return CType(Me(Me.tableEntreprise.LitigeEnCoursColumn),Boolean)
            End Get
            Set
                Me(Me.tableEntreprise.LitigeEnCoursColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnCoursMax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.EnCoursMaxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EnCoursMax' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.EnCoursMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreationNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.DateCreationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreationNull()
            Me(Me.tableEntreprise.DateCreationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateModificationNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.DateModificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateModificationNull()
            Me(Me.tableEntreprise.DateModificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInfoMAJNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.InfoMAJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInfoMAJNull()
            Me(Me.tableEntreprise.InfoMAJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeEntrepriseNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.TypeEntrepriseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeEntrepriseNull()
            Me(Me.tableEntreprise.TypeEntrepriseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrganismeNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.nOrganismeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrganismeNull()
            Me(Me.tableEntreprise.nOrganismeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnMaisonMereNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.nMaisonMereColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnMaisonMereNull()
            Me(Me.tableEntreprise.nMaisonMereColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.DepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepNull()
            Me(Me.tableEntreprise.DepColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomNull()
            Me(Me.tableEntreprise.NomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.AdresseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseNull()
            Me(Me.tableEntreprise.AdresseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodePostalNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CodePostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodePostalNull()
            Me(Me.tableEntreprise.CodePostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVilleNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.VilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVilleNull()
            Me(Me.tableEntreprise.VilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaysNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.PaysColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaysNull()
            Me(Me.tableEntreprise.PaysColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeClientNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.TypeClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeClientNull()
            Me(Me.tableEntreprise.TypeClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModePaiementNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.ModePaiementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModePaiementNull()
            Me(Me.tableEntreprise.ModePaiementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.EcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEcheanceNull()
            Me(Me.tableEntreprise.EcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBanqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.BanqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBanqueNull()
            Me(Me.tableEntreprise.BanqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.RIBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBNull()
            Me(Me.tableEntreprise.RIBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANull()
            Me(Me.tableEntreprise.CAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.EMailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMailNull()
            Me(Me.tableEntreprise.EMailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSiteInternetNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.SiteInternetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSiteInternetNull()
            Me(Me.tableEntreprise.SiteInternetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationsNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.ObservationsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationsNull()
            Me(Me.tableEntreprise.ObservationsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinMoisNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.FinMoisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinMoisNull()
            Me(Me.tableEntreprise.FinMoisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableEntreprise.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableEntreprise.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableEntreprise.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.FournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFournisseurNull()
            Me(Me.tableEntreprise.FournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableEntreprise.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuffixePostalNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.SuffixePostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuffixePostalNull()
            Me(Me.tableEntreprise.SuffixePostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.AdresseLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseLivNull()
            Me(Me.tableEntreprise.AdresseLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodePostalLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CodePostalLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodePostalLivNull()
            Me(Me.tableEntreprise.CodePostalLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVilleLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.VilleLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVilleLivNull()
            Me(Me.tableEntreprise.VilleLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaysLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.PaysLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaysLivNull()
            Me(Me.tableEntreprise.PaysLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactifNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.InactifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactifNull()
            Me(Me.tableEntreprise.InactifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoginSiteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.LoginSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoginSiteNull()
            Me(Me.tableEntreprise.LoginSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPwdSiteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.PwdSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPwdSiteNull()
            Me(Me.tableEntreprise.PwdSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdSiteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.IdSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdSiteNull()
            Me(Me.tableEntreprise.IdSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteFNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NCompteFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteFNull()
            Me(Me.tableEntreprise.NCompteFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteFNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NActiviteFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteFNull()
            Me(Me.tableEntreprise.NActiviteFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteCNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NCompteCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteCNull()
            Me(Me.tableEntreprise.NCompteCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteCNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NActiviteCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteCNull()
            Me(Me.tableEntreprise.NActiviteCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnTarifNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.nTarifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnTarifNull()
            Me(Me.tableEntreprise.nTarifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiviliteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CiviliteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiviliteNull()
            Me(Me.tableEntreprise.CiviliteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableEntreprise.LogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLicenceNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.LicenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLicenceNull()
            Me(Me.tableEntreprise.LicenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere2Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise.Critere2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere2Null()
            Me(Me.tableEntreprise.Critere2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere3Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise.Critere3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere3Null()
            Me(Me.tableEntreprise.Critere3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere4Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise.Critere4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere4Null()
            Me(Me.tableEntreprise.Critere4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNTVAIntraComNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NTVAIntraComColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNTVAIntraComNull()
            Me(Me.tableEntreprise.NTVAIntraComColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableEntreprise.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormeJuridiqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.FormeJuridiqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormeJuridiqueNull()
            Me(Me.tableEntreprise.FormeJuridiqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCibleCommercialNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CibleCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCibleCommercialNull()
            Me(Me.tableEntreprise.CibleCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsExportNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.IsExportColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsExportNull()
            Me(Me.tableEntreprise.IsExportColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomFacturationNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NomFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomFacturationNull()
            Me(Me.tableEntreprise.NomFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomLivraisonNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NomLivraisonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomLivraisonNull()
            Me(Me.tableEntreprise.NomLivraisonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEditionBLNonChiffreNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.EditionBLNonChiffreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEditionBLNonChiffreNull()
            Me(Me.tableEntreprise.EditionBLNonChiffreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationLivraisonNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.ObservationLivraisonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationLivraisonNull()
            Me(Me.tableEntreprise.ObservationLivraisonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTauxEscompteSpecifiqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.TauxEscompteSpecifiqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTauxEscompteSpecifiqueNull()
            Me(Me.tableEntreprise.TauxEscompteSpecifiqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelaiValiditeEscompteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.DelaiValiditeEscompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelaiValiditeEscompteNull()
            Me(Me.tableEntreprise.DelaiValiditeEscompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnCoursMaxNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.EnCoursMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnCoursMaxNull()
            Me(Me.tableEntreprise.EnCoursMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPersonneRows() As PersonneRow()
            If (Me.Table.ChildRelations("FK_Personne_Entreprise") Is Nothing) Then
                Return New PersonneRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Personne_Entreprise")),PersonneRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTelephoneEntrepriseRows() As TelephoneEntrepriseRow()
            If (Me.Table.ChildRelations("FK_TelephoneEntreprise_Entreprise") Is Nothing) Then
                Return New TelephoneEntrepriseRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TelephoneEntreprise_Entreprise")),TelephoneEntrepriseRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PersonneRow
        Inherits Global.System.Data.DataRow
        
        Private tablePersonne As PersonneDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePersonne = CType(Me.Table,PersonneDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPersonne() As Decimal
            Get
                Return CType(Me(Me.tablePersonne.nPersonneColumn),Decimal)
            End Get
            Set
                Me(Me.tablePersonne.nPersonneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreation() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.DateCreationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreation' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.DateCreationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateModification() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.DateModificationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateModification' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.DateModificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InfoMAJ() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.InfoMAJColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InfoMAJ' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.InfoMAJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypePersonne() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.TypePersonneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypePersonne' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.TypePersonneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dep() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.DepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dep' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.DepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.NomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nom' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.NomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prenom() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.PrenomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prenom' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.PrenomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nEntreprise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.nEntrepriseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nEntreprise' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.nEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adresse() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.AdresseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Adresse' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.AdresseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodePostal() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.CodePostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodePostal' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.CodePostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ville() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.VilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ville' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.VilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pays() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.PaysColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pays' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.PaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomJeuneFille() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.NomJeuneFilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NomJeuneFille' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.NomJeuneFilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeClient() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.TypeClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeClient' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.TypeClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fonction() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.FonctionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fonction' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.FonctionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Campagne() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.CampagneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Campagne' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.CampagneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatedeNaissance() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.DatedeNaissanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatedeNaissance' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.DatedeNaissanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LieuNaissance() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.LieuNaissanceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LieuNaissance' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.LieuNaissanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMail() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.EMailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMail' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.EMailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adressehttp() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.AdressehttpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Adressehttp' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.AdressehttpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observations() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.ObservationsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observations' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.ObservationsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NpAfficher() As Boolean
            Get
                Return CType(Me(Me.tablePersonne.NpAfficherColumn),Boolean)
            End Get
            Set
                Me(Me.tablePersonne.NpAfficherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NpRecevoirInfo() As Boolean
            Get
                Return CType(Me(Me.tablePersonne.NpRecevoirInfoColumn),Boolean)
            End Get
            Set
                Me(Me.tablePersonne.NpRecevoirInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntrepriseRow() As EntrepriseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Personne_Entreprise")),EntrepriseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Personne_Entreprise"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreationNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.DateCreationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreationNull()
            Me(Me.tablePersonne.DateCreationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateModificationNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.DateModificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateModificationNull()
            Me(Me.tablePersonne.DateModificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInfoMAJNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.InfoMAJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInfoMAJNull()
            Me(Me.tablePersonne.InfoMAJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypePersonneNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.TypePersonneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypePersonneNull()
            Me(Me.tablePersonne.TypePersonneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.DepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepNull()
            Me(Me.tablePersonne.DepColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.NomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomNull()
            Me(Me.tablePersonne.NomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrenomNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.PrenomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrenomNull()
            Me(Me.tablePersonne.PrenomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnEntrepriseNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.nEntrepriseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnEntrepriseNull()
            Me(Me.tablePersonne.nEntrepriseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.AdresseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseNull()
            Me(Me.tablePersonne.AdresseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodePostalNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.CodePostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodePostalNull()
            Me(Me.tablePersonne.CodePostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVilleNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.VilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVilleNull()
            Me(Me.tablePersonne.VilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaysNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.PaysColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaysNull()
            Me(Me.tablePersonne.PaysColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomJeuneFilleNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.NomJeuneFilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomJeuneFilleNull()
            Me(Me.tablePersonne.NomJeuneFilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeClientNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.TypeClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeClientNull()
            Me(Me.tablePersonne.TypeClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFonctionNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.FonctionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFonctionNull()
            Me(Me.tablePersonne.FonctionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCampagneNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.CampagneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCampagneNull()
            Me(Me.tablePersonne.CampagneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatedeNaissanceNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.DatedeNaissanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatedeNaissanceNull()
            Me(Me.tablePersonne.DatedeNaissanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLieuNaissanceNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.LieuNaissanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLieuNaissanceNull()
            Me(Me.tablePersonne.LieuNaissanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.EMailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMailNull()
            Me(Me.tablePersonne.EMailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdressehttpNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.AdressehttpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdressehttpNull()
            Me(Me.tablePersonne.AdressehttpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationsNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.ObservationsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationsNull()
            Me(Me.tablePersonne.ObservationsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTelephoneRows() As TelephoneRow()
            If (Me.Table.ChildRelations("FK_Telephone_Personne") Is Nothing) Then
                Return New TelephoneRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Telephone_Personne")),TelephoneRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TelephoneRow
        Inherits Global.System.Data.DataRow
        
        Private tableTelephone As TelephoneDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTelephone = CType(Me.Table,TelephoneDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPersonne() As Decimal
            Get
                Return CType(Me(Me.tableTelephone.nPersonneColumn),Decimal)
            End Get
            Set
                Me(Me.tableTelephone.nPersonneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Return CType(Me(Me.tableTelephone.TypeColumn),String)
            End Get
            Set
                Me(Me.tableTelephone.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero() As String
            Get
                Try 
                    Return CType(Me(Me.tableTelephone.NumeroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Numero' in table 'Telephone' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTelephone.NumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PersonneRow() As PersonneRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Telephone_Personne")),PersonneRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Telephone_Personne"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroNull() As Boolean
            Return Me.IsNull(Me.tableTelephone.NumeroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroNull()
            Me(Me.tableTelephone.NumeroColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TelephoneEntrepriseRow
        Inherits Global.System.Data.DataRow
        
        Private tableTelephoneEntreprise As TelephoneEntrepriseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTelephoneEntreprise = CType(Me.Table,TelephoneEntrepriseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nEntreprise() As Decimal
            Get
                Return CType(Me(Me.tableTelephoneEntreprise.nEntrepriseColumn),Decimal)
            End Get
            Set
                Me(Me.tableTelephoneEntreprise.nEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Return CType(Me(Me.tableTelephoneEntreprise.TypeColumn),String)
            End Get
            Set
                Me(Me.tableTelephoneEntreprise.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero() As String
            Get
                Try 
                    Return CType(Me(Me.tableTelephoneEntreprise.NumeroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Numero' in table 'TelephoneEntreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTelephoneEntreprise.NumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntrepriseRow() As EntrepriseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TelephoneEntreprise_Entreprise")),EntrepriseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TelephoneEntreprise_Entreprise"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroNull() As Boolean
            Return Me.IsNull(Me.tableTelephoneEntreprise.NumeroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroNull()
            Me(Me.tableTelephoneEntreprise.NumeroColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CodeInseeRow
        Inherits Global.System.Data.DataRow
        
        Private tableCodeInsee As CodeInseeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCodeInsee = CType(Me.Table,CodeInseeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property note() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCodeInsee.noteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'note' in table 'CodeInsee' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCodeInsee.noteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomVille() As String
            Get
                Try 
                    Return CType(Me(Me.tableCodeInsee.NomVilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NomVille' in table 'CodeInsee' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCodeInsee.NomVilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodePostal() As String
            Get
                Try 
                    Return CType(Me(Me.tableCodeInsee.CodePostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodePostal' in table 'CodeInsee' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCodeInsee.CodePostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeINSEE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCodeInsee.CodeINSEEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeINSEE' in table 'CodeInsee' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCodeInsee.CodeINSEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnoteNull() As Boolean
            Return Me.IsNull(Me.tableCodeInsee.noteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnoteNull()
            Me(Me.tableCodeInsee.noteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomVilleNull() As Boolean
            Return Me.IsNull(Me.tableCodeInsee.NomVilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomVilleNull()
            Me(Me.tableCodeInsee.NomVilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodePostalNull() As Boolean
            Return Me.IsNull(Me.tableCodeInsee.CodePostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodePostalNull()
            Me(Me.tableCodeInsee.CodePostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeINSEENull() As Boolean
            Return Me.IsNull(Me.tableCodeInsee.CodeINSEEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeINSEENull()
            Me(Me.tableCodeInsee.CodeINSEEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ExportBilanVenteApproFactRow
        Inherits Global.System.Data.DataRow
        
        Private tableExportBilanVenteApproFact As ExportBilanVenteApproFactDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableExportBilanVenteApproFact = CType(Me.Table,ExportBilanVenteApproFactDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMM() As String
            Get
                Try 
                    Return CType(Me(Me.tableExportBilanVenteApproFact.AMMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMM' in table 'ExportBilanVenteApproFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExportBilanVenteApproFact.AMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QUANTITE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableExportBilanVenteApproFact.QUANTITEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QUANTITE' in table 'ExportBilanVenteApproFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExportBilanVenteApproFact.QUANTITEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODEPOSTAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableExportBilanVenteApproFact.CODEPOSTALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODEPOSTAL' in table 'ExportBilanVenteApproFact' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableExportBilanVenteApproFact.CODEPOSTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMMNull() As Boolean
            Return Me.IsNull(Me.tableExportBilanVenteApproFact.AMMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMMNull()
            Me(Me.tableExportBilanVenteApproFact.AMMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQUANTITENull() As Boolean
            Return Me.IsNull(Me.tableExportBilanVenteApproFact.QUANTITEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQUANTITENull()
            Me(Me.tableExportBilanVenteApproFact.QUANTITEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODEPOSTALNull() As Boolean
            Return Me.IsNull(Me.tableExportBilanVenteApproFact.CODEPOSTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODEPOSTALNull()
            Me(Me.tableExportBilanVenteApproFact.CODEPOSTALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProduitRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProduitRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProduitRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProduitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FamilleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FamilleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FamilleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FamilleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImprBilanVenteApproFactRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImprBilanVenteApproFactRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImprBilanVenteApproFactRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImprBilanVenteApproFactRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ParametresRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ParametresRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParametresRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParametresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EntrepriseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EntrepriseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EntrepriseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EntrepriseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PersonneRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PersonneRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PersonneRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PersonneRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TelephoneRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TelephoneRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TelephoneRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TelephoneRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TelephoneEntrepriseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TelephoneEntrepriseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TelephoneEntrepriseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TelephoneEntrepriseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CodeInseeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CodeInseeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CodeInseeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CodeInseeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ExportBilanVenteApproFactRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ExportBilanVenteApproFactRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ExportBilanVenteApproFactRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ExportBilanVenteApproFactRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ApproFactDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProduitTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Produit"
            tableMapping.ColumnMappings.Add("nProduit", "nProduit")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("LibelleLong", "LibelleLong")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("PrixAHT", "PrixAHT")
            tableMapping.ColumnMappings.Add("PrixATTC", "PrixATTC")
            tableMapping.ColumnMappings.Add("PrixVHT", "PrixVHT")
            tableMapping.ColumnMappings.Add("PrixVTTC", "PrixVTTC")
            tableMapping.ColumnMappings.Add("IsPrixHT", "IsPrixHT")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("Unite2", "Unite2")
            tableMapping.ColumnMappings.Add("ProduitAchat", "ProduitAchat")
            tableMapping.ColumnMappings.Add("ProduitVente", "ProduitVente")
            tableMapping.ColumnMappings.Add("NCompteA", "NCompteA")
            tableMapping.ColumnMappings.Add("NActiviteA", "NActiviteA")
            tableMapping.ColumnMappings.Add("NCompteV", "NCompteV")
            tableMapping.ColumnMappings.Add("NActiviteV", "NActiviteV")
            tableMapping.ColumnMappings.Add("Famille1", "Famille1")
            tableMapping.ColumnMappings.Add("Famille2", "Famille2")
            tableMapping.ColumnMappings.Add("Famille3", "Famille3")
            tableMapping.ColumnMappings.Add("U1U2Independant", "U1U2Independant")
            tableMapping.ColumnMappings.Add("U1xU2", "U1xU2")
            tableMapping.ColumnMappings.Add("CodeBarre", "CodeBarre")
            tableMapping.ColumnMappings.Add("Inactif", "Inactif")
            tableMapping.ColumnMappings.Add("CoefU2", "CoefU2")
            tableMapping.ColumnMappings.Add("TypeFacturation", "TypeFacturation")
            tableMapping.ColumnMappings.Add("CoefAV", "CoefAV")
            tableMapping.ColumnMappings.Add("ProduitCompose", "ProduitCompose")
            tableMapping.ColumnMappings.Add("Image", "Image")
            tableMapping.ColumnMappings.Add("GestionStock", "GestionStock")
            tableMapping.ColumnMappings.Add("DecompteAuto", "DecompteAuto")
            tableMapping.ColumnMappings.Add("RefFournisseur", "RefFournisseur")
            tableMapping.ColumnMappings.Add("nFournisseur", "nFournisseur")
            tableMapping.ColumnMappings.Add("IsSortieImpr", "IsSortieImpr")
            tableMapping.ColumnMappings.Add("IsEnVente", "IsEnVente")
            tableMapping.ColumnMappings.Add("AMM", "AMM")
            tableMapping.ColumnMappings.Add("TAXSM", "TAXSM")
            tableMapping.ColumnMappings.Add("IsAMM", "IsAMM")
            tableMapping.ColumnMappings.Add("DateMaj", "DateMaj")
            tableMapping.ColumnMappings.Add("isComm", "isComm")
            tableMapping.ColumnMappings.Add("Conditionnement", "Conditionnement")
            tableMapping.ColumnMappings.Add("SeuilStock", "SeuilStock")
            tableMapping.ColumnMappings.Add("NCompteX", "NCompteX")
            tableMapping.ColumnMappings.Add("NActiviteX", "NActiviteX")
            tableMapping.ColumnMappings.Add("Ingredients", "Ingredients")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Produit] WHERE (([nProduit] = @Original_nProduit) AND ([CodePr"& _ 
                "oduit] = @Original_CodeProduit) AND ((@IsNull_Libelle = 1 AND [Libelle] IS NULL)"& _ 
                " OR ([Libelle] = @Original_Libelle)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) "& _ 
                "OR ([TTVA] = @Original_TTVA)) AND ((@IsNull_PrixAHT = 1 AND [PrixAHT] IS NULL) O"& _ 
                "R ([PrixAHT] = @Original_PrixAHT)) AND ((@IsNull_PrixATTC = 1 AND [PrixATTC] IS "& _ 
                "NULL) OR ([PrixATTC] = @Original_PrixATTC)) AND ((@IsNull_PrixVHT = 1 AND [PrixV"& _ 
                "HT] IS NULL) OR ([PrixVHT] = @Original_PrixVHT)) AND ((@IsNull_PrixVTTC = 1 AND "& _ 
                "[PrixVTTC] IS NULL) OR ([PrixVTTC] = @Original_PrixVTTC)) AND ([IsPrixHT] = @Ori"& _ 
                "ginal_IsPrixHT) AND ((@IsNull_Unite1 = 1 AND [Unite1] IS NULL) OR ([Unite1] = @O"& _ 
                "riginal_Unite1)) AND ((@IsNull_Unite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @"& _ 
                "Original_Unite2)) AND ([ProduitAchat] = @Original_ProduitAchat) AND ([ProduitVen"& _ 
                "te] = @Original_ProduitVente) AND ((@IsNull_NCompteA = 1 AND [NCompteA] IS NULL)"& _ 
                " OR ([NCompteA] = @Original_NCompteA)) AND ((@IsNull_NActiviteA = 1 AND [NActivi"& _ 
                "teA] IS NULL) OR ([NActiviteA] = @Original_NActiviteA)) AND ((@IsNull_NCompteV ="& _ 
                " 1 AND [NCompteV] IS NULL) OR ([NCompteV] = @Original_NCompteV)) AND ((@IsNull_N"& _ 
                "ActiviteV = 1 AND [NActiviteV] IS NULL) OR ([NActiviteV] = @Original_NActiviteV)"& _ 
                ") AND ((@IsNull_Famille1 = 1 AND [Famille1] IS NULL) OR ([Famille1] = @Original_"& _ 
                "Famille1)) AND ((@IsNull_Famille2 = 1 AND [Famille2] IS NULL) OR ([Famille2] = @"& _ 
                "Original_Famille2)) AND ((@IsNull_Famille3 = 1 AND [Famille3] IS NULL) OR ([Fami"& _ 
                "lle3] = @Original_Famille3)) AND ((@IsNull_U1U2Independant = 1 AND [U1U2Independ"& _ 
                "ant] IS NULL) OR ([U1U2Independant] = @Original_U1U2Independant)) AND ((@IsNull_"& _ 
                "U1xU2 = 1 AND [U1xU2] IS NULL) OR ([U1xU2] = @Original_U1xU2)) AND ((@IsNull_Cod"& _ 
                "eBarre = 1 AND [CodeBarre] IS NULL) OR ([CodeBarre] = @Original_CodeBarre)) AND "& _ 
                "((@IsNull_Inactif = 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_Inactif))"& _ 
                " AND ((@IsNull_CoefU2 = 1 AND [CoefU2] IS NULL) OR ([CoefU2] = @Original_CoefU2)"& _ 
                ") AND ((@IsNull_TypeFacturation = 1 AND [TypeFacturation] IS NULL) OR ([TypeFact"& _ 
                "uration] = @Original_TypeFacturation)) AND ((@IsNull_CoefAV = 1 AND [CoefAV] IS "& _ 
                "NULL) OR ([CoefAV] = @Original_CoefAV)) AND ((@IsNull_ProduitCompose = 1 AND [Pr"& _ 
                "oduitCompose] IS NULL) OR ([ProduitCompose] = @Original_ProduitCompose)) AND ((@"& _ 
                "IsNull_GestionStock = 1 AND [GestionStock] IS NULL) OR ([GestionStock] = @Origin"& _ 
                "al_GestionStock)) AND ((@IsNull_DecompteAuto = 1 AND [DecompteAuto] IS NULL) OR "& _ 
                "([DecompteAuto] = @Original_DecompteAuto)) AND ((@IsNull_RefFournisseur = 1 AND "& _ 
                "[RefFournisseur] IS NULL) OR ([RefFournisseur] = @Original_RefFournisseur)) AND "& _ 
                "((@IsNull_nFournisseur = 1 AND [nFournisseur] IS NULL) OR ([nFournisseur] = @Ori"& _ 
                "ginal_nFournisseur)) AND ([IsSortieImpr] = @Original_IsSortieImpr) AND ([IsEnVen"& _ 
                "te] = @Original_IsEnVente) AND ((@IsNull_AMM = 1 AND [AMM] IS NULL) OR ([AMM] = "& _ 
                "@Original_AMM)) AND ((@IsNull_TAXSM = 1 AND [TAXSM] IS NULL) OR ([TAXSM] = @Orig"& _ 
                "inal_TAXSM)) AND ([IsAMM] = @Original_IsAMM) AND ((@IsNull_DateMaj = 1 AND [Date"& _ 
                "Maj] IS NULL) OR ([DateMaj] = @Original_DateMaj)) AND ((@IsNull_isComm = 1 AND ["& _ 
                "isComm] IS NULL) OR ([isComm] = @Original_isComm)) AND ((@IsNull_Conditionnement"& _ 
                " = 1 AND [Conditionnement] IS NULL) OR ([Conditionnement] = @Original_Conditionn"& _ 
                "ement)) AND ([SeuilStock] = @Original_SeuilStock) AND ((@IsNull_NCompteX = 1 AND"& _ 
                " [NCompteX] IS NULL) OR ([NCompteX] = @Original_NCompteX)) AND ((@IsNull_NActivi"& _ 
                "teX = 1 AND [NActiviteX] IS NULL) OR ([NActiviteX] = @Original_NActiviteX)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Libelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixAHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixAHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixATTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixATTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1U2Independant", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1xU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1xU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeBarre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefAV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefAV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProduitCompose", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GestionStock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DecompteAuto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RefFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXSM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateMaj", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isComm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Produit] ([nProduit], [CodeProduit], [Libelle], [LibelleLong],"& _ 
                " [TTVA], [PrixAHT], [PrixATTC], [PrixVHT], [PrixVTTC], [IsPrixHT], [Unite1], [Un"& _ 
                "ite2], [ProduitAchat], [ProduitVente], [NCompteA], [NActiviteA], [NCompteV], [NA"& _ 
                "ctiviteV], [Famille1], [Famille2], [Famille3], [U1U2Independant], [U1xU2], [Code"& _ 
                "Barre], [Inactif], [CoefU2], [TypeFacturation], [CoefAV], [ProduitCompose], [Ima"& _ 
                "ge], [GestionStock], [DecompteAuto], [RefFournisseur], [nFournisseur], [IsSortie"& _ 
                "Impr], [IsEnVente], [AMM], [TAXSM], [IsAMM], [DateMaj], [isComm], [Conditionneme"& _ 
                "nt], [SeuilStock], [NCompteX], [NActiviteX], [Ingredients]) VALUES (@nProduit, @"& _ 
                "CodeProduit, @Libelle, @LibelleLong, @TTVA, @PrixAHT, @PrixATTC, @PrixVHT, @Prix"& _ 
                "VTTC, @IsPrixHT, @Unite1, @Unite2, @ProduitAchat, @ProduitVente, @NCompteA, @NAc"& _ 
                "tiviteA, @NCompteV, @NActiviteV, @Famille1, @Famille2, @Famille3, @U1U2Independa"& _ 
                "nt, @U1xU2, @CodeBarre, @Inactif, @CoefU2, @TypeFacturation, @CoefAV, @ProduitCo"& _ 
                "mpose, @Image, @GestionStock, @DecompteAuto, @RefFournisseur, @nFournisseur, @Is"& _ 
                "SortieImpr, @IsEnVente, @AMM, @TAXSM, @IsAMM, @DateMaj, @isComm, @Conditionnemen"& _ 
                "t, @SeuilStock, @NCompteX, @NActiviteX, @Ingredients);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nProduit, CodePro"& _ 
                "duit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT"& _ 
                ", Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NA"& _ 
                "ctiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inact"& _ 
                "if, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, Decomp"& _ 
                "teAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM"& _ 
                ", DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredient"& _ 
                "s FROM Produit WHERE (nProduit = @nProduit)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibelleLong", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibelleLong", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Image", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Image", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ingredients", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ingredients", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Produit] SET [nProduit] = @nProduit, [CodeProduit] = @CodeProduit, "& _ 
                "[Libelle] = @Libelle, [LibelleLong] = @LibelleLong, [TTVA] = @TTVA, [PrixAHT] = "& _ 
                "@PrixAHT, [PrixATTC] = @PrixATTC, [PrixVHT] = @PrixVHT, [PrixVTTC] = @PrixVTTC, "& _ 
                "[IsPrixHT] = @IsPrixHT, [Unite1] = @Unite1, [Unite2] = @Unite2, [ProduitAchat] ="& _ 
                " @ProduitAchat, [ProduitVente] = @ProduitVente, [NCompteA] = @NCompteA, [NActivi"& _ 
                "teA] = @NActiviteA, [NCompteV] = @NCompteV, [NActiviteV] = @NActiviteV, [Famille"& _ 
                "1] = @Famille1, [Famille2] = @Famille2, [Famille3] = @Famille3, [U1U2Independant"& _ 
                "] = @U1U2Independant, [U1xU2] = @U1xU2, [CodeBarre] = @CodeBarre, [Inactif] = @I"& _ 
                "nactif, [CoefU2] = @CoefU2, [TypeFacturation] = @TypeFacturation, [CoefAV] = @Co"& _ 
                "efAV, [ProduitCompose] = @ProduitCompose, [Image] = @Image, [GestionStock] = @Ge"& _ 
                "stionStock, [DecompteAuto] = @DecompteAuto, [RefFournisseur] = @RefFournisseur, "& _ 
                "[nFournisseur] = @nFournisseur, [IsSortieImpr] = @IsSortieImpr, [IsEnVente] = @I"& _ 
                "sEnVente, [AMM] = @AMM, [TAXSM] = @TAXSM, [IsAMM] = @IsAMM, [DateMaj] = @DateMaj"& _ 
                ", [isComm] = @isComm, [Conditionnement] = @Conditionnement, [SeuilStock] = @Seui"& _ 
                "lStock, [NCompteX] = @NCompteX, [NActiviteX] = @NActiviteX, [Ingredients] = @Ing"& _ 
                "redients WHERE (([nProduit] = @Original_nProduit) AND ([CodeProduit] = @Original"& _ 
                "_CodeProduit) AND ((@IsNull_Libelle = 1 AND [Libelle] IS NULL) OR ([Libelle] = @"& _ 
                "Original_Libelle)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Orig"& _ 
                "inal_TTVA)) AND ((@IsNull_PrixAHT = 1 AND [PrixAHT] IS NULL) OR ([PrixAHT] = @Or"& _ 
                "iginal_PrixAHT)) AND ((@IsNull_PrixATTC = 1 AND [PrixATTC] IS NULL) OR ([PrixATT"& _ 
                "C] = @Original_PrixATTC)) AND ((@IsNull_PrixVHT = 1 AND [PrixVHT] IS NULL) OR (["& _ 
                "PrixVHT] = @Original_PrixVHT)) AND ((@IsNull_PrixVTTC = 1 AND [PrixVTTC] IS NULL"& _ 
                ") OR ([PrixVTTC] = @Original_PrixVTTC)) AND ([IsPrixHT] = @Original_IsPrixHT) AN"& _ 
                "D ((@IsNull_Unite1 = 1 AND [Unite1] IS NULL) OR ([Unite1] = @Original_Unite1)) A"& _ 
                "ND ((@IsNull_Unite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) "& _ 
                "AND ([ProduitAchat] = @Original_ProduitAchat) AND ([ProduitVente] = @Original_Pr"& _ 
                "oduitVente) AND ((@IsNull_NCompteA = 1 AND [NCompteA] IS NULL) OR ([NCompteA] = "& _ 
                "@Original_NCompteA)) AND ((@IsNull_NActiviteA = 1 AND [NActiviteA] IS NULL) OR ("& _ 
                "[NActiviteA] = @Original_NActiviteA)) AND ((@IsNull_NCompteV = 1 AND [NCompteV] "& _ 
                "IS NULL) OR ([NCompteV] = @Original_NCompteV)) AND ((@IsNull_NActiviteV = 1 AND "& _ 
                "[NActiviteV] IS NULL) OR ([NActiviteV] = @Original_NActiviteV)) AND ((@IsNull_Fa"& _ 
                "mille1 = 1 AND [Famille1] IS NULL) OR ([Famille1] = @Original_Famille1)) AND ((@"& _ 
                "IsNull_Famille2 = 1 AND [Famille2] IS NULL) OR ([Famille2] = @Original_Famille2)"& _ 
                ") AND ((@IsNull_Famille3 = 1 AND [Famille3] IS NULL) OR ([Famille3] = @Original_"& _ 
                "Famille3)) AND ((@IsNull_U1U2Independant = 1 AND [U1U2Independant] IS NULL) OR ("& _ 
                "[U1U2Independant] = @Original_U1U2Independant)) AND ((@IsNull_U1xU2 = 1 AND [U1x"& _ 
                "U2] IS NULL) OR ([U1xU2] = @Original_U1xU2)) AND ((@IsNull_CodeBarre = 1 AND [Co"& _ 
                "deBarre] IS NULL) OR ([CodeBarre] = @Original_CodeBarre)) AND ((@IsNull_Inactif "& _ 
                "= 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_Inactif)) AND ((@IsNull_Coe"& _ 
                "fU2 = 1 AND [CoefU2] IS NULL) OR ([CoefU2] = @Original_CoefU2)) AND ((@IsNull_Ty"& _ 
                "peFacturation = 1 AND [TypeFacturation] IS NULL) OR ([TypeFacturation] = @Origin"& _ 
                "al_TypeFacturation)) AND ((@IsNull_CoefAV = 1 AND [CoefAV] IS NULL) OR ([CoefAV]"& _ 
                " = @Original_CoefAV)) AND ((@IsNull_ProduitCompose = 1 AND [ProduitCompose] IS N"& _ 
                "ULL) OR ([ProduitCompose] = @Original_ProduitCompose)) AND ((@IsNull_GestionStoc"& _ 
                "k = 1 AND [GestionStock] IS NULL) OR ([GestionStock] = @Original_GestionStock)) "& _ 
                "AND ((@IsNull_DecompteAuto = 1 AND [DecompteAuto] IS NULL) OR ([DecompteAuto] = "& _ 
                "@Original_DecompteAuto)) AND ((@IsNull_RefFournisseur = 1 AND [RefFournisseur] I"& _ 
                "S NULL) OR ([RefFournisseur] = @Original_RefFournisseur)) AND ((@IsNull_nFournis"& _ 
                "seur = 1 AND [nFournisseur] IS NULL) OR ([nFournisseur] = @Original_nFournisseur"& _ 
                ")) AND ([IsSortieImpr] = @Original_IsSortieImpr) AND ([IsEnVente] = @Original_Is"& _ 
                "EnVente) AND ((@IsNull_AMM = 1 AND [AMM] IS NULL) OR ([AMM] = @Original_AMM)) AN"& _ 
                "D ((@IsNull_TAXSM = 1 AND [TAXSM] IS NULL) OR ([TAXSM] = @Original_TAXSM)) AND ("& _ 
                "[IsAMM] = @Original_IsAMM) AND ((@IsNull_DateMaj = 1 AND [DateMaj] IS NULL) OR ("& _ 
                "[DateMaj] = @Original_DateMaj)) AND ((@IsNull_isComm = 1 AND [isComm] IS NULL) O"& _ 
                "R ([isComm] = @Original_isComm)) AND ((@IsNull_Conditionnement = 1 AND [Conditio"& _ 
                "nnement] IS NULL) OR ([Conditionnement] = @Original_Conditionnement)) AND ([Seui"& _ 
                "lStock] = @Original_SeuilStock) AND ((@IsNull_NCompteX = 1 AND [NCompteX] IS NUL"& _ 
                "L) OR ([NCompteX] = @Original_NCompteX)) AND ((@IsNull_NActiviteX = 1 AND [NActi"& _ 
                "viteX] IS NULL) OR ([NActiviteX] = @Original_NActiviteX)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nProduit, Co"& _ 
                "deProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsP"& _ 
                "rixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompte"& _ 
                "V, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, "& _ 
                "Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, D"& _ 
                "ecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, "& _ 
                "IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingre"& _ 
                "dients FROM Produit WHERE (nProduit = @nProduit)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibelleLong", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibelleLong", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Image", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Image", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ingredients", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ingredients", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Libelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixAHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixAHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixATTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixATTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1U2Independant", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1xU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1xU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeBarre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefAV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefAV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProduitCompose", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GestionStock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DecompteAuto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RefFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXSM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateMaj", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isComm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, Prix"& _ 
                "VHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, N"& _ 
                "ActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, "& _ 
                "U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Imag"& _ 
                "e, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnV"& _ 
                "ente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX,"& _ 
                " NActiviteX, Ingredients FROM dbo.Produit"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, Prix"& _ 
                "VHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, N"& _ 
                "ActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, "& _ 
                "U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Imag"& _ 
                "e, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnV"& _ 
                "ente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX,"& _ 
                " NActiviteX, Ingredients FROM dbo.Produit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (CodeBarre = @CodeBarre)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeBarre", Global.System.Data.SqlDbType.NVarChar, 13, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        MAX(nProduit) AS MAXnProduit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Produit"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ApproFactDataSet.ProduitDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ApproFactDataSet.ProduitDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ApproFactDataSet.ProduitDataTable = New ApproFactDataSet.ProduitDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodeBarre(ByVal dataTable As ApproFactDataSet.ProduitDataTable, ByVal CodeBarre As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodeBarre Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodeBarre,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodeBarre(ByVal CodeBarre As String) As ApproFactDataSet.ProduitDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodeBarre Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodeBarre,String)
            End If
            Dim dataTable As ApproFactDataSet.ProduitDataTable = New ApproFactDataSet.ProduitDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ApproFactDataSet.ProduitDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ApproFactDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Produit")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nProduit,Decimal)
            If (Original_CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CodeProduit")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_Libelle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Libelle,String)
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TTVA,String)
            End If
            If (Original_PrixAHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PrixAHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixATTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PrixATTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_PrixVHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_IsPrixHT,Boolean)
            If (Original_Unite1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Unite1,String)
            End If
            If (Original_Unite2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Unite2,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ProduitAchat,Boolean)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_ProduitVente,Boolean)
            If (Original_NCompteA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_NCompteA,String)
            End If
            If (Original_NActiviteA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_NActiviteA,String)
            End If
            If (Original_NCompteV Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_NCompteV,String)
            End If
            If (Original_NActiviteV Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_NActiviteV,String)
            End If
            If (Original_Famille1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Famille1.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Famille2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Famille2,String)
            End If
            If (Original_Famille3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Famille3,String)
            End If
            If (Original_U1U2Independant.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_U1xU2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_U1xU2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_CodeBarre Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_CodeBarre,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_CoefU2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_CoefU2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_TypeFacturation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_TypeFacturation,String)
            End If
            If (Original_CoefAV.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_CoefAV.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_ProduitCompose.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_GestionStock.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_GestionStock.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_DecompteAuto.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_RefFournisseur Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_RefFournisseur,String)
            End If
            If (Original_nFournisseur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_nFournisseur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_IsSortieImpr,Boolean)
            Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_IsEnVente,Boolean)
            If (Original_AMM Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_AMM,String)
            End If
            If (Original_TAXSM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_TAXSM.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_IsAMM,Boolean)
            If (Original_DateMaj.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_DateMaj.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_isComm.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(Original_isComm.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_Conditionnement.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(Original_Conditionnement.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_SeuilStock,Decimal)
            If (Original_NCompteX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_NCompteX,String)
            End If
            If (Original_NActiviteX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_NActiviteX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nProduit,Decimal)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Libelle,String)
            End If
            If (LibelleLong Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LibelleLong,String)
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TTVA,String)
            End If
            If (PrixAHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PrixAHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PrixATTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PrixATTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PrixVHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PrixVHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PrixVTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(IsPrixHT,Boolean)
            If (Unite1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Unite1,String)
            End If
            If (Unite2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Unite2,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(ProduitAchat,Boolean)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(ProduitVente,Boolean)
            If (NCompteA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NCompteA,String)
            End If
            If (NActiviteA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NActiviteA,String)
            End If
            If (NCompteV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NCompteV,String)
            End If
            If (NActiviteV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(NActiviteV,String)
            End If
            If (Famille1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Famille1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Famille2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Famille2,String)
            End If
            If (Famille3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Famille3,String)
            End If
            If (U1U2Independant.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (U1xU2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(U1xU2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CodeBarre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CodeBarre,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (CoefU2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(CoefU2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TypeFacturation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(TypeFacturation,String)
            End If
            If (CoefAV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(CoefAV.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (ProduitCompose.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Image Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Image,String)
            End If
            If (GestionStock.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(GestionStock.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DecompteAuto.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (RefFournisseur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(RefFournisseur,String)
            End If
            If (nFournisseur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(nFournisseur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(IsSortieImpr,Boolean)
            Me.Adapter.InsertCommand.Parameters(35).Value = CType(IsEnVente,Boolean)
            If (AMM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(AMM,String)
            End If
            If (TAXSM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(TAXSM.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(38).Value = CType(IsAMM,Boolean)
            If (DateMaj.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(DateMaj.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (isComm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(isComm.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Conditionnement.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(Conditionnement.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(42).Value = CType(SeuilStock,Decimal)
            If (NCompteX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(NCompteX,String)
            End If
            If (NActiviteX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(NActiviteX,String)
            End If
            If (Ingredients Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Ingredients,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String,  _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nProduit,Decimal)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Libelle,String)
            End If
            If (LibelleLong Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LibelleLong,String)
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TTVA,String)
            End If
            If (PrixAHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PrixAHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PrixATTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PrixATTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PrixVHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PrixVHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PrixVTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IsPrixHT,Boolean)
            If (Unite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Unite1,String)
            End If
            If (Unite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Unite2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ProduitAchat,Boolean)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ProduitVente,Boolean)
            If (NCompteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(NCompteA,String)
            End If
            If (NActiviteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(NActiviteA,String)
            End If
            If (NCompteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(NCompteV,String)
            End If
            If (NActiviteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(NActiviteV,String)
            End If
            If (Famille1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Famille1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Famille2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Famille2,String)
            End If
            If (Famille3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Famille3,String)
            End If
            If (U1U2Independant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (U1xU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(U1xU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CodeBarre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(CodeBarre,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (CoefU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(CoefU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TypeFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(TypeFacturation,String)
            End If
            If (CoefAV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(CoefAV.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (ProduitCompose.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Image Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Image,String)
            End If
            If (GestionStock.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(GestionStock.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DecompteAuto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (RefFournisseur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(RefFournisseur,String)
            End If
            If (nFournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(nFournisseur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(IsSortieImpr,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(IsEnVente,Boolean)
            If (AMM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(AMM,String)
            End If
            If (TAXSM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(TAXSM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(IsAMM,Boolean)
            If (DateMaj.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(DateMaj.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (isComm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(isComm.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Conditionnement.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Conditionnement.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(SeuilStock,Decimal)
            If (NCompteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(NCompteX,String)
            End If
            If (NActiviteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(NActiviteX,String)
            End If
            If (Ingredients Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Ingredients,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_nProduit,Decimal)
            If (Original_CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CodeProduit")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Libelle,String)
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_TTVA,String)
            End If
            If (Original_PrixAHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_PrixAHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixATTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_PrixATTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_PrixVHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_IsPrixHT,Boolean)
            If (Original_Unite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_Unite1,String)
            End If
            If (Original_Unite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_Unite2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_ProduitAchat,Boolean)
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_ProduitVente,Boolean)
            If (Original_NCompteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_NCompteA,String)
            End If
            If (Original_NActiviteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_NActiviteA,String)
            End If
            If (Original_NCompteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_NCompteV,String)
            End If
            If (Original_NActiviteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_NActiviteV,String)
            End If
            If (Original_Famille1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_Famille1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_Famille2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_Famille2,String)
            End If
            If (Original_Famille3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_Famille3,String)
            End If
            If (Original_U1U2Independant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_U1xU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_U1xU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_CodeBarre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_CodeBarre,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_CoefU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_CoefU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_TypeFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_TypeFacturation,String)
            End If
            If (Original_CoefAV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_CoefAV.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_ProduitCompose.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_GestionStock.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_GestionStock.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_DecompteAuto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_RefFournisseur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_RefFournisseur,String)
            End If
            If (Original_nFournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_nFournisseur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_IsSortieImpr,Boolean)
            Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_IsEnVente,Boolean)
            If (Original_AMM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_AMM,String)
            End If
            If (Original_TAXSM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_TAXSM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_IsAMM,Boolean)
            If (Original_DateMaj.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_DateMaj.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            If (Original_isComm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_isComm.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (Original_Conditionnement.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_Conditionnement.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_SeuilStock,Decimal)
            If (Original_NCompteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_NCompteX,String)
            End If
            If (Original_NActiviteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_NActiviteX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String,  _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Return Me.Update(Original_nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredients, Original_nProduit, Original_CodeProduit, Original_Libelle, Original_TTVA, Original_PrixAHT, Original_PrixATTC, Original_PrixVHT, Original_PrixVTTC, Original_IsPrixHT, Original_Unite1, Original_Unite2, Original_ProduitAchat, Original_ProduitVente, Original_NCompteA, Original_NActiviteA, Original_NCompteV, Original_NActiviteV, Original_Famille1, Original_Famille2, Original_Famille3, Original_U1U2Independant, Original_U1xU2, Original_CodeBarre, Original_Inactif, Original_CoefU2, Original_TypeFacturation, Original_CoefAV, Original_ProduitCompose, Original_GestionStock, Original_DecompteAuto, Original_RefFournisseur, Original_nFournisseur, Original_IsSortieImpr, Original_IsEnVente, Original_AMM, Original_TAXSM, Original_IsAMM, Original_DateMaj, Original_isComm, Original_Conditionnement, Original_SeuilStock, Original_NCompteX, Original_NActiviteX)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetMaxnProduit() As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FamilleTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Famille"
            tableMapping.ColumnMappings.Add("nFamille", "nFamille")
            tableMapping.ColumnMappings.Add("Famille", "Famille")
            tableMapping.ColumnMappings.Add("nGroupe", "nGroupe")
            tableMapping.ColumnMappings.Add("Description", "Description")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Famille] WHERE (([nFamille] = @Original_nFamille) AND ((@IsNul"& _ 
                "l_Famille = 1 AND [Famille] IS NULL) OR ([Famille] = @Original_Famille)) AND ((@"& _ 
                "IsNull_nGroupe = 1 AND [nGroupe] IS NULL) OR ([nGroupe] = @Original_nGroupe)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFamille", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFamille", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nGroupe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nGroupe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nGroupe", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nGroupe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Famille] ([nFamille], [Famille], [nGroupe], [Description]) VAL"& _ 
                "UES (@nFamille, @Famille, @nGroupe, @Description);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nFamille, Famille, nG"& _ 
                "roupe, Description FROM Famille WHERE (nFamille = @nFamille)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFamille", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFamille", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nGroupe", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nGroupe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Famille] SET [nFamille] = @nFamille, [Famille] = @Famille, [nGroupe"& _ 
                "] = @nGroupe, [Description] = @Description WHERE (([nFamille] = @Original_nFamil"& _ 
                "le) AND ((@IsNull_Famille = 1 AND [Famille] IS NULL) OR ([Famille] = @Original_F"& _ 
                "amille)) AND ((@IsNull_nGroupe = 1 AND [nGroupe] IS NULL) OR ([nGroupe] = @Origi"& _ 
                "nal_nGroupe)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nFamille, Famille, nGroupe, Description FROM Famille WHE"& _ 
                "RE (nFamille = @nFamille)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFamille", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFamille", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nGroupe", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nGroupe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFamille", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFamille", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nGroupe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nGroupe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nGroupe", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nGroupe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nFamille, Famille, nGroupe, Description FROM dbo.Famille"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ApproFactDataSet.FamilleDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ApproFactDataSet.FamilleDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ApproFactDataSet.FamilleDataTable = New ApproFactDataSet.FamilleDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ApproFactDataSet.FamilleDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ApproFactDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Famille")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nFamille As Short, ByVal Original_Famille As String, ByVal Original_nGroupe As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nFamille,Short)
            If (Original_Famille Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Famille,String)
            End If
            If (Original_nGroupe.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nGroupe.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal nFamille As Short, ByVal Famille As String, ByVal nGroupe As Global.System.Nullable(Of Short), ByVal Description As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nFamille,Short)
            If (Famille Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Famille,String)
            End If
            If (nGroupe.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nGroupe.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Description,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nFamille As Short, ByVal Famille As String, ByVal nGroupe As Global.System.Nullable(Of Short), ByVal Description As String, ByVal Original_nFamille As Short, ByVal Original_Famille As String, ByVal Original_nGroupe As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nFamille,Short)
            If (Famille Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Famille,String)
            End If
            If (nGroupe.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nGroupe.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_nFamille,Short)
            If (Original_Famille Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Famille,String)
            End If
            If (Original_nGroupe.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_nGroupe.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Famille As String, ByVal nGroupe As Global.System.Nullable(Of Short), ByVal Description As String, ByVal Original_nFamille As Short, ByVal Original_Famille As String, ByVal Original_nGroupe As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_nFamille, Famille, nGroupe, Description, Original_nFamille, Original_Famille, Original_nGroupe)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ImprBilanVenteApproFactTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ImprBilanVenteApproFact"
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("AMM", "AMM")
            tableMapping.ColumnMappings.Add("CodePostal", "CodePostal")
            tableMapping.ColumnMappings.Add("nFacture", "nFacture")
            tableMapping.ColumnMappings.Add("DateFacture", "DateFacture")
            tableMapping.ColumnMappings.Add("MontantLigneHT", "MontantLigneHT")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("LibUnite1", "LibUnite1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        VFacture_Detail.Libelle, SUBSTRING(VFacture_Detail.CodeProduit, 5, "& _ 
                "LEN(VFacture_Detail.CodeProduit) - 4) AS AMM, Entreprise.CodePostal, VFacture.nF"& _ 
                "acture, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         VFacture.DateFacture, VFacture_Detail.Montant"& _ 
                "LigneHT, VFacture_Detail.Unite1, VFacture_Detail.LibUnite1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFac"& _ 
                "ture INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise ON VFacture.nClient = Entre"& _ 
                "prise.nEntreprise INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         VFacture_Detail ON VFactu"& _ 
                "re.nDevis = VFacture_Detail.nDevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (VFacture_Detail.CodeProduit LI"& _ 
                "KE 'RED-%') AND (VFacture.DateFacture >= @DateFactureDeb) AND (VFacture.DateFact"& _ 
                "ure < @DateFactureFin)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFactureDeb", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFactureFin", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ApproFactDataSet.ImprBilanVenteApproFactDataTable, ByVal DateFactureDeb As Global.System.Nullable(Of Date), ByVal DateFactureFin As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFactureDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFactureDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DateFactureFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFactureFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFactureDeb As Global.System.Nullable(Of Date), ByVal DateFactureFin As Global.System.Nullable(Of Date)) As ApproFactDataSet.ImprBilanVenteApproFactDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFactureDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFactureDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DateFactureFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFactureFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ApproFactDataSet.ImprBilanVenteApproFactDataTable = New ApproFactDataSet.ImprBilanVenteApproFactDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ParametresTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Parametres"
            tableMapping.ColumnMappings.Add("nParametre", "nParametre")
            tableMapping.ColumnMappings.Add("Logo", "Logo")
            tableMapping.ColumnMappings.Add("Cle", "Cle")
            tableMapping.ColumnMappings.Add("TypePiece", "TypePiece")
            tableMapping.ColumnMappings.Add("Valeur", "Valeur")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Parametres] WHERE (([nParametre] = @Original_nParametre) AND ("& _ 
                "(@IsNull_Cle = 1 AND [Cle] IS NULL) OR ([Cle] = @Original_Cle)) AND ((@IsNull_Ty"& _ 
                "pePiece = 1 AND [TypePiece] IS NULL) OR ([TypePiece] = @Original_TypePiece)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nParametre", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nParametre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypePiece", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePiece", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypePiece", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePiece", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Parametres] ([Logo], [Cle], [TypePiece], [Valeur]) VALUES (@Lo"& _ 
                "go, @Cle, @TypePiece, @Valeur);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nParametre, Logo, Cle, TypePiece, Valeur"& _ 
                " FROM Parametres WHERE (nParametre = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Logo", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Logo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypePiece", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePiece", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valeur", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valeur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Parametres] SET [Logo] = @Logo, [Cle] = @Cle, [TypePiece] = @TypePi"& _ 
                "ece, [Valeur] = @Valeur WHERE (([nParametre] = @Original_nParametre) AND ((@IsNu"& _ 
                "ll_Cle = 1 AND [Cle] IS NULL) OR ([Cle] = @Original_Cle)) AND ((@IsNull_TypePiec"& _ 
                "e = 1 AND [TypePiece] IS NULL) OR ([TypePiece] = @Original_TypePiece)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " nParametre, Logo, Cle, TypePiece, Valeur FROM Parametres WHERE (nParametre = @n"& _ 
                "Parametre)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Logo", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Logo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypePiece", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePiece", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valeur", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valeur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nParametre", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nParametre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypePiece", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePiece", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypePiece", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePiece", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nParametre", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "nParametre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nParametre, Logo, Cle, TypePiece, Valeur FROM dbo.Parametres"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ApproFactDataSet.ParametresDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ApproFactDataSet.ParametresDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ApproFactDataSet.ParametresDataTable = New ApproFactDataSet.ParametresDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ApproFactDataSet.ParametresDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ApproFactDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Parametres")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nParametre As Decimal, ByVal Original_Cle As String, ByVal Original_TypePiece As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nParametre,Decimal)
            If (Original_Cle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Cle,String)
            End If
            If (Original_TypePiece Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TypePiece,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Logo() As Byte, ByVal Cle As String, ByVal TypePiece As String, ByVal Valeur As String) As Integer
            If (Logo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Logo,Byte())
            End If
            If (Cle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Cle,String)
            End If
            If (TypePiece Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TypePiece,String)
            End If
            If (Valeur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Valeur,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Logo() As Byte, ByVal Cle As String, ByVal TypePiece As String, ByVal Valeur As String, ByVal Original_nParametre As Decimal, ByVal Original_Cle As String, ByVal Original_TypePiece As String, ByVal nParametre As Decimal) As Integer
            If (Logo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Logo,Byte())
            End If
            If (Cle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Cle,String)
            End If
            If (TypePiece Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TypePiece,String)
            End If
            If (Valeur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Valeur,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_nParametre,Decimal)
            If (Original_Cle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Cle,String)
            End If
            If (Original_TypePiece Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TypePiece,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(nParametre,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Logo() As Byte, ByVal Cle As String, ByVal TypePiece As String, ByVal Valeur As String, ByVal Original_nParametre As Decimal, ByVal Original_Cle As String, ByVal Original_TypePiece As String) As Integer
            Return Me.Update(Logo, Cle, TypePiece, Valeur, Original_nParametre, Original_Cle, Original_TypePiece, Original_nParametre)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EntrepriseTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Entreprise"
            tableMapping.ColumnMappings.Add("nEntreprise", "nEntreprise")
            tableMapping.ColumnMappings.Add("DateCreation", "DateCreation")
            tableMapping.ColumnMappings.Add("DateModification", "DateModification")
            tableMapping.ColumnMappings.Add("InfoMAJ", "InfoMAJ")
            tableMapping.ColumnMappings.Add("TypeEntreprise", "TypeEntreprise")
            tableMapping.ColumnMappings.Add("nOrganisme", "nOrganisme")
            tableMapping.ColumnMappings.Add("nMaisonMere", "nMaisonMere")
            tableMapping.ColumnMappings.Add("Dep", "Dep")
            tableMapping.ColumnMappings.Add("Nom", "Nom")
            tableMapping.ColumnMappings.Add("Adresse", "Adresse")
            tableMapping.ColumnMappings.Add("CodePostal", "CodePostal")
            tableMapping.ColumnMappings.Add("Ville", "Ville")
            tableMapping.ColumnMappings.Add("Pays", "Pays")
            tableMapping.ColumnMappings.Add("TypeClient", "TypeClient")
            tableMapping.ColumnMappings.Add("ModePaiement", "ModePaiement")
            tableMapping.ColumnMappings.Add("Echeance", "Echeance")
            tableMapping.ColumnMappings.Add("Banque", "Banque")
            tableMapping.ColumnMappings.Add("RIB", "RIB")
            tableMapping.ColumnMappings.Add("CA", "CA")
            tableMapping.ColumnMappings.Add("EMail", "EMail")
            tableMapping.ColumnMappings.Add("SiteInternet", "SiteInternet")
            tableMapping.ColumnMappings.Add("Observations", "Observations")
            tableMapping.ColumnMappings.Add("FinMois", "FinMois")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("FacturationTTC", "FacturationTTC")
            tableMapping.ColumnMappings.Add("Fournisseur", "Fournisseur")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("SuffixePostal", "SuffixePostal")
            tableMapping.ColumnMappings.Add("AdresseLiv", "AdresseLiv")
            tableMapping.ColumnMappings.Add("CodePostalLiv", "CodePostalLiv")
            tableMapping.ColumnMappings.Add("VilleLiv", "VilleLiv")
            tableMapping.ColumnMappings.Add("PaysLiv", "PaysLiv")
            tableMapping.ColumnMappings.Add("Inactif", "Inactif")
            tableMapping.ColumnMappings.Add("LoginSite", "LoginSite")
            tableMapping.ColumnMappings.Add("PwdSite", "PwdSite")
            tableMapping.ColumnMappings.Add("IdSite", "IdSite")
            tableMapping.ColumnMappings.Add("NCompteF", "NCompteF")
            tableMapping.ColumnMappings.Add("NActiviteF", "NActiviteF")
            tableMapping.ColumnMappings.Add("NCompteC", "NCompteC")
            tableMapping.ColumnMappings.Add("NActiviteC", "NActiviteC")
            tableMapping.ColumnMappings.Add("nTarif", "nTarif")
            tableMapping.ColumnMappings.Add("Civilite", "Civilite")
            tableMapping.ColumnMappings.Add("Logo", "Logo")
            tableMapping.ColumnMappings.Add("Licence", "Licence")
            tableMapping.ColumnMappings.Add("Critere2", "Critere2")
            tableMapping.ColumnMappings.Add("Critere3", "Critere3")
            tableMapping.ColumnMappings.Add("Critere4", "Critere4")
            tableMapping.ColumnMappings.Add("NTVAIntraCom", "NTVAIntraCom")
            tableMapping.ColumnMappings.Add("nCommercial", "nCommercial")
            tableMapping.ColumnMappings.Add("FormeJuridique", "FormeJuridique")
            tableMapping.ColumnMappings.Add("CibleCommercial", "CibleCommercial")
            tableMapping.ColumnMappings.Add("IsExport", "IsExport")
            tableMapping.ColumnMappings.Add("NomFacturation", "NomFacturation")
            tableMapping.ColumnMappings.Add("NomLivraison", "NomLivraison")
            tableMapping.ColumnMappings.Add("EditionBLNonChiffre", "EditionBLNonChiffre")
            tableMapping.ColumnMappings.Add("ObservationLivraison", "ObservationLivraison")
            tableMapping.ColumnMappings.Add("IndEscompteSpecifique", "IndEscompteSpecifique")
            tableMapping.ColumnMappings.Add("TauxEscompteSpecifique", "TauxEscompteSpecifique")
            tableMapping.ColumnMappings.Add("DelaiValiditeEscompte", "DelaiValiditeEscompte")
            tableMapping.ColumnMappings.Add("LitigeEnCours", "LitigeEnCours")
            tableMapping.ColumnMappings.Add("EnCoursMax", "EnCoursMax")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Entreprise] WHERE (([nEntreprise] = @Original_nEntreprise) AND ((@Is"& _ 
                "Null_DateCreation = 1 AND [DateCreation] IS NULL) OR ([DateCreation] = @Original"& _ 
                "_DateCreation)) AND ((@IsNull_DateModification = 1 AND [DateModification] IS NUL"& _ 
                "L) OR ([DateModification] = @Original_DateModification)) AND ((@IsNull_InfoMAJ ="& _ 
                " 1 AND [InfoMAJ] IS NULL) OR ([InfoMAJ] = @Original_InfoMAJ)) AND ((@IsNull_Type"& _ 
                "Entreprise = 1 AND [TypeEntreprise] IS NULL) OR ([TypeEntreprise] = @Original_Ty"& _ 
                "peEntreprise)) AND ((@IsNull_nOrganisme = 1 AND [nOrganisme] IS NULL) OR ([nOrga"& _ 
                "nisme] = @Original_nOrganisme)) AND ((@IsNull_nMaisonMere = 1 AND [nMaisonMere] "& _ 
                "IS NULL) OR ([nMaisonMere] = @Original_nMaisonMere)) AND ((@IsNull_Dep = 1 AND ["& _ 
                "Dep] IS NULL) OR ([Dep] = @Original_Dep)) AND ((@IsNull_Nom = 1 AND [Nom] IS NUL"& _ 
                "L) OR ([Nom] = @Original_Nom)) AND ((@IsNull_CodePostal = 1 AND [CodePostal] IS "& _ 
                "NULL) OR ([CodePostal] = @Original_CodePostal)) AND ((@IsNull_Ville = 1 AND [Vil"& _ 
                "le] IS NULL) OR ([Ville] = @Original_Ville)) AND ((@IsNull_Pays = 1 AND [Pays] I"& _ 
                "S NULL) OR ([Pays] = @Original_Pays)) AND ((@IsNull_TypeClient = 1 AND [TypeClie"& _ 
                "nt] IS NULL) OR ([TypeClient] = @Original_TypeClient)) AND ((@IsNull_ModePaiemen"& _ 
                "t = 1 AND [ModePaiement] IS NULL) OR ([ModePaiement] = @Original_ModePaiement)) "& _ 
                "AND ((@IsNull_Echeance = 1 AND [Echeance] IS NULL) OR ([Echeance] = @Original_Ec"& _ 
                "heance)) AND ((@IsNull_Banque = 1 AND [Banque] IS NULL) OR ([Banque] = @Original"& _ 
                "_Banque)) AND ((@IsNull_RIB = 1 AND [RIB] IS NULL) OR ([RIB] = @Original_RIB)) A"& _ 
                "ND ((@IsNull_CA = 1 AND [CA] IS NULL) OR ([CA] = @Original_CA)) AND ((@IsNull_EM"& _ 
                "ail = 1 AND [EMail] IS NULL) OR ([EMail] = @Original_EMail)) AND ((@IsNull_SiteI"& _ 
                "nternet = 1 AND [SiteInternet] IS NULL) OR ([SiteInternet] = @Original_SiteInter"& _ 
                "net)) AND ((@IsNull_FinMois = 1 AND [FinMois] IS NULL) OR ([FinMois] = @Original"& _ 
                "_FinMois)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Origin"& _ 
                "al_Remise)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TT"& _ 
                "VA)) AND ((@IsNull_FacturationTTC = 1 AND [FacturationTTC] IS NULL) OR ([Factura"& _ 
                "tionTTC] = @Original_FacturationTTC)) AND ((@IsNull_Fournisseur = 1 AND [Fournis"& _ 
                "seur] IS NULL) OR ([Fournisseur] = @Original_Fournisseur)) AND ((@IsNull_Client "& _ 
                "= 1 AND [Client] IS NULL) OR ([Client] = @Original_Client)) AND ((@IsNull_Suffix"& _ 
                "ePostal = 1 AND [SuffixePostal] IS NULL) OR ([SuffixePostal] = @Original_Suffixe"& _ 
                "Postal)) AND ((@IsNull_CodePostalLiv = 1 AND [CodePostalLiv] IS NULL) OR ([CodeP"& _ 
                "ostalLiv] = @Original_CodePostalLiv)) AND ((@IsNull_VilleLiv = 1 AND [VilleLiv] "& _ 
                "IS NULL) OR ([VilleLiv] = @Original_VilleLiv)) AND ((@IsNull_PaysLiv = 1 AND [Pa"& _ 
                "ysLiv] IS NULL) OR ([PaysLiv] = @Original_PaysLiv)) AND ((@IsNull_Inactif = 1 AN"& _ 
                "D [Inactif] IS NULL) OR ([Inactif] = @Original_Inactif)) AND ((@IsNull_LoginSite"& _ 
                " = 1 AND [LoginSite] IS NULL) OR ([LoginSite] = @Original_LoginSite)) AND ((@IsN"& _ 
                "ull_PwdSite = 1 AND [PwdSite] IS NULL) OR ([PwdSite] = @Original_PwdSite)) AND ("& _ 
                "(@IsNull_IdSite = 1 AND [IdSite] IS NULL) OR ([IdSite] = @Original_IdSite)) AND "& _ 
                "((@IsNull_NCompteF = 1 AND [NCompteF] IS NULL) OR ([NCompteF] = @Original_NCompt"& _ 
                "eF)) AND ((@IsNull_NActiviteF = 1 AND [NActiviteF] IS NULL) OR ([NActiviteF] = @"& _ 
                "Original_NActiviteF)) AND ((@IsNull_NCompteC = 1 AND [NCompteC] IS NULL) OR ([NC"& _ 
                "ompteC] = @Original_NCompteC)) AND ((@IsNull_NActiviteC = 1 AND [NActiviteC] IS "& _ 
                "NULL) OR ([NActiviteC] = @Original_NActiviteC)) AND ((@IsNull_nTarif = 1 AND [nT"& _ 
                "arif] IS NULL) OR ([nTarif] = @Original_nTarif)) AND ((@IsNull_Civilite = 1 AND "& _ 
                "[Civilite] IS NULL) OR ([Civilite] = @Original_Civilite)) AND ((@IsNull_Licence "& _ 
                "= 1 AND [Licence] IS NULL) OR ([Licence] = @Original_Licence)) AND ((@IsNull_Cri"& _ 
                "tere2 = 1 AND [Critere2] IS NULL) OR ([Critere2] = @Original_Critere2)) AND ((@I"& _ 
                "sNull_Critere3 = 1 AND [Critere3] IS NULL) OR ([Critere3] = @Original_Critere3))"& _ 
                " AND ((@IsNull_Critere4 = 1 AND [Critere4] IS NULL) OR ([Critere4] = @Original_C"& _ 
                "ritere4)) AND ((@IsNull_NTVAIntraCom = 1 AND [NTVAIntraCom] IS NULL) OR ([NTVAIn"& _ 
                "traCom] = @Original_NTVAIntraCom)) AND ((@IsNull_nCommercial = 1 AND [nCommercia"& _ 
                "l] IS NULL) OR ([nCommercial] = @Original_nCommercial)) AND ((@IsNull_FormeJurid"& _ 
                "ique = 1 AND [FormeJuridique] IS NULL) OR ([FormeJuridique] = @Original_FormeJur"& _ 
                "idique)) AND ((@IsNull_IsExport = 1 AND [IsExport] IS NULL) OR ([IsExport] = @Or"& _ 
                "iginal_IsExport)) AND ((@IsNull_NomFacturation = 1 AND [NomFacturation] IS NULL)"& _ 
                " OR ([NomFacturation] = @Original_NomFacturation)) AND ((@IsNull_NomLivraison = "& _ 
                "1 AND [NomLivraison] IS NULL) OR ([NomLivraison] = @Original_NomLivraison)) AND "& _ 
                "((@IsNull_EditionBLNonChiffre = 1 AND [EditionBLNonChiffre] IS NULL) OR ([Editio"& _ 
                "nBLNonChiffre] = @Original_EditionBLNonChiffre)) AND ((@IsNull_ObservationLivrai"& _ 
                "son = 1 AND [ObservationLivraison] IS NULL) OR ([ObservationLivraison] = @Origin"& _ 
                "al_ObservationLivraison)) AND ([IndEscompteSpecifique] = @Original_IndEscompteSp"& _ 
                "ecifique) AND ((@IsNull_TauxEscompteSpecifique = 1 AND [TauxEscompteSpecifique] "& _ 
                "IS NULL) OR ([TauxEscompteSpecifique] = @Original_TauxEscompteSpecifique)) AND ("& _ 
                "(@IsNull_DelaiValiditeEscompte = 1 AND [DelaiValiditeEscompte] IS NULL) OR ([Del"& _ 
                "aiValiditeEscompte] = @Original_DelaiValiditeEscompte)) AND ([LitigeEnCours] = @"& _ 
                "Original_LitigeEnCours) AND ((@IsNull_EnCoursMax = 1 AND [EnCoursMax] IS NULL) O"& _ 
                "R ([EnCoursMax] = @Original_EnCoursMax)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateModification", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InfoMAJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeEntreprise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeEntreprise", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrganisme", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrganisme", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nMaisonMere", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nMaisonMere", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Dep", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodePostal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ville", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Pays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ModePaiement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ModePaiement", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Echeance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Echeance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Echeance", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Echeance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Banque", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Banque", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RIB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RIB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CA", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EMail", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SiteInternet", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteInternet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FinMois", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinMois", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fournisseur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Client", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Client", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SuffixePostal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SuffixePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodePostalLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodePostalLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VilleLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VilleLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaysLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaysLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LoginSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LoginSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PwdSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PwdSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdSite", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "IdSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Civilite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Civilite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Licence", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Licence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NTVAIntraCom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NTVAIntraCom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FormeJuridique", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormeJuridique", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsExport", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsExport", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NomFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NomFacturation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NomLivraison", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NomLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EditionBLNonChiffre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EditionBLNonChiffre", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ObservationLivraison", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ObservationLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IndEscompteSpecifique", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IndEscompteSpecifique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TauxEscompteSpecifique", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TauxEscompteSpecifique", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LitigeEnCours", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LitigeEnCours", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EnCoursMax", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EnCoursMax", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EnCoursMax", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EnCoursMax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Entreprise] ([nEntreprise], [DateCreation], [DateModification], [Inf"& _ 
                "oMAJ], [TypeEntreprise], [nOrganisme], [nMaisonMere], [Dep], [Nom], [Adresse], ["& _ 
                "CodePostal], [Ville], [Pays], [TypeClient], [ModePaiement], [Echeance], [Banque]"& _ 
                ", [RIB], [CA], [EMail], [SiteInternet], [Observations], [FinMois], [Remise], [TT"& _ 
                "VA], [FacturationTTC], [Fournisseur], [Client], [SuffixePostal], [AdresseLiv], ["& _ 
                "CodePostalLiv], [VilleLiv], [PaysLiv], [Inactif], [LoginSite], [PwdSite], [IdSit"& _ 
                "e], [NCompteF], [NActiviteF], [NCompteC], [NActiviteC], [nTarif], [Civilite], [L"& _ 
                "ogo], [Licence], [Critere2], [Critere3], [Critere4], [NTVAIntraCom], [nCommercia"& _ 
                "l], [FormeJuridique], [CibleCommercial], [IsExport], [NomFacturation], [NomLivra"& _ 
                "ison], [EditionBLNonChiffre], [ObservationLivraison], [IndEscompteSpecifique], ["& _ 
                "TauxEscompteSpecifique], [DelaiValiditeEscompte], [LitigeEnCours], [EnCoursMax])"& _ 
                " VALUES (@nEntreprise, @DateCreation, @DateModification, @InfoMAJ, @TypeEntrepri"& _ 
                "se, @nOrganisme, @nMaisonMere, @Dep, @Nom, @Adresse, @CodePostal, @Ville, @Pays,"& _ 
                " @TypeClient, @ModePaiement, @Echeance, @Banque, @RIB, @CA, @EMail, @SiteInterne"& _ 
                "t, @Observations, @FinMois, @Remise, @TTVA, @FacturationTTC, @Fournisseur, @Clie"& _ 
                "nt, @SuffixePostal, @AdresseLiv, @CodePostalLiv, @VilleLiv, @PaysLiv, @Inactif, "& _ 
                "@LoginSite, @PwdSite, @IdSite, @NCompteF, @NActiviteF, @NCompteC, @NActiviteC, @"& _ 
                "nTarif, @Civilite, @Logo, @Licence, @Critere2, @Critere3, @Critere4, @NTVAIntraC"& _ 
                "om, @nCommercial, @FormeJuridique, @CibleCommercial, @IsExport, @NomFacturation,"& _ 
                " @NomLivraison, @EditionBLNonChiffre, @ObservationLivraison, @IndEscompteSpecifi"& _ 
                "que, @TauxEscompteSpecifique, @DelaiValiditeEscompte, @LitigeEnCours, @EnCoursMa"& _ 
                "x);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nEntreprise, DateCreation, DateModification, InfoMAJ, TypeEntreprise"& _ 
                ", nOrganisme, nMaisonMere, Dep, Nom, Adresse, CodePostal, Ville, Pays, TypeClien"& _ 
                "t, ModePaiement, Echeance, Banque, RIB, CA, EMail, SiteInternet, Observations, F"& _ 
                "inMois, Remise, TTVA, FacturationTTC, Fournisseur, Client, SuffixePostal, Adress"& _ 
                "eLiv, CodePostalLiv, VilleLiv, PaysLiv, Inactif, LoginSite, PwdSite, IdSite, NCo"& _ 
                "mpteF, NActiviteF, NCompteC, NActiviteC, nTarif, Civilite, Logo, Licence, Criter"& _ 
                "e2, Critere3, Critere4, NTVAIntraCom, nCommercial, FormeJuridique, CibleCommerci"& _ 
                "al, IsExport, NomFacturation, NomLivraison, EditionBLNonChiffre, ObservationLivr"& _ 
                "aison, IndEscompteSpecifique, TauxEscompteSpecifique, DelaiValiditeEscompte, Lit"& _ 
                "igeEnCours, EnCoursMax FROM Entreprise WHERE (nEntreprise = @nEntreprise)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeEntreprise", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrganisme", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nMaisonMere", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adresse", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adresse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModePaiement", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Echeance", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Echeance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Banque", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteInternet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observations", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observations", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinMois", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fournisseur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SuffixePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseLiv", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodePostalLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VilleLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaysLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoginSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PwdSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdSite", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "IdSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Civilite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Logo", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Logo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Licence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NTVAIntraCom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormeJuridique", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CibleCommercial", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CibleCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsExport", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomFacturation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EditionBLNonChiffre", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ObservationLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IndEscompteSpecifique", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IndEscompteSpecifique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TauxEscompteSpecifique", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LitigeEnCours", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LitigeEnCours", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EnCoursMax", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EnCoursMax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Entreprise] SET [nEntreprise] = @nEntreprise, [DateCreation] = @DateCreat"& _ 
                "ion, [DateModification] = @DateModification, [InfoMAJ] = @InfoMAJ, [TypeEntrepri"& _ 
                "se] = @TypeEntreprise, [nOrganisme] = @nOrganisme, [nMaisonMere] = @nMaisonMere,"& _ 
                " [Dep] = @Dep, [Nom] = @Nom, [Adresse] = @Adresse, [CodePostal] = @CodePostal, ["& _ 
                "Ville] = @Ville, [Pays] = @Pays, [TypeClient] = @TypeClient, [ModePaiement] = @M"& _ 
                "odePaiement, [Echeance] = @Echeance, [Banque] = @Banque, [RIB] = @RIB, [CA] = @C"& _ 
                "A, [EMail] = @EMail, [SiteInternet] = @SiteInternet, [Observations] = @Observati"& _ 
                "ons, [FinMois] = @FinMois, [Remise] = @Remise, [TTVA] = @TTVA, [FacturationTTC] "& _ 
                "= @FacturationTTC, [Fournisseur] = @Fournisseur, [Client] = @Client, [SuffixePos"& _ 
                "tal] = @SuffixePostal, [AdresseLiv] = @AdresseLiv, [CodePostalLiv] = @CodePostal"& _ 
                "Liv, [VilleLiv] = @VilleLiv, [PaysLiv] = @PaysLiv, [Inactif] = @Inactif, [LoginS"& _ 
                "ite] = @LoginSite, [PwdSite] = @PwdSite, [IdSite] = @IdSite, [NCompteF] = @NComp"& _ 
                "teF, [NActiviteF] = @NActiviteF, [NCompteC] = @NCompteC, [NActiviteC] = @NActivi"& _ 
                "teC, [nTarif] = @nTarif, [Civilite] = @Civilite, [Logo] = @Logo, [Licence] = @Li"& _ 
                "cence, [Critere2] = @Critere2, [Critere3] = @Critere3, [Critere4] = @Critere4, ["& _ 
                "NTVAIntraCom] = @NTVAIntraCom, [nCommercial] = @nCommercial, [FormeJuridique] = "& _ 
                "@FormeJuridique, [CibleCommercial] = @CibleCommercial, [IsExport] = @IsExport, ["& _ 
                "NomFacturation] = @NomFacturation, [NomLivraison] = @NomLivraison, [EditionBLNon"& _ 
                "Chiffre] = @EditionBLNonChiffre, [ObservationLivraison] = @ObservationLivraison,"& _ 
                " [IndEscompteSpecifique] = @IndEscompteSpecifique, [TauxEscompteSpecifique] = @T"& _ 
                "auxEscompteSpecifique, [DelaiValiditeEscompte] = @DelaiValiditeEscompte, [Litige"& _ 
                "EnCours] = @LitigeEnCours, [EnCoursMax] = @EnCoursMax WHERE (([nEntreprise] = @O"& _ 
                "riginal_nEntreprise) AND ((@IsNull_DateCreation = 1 AND [DateCreation] IS NULL) "& _ 
                "OR ([DateCreation] = @Original_DateCreation)) AND ((@IsNull_DateModification = 1"& _ 
                " AND [DateModification] IS NULL) OR ([DateModification] = @Original_DateModifica"& _ 
                "tion)) AND ((@IsNull_InfoMAJ = 1 AND [InfoMAJ] IS NULL) OR ([InfoMAJ] = @Origina"& _ 
                "l_InfoMAJ)) AND ((@IsNull_TypeEntreprise = 1 AND [TypeEntreprise] IS NULL) OR (["& _ 
                "TypeEntreprise] = @Original_TypeEntreprise)) AND ((@IsNull_nOrganisme = 1 AND [n"& _ 
                "Organisme] IS NULL) OR ([nOrganisme] = @Original_nOrganisme)) AND ((@IsNull_nMai"& _ 
                "sonMere = 1 AND [nMaisonMere] IS NULL) OR ([nMaisonMere] = @Original_nMaisonMere"& _ 
                ")) AND ((@IsNull_Dep = 1 AND [Dep] IS NULL) OR ([Dep] = @Original_Dep)) AND ((@I"& _ 
                "sNull_Nom = 1 AND [Nom] IS NULL) OR ([Nom] = @Original_Nom)) AND ((@IsNull_CodeP"& _ 
                "ostal = 1 AND [CodePostal] IS NULL) OR ([CodePostal] = @Original_CodePostal)) AN"& _ 
                "D ((@IsNull_Ville = 1 AND [Ville] IS NULL) OR ([Ville] = @Original_Ville)) AND ("& _ 
                "(@IsNull_Pays = 1 AND [Pays] IS NULL) OR ([Pays] = @Original_Pays)) AND ((@IsNul"& _ 
                "l_TypeClient = 1 AND [TypeClient] IS NULL) OR ([TypeClient] = @Original_TypeClie"& _ 
                "nt)) AND ((@IsNull_ModePaiement = 1 AND [ModePaiement] IS NULL) OR ([ModePaiemen"& _ 
                "t] = @Original_ModePaiement)) AND ((@IsNull_Echeance = 1 AND [Echeance] IS NULL)"& _ 
                " OR ([Echeance] = @Original_Echeance)) AND ((@IsNull_Banque = 1 AND [Banque] IS "& _ 
                "NULL) OR ([Banque] = @Original_Banque)) AND ((@IsNull_RIB = 1 AND [RIB] IS NULL)"& _ 
                " OR ([RIB] = @Original_RIB)) AND ((@IsNull_CA = 1 AND [CA] IS NULL) OR ([CA] = @"& _ 
                "Original_CA)) AND ((@IsNull_EMail = 1 AND [EMail] IS NULL) OR ([EMail] = @Origin"& _ 
                "al_EMail)) AND ((@IsNull_SiteInternet = 1 AND [SiteInternet] IS NULL) OR ([SiteI"& _ 
                "nternet] = @Original_SiteInternet)) AND ((@IsNull_FinMois = 1 AND [FinMois] IS N"& _ 
                "ULL) OR ([FinMois] = @Original_FinMois)) AND ((@IsNull_Remise = 1 AND [Remise] I"& _ 
                "S NULL) OR ([Remise] = @Original_Remise)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS N"& _ 
                "ULL) OR ([TTVA] = @Original_TTVA)) AND ((@IsNull_FacturationTTC = 1 AND [Factura"& _ 
                "tionTTC] IS NULL) OR ([FacturationTTC] = @Original_FacturationTTC)) AND ((@IsNul"& _ 
                "l_Fournisseur = 1 AND [Fournisseur] IS NULL) OR ([Fournisseur] = @Original_Fourn"& _ 
                "isseur)) AND ((@IsNull_Client = 1 AND [Client] IS NULL) OR ([Client] = @Original"& _ 
                "_Client)) AND ((@IsNull_SuffixePostal = 1 AND [SuffixePostal] IS NULL) OR ([Suff"& _ 
                "ixePostal] = @Original_SuffixePostal)) AND ((@IsNull_CodePostalLiv = 1 AND [Code"& _ 
                "PostalLiv] IS NULL) OR ([CodePostalLiv] = @Original_CodePostalLiv)) AND ((@IsNul"& _ 
                "l_VilleLiv = 1 AND [VilleLiv] IS NULL) OR ([VilleLiv] = @Original_VilleLiv)) AND"& _ 
                " ((@IsNull_PaysLiv = 1 AND [PaysLiv] IS NULL) OR ([PaysLiv] = @Original_PaysLiv)"& _ 
                ") AND ((@IsNull_Inactif = 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_Ina"& _ 
                "ctif)) AND ((@IsNull_LoginSite = 1 AND [LoginSite] IS NULL) OR ([LoginSite] = @O"& _ 
                "riginal_LoginSite)) AND ((@IsNull_PwdSite = 1 AND [PwdSite] IS NULL) OR ([PwdSit"& _ 
                "e] = @Original_PwdSite)) AND ((@IsNull_IdSite = 1 AND [IdSite] IS NULL) OR ([IdS"& _ 
                "ite] = @Original_IdSite)) AND ((@IsNull_NCompteF = 1 AND [NCompteF] IS NULL) OR "& _ 
                "([NCompteF] = @Original_NCompteF)) AND ((@IsNull_NActiviteF = 1 AND [NActiviteF]"& _ 
                " IS NULL) OR ([NActiviteF] = @Original_NActiviteF)) AND ((@IsNull_NCompteC = 1 A"& _ 
                "ND [NCompteC] IS NULL) OR ([NCompteC] = @Original_NCompteC)) AND ((@IsNull_NActi"& _ 
                "viteC = 1 AND [NActiviteC] IS NULL) OR ([NActiviteC] = @Original_NActiviteC)) AN"& _ 
                "D ((@IsNull_nTarif = 1 AND [nTarif] IS NULL) OR ([nTarif] = @Original_nTarif)) A"& _ 
                "ND ((@IsNull_Civilite = 1 AND [Civilite] IS NULL) OR ([Civilite] = @Original_Civ"& _ 
                "ilite)) AND ((@IsNull_Licence = 1 AND [Licence] IS NULL) OR ([Licence] = @Origin"& _ 
                "al_Licence)) AND ((@IsNull_Critere2 = 1 AND [Critere2] IS NULL) OR ([Critere2] ="& _ 
                " @Original_Critere2)) AND ((@IsNull_Critere3 = 1 AND [Critere3] IS NULL) OR ([Cr"& _ 
                "itere3] = @Original_Critere3)) AND ((@IsNull_Critere4 = 1 AND [Critere4] IS NULL"& _ 
                ") OR ([Critere4] = @Original_Critere4)) AND ((@IsNull_NTVAIntraCom = 1 AND [NTVA"& _ 
                "IntraCom] IS NULL) OR ([NTVAIntraCom] = @Original_NTVAIntraCom)) AND ((@IsNull_n"& _ 
                "Commercial = 1 AND [nCommercial] IS NULL) OR ([nCommercial] = @Original_nCommerc"& _ 
                "ial)) AND ((@IsNull_FormeJuridique = 1 AND [FormeJuridique] IS NULL) OR ([FormeJ"& _ 
                "uridique] = @Original_FormeJuridique)) AND ((@IsNull_IsExport = 1 AND [IsExport]"& _ 
                " IS NULL) OR ([IsExport] = @Original_IsExport)) AND ((@IsNull_NomFacturation = 1"& _ 
                " AND [NomFacturation] IS NULL) OR ([NomFacturation] = @Original_NomFacturation))"& _ 
                " AND ((@IsNull_NomLivraison = 1 AND [NomLivraison] IS NULL) OR ([NomLivraison] ="& _ 
                " @Original_NomLivraison)) AND ((@IsNull_EditionBLNonChiffre = 1 AND [EditionBLNo"& _ 
                "nChiffre] IS NULL) OR ([EditionBLNonChiffre] = @Original_EditionBLNonChiffre)) A"& _ 
                "ND ((@IsNull_ObservationLivraison = 1 AND [ObservationLivraison] IS NULL) OR ([O"& _ 
                "bservationLivraison] = @Original_ObservationLivraison)) AND ([IndEscompteSpecifi"& _ 
                "que] = @Original_IndEscompteSpecifique) AND ((@IsNull_TauxEscompteSpecifique = 1"& _ 
                " AND [TauxEscompteSpecifique] IS NULL) OR ([TauxEscompteSpecifique] = @Original_"& _ 
                "TauxEscompteSpecifique)) AND ((@IsNull_DelaiValiditeEscompte = 1 AND [DelaiValid"& _ 
                "iteEscompte] IS NULL) OR ([DelaiValiditeEscompte] = @Original_DelaiValiditeEscom"& _ 
                "pte)) AND ([LitigeEnCours] = @Original_LitigeEnCours) AND ((@IsNull_EnCoursMax ="& _ 
                " 1 AND [EnCoursMax] IS NULL) OR ([EnCoursMax] = @Original_EnCoursMax)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " nEntreprise, DateCreation, DateModification, InfoMAJ, TypeEntreprise, nOrganism"& _ 
                "e, nMaisonMere, Dep, Nom, Adresse, CodePostal, Ville, Pays, TypeClient, ModePaie"& _ 
                "ment, Echeance, Banque, RIB, CA, EMail, SiteInternet, Observations, FinMois, Rem"& _ 
                "ise, TTVA, FacturationTTC, Fournisseur, Client, SuffixePostal, AdresseLiv, CodeP"& _ 
                "ostalLiv, VilleLiv, PaysLiv, Inactif, LoginSite, PwdSite, IdSite, NCompteF, NAct"& _ 
                "iviteF, NCompteC, NActiviteC, nTarif, Civilite, Logo, Licence, Critere2, Critere"& _ 
                "3, Critere4, NTVAIntraCom, nCommercial, FormeJuridique, CibleCommercial, IsExpor"& _ 
                "t, NomFacturation, NomLivraison, EditionBLNonChiffre, ObservationLivraison, IndE"& _ 
                "scompteSpecifique, TauxEscompteSpecifique, DelaiValiditeEscompte, LitigeEnCours,"& _ 
                " EnCoursMax FROM Entreprise WHERE (nEntreprise = @nEntreprise)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeEntreprise", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrganisme", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nMaisonMere", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adresse", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adresse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModePaiement", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Echeance", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Echeance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Banque", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteInternet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observations", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observations", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinMois", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fournisseur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SuffixePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseLiv", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodePostalLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VilleLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaysLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoginSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PwdSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdSite", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "IdSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Civilite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Logo", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Logo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Licence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NTVAIntraCom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormeJuridique", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CibleCommercial", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CibleCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsExport", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomFacturation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EditionBLNonChiffre", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ObservationLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IndEscompteSpecifique", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IndEscompteSpecifique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TauxEscompteSpecifique", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LitigeEnCours", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LitigeEnCours", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EnCoursMax", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EnCoursMax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateModification", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InfoMAJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeEntreprise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeEntreprise", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrganisme", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrganisme", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nMaisonMere", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nMaisonMere", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Dep", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodePostal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ville", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Pays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ModePaiement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ModePaiement", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Echeance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Echeance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Echeance", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Echeance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Banque", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Banque", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RIB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RIB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CA", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EMail", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SiteInternet", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteInternet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FinMois", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinMois", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fournisseur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Client", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Client", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SuffixePostal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SuffixePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodePostalLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodePostalLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VilleLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VilleLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaysLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaysLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LoginSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LoginSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PwdSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PwdSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdSite", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "IdSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Civilite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Civilite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Licence", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Licence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NTVAIntraCom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NTVAIntraCom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FormeJuridique", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormeJuridique", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsExport", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsExport", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NomFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NomFacturation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NomLivraison", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NomLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EditionBLNonChiffre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EditionBLNonChiffre", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ObservationLivraison", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ObservationLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IndEscompteSpecifique", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IndEscompteSpecifique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TauxEscompteSpecifique", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TauxEscompteSpecifique", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LitigeEnCours", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LitigeEnCours", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EnCoursMax", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EnCoursMax", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EnCoursMax", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EnCoursMax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        nEntreprise, DateCreation, DateModification, InfoMAJ, TypeEntrepris"& _ 
                "e, nOrganisme, nMaisonMere, Dep, Nom, Adresse, CodePostal, Ville, Pays, TypeClie"& _ 
                "nt, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ModePaiement, Echeance, Banque, RIB, CA, EMail, S"& _ 
                "iteInternet, Observations, FinMois, Remise, TTVA, FacturationTTC, Fournisseur, C"& _ 
                "lient, SuffixePostal, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AdresseLiv, CodePostalLiv, Vill"& _ 
                "eLiv, PaysLiv, Inactif, LoginSite, PwdSite, IdSite, NCompteF, NActiviteF, NCompt"& _ 
                "eC, NActiviteC, nTarif, Civilite, Logo, Licence, Critere2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      Critere3, Critere4, NTVAIntraCom, nCommercial, FormeJuridique, CibleCommer"& _ 
                "cial, IsExport, NomFacturation, NomLivraison, EditionBLNonChiffre, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "              ObservationLivraison, IndEscompteSpecifique, TauxEscompteSpecifiqu"& _ 
                "e, DelaiValiditeEscompte, LitigeEnCours, EnCoursMax"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Entreprise"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Adresse, AdresseLiv, Banque, CA, CibleCommercial, Civilite, Client,"& _ 
                " CodePostal, CodePostalLiv, Critere2, Critere3, Critere4, DateCreation, DateModi"& _ 
                "fication, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         DelaiValiditeEscompte, Dep, EMail, Echeance"& _ 
                ", EditionBLNonChiffre, EnCoursMax, FacturationTTC, FinMois, FormeJuridique, Four"& _ 
                "nisseur, IdSite, Inactif, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         IndEscompteSpecifique, Info"& _ 
                "MAJ, IsExport, Licence, LitigeEnCours, LoginSite, Logo, ModePaiement, NActiviteC"& _ 
                ", NActiviteF, NCompteC, NCompteF, NTVAIntraCom, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Nom, "& _ 
                "NomFacturation, NomLivraison, ObservationLivraison, Observations, Pays, PaysLiv,"& _ 
                " PwdSite, RIB, Remise, SiteInternet, SuffixePostal, TTVA, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "     TauxEscompteSpecifique, TypeClient, TypeEntreprise, Ville, VilleLiv, nComme"& _ 
                "rcial, nEntreprise, nMaisonMere, nOrganisme, nTarif"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Entreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (TypeClient = @TypeClient)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeClient", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ApproFactDataSet.EntrepriseDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ApproFactDataSet.EntrepriseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ApproFactDataSet.EntrepriseDataTable = New ApproFactDataSet.EntrepriseDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByTypeClient(ByVal dataTable As ApproFactDataSet.EntrepriseDataTable, ByVal TypeClient As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (TypeClient Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(TypeClient,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByTypeClient(ByVal TypeClient As String) As ApproFactDataSet.EntrepriseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (TypeClient Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(TypeClient,String)
            End If
            Dim dataTable As ApproFactDataSet.EntrepriseDataTable = New ApproFactDataSet.EntrepriseDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ApproFactDataSet.EntrepriseDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ApproFactDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Entreprise")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nEntreprise As Decimal,  _
                    ByVal Original_DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateModification As Global.System.Nullable(Of Date),  _
                    ByVal Original_InfoMAJ As String,  _
                    ByVal Original_TypeEntreprise As String,  _
                    ByVal Original_nOrganisme As String,  _
                    ByVal Original_nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Dep As String,  _
                    ByVal Original_Nom As String,  _
                    ByVal Original_CodePostal As String,  _
                    ByVal Original_Ville As String,  _
                    ByVal Original_Pays As String,  _
                    ByVal Original_TypeClient As String,  _
                    ByVal Original_ModePaiement As String,  _
                    ByVal Original_Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Banque As String,  _
                    ByVal Original_RIB As String,  _
                    ByVal Original_CA As Global.System.Nullable(Of Single),  _
                    ByVal Original_EMail As String,  _
                    ByVal Original_SiteInternet As String,  _
                    ByVal Original_FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Client As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SuffixePostal As String,  _
                    ByVal Original_CodePostalLiv As String,  _
                    ByVal Original_VilleLiv As String,  _
                    ByVal Original_PaysLiv As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LoginSite As String,  _
                    ByVal Original_PwdSite As String,  _
                    ByVal Original_IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompteF As String,  _
                    ByVal Original_NActiviteF As String,  _
                    ByVal Original_NCompteC As String,  _
                    ByVal Original_NActiviteC As String,  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Civilite As String,  _
                    ByVal Original_Licence As String,  _
                    ByVal Original_Critere2 As String,  _
                    ByVal Original_Critere3 As String,  _
                    ByVal Original_Critere4 As String,  _
                    ByVal Original_NTVAIntraCom As String,  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FormeJuridique As String,  _
                    ByVal Original_IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NomFacturation As String,  _
                    ByVal Original_NomLivraison As String,  _
                    ByVal Original_EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ObservationLivraison As String,  _
                    ByVal Original_IndEscompteSpecifique As Boolean,  _
                    ByVal Original_TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LitigeEnCours As Boolean,  _
                    ByVal Original_EnCoursMax As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nEntreprise,Decimal)
            If (Original_DateCreation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DateCreation.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_DateModification.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DateModification.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_InfoMAJ Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_InfoMAJ,String)
            End If
            If (Original_TypeEntreprise Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TypeEntreprise,String)
            End If
            If (Original_nOrganisme Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_nOrganisme,String)
            End If
            If (Original_nMaisonMere.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_nMaisonMere.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Dep Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Dep,String)
            End If
            If (Original_Nom Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Nom,String)
            End If
            If (Original_CodePostal Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CodePostal,String)
            End If
            If (Original_Ville Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Ville,String)
            End If
            If (Original_Pays Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Pays,String)
            End If
            If (Original_TypeClient Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_TypeClient,String)
            End If
            If (Original_ModePaiement Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_ModePaiement,String)
            End If
            If (Original_Echeance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Echeance.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Banque Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Banque,String)
            End If
            If (Original_RIB Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_RIB,String)
            End If
            If (Original_CA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_CA.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_EMail Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_EMail,String)
            End If
            If (Original_SiteInternet Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_SiteInternet,String)
            End If
            If (Original_FinMois.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_FinMois.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_TTVA,String)
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_Fournisseur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_Fournisseur.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_Client.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_Client.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_SuffixePostal Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_SuffixePostal,String)
            End If
            If (Original_CodePostalLiv Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_CodePostalLiv,String)
            End If
            If (Original_VilleLiv Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_VilleLiv,String)
            End If
            If (Original_PaysLiv Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_PaysLiv,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (Original_LoginSite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_LoginSite,String)
            End If
            If (Original_PwdSite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_PwdSite,String)
            End If
            If (Original_IdSite.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_IdSite.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompteF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_NCompteF,String)
            End If
            If (Original_NActiviteF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_NActiviteF,String)
            End If
            If (Original_NCompteC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_NCompteC,String)
            End If
            If (Original_NActiviteC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_NActiviteC,String)
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_Civilite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(Original_Civilite,String)
            End If
            If (Original_Licence Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(Original_Licence,String)
            End If
            If (Original_Critere2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(Original_Critere2,String)
            End If
            If (Original_Critere3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(Original_Critere3,String)
            End If
            If (Original_Critere4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(Original_Critere4,String)
            End If
            If (Original_NTVAIntraCom Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(Original_NTVAIntraCom,String)
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(Original_nCommercial.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_FormeJuridique Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(Original_FormeJuridique,String)
            End If
            If (Original_IsExport.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(Original_IsExport.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_NomFacturation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(Original_NomFacturation,String)
            End If
            If (Original_NomLivraison Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(Original_NomLivraison,String)
            End If
            If (Original_EditionBLNonChiffre.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(Original_EditionBLNonChiffre.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_ObservationLivraison Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(Original_ObservationLivraison,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(103).Value = CType(Original_IndEscompteSpecifique,Boolean)
            If (Original_TauxEscompteSpecifique.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(Original_TauxEscompteSpecifique.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_DelaiValiditeEscompte.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(Original_DelaiValiditeEscompte.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(107).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(108).Value = CType(Original_LitigeEnCours,Boolean)
            If (Original_EnCoursMax.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = CType(Original_EnCoursMax.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nEntreprise As Decimal,  _
                    ByVal DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal DateModification As Global.System.Nullable(Of Date),  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypeEntreprise As String,  _
                    ByVal nOrganisme As String,  _
                    ByVal nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal TypeClient As String,  _
                    ByVal ModePaiement As String,  _
                    ByVal Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Banque As String,  _
                    ByVal RIB As String,  _
                    ByVal CA As Global.System.Nullable(Of Single),  _
                    ByVal EMail As String,  _
                    ByVal SiteInternet As String,  _
                    ByVal Observations As String,  _
                    ByVal FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Client As Global.System.Nullable(Of Boolean),  _
                    ByVal SuffixePostal As String,  _
                    ByVal AdresseLiv As String,  _
                    ByVal CodePostalLiv As String,  _
                    ByVal VilleLiv As String,  _
                    ByVal PaysLiv As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal LoginSite As String,  _
                    ByVal PwdSite As String,  _
                    ByVal IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompteF As String,  _
                    ByVal NActiviteF As String,  _
                    ByVal NCompteC As String,  _
                    ByVal NActiviteC As String,  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Civilite As String,  _
                    ByVal Logo() As Byte,  _
                    ByVal Licence As String,  _
                    ByVal Critere2 As String,  _
                    ByVal Critere3 As String,  _
                    ByVal Critere4 As String,  _
                    ByVal NTVAIntraCom As String,  _
                    ByVal nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal FormeJuridique As String,  _
                    ByVal CibleCommercial As String,  _
                    ByVal IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal NomFacturation As String,  _
                    ByVal NomLivraison As String,  _
                    ByVal EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal ObservationLivraison As String,  _
                    ByVal IndEscompteSpecifique As Boolean,  _
                    ByVal TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal LitigeEnCours As Boolean,  _
                    ByVal EnCoursMax As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nEntreprise,Decimal)
            If (DateCreation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateCreation.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateModification.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateModification.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (InfoMAJ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(InfoMAJ,String)
            End If
            If (TypeEntreprise Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TypeEntreprise,String)
            End If
            If (nOrganisme Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(nOrganisme,String)
            End If
            If (nMaisonMere.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(nMaisonMere.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Dep Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Dep,String)
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Nom,String)
            End If
            If (Adresse Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Adresse,String)
            End If
            If (CodePostal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CodePostal,String)
            End If
            If (Ville Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Ville,String)
            End If
            If (Pays Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Pays,String)
            End If
            If (TypeClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(TypeClient,String)
            End If
            If (ModePaiement Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ModePaiement,String)
            End If
            If (Echeance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Echeance.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Banque Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Banque,String)
            End If
            If (RIB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(RIB,String)
            End If
            If (CA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(CA.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (EMail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(EMail,String)
            End If
            If (SiteInternet Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(SiteInternet,String)
            End If
            If (Observations Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Observations,String)
            End If
            If (FinMois.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(FinMois.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(TTVA,String)
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Fournisseur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Fournisseur.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Client.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Client.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (SuffixePostal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(SuffixePostal,String)
            End If
            If (AdresseLiv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(AdresseLiv,String)
            End If
            If (CodePostalLiv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(CodePostalLiv,String)
            End If
            If (VilleLiv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(VilleLiv,String)
            End If
            If (PaysLiv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(PaysLiv,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (LoginSite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(LoginSite,String)
            End If
            If (PwdSite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(PwdSite,String)
            End If
            If (IdSite.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(IdSite.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (NCompteF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(NCompteF,String)
            End If
            If (NActiviteF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(NActiviteF,String)
            End If
            If (NCompteC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(NCompteC,String)
            End If
            If (NActiviteC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(NActiviteC,String)
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Civilite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(Civilite,String)
            End If
            If (Logo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(Logo,Byte())
            End If
            If (Licence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(Licence,String)
            End If
            If (Critere2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Critere2,String)
            End If
            If (Critere3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Critere3,String)
            End If
            If (Critere4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(Critere4,String)
            End If
            If (NTVAIntraCom Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(NTVAIntraCom,String)
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(nCommercial.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (FormeJuridique Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(FormeJuridique,String)
            End If
            If (CibleCommercial Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(CibleCommercial,String)
            End If
            If (IsExport.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(IsExport.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (NomFacturation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(NomFacturation,String)
            End If
            If (NomLivraison Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(NomLivraison,String)
            End If
            If (EditionBLNonChiffre.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(EditionBLNonChiffre.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (ObservationLivraison Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(ObservationLivraison,String)
            End If
            Me.Adapter.InsertCommand.Parameters(57).Value = CType(IndEscompteSpecifique,Boolean)
            If (TauxEscompteSpecifique.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(TauxEscompteSpecifique.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (DelaiValiditeEscompte.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(DelaiValiditeEscompte.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(60).Value = CType(LitigeEnCours,Boolean)
            If (EnCoursMax.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(EnCoursMax.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nEntreprise As Decimal,  _
                    ByVal DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal DateModification As Global.System.Nullable(Of Date),  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypeEntreprise As String,  _
                    ByVal nOrganisme As String,  _
                    ByVal nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal TypeClient As String,  _
                    ByVal ModePaiement As String,  _
                    ByVal Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Banque As String,  _
                    ByVal RIB As String,  _
                    ByVal CA As Global.System.Nullable(Of Single),  _
                    ByVal EMail As String,  _
                    ByVal SiteInternet As String,  _
                    ByVal Observations As String,  _
                    ByVal FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Client As Global.System.Nullable(Of Boolean),  _
                    ByVal SuffixePostal As String,  _
                    ByVal AdresseLiv As String,  _
                    ByVal CodePostalLiv As String,  _
                    ByVal VilleLiv As String,  _
                    ByVal PaysLiv As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal LoginSite As String,  _
                    ByVal PwdSite As String,  _
                    ByVal IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompteF As String,  _
                    ByVal NActiviteF As String,  _
                    ByVal NCompteC As String,  _
                    ByVal NActiviteC As String,  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Civilite As String,  _
                    ByVal Logo() As Byte,  _
                    ByVal Licence As String,  _
                    ByVal Critere2 As String,  _
                    ByVal Critere3 As String,  _
                    ByVal Critere4 As String,  _
                    ByVal NTVAIntraCom As String,  _
                    ByVal nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal FormeJuridique As String,  _
                    ByVal CibleCommercial As String,  _
                    ByVal IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal NomFacturation As String,  _
                    ByVal NomLivraison As String,  _
                    ByVal EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal ObservationLivraison As String,  _
                    ByVal IndEscompteSpecifique As Boolean,  _
                    ByVal TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal LitigeEnCours As Boolean,  _
                    ByVal EnCoursMax As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nEntreprise As Decimal,  _
                    ByVal Original_DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateModification As Global.System.Nullable(Of Date),  _
                    ByVal Original_InfoMAJ As String,  _
                    ByVal Original_TypeEntreprise As String,  _
                    ByVal Original_nOrganisme As String,  _
                    ByVal Original_nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Dep As String,  _
                    ByVal Original_Nom As String,  _
                    ByVal Original_CodePostal As String,  _
                    ByVal Original_Ville As String,  _
                    ByVal Original_Pays As String,  _
                    ByVal Original_TypeClient As String,  _
                    ByVal Original_ModePaiement As String,  _
                    ByVal Original_Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Banque As String,  _
                    ByVal Original_RIB As String,  _
                    ByVal Original_CA As Global.System.Nullable(Of Single),  _
                    ByVal Original_EMail As String,  _
                    ByVal Original_SiteInternet As String,  _
                    ByVal Original_FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Client As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SuffixePostal As String,  _
                    ByVal Original_CodePostalLiv As String,  _
                    ByVal Original_VilleLiv As String,  _
                    ByVal Original_PaysLiv As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LoginSite As String,  _
                    ByVal Original_PwdSite As String,  _
                    ByVal Original_IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompteF As String,  _
                    ByVal Original_NActiviteF As String,  _
                    ByVal Original_NCompteC As String,  _
                    ByVal Original_NActiviteC As String,  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Civilite As String,  _
                    ByVal Original_Licence As String,  _
                    ByVal Original_Critere2 As String,  _
                    ByVal Original_Critere3 As String,  _
                    ByVal Original_Critere4 As String,  _
                    ByVal Original_NTVAIntraCom As String,  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FormeJuridique As String,  _
                    ByVal Original_IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NomFacturation As String,  _
                    ByVal Original_NomLivraison As String,  _
                    ByVal Original_EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ObservationLivraison As String,  _
                    ByVal Original_IndEscompteSpecifique As Boolean,  _
                    ByVal Original_TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LitigeEnCours As Boolean,  _
                    ByVal Original_EnCoursMax As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nEntreprise,Decimal)
            If (DateCreation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DateCreation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateModification.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DateModification.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (InfoMAJ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(InfoMAJ,String)
            End If
            If (TypeEntreprise Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TypeEntreprise,String)
            End If
            If (nOrganisme Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(nOrganisme,String)
            End If
            If (nMaisonMere.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(nMaisonMere.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Dep Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Dep,String)
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Nom,String)
            End If
            If (Adresse Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Adresse,String)
            End If
            If (CodePostal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CodePostal,String)
            End If
            If (Ville Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Ville,String)
            End If
            If (Pays Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Pays,String)
            End If
            If (TypeClient Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(TypeClient,String)
            End If
            If (ModePaiement Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ModePaiement,String)
            End If
            If (Echeance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Echeance.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Banque Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Banque,String)
            End If
            If (RIB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(RIB,String)
            End If
            If (CA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(CA.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (EMail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(EMail,String)
            End If
            If (SiteInternet Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(SiteInternet,String)
            End If
            If (Observations Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Observations,String)
            End If
            If (FinMois.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(FinMois.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(TTVA,String)
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Fournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Fournisseur.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Client.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Client.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (SuffixePostal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(SuffixePostal,String)
            End If
            If (AdresseLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(AdresseLiv,String)
            End If
            If (CodePostalLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(CodePostalLiv,String)
            End If
            If (VilleLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(VilleLiv,String)
            End If
            If (PaysLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(PaysLiv,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (LoginSite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(LoginSite,String)
            End If
            If (PwdSite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(PwdSite,String)
            End If
            If (IdSite.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(IdSite.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (NCompteF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(NCompteF,String)
            End If
            If (NActiviteF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(NActiviteF,String)
            End If
            If (NCompteC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(NCompteC,String)
            End If
            If (NActiviteC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(NActiviteC,String)
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Civilite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Civilite,String)
            End If
            If (Logo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Logo,Byte())
            End If
            If (Licence Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Licence,String)
            End If
            If (Critere2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Critere2,String)
            End If
            If (Critere3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Critere3,String)
            End If
            If (Critere4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Critere4,String)
            End If
            If (NTVAIntraCom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(NTVAIntraCom,String)
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(nCommercial.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (FormeJuridique Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(FormeJuridique,String)
            End If
            If (CibleCommercial Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(CibleCommercial,String)
            End If
            If (IsExport.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(IsExport.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (NomFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(NomFacturation,String)
            End If
            If (NomLivraison Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(NomLivraison,String)
            End If
            If (EditionBLNonChiffre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(EditionBLNonChiffre.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (ObservationLivraison Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(ObservationLivraison,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(IndEscompteSpecifique,Boolean)
            If (TauxEscompteSpecifique.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(TauxEscompteSpecifique.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (DelaiValiditeEscompte.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(DelaiValiditeEscompte.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(LitigeEnCours,Boolean)
            If (EnCoursMax.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(EnCoursMax.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_nEntreprise,Decimal)
            If (Original_DateCreation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_DateCreation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_DateModification.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_DateModification.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_InfoMAJ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_InfoMAJ,String)
            End If
            If (Original_TypeEntreprise Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_TypeEntreprise,String)
            End If
            If (Original_nOrganisme Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_nOrganisme,String)
            End If
            If (Original_nMaisonMere.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_nMaisonMere.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_Dep Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_Dep,String)
            End If
            If (Original_Nom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_Nom,String)
            End If
            If (Original_CodePostal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_CodePostal,String)
            End If
            If (Original_Ville Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_Ville,String)
            End If
            If (Original_Pays Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_Pays,String)
            End If
            If (Original_TypeClient Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_TypeClient,String)
            End If
            If (Original_ModePaiement Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_ModePaiement,String)
            End If
            If (Original_Echeance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_Echeance.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_Banque Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_Banque,String)
            End If
            If (Original_RIB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_RIB,String)
            End If
            If (Original_CA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_CA.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_EMail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_EMail,String)
            End If
            If (Original_SiteInternet Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_SiteInternet,String)
            End If
            If (Original_FinMois.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_FinMois.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_TTVA,String)
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (Original_Fournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_Fournisseur.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            If (Original_Client.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(Original_Client.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            If (Original_SuffixePostal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(Original_SuffixePostal,String)
            End If
            If (Original_CodePostalLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(Original_CodePostalLiv,String)
            End If
            If (Original_VilleLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_VilleLiv,String)
            End If
            If (Original_PaysLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_PaysLiv,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            End If
            If (Original_LoginSite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(Original_LoginSite,String)
            End If
            If (Original_PwdSite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(Original_PwdSite,String)
            End If
            If (Original_IdSite.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(Original_IdSite.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompteF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(Original_NCompteF,String)
            End If
            If (Original_NActiviteF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(132).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(Original_NActiviteF,String)
            End If
            If (Original_NCompteC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(134).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(Original_NCompteC,String)
            End If
            If (Original_NActiviteC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(136).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(Original_NActiviteC,String)
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(138).Value = Global.System.DBNull.Value
            End If
            If (Original_Civilite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(140).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(Original_Civilite,String)
            End If
            If (Original_Licence Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(142).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(Original_Licence,String)
            End If
            If (Original_Critere2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(Original_Critere2,String)
            End If
            If (Original_Critere3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(146).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(Original_Critere3,String)
            End If
            If (Original_Critere4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(148).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(Original_Critere4,String)
            End If
            If (Original_NTVAIntraCom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(150).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(Original_NTVAIntraCom,String)
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(Original_nCommercial.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(152).Value = Global.System.DBNull.Value
            End If
            If (Original_FormeJuridique Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(154).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(Original_FormeJuridique,String)
            End If
            If (Original_IsExport.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(Original_IsExport.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(156).Value = Global.System.DBNull.Value
            End If
            If (Original_NomFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(158).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(Original_NomFacturation,String)
            End If
            If (Original_NomLivraison Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(160).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(Original_NomLivraison,String)
            End If
            If (Original_EditionBLNonChiffre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(Original_EditionBLNonChiffre.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(162).Value = Global.System.DBNull.Value
            End If
            If (Original_ObservationLivraison Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(164).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(Original_ObservationLivraison,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(165).Value = CType(Original_IndEscompteSpecifique,Boolean)
            If (Original_TauxEscompteSpecifique.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(Original_TauxEscompteSpecifique.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(167).Value = Global.System.DBNull.Value
            End If
            If (Original_DelaiValiditeEscompte.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(Original_DelaiValiditeEscompte.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(169).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(170).Value = CType(Original_LitigeEnCours,Boolean)
            If (Original_EnCoursMax.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(Original_EnCoursMax.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(172).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal DateModification As Global.System.Nullable(Of Date),  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypeEntreprise As String,  _
                    ByVal nOrganisme As String,  _
                    ByVal nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal TypeClient As String,  _
                    ByVal ModePaiement As String,  _
                    ByVal Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Banque As String,  _
                    ByVal RIB As String,  _
                    ByVal CA As Global.System.Nullable(Of Single),  _
                    ByVal EMail As String,  _
                    ByVal SiteInternet As String,  _
                    ByVal Observations As String,  _
                    ByVal FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Client As Global.System.Nullable(Of Boolean),  _
                    ByVal SuffixePostal As String,  _
                    ByVal AdresseLiv As String,  _
                    ByVal CodePostalLiv As String,  _
                    ByVal VilleLiv As String,  _
                    ByVal PaysLiv As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal LoginSite As String,  _
                    ByVal PwdSite As String,  _
                    ByVal IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompteF As String,  _
                    ByVal NActiviteF As String,  _
                    ByVal NCompteC As String,  _
                    ByVal NActiviteC As String,  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Civilite As String,  _
                    ByVal Logo() As Byte,  _
                    ByVal Licence As String,  _
                    ByVal Critere2 As String,  _
                    ByVal Critere3 As String,  _
                    ByVal Critere4 As String,  _
                    ByVal NTVAIntraCom As String,  _
                    ByVal nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal FormeJuridique As String,  _
                    ByVal CibleCommercial As String,  _
                    ByVal IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal NomFacturation As String,  _
                    ByVal NomLivraison As String,  _
                    ByVal EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal ObservationLivraison As String,  _
                    ByVal IndEscompteSpecifique As Boolean,  _
                    ByVal TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal LitigeEnCours As Boolean,  _
                    ByVal EnCoursMax As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nEntreprise As Decimal,  _
                    ByVal Original_DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateModification As Global.System.Nullable(Of Date),  _
                    ByVal Original_InfoMAJ As String,  _
                    ByVal Original_TypeEntreprise As String,  _
                    ByVal Original_nOrganisme As String,  _
                    ByVal Original_nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Dep As String,  _
                    ByVal Original_Nom As String,  _
                    ByVal Original_CodePostal As String,  _
                    ByVal Original_Ville As String,  _
                    ByVal Original_Pays As String,  _
                    ByVal Original_TypeClient As String,  _
                    ByVal Original_ModePaiement As String,  _
                    ByVal Original_Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Banque As String,  _
                    ByVal Original_RIB As String,  _
                    ByVal Original_CA As Global.System.Nullable(Of Single),  _
                    ByVal Original_EMail As String,  _
                    ByVal Original_SiteInternet As String,  _
                    ByVal Original_FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Client As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SuffixePostal As String,  _
                    ByVal Original_CodePostalLiv As String,  _
                    ByVal Original_VilleLiv As String,  _
                    ByVal Original_PaysLiv As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LoginSite As String,  _
                    ByVal Original_PwdSite As String,  _
                    ByVal Original_IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompteF As String,  _
                    ByVal Original_NActiviteF As String,  _
                    ByVal Original_NCompteC As String,  _
                    ByVal Original_NActiviteC As String,  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Civilite As String,  _
                    ByVal Original_Licence As String,  _
                    ByVal Original_Critere2 As String,  _
                    ByVal Original_Critere3 As String,  _
                    ByVal Original_Critere4 As String,  _
                    ByVal Original_NTVAIntraCom As String,  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FormeJuridique As String,  _
                    ByVal Original_IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NomFacturation As String,  _
                    ByVal Original_NomLivraison As String,  _
                    ByVal Original_EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ObservationLivraison As String,  _
                    ByVal Original_IndEscompteSpecifique As Boolean,  _
                    ByVal Original_TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LitigeEnCours As Boolean,  _
                    ByVal Original_EnCoursMax As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_nEntreprise, DateCreation, DateModification, InfoMAJ, TypeEntreprise, nOrganisme, nMaisonMere, Dep, Nom, Adresse, CodePostal, Ville, Pays, TypeClient, ModePaiement, Echeance, Banque, RIB, CA, EMail, SiteInternet, Observations, FinMois, Remise, TTVA, FacturationTTC, Fournisseur, Client, SuffixePostal, AdresseLiv, CodePostalLiv, VilleLiv, PaysLiv, Inactif, LoginSite, PwdSite, IdSite, NCompteF, NActiviteF, NCompteC, NActiviteC, nTarif, Civilite, Logo, Licence, Critere2, Critere3, Critere4, NTVAIntraCom, nCommercial, FormeJuridique, CibleCommercial, IsExport, NomFacturation, NomLivraison, EditionBLNonChiffre, ObservationLivraison, IndEscompteSpecifique, TauxEscompteSpecifique, DelaiValiditeEscompte, LitigeEnCours, EnCoursMax, Original_nEntreprise, Original_DateCreation, Original_DateModification, Original_InfoMAJ, Original_TypeEntreprise, Original_nOrganisme, Original_nMaisonMere, Original_Dep, Original_Nom, Original_CodePostal, Original_Ville, Original_Pays, Original_TypeClient, Original_ModePaiement, Original_Echeance, Original_Banque, Original_RIB, Original_CA, Original_EMail, Original_SiteInternet, Original_FinMois, Original_Remise, Original_TTVA, Original_FacturationTTC, Original_Fournisseur, Original_Client, Original_SuffixePostal, Original_CodePostalLiv, Original_VilleLiv, Original_PaysLiv, Original_Inactif, Original_LoginSite, Original_PwdSite, Original_IdSite, Original_NCompteF, Original_NActiviteF, Original_NCompteC, Original_NActiviteC, Original_nTarif, Original_Civilite, Original_Licence, Original_Critere2, Original_Critere3, Original_Critere4, Original_NTVAIntraCom, Original_nCommercial, Original_FormeJuridique, Original_IsExport, Original_NomFacturation, Original_NomLivraison, Original_EditionBLNonChiffre, Original_ObservationLivraison, Original_IndEscompteSpecifique, Original_TauxEscompteSpecifique, Original_DelaiValiditeEscompte, Original_LitigeEnCours, Original_EnCoursMax)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PersonneTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Personne"
            tableMapping.ColumnMappings.Add("nPersonne", "nPersonne")
            tableMapping.ColumnMappings.Add("DateCreation", "DateCreation")
            tableMapping.ColumnMappings.Add("DateModification", "DateModification")
            tableMapping.ColumnMappings.Add("InfoMAJ", "InfoMAJ")
            tableMapping.ColumnMappings.Add("TypePersonne", "TypePersonne")
            tableMapping.ColumnMappings.Add("Dep", "Dep")
            tableMapping.ColumnMappings.Add("Nom", "Nom")
            tableMapping.ColumnMappings.Add("Prenom", "Prenom")
            tableMapping.ColumnMappings.Add("nEntreprise", "nEntreprise")
            tableMapping.ColumnMappings.Add("Adresse", "Adresse")
            tableMapping.ColumnMappings.Add("CodePostal", "CodePostal")
            tableMapping.ColumnMappings.Add("Ville", "Ville")
            tableMapping.ColumnMappings.Add("Pays", "Pays")
            tableMapping.ColumnMappings.Add("NomJeuneFille", "NomJeuneFille")
            tableMapping.ColumnMappings.Add("TypeClient", "TypeClient")
            tableMapping.ColumnMappings.Add("Fonction", "Fonction")
            tableMapping.ColumnMappings.Add("Campagne", "Campagne")
            tableMapping.ColumnMappings.Add("DatedeNaissance", "DatedeNaissance")
            tableMapping.ColumnMappings.Add("LieuNaissance", "LieuNaissance")
            tableMapping.ColumnMappings.Add("EMail", "EMail")
            tableMapping.ColumnMappings.Add("Adressehttp", "Adressehttp")
            tableMapping.ColumnMappings.Add("Observations", "Observations")
            tableMapping.ColumnMappings.Add("NpAfficher", "NpAfficher")
            tableMapping.ColumnMappings.Add("NpRecevoirInfo", "NpRecevoirInfo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Personne] WHERE (([nPersonne] = @Original_nPersonne) AND ((@Is"& _ 
                "Null_DateCreation = 1 AND [DateCreation] IS NULL) OR ([DateCreation] = @Original"& _ 
                "_DateCreation)) AND ((@IsNull_DateModification = 1 AND [DateModification] IS NUL"& _ 
                "L) OR ([DateModification] = @Original_DateModification)) AND ((@IsNull_InfoMAJ ="& _ 
                " 1 AND [InfoMAJ] IS NULL) OR ([InfoMAJ] = @Original_InfoMAJ)) AND ((@IsNull_Type"& _ 
                "Personne = 1 AND [TypePersonne] IS NULL) OR ([TypePersonne] = @Original_TypePers"& _ 
                "onne)) AND ((@IsNull_Dep = 1 AND [Dep] IS NULL) OR ([Dep] = @Original_Dep)) AND "& _ 
                "((@IsNull_Nom = 1 AND [Nom] IS NULL) OR ([Nom] = @Original_Nom)) AND ((@IsNull_P"& _ 
                "renom = 1 AND [Prenom] IS NULL) OR ([Prenom] = @Original_Prenom)) AND ((@IsNull_"& _ 
                "nEntreprise = 1 AND [nEntreprise] IS NULL) OR ([nEntreprise] = @Original_nEntrep"& _ 
                "rise)) AND ((@IsNull_CodePostal = 1 AND [CodePostal] IS NULL) OR ([CodePostal] ="& _ 
                " @Original_CodePostal)) AND ((@IsNull_Ville = 1 AND [Ville] IS NULL) OR ([Ville]"& _ 
                " = @Original_Ville)) AND ((@IsNull_Pays = 1 AND [Pays] IS NULL) OR ([Pays] = @Or"& _ 
                "iginal_Pays)) AND ((@IsNull_NomJeuneFille = 1 AND [NomJeuneFille] IS NULL) OR (["& _ 
                "NomJeuneFille] = @Original_NomJeuneFille)) AND ((@IsNull_TypeClient = 1 AND [Typ"& _ 
                "eClient] IS NULL) OR ([TypeClient] = @Original_TypeClient)) AND ((@IsNull_Foncti"& _ 
                "on = 1 AND [Fonction] IS NULL) OR ([Fonction] = @Original_Fonction)) AND ((@IsNu"& _ 
                "ll_Campagne = 1 AND [Campagne] IS NULL) OR ([Campagne] = @Original_Campagne)) AN"& _ 
                "D ((@IsNull_DatedeNaissance = 1 AND [DatedeNaissance] IS NULL) OR ([DatedeNaissa"& _ 
                "nce] = @Original_DatedeNaissance)) AND ((@IsNull_LieuNaissance = 1 AND [LieuNais"& _ 
                "sance] IS NULL) OR ([LieuNaissance] = @Original_LieuNaissance)) AND ((@IsNull_EM"& _ 
                "ail = 1 AND [EMail] IS NULL) OR ([EMail] = @Original_EMail)) AND ((@IsNull_Adres"& _ 
                "sehttp = 1 AND [Adressehttp] IS NULL) OR ([Adressehttp] = @Original_Adressehttp)"& _ 
                ") AND ([NpAfficher] = @Original_NpAfficher) AND ([NpRecevoirInfo] = @Original_Np"& _ 
                "RecevoirInfo))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPersonne", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPersonne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateModification", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InfoMAJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypePersonne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePersonne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypePersonne", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePersonne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Dep", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Prenom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prenom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Prenom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prenom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nEntreprise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nEntreprise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodePostal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ville", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Pays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NomJeuneFille", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomJeuneFille", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NomJeuneFille", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomJeuneFille", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fonction", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fonction", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fonction", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fonction", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Campagne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Campagne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Campagne", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Campagne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DatedeNaissance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatedeNaissance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DatedeNaissance", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatedeNaissance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LieuNaissance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LieuNaissance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LieuNaissance", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LieuNaissance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EMail", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Adressehttp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adressehttp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Adressehttp", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adressehttp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NpAfficher", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NpAfficher", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NpRecevoirInfo", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NpRecevoirInfo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Personne] ([nPersonne], [DateCreation], [DateModification], [I"& _ 
                "nfoMAJ], [TypePersonne], [Dep], [Nom], [Prenom], [nEntreprise], [Adresse], [Code"& _ 
                "Postal], [Ville], [Pays], [NomJeuneFille], [TypeClient], [Fonction], [Campagne],"& _ 
                " [DatedeNaissance], [LieuNaissance], [EMail], [Adressehttp], [Observations], [Np"& _ 
                "Afficher], [NpRecevoirInfo]) VALUES (@nPersonne, @DateCreation, @DateModificatio"& _ 
                "n, @InfoMAJ, @TypePersonne, @Dep, @Nom, @Prenom, @nEntreprise, @Adresse, @CodePo"& _ 
                "stal, @Ville, @Pays, @NomJeuneFille, @TypeClient, @Fonction, @Campagne, @DatedeN"& _ 
                "aissance, @LieuNaissance, @EMail, @Adressehttp, @Observations, @NpAfficher, @NpR"& _ 
                "ecevoirInfo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nPersonne, DateCreation, DateModification, InfoMAJ, TypePe"& _ 
                "rsonne, Dep, Nom, Prenom, nEntreprise, Adresse, CodePostal, Ville, Pays, NomJeun"& _ 
                "eFille, TypeClient, Fonction, Campagne, DatedeNaissance, LieuNaissance, EMail, A"& _ 
                "dressehttp, Observations, NpAfficher, NpRecevoirInfo FROM Personne WHERE (nPerso"& _ 
                "nne = @nPersonne)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPersonne", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPersonne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypePersonne", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePersonne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Prenom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prenom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adresse", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adresse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomJeuneFille", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomJeuneFille", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fonction", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fonction", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Campagne", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Campagne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatedeNaissance", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatedeNaissance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LieuNaissance", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LieuNaissance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adressehttp", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adressehttp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observations", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observations", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NpAfficher", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NpAfficher", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NpRecevoirInfo", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NpRecevoirInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Personne] SET [nPersonne] = @nPersonne, [DateCreation] = @DateCreat"& _ 
                "ion, [DateModification] = @DateModification, [InfoMAJ] = @InfoMAJ, [TypePersonne"& _ 
                "] = @TypePersonne, [Dep] = @Dep, [Nom] = @Nom, [Prenom] = @Prenom, [nEntreprise]"& _ 
                " = @nEntreprise, [Adresse] = @Adresse, [CodePostal] = @CodePostal, [Ville] = @Vi"& _ 
                "lle, [Pays] = @Pays, [NomJeuneFille] = @NomJeuneFille, [TypeClient] = @TypeClien"& _ 
                "t, [Fonction] = @Fonction, [Campagne] = @Campagne, [DatedeNaissance] = @DatedeNa"& _ 
                "issance, [LieuNaissance] = @LieuNaissance, [EMail] = @EMail, [Adressehttp] = @Ad"& _ 
                "ressehttp, [Observations] = @Observations, [NpAfficher] = @NpAfficher, [NpRecevo"& _ 
                "irInfo] = @NpRecevoirInfo WHERE (([nPersonne] = @Original_nPersonne) AND ((@IsNu"& _ 
                "ll_DateCreation = 1 AND [DateCreation] IS NULL) OR ([DateCreation] = @Original_D"& _ 
                "ateCreation)) AND ((@IsNull_DateModification = 1 AND [DateModification] IS NULL)"& _ 
                " OR ([DateModification] = @Original_DateModification)) AND ((@IsNull_InfoMAJ = 1"& _ 
                " AND [InfoMAJ] IS NULL) OR ([InfoMAJ] = @Original_InfoMAJ)) AND ((@IsNull_TypePe"& _ 
                "rsonne = 1 AND [TypePersonne] IS NULL) OR ([TypePersonne] = @Original_TypePerson"& _ 
                "ne)) AND ((@IsNull_Dep = 1 AND [Dep] IS NULL) OR ([Dep] = @Original_Dep)) AND (("& _ 
                "@IsNull_Nom = 1 AND [Nom] IS NULL) OR ([Nom] = @Original_Nom)) AND ((@IsNull_Pre"& _ 
                "nom = 1 AND [Prenom] IS NULL) OR ([Prenom] = @Original_Prenom)) AND ((@IsNull_nE"& _ 
                "ntreprise = 1 AND [nEntreprise] IS NULL) OR ([nEntreprise] = @Original_nEntrepri"& _ 
                "se)) AND ((@IsNull_CodePostal = 1 AND [CodePostal] IS NULL) OR ([CodePostal] = @"& _ 
                "Original_CodePostal)) AND ((@IsNull_Ville = 1 AND [Ville] IS NULL) OR ([Ville] ="& _ 
                " @Original_Ville)) AND ((@IsNull_Pays = 1 AND [Pays] IS NULL) OR ([Pays] = @Orig"& _ 
                "inal_Pays)) AND ((@IsNull_NomJeuneFille = 1 AND [NomJeuneFille] IS NULL) OR ([No"& _ 
                "mJeuneFille] = @Original_NomJeuneFille)) AND ((@IsNull_TypeClient = 1 AND [TypeC"& _ 
                "lient] IS NULL) OR ([TypeClient] = @Original_TypeClient)) AND ((@IsNull_Fonction"& _ 
                " = 1 AND [Fonction] IS NULL) OR ([Fonction] = @Original_Fonction)) AND ((@IsNull"& _ 
                "_Campagne = 1 AND [Campagne] IS NULL) OR ([Campagne] = @Original_Campagne)) AND "& _ 
                "((@IsNull_DatedeNaissance = 1 AND [DatedeNaissance] IS NULL) OR ([DatedeNaissanc"& _ 
                "e] = @Original_DatedeNaissance)) AND ((@IsNull_LieuNaissance = 1 AND [LieuNaissa"& _ 
                "nce] IS NULL) OR ([LieuNaissance] = @Original_LieuNaissance)) AND ((@IsNull_EMai"& _ 
                "l = 1 AND [EMail] IS NULL) OR ([EMail] = @Original_EMail)) AND ((@IsNull_Adresse"& _ 
                "http = 1 AND [Adressehttp] IS NULL) OR ([Adressehttp] = @Original_Adressehttp)) "& _ 
                "AND ([NpAfficher] = @Original_NpAfficher) AND ([NpRecevoirInfo] = @Original_NpRe"& _ 
                "cevoirInfo));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nPersonne, DateCreation, DateModification, InfoMAJ, TypePe"& _ 
                "rsonne, Dep, Nom, Prenom, nEntreprise, Adresse, CodePostal, Ville, Pays, NomJeun"& _ 
                "eFille, TypeClient, Fonction, Campagne, DatedeNaissance, LieuNaissance, EMail, A"& _ 
                "dressehttp, Observations, NpAfficher, NpRecevoirInfo FROM Personne WHERE (nPerso"& _ 
                "nne = @nPersonne)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPersonne", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPersonne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypePersonne", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePersonne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Prenom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prenom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adresse", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adresse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomJeuneFille", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomJeuneFille", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fonction", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fonction", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Campagne", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Campagne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatedeNaissance", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatedeNaissance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LieuNaissance", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LieuNaissance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adressehttp", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adressehttp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observations", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observations", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NpAfficher", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NpAfficher", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NpRecevoirInfo", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NpRecevoirInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPersonne", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPersonne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateModification", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InfoMAJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypePersonne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePersonne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypePersonne", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypePersonne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Dep", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Prenom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prenom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Prenom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prenom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nEntreprise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nEntreprise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodePostal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ville", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Pays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NomJeuneFille", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomJeuneFille", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NomJeuneFille", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomJeuneFille", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fonction", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fonction", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fonction", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fonction", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Campagne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Campagne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Campagne", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Campagne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DatedeNaissance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatedeNaissance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DatedeNaissance", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatedeNaissance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LieuNaissance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LieuNaissance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LieuNaissance", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LieuNaissance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EMail", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Adressehttp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adressehttp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Adressehttp", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adressehttp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NpAfficher", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NpAfficher", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NpRecevoirInfo", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NpRecevoirInfo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nPersonne, DateCreation, DateModification, InfoMAJ, TypePersonne, Dep, Nom"& _ 
                ", Prenom, nEntreprise, Adresse, CodePostal, Ville, Pays, NomJeuneFille, TypeClie"& _ 
                "nt, Fonction, Campagne, DatedeNaissance, LieuNaissance, EMail, Adressehttp, Obse"& _ 
                "rvations, NpAfficher, NpRecevoirInfo FROM dbo.Personne"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nPersonne, DateCreation, DateModification, InfoMAJ, TypePersonne, Dep, Nom"& _ 
                ", Prenom, nEntreprise, Adresse, CodePostal, Ville, Pays, NomJeuneFille, TypeClie"& _ 
                "nt, Fonction, Campagne, DatedeNaissance, LieuNaissance, EMail, Adressehttp, Obse"& _ 
                "rvations, NpAfficher, NpRecevoirInfo FROM dbo.Personne"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (nEntreprise = @nE"& _ 
                "ntreprise)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ApproFactDataSet.PersonneDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ApproFactDataSet.PersonneDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ApproFactDataSet.PersonneDataTable = New ApproFactDataSet.PersonneDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynEntreprise(ByVal dataTable As ApproFactDataSet.PersonneDataTable, ByVal nEntreprise As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nEntreprise.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nEntreprise.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynEntreprise(ByVal nEntreprise As Global.System.Nullable(Of Decimal)) As ApproFactDataSet.PersonneDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nEntreprise.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nEntreprise.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ApproFactDataSet.PersonneDataTable = New ApproFactDataSet.PersonneDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ApproFactDataSet.PersonneDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ApproFactDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Personne")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nPersonne As Decimal,  _
                    ByVal Original_DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateModification As Global.System.Nullable(Of Date),  _
                    ByVal Original_InfoMAJ As String,  _
                    ByVal Original_TypePersonne As String,  _
                    ByVal Original_Dep As String,  _
                    ByVal Original_Nom As String,  _
                    ByVal Original_Prenom As String,  _
                    ByVal Original_nEntreprise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodePostal As String,  _
                    ByVal Original_Ville As String,  _
                    ByVal Original_Pays As String,  _
                    ByVal Original_NomJeuneFille As String,  _
                    ByVal Original_TypeClient As String,  _
                    ByVal Original_Fonction As String,  _
                    ByVal Original_Campagne As String,  _
                    ByVal Original_DatedeNaissance As Global.System.Nullable(Of Date),  _
                    ByVal Original_LieuNaissance As String,  _
                    ByVal Original_EMail As String,  _
                    ByVal Original_Adressehttp As String,  _
                    ByVal Original_NpAfficher As Boolean,  _
                    ByVal Original_NpRecevoirInfo As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nPersonne,Decimal)
            If (Original_DateCreation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DateCreation.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_DateModification.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DateModification.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_InfoMAJ Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_InfoMAJ,String)
            End If
            If (Original_TypePersonne Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TypePersonne,String)
            End If
            If (Original_Dep Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Dep,String)
            End If
            If (Original_Nom Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Nom,String)
            End If
            If (Original_Prenom Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Prenom,String)
            End If
            If (Original_nEntreprise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_nEntreprise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_CodePostal Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CodePostal,String)
            End If
            If (Original_Ville Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Ville,String)
            End If
            If (Original_Pays Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Pays,String)
            End If
            If (Original_NomJeuneFille Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_NomJeuneFille,String)
            End If
            If (Original_TypeClient Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_TypeClient,String)
            End If
            If (Original_Fonction Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Fonction,String)
            End If
            If (Original_Campagne Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Campagne,String)
            End If
            If (Original_DatedeNaissance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_DatedeNaissance.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_LieuNaissance Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_LieuNaissance,String)
            End If
            If (Original_EMail Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_EMail,String)
            End If
            If (Original_Adressehttp Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_Adressehttp,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_NpAfficher,Boolean)
            Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_NpRecevoirInfo,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nPersonne As Decimal,  _
                    ByVal DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal DateModification As Global.System.Nullable(Of Date),  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypePersonne As String,  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Prenom As String,  _
                    ByVal nEntreprise As Global.System.Nullable(Of Decimal),  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal NomJeuneFille As String,  _
                    ByVal TypeClient As String,  _
                    ByVal Fonction As String,  _
                    ByVal Campagne As String,  _
                    ByVal DatedeNaissance As Global.System.Nullable(Of Date),  _
                    ByVal LieuNaissance As String,  _
                    ByVal EMail As String,  _
                    ByVal Adressehttp As String,  _
                    ByVal Observations As String,  _
                    ByVal NpAfficher As Boolean,  _
                    ByVal NpRecevoirInfo As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nPersonne,Decimal)
            If (DateCreation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateCreation.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateModification.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateModification.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (InfoMAJ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(InfoMAJ,String)
            End If
            If (TypePersonne Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TypePersonne,String)
            End If
            If (Dep Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Dep,String)
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Nom,String)
            End If
            If (Prenom Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Prenom,String)
            End If
            If (nEntreprise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(nEntreprise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Adresse Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Adresse,String)
            End If
            If (CodePostal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CodePostal,String)
            End If
            If (Ville Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Ville,String)
            End If
            If (Pays Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Pays,String)
            End If
            If (NomJeuneFille Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(NomJeuneFille,String)
            End If
            If (TypeClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(TypeClient,String)
            End If
            If (Fonction Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Fonction,String)
            End If
            If (Campagne Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Campagne,String)
            End If
            If (DatedeNaissance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(DatedeNaissance.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (LieuNaissance Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(LieuNaissance,String)
            End If
            If (EMail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(EMail,String)
            End If
            If (Adressehttp Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Adressehttp,String)
            End If
            If (Observations Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Observations,String)
            End If
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(NpAfficher,Boolean)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(NpRecevoirInfo,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nPersonne As Decimal,  _
                    ByVal DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal DateModification As Global.System.Nullable(Of Date),  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypePersonne As String,  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Prenom As String,  _
                    ByVal nEntreprise As Global.System.Nullable(Of Decimal),  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal NomJeuneFille As String,  _
                    ByVal TypeClient As String,  _
                    ByVal Fonction As String,  _
                    ByVal Campagne As String,  _
                    ByVal DatedeNaissance As Global.System.Nullable(Of Date),  _
                    ByVal LieuNaissance As String,  _
                    ByVal EMail As String,  _
                    ByVal Adressehttp As String,  _
                    ByVal Observations As String,  _
                    ByVal NpAfficher As Boolean,  _
                    ByVal NpRecevoirInfo As Boolean,  _
                    ByVal Original_nPersonne As Decimal,  _
                    ByVal Original_DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateModification As Global.System.Nullable(Of Date),  _
                    ByVal Original_InfoMAJ As String,  _
                    ByVal Original_TypePersonne As String,  _
                    ByVal Original_Dep As String,  _
                    ByVal Original_Nom As String,  _
                    ByVal Original_Prenom As String,  _
                    ByVal Original_nEntreprise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodePostal As String,  _
                    ByVal Original_Ville As String,  _
                    ByVal Original_Pays As String,  _
                    ByVal Original_NomJeuneFille As String,  _
                    ByVal Original_TypeClient As String,  _
                    ByVal Original_Fonction As String,  _
                    ByVal Original_Campagne As String,  _
                    ByVal Original_DatedeNaissance As Global.System.Nullable(Of Date),  _
                    ByVal Original_LieuNaissance As String,  _
                    ByVal Original_EMail As String,  _
                    ByVal Original_Adressehttp As String,  _
                    ByVal Original_NpAfficher As Boolean,  _
                    ByVal Original_NpRecevoirInfo As Boolean) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nPersonne,Decimal)
            If (DateCreation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DateCreation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateModification.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DateModification.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (InfoMAJ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(InfoMAJ,String)
            End If
            If (TypePersonne Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TypePersonne,String)
            End If
            If (Dep Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Dep,String)
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Nom,String)
            End If
            If (Prenom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Prenom,String)
            End If
            If (nEntreprise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(nEntreprise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Adresse Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Adresse,String)
            End If
            If (CodePostal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CodePostal,String)
            End If
            If (Ville Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Ville,String)
            End If
            If (Pays Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Pays,String)
            End If
            If (NomJeuneFille Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(NomJeuneFille,String)
            End If
            If (TypeClient Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(TypeClient,String)
            End If
            If (Fonction Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Fonction,String)
            End If
            If (Campagne Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Campagne,String)
            End If
            If (DatedeNaissance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(DatedeNaissance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (LieuNaissance Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(LieuNaissance,String)
            End If
            If (EMail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(EMail,String)
            End If
            If (Adressehttp Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Adressehttp,String)
            End If
            If (Observations Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Observations,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(NpAfficher,Boolean)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(NpRecevoirInfo,Boolean)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_nPersonne,Decimal)
            If (Original_DateCreation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_DateCreation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_DateModification.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_DateModification.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_InfoMAJ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_InfoMAJ,String)
            End If
            If (Original_TypePersonne Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_TypePersonne,String)
            End If
            If (Original_Dep Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Dep,String)
            End If
            If (Original_Nom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Nom,String)
            End If
            If (Original_Prenom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Prenom,String)
            End If
            If (Original_nEntreprise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_nEntreprise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_CodePostal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_CodePostal,String)
            End If
            If (Original_Ville Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Ville,String)
            End If
            If (Original_Pays Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_Pays,String)
            End If
            If (Original_NomJeuneFille Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_NomJeuneFille,String)
            End If
            If (Original_TypeClient Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_TypeClient,String)
            End If
            If (Original_Fonction Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_Fonction,String)
            End If
            If (Original_Campagne Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_Campagne,String)
            End If
            If (Original_DatedeNaissance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_DatedeNaissance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_LieuNaissance Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_LieuNaissance,String)
            End If
            If (Original_EMail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_EMail,String)
            End If
            If (Original_Adressehttp Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_Adressehttp,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_NpAfficher,Boolean)
            Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_NpRecevoirInfo,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal DateModification As Global.System.Nullable(Of Date),  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypePersonne As String,  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Prenom As String,  _
                    ByVal nEntreprise As Global.System.Nullable(Of Decimal),  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal NomJeuneFille As String,  _
                    ByVal TypeClient As String,  _
                    ByVal Fonction As String,  _
                    ByVal Campagne As String,  _
                    ByVal DatedeNaissance As Global.System.Nullable(Of Date),  _
                    ByVal LieuNaissance As String,  _
                    ByVal EMail As String,  _
                    ByVal Adressehttp As String,  _
                    ByVal Observations As String,  _
                    ByVal NpAfficher As Boolean,  _
                    ByVal NpRecevoirInfo As Boolean,  _
                    ByVal Original_nPersonne As Decimal,  _
                    ByVal Original_DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateModification As Global.System.Nullable(Of Date),  _
                    ByVal Original_InfoMAJ As String,  _
                    ByVal Original_TypePersonne As String,  _
                    ByVal Original_Dep As String,  _
                    ByVal Original_Nom As String,  _
                    ByVal Original_Prenom As String,  _
                    ByVal Original_nEntreprise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodePostal As String,  _
                    ByVal Original_Ville As String,  _
                    ByVal Original_Pays As String,  _
                    ByVal Original_NomJeuneFille As String,  _
                    ByVal Original_TypeClient As String,  _
                    ByVal Original_Fonction As String,  _
                    ByVal Original_Campagne As String,  _
                    ByVal Original_DatedeNaissance As Global.System.Nullable(Of Date),  _
                    ByVal Original_LieuNaissance As String,  _
                    ByVal Original_EMail As String,  _
                    ByVal Original_Adressehttp As String,  _
                    ByVal Original_NpAfficher As Boolean,  _
                    ByVal Original_NpRecevoirInfo As Boolean) As Integer
            Return Me.Update(Original_nPersonne, DateCreation, DateModification, InfoMAJ, TypePersonne, Dep, Nom, Prenom, nEntreprise, Adresse, CodePostal, Ville, Pays, NomJeuneFille, TypeClient, Fonction, Campagne, DatedeNaissance, LieuNaissance, EMail, Adressehttp, Observations, NpAfficher, NpRecevoirInfo, Original_nPersonne, Original_DateCreation, Original_DateModification, Original_InfoMAJ, Original_TypePersonne, Original_Dep, Original_Nom, Original_Prenom, Original_nEntreprise, Original_CodePostal, Original_Ville, Original_Pays, Original_NomJeuneFille, Original_TypeClient, Original_Fonction, Original_Campagne, Original_DatedeNaissance, Original_LieuNaissance, Original_EMail, Original_Adressehttp, Original_NpAfficher, Original_NpRecevoirInfo)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TelephoneTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Telephone"
            tableMapping.ColumnMappings.Add("nPersonne", "nPersonne")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("Numero", "Numero")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Telephone] WHERE (([nPersonne] = @Original_nPersonne) AND ([Ty"& _ 
                "pe] = @Original_Type) AND ((@IsNull_Numero = 1 AND [Numero] IS NULL) OR ([Numero"& _ 
                "] = @Original_Numero)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPersonne", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPersonne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Numero", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Numero", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Telephone] ([nPersonne], [Type], [Numero]) VALUES (@nPersonne,"& _ 
                " @Type, @Numero);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nPersonne, Type, Numero FROM Telephone WHERE (Type = @"& _ 
                "Type) AND (nPersonne = @nPersonne)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPersonne", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPersonne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Numero", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Telephone] SET [nPersonne] = @nPersonne, [Type] = @Type, [Numero] ="& _ 
                " @Numero WHERE (([nPersonne] = @Original_nPersonne) AND ([Type] = @Original_Type"& _ 
                ") AND ((@IsNull_Numero = 1 AND [Numero] IS NULL) OR ([Numero] = @Original_Numero"& _ 
                ")));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nPersonne, Type, Numero FROM Telephone WHERE (Type = @Type) AND (nP"& _ 
                "ersonne = @nPersonne)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPersonne", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPersonne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Numero", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPersonne", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPersonne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Numero", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Numero", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nPersonne, Type, Numero FROM dbo.Telephone"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nPersonne, Type, Numero FROM dbo.Telephone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (nPersonne = @nPersonne)"& _ 
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPersonne", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nPersonne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ApproFactDataSet.TelephoneDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ApproFactDataSet.TelephoneDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ApproFactDataSet.TelephoneDataTable = New ApproFactDataSet.TelephoneDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynPersonne(ByVal dataTable As ApproFactDataSet.TelephoneDataTable, ByVal nPersonne As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nPersonne,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynPersonne(ByVal nPersonne As Decimal) As ApproFactDataSet.TelephoneDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nPersonne,Decimal)
            Dim dataTable As ApproFactDataSet.TelephoneDataTable = New ApproFactDataSet.TelephoneDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ApproFactDataSet.TelephoneDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ApproFactDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Telephone")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nPersonne As Decimal, ByVal Original_Type As String, ByVal Original_Numero As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nPersonne,Decimal)
            If (Original_Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Type")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Type,String)
            End If
            If (Original_Numero Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Numero,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal nPersonne As Decimal, ByVal Type As String, ByVal Numero As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nPersonne,Decimal)
            If (Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Type")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Type,String)
            End If
            If (Numero Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Numero,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nPersonne As Decimal, ByVal Type As String, ByVal Numero As String, ByVal Original_nPersonne As Decimal, ByVal Original_Type As String, ByVal Original_Numero As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nPersonne,Decimal)
            If (Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Type")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Type,String)
            End If
            If (Numero Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Numero,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_nPersonne,Decimal)
            If (Original_Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Type")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Type,String)
            End If
            If (Original_Numero Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Numero,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Numero As String, ByVal Original_nPersonne As Decimal, ByVal Original_Type As String, ByVal Original_Numero As String) As Integer
            Return Me.Update(Original_nPersonne, Original_Type, Numero, Original_nPersonne, Original_Type, Original_Numero)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TelephoneEntrepriseTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TelephoneEntreprise"
            tableMapping.ColumnMappings.Add("nEntreprise", "nEntreprise")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("Numero", "Numero")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TelephoneEntreprise] WHERE (([nEntreprise] = @Original_nEntrep"& _ 
                "rise) AND ([Type] = @Original_Type) AND ((@IsNull_Numero = 1 AND [Numero] IS NUL"& _ 
                "L) OR ([Numero] = @Original_Numero)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Numero", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Numero", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TelephoneEntreprise] ([nEntreprise], [Type], [Numero]) VALUES "& _ 
                "(@nEntreprise, @Type, @Numero);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nEntreprise, Type, Numero FROM Telephone"& _ 
                "Entreprise WHERE (Type = @Type) AND (nEntreprise = @nEntreprise)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Numero", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TelephoneEntreprise] SET [nEntreprise] = @nEntreprise, [Type] = @Ty"& _ 
                "pe, [Numero] = @Numero WHERE (([nEntreprise] = @Original_nEntreprise) AND ([Type"& _ 
                "] = @Original_Type) AND ((@IsNull_Numero = 1 AND [Numero] IS NULL) OR ([Numero] "& _ 
                "= @Original_Numero)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nEntreprise, Type, Numero FROM TelephoneEntrepris"& _ 
                "e WHERE (Type = @Type) AND (nEntreprise = @nEntreprise)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Numero", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Numero", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Numero", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Numero", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nEntreprise, Type, Numero FROM dbo.TelephoneEntreprise"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nEntreprise, Type, Numero FROM dbo.TelephoneEntreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (nEntreprise"& _ 
                " = @nEntreprise)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ApproFactDataSet.TelephoneEntrepriseDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ApproFactDataSet.TelephoneEntrepriseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ApproFactDataSet.TelephoneEntrepriseDataTable = New ApproFactDataSet.TelephoneEntrepriseDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynEntreprise(ByVal dataTable As ApproFactDataSet.TelephoneEntrepriseDataTable, ByVal nEntreprise As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nEntreprise,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynEntreprise(ByVal nEntreprise As Decimal) As ApproFactDataSet.TelephoneEntrepriseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nEntreprise,Decimal)
            Dim dataTable As ApproFactDataSet.TelephoneEntrepriseDataTable = New ApproFactDataSet.TelephoneEntrepriseDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ApproFactDataSet.TelephoneEntrepriseDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ApproFactDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TelephoneEntreprise")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nEntreprise As Decimal, ByVal Original_Type As String, ByVal Original_Numero As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nEntreprise,Decimal)
            If (Original_Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Type")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Type,String)
            End If
            If (Original_Numero Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Numero,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal nEntreprise As Decimal, ByVal Type As String, ByVal Numero As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nEntreprise,Decimal)
            If (Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Type")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Type,String)
            End If
            If (Numero Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Numero,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nEntreprise As Decimal, ByVal Type As String, ByVal Numero As String, ByVal Original_nEntreprise As Decimal, ByVal Original_Type As String, ByVal Original_Numero As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nEntreprise,Decimal)
            If (Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Type")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Type,String)
            End If
            If (Numero Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Numero,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_nEntreprise,Decimal)
            If (Original_Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Type")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Type,String)
            End If
            If (Original_Numero Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Numero,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Numero As String, ByVal Original_nEntreprise As Decimal, ByVal Original_Type As String, ByVal Original_Numero As String) As Integer
            Return Me.Update(Original_nEntreprise, Original_Type, Numero, Original_nEntreprise, Original_Type, Original_Numero)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CodeInseeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CodeInsee"
            tableMapping.ColumnMappings.Add("note", "note")
            tableMapping.ColumnMappings.Add("NomVille", "NomVille")
            tableMapping.ColumnMappings.Add("CodePostal", "CodePostal")
            tableMapping.ColumnMappings.Add("CodeINSEE", "CodeINSEE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CASE WHEN nomville = @ville THEN 5 ELSE DIFFERENCE(nomville, @ville"& _ 
                ") END AS note, NomVille, CodePostal, CodeINSEE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Communes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "       (CodePostal = @cp) AND (DIFFERENCE(NomVille, @ville) >= 3)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY (CAS"& _ 
                "E WHEN nomville = @ville THEN 5 ELSE difference(nomville, @ville) END) DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cp", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ville", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ApproFactDataSet.CodeInseeDataTable, ByVal cp As String, ByVal ville As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cp Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cp,String)
            End If
            If (ville Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ville")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ville,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cp As String, ByVal ville As String) As ApproFactDataSet.CodeInseeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cp Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cp,String)
            End If
            If (ville Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ville")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ville,String)
            End If
            Dim dataTable As ApproFactDataSet.CodeInseeDataTable = New ApproFactDataSet.CodeInseeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ExportBilanVenteApproFactTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ExportBilanVenteApproFact"
            tableMapping.ColumnMappings.Add("AMM", "AMM")
            tableMapping.ColumnMappings.Add("QUANTITE", "QUANTITE")
            tableMapping.ColumnMappings.Add("CODEPOSTAL", "CODEPOSTAL")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        REPLACE(VFacture_Detail.CodeProduit, 'RED-', '') AS AMM, SUM(VFactu"& _ 
                "re_Detail.Unite1) AS QUANTITE, Entreprise.CodePostal AS CODEPOSTAL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                "    VFacture INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         VFacture_Detail ON VFacture.nD"& _ 
                "evis = VFacture_Detail.nDevis INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise ON"& _ 
                " VFacture.nClient = Entreprise.nEntreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (VFacture.DateFacture >"& _ 
                "= @DateDeb) AND (VFacture.DateFacture < @DateFin) AND (VFacture_Detail.CodeProdu"& _ 
                "it LIKE N'RED-%') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (REPLACE(VFacture_Detail.CodePr"& _ 
                "oduit, 'RED-', '') <> '')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY REPLACE(VFacture_Detail.CodeProduit, 'RED-',"& _ 
                " ''),Entreprise.CodePostal "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateDeb", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFin", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ApproFactDataSet.ExportBilanVenteApproFactDataTable, ByVal DateDeb As Global.System.Nullable(Of Date), ByVal DateFin As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DateFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateDeb As Global.System.Nullable(Of Date), ByVal DateFin As Global.System.Nullable(Of Date)) As ApproFactDataSet.ExportBilanVenteApproFactDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateDeb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateDeb.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DateFin.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFin.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ApproFactDataSet.ExportBilanVenteApproFactDataTable = New ApproFactDataSet.ExportBilanVenteApproFactDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
