'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DsPieces"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DsPieces
    Inherits Global.System.Data.DataSet
    
    Private tableBanque As BanqueDataTable
    
    Private tableRemise As RemiseDataTable
    
    Private tableFrRemiseDetail As FrRemiseDetailDataTable
    
    Private tableReglement As ReglementDataTable
    
    Private tableFrReglementDetail As FrReglementDetailDataTable
    
    Private tablePieces As PiecesDataTable
    
    Private tableChildObjects As ChildObjectsDataTable
    
    Private tablePieces_Detail As Pieces_DetailDataTable
    
    Private tableAvances As AvancesDataTable
    
    Private tableRemise_Detail As Remise_DetailDataTable
    
    Private tableProduit As ProduitDataTable
    
    Private relationFK_Remise_Banque As Global.System.Data.DataRelation
    
    Private relationFK_Remise_Detail_Remise As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.ExcludeSchema) Then
                Me.InitExpressions
            End If
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Banque")) Is Nothing) Then
                MyBase.Tables.Add(New BanqueDataTable(ds.Tables("Banque")))
            End If
            If (Not (ds.Tables("Remise")) Is Nothing) Then
                MyBase.Tables.Add(New RemiseDataTable(ds.Tables("Remise")))
            End If
            If (Not (ds.Tables("FrRemiseDetail")) Is Nothing) Then
                MyBase.Tables.Add(New FrRemiseDetailDataTable(ds.Tables("FrRemiseDetail")))
            End If
            If (Not (ds.Tables("Reglement")) Is Nothing) Then
                MyBase.Tables.Add(New ReglementDataTable(ds.Tables("Reglement")))
            End If
            If (Not (ds.Tables("FrReglementDetail")) Is Nothing) Then
                MyBase.Tables.Add(New FrReglementDetailDataTable(ds.Tables("FrReglementDetail")))
            End If
            If (Not (ds.Tables("Pieces")) Is Nothing) Then
                MyBase.Tables.Add(New PiecesDataTable(ds.Tables("Pieces")))
            End If
            If (Not (ds.Tables("ChildObjects")) Is Nothing) Then
                MyBase.Tables.Add(New ChildObjectsDataTable(ds.Tables("ChildObjects")))
            End If
            If (Not (ds.Tables("Pieces_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New Pieces_DetailDataTable(ds.Tables("Pieces_Detail")))
            End If
            If (Not (ds.Tables("Avances")) Is Nothing) Then
                MyBase.Tables.Add(New AvancesDataTable(ds.Tables("Avances")))
            End If
            If (Not (ds.Tables("Remise_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New Remise_DetailDataTable(ds.Tables("Remise_Detail")))
            End If
            If (Not (ds.Tables("Produit")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitDataTable(ds.Tables("Produit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Banque() As BanqueDataTable
        Get
            Return Me.tableBanque
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Remise() As RemiseDataTable
        Get
            Return Me.tableRemise
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FrRemiseDetail() As FrRemiseDetailDataTable
        Get
            Return Me.tableFrRemiseDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reglement() As ReglementDataTable
        Get
            Return Me.tableReglement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FrReglementDetail() As FrReglementDetailDataTable
        Get
            Return Me.tableFrReglementDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pieces() As PiecesDataTable
        Get
            Return Me.tablePieces
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ChildObjects() As ChildObjectsDataTable
        Get
            Return Me.tableChildObjects
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pieces_Detail() As Pieces_DetailDataTable
        Get
            Return Me.tablePieces_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Avances() As AvancesDataTable
        Get
            Return Me.tableAvances
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Remise_Detail() As Remise_DetailDataTable
        Get
            Return Me.tableRemise_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Produit() As ProduitDataTable
        Get
            Return Me.tableProduit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DsPieces = CType(MyBase.Clone,DsPieces)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Banque")) Is Nothing) Then
                MyBase.Tables.Add(New BanqueDataTable(ds.Tables("Banque")))
            End If
            If (Not (ds.Tables("Remise")) Is Nothing) Then
                MyBase.Tables.Add(New RemiseDataTable(ds.Tables("Remise")))
            End If
            If (Not (ds.Tables("FrRemiseDetail")) Is Nothing) Then
                MyBase.Tables.Add(New FrRemiseDetailDataTable(ds.Tables("FrRemiseDetail")))
            End If
            If (Not (ds.Tables("Reglement")) Is Nothing) Then
                MyBase.Tables.Add(New ReglementDataTable(ds.Tables("Reglement")))
            End If
            If (Not (ds.Tables("FrReglementDetail")) Is Nothing) Then
                MyBase.Tables.Add(New FrReglementDetailDataTable(ds.Tables("FrReglementDetail")))
            End If
            If (Not (ds.Tables("Pieces")) Is Nothing) Then
                MyBase.Tables.Add(New PiecesDataTable(ds.Tables("Pieces")))
            End If
            If (Not (ds.Tables("ChildObjects")) Is Nothing) Then
                MyBase.Tables.Add(New ChildObjectsDataTable(ds.Tables("ChildObjects")))
            End If
            If (Not (ds.Tables("Pieces_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New Pieces_DetailDataTable(ds.Tables("Pieces_Detail")))
            End If
            If (Not (ds.Tables("Avances")) Is Nothing) Then
                MyBase.Tables.Add(New AvancesDataTable(ds.Tables("Avances")))
            End If
            If (Not (ds.Tables("Remise_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New Remise_DetailDataTable(ds.Tables("Remise_Detail")))
            End If
            If (Not (ds.Tables("Produit")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitDataTable(ds.Tables("Produit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBanque = CType(MyBase.Tables("Banque"),BanqueDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBanque) Is Nothing) Then
                Me.tableBanque.InitVars
            End If
        End If
        Me.tableRemise = CType(MyBase.Tables("Remise"),RemiseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRemise) Is Nothing) Then
                Me.tableRemise.InitVars
            End If
        End If
        Me.tableFrRemiseDetail = CType(MyBase.Tables("FrRemiseDetail"),FrRemiseDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFrRemiseDetail) Is Nothing) Then
                Me.tableFrRemiseDetail.InitVars
            End If
        End If
        Me.tableReglement = CType(MyBase.Tables("Reglement"),ReglementDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReglement) Is Nothing) Then
                Me.tableReglement.InitVars
            End If
        End If
        Me.tableFrReglementDetail = CType(MyBase.Tables("FrReglementDetail"),FrReglementDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFrReglementDetail) Is Nothing) Then
                Me.tableFrReglementDetail.InitVars
            End If
        End If
        Me.tablePieces = CType(MyBase.Tables("Pieces"),PiecesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePieces) Is Nothing) Then
                Me.tablePieces.InitVars
            End If
        End If
        Me.tableChildObjects = CType(MyBase.Tables("ChildObjects"),ChildObjectsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableChildObjects) Is Nothing) Then
                Me.tableChildObjects.InitVars
            End If
        End If
        Me.tablePieces_Detail = CType(MyBase.Tables("Pieces_Detail"),Pieces_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePieces_Detail) Is Nothing) Then
                Me.tablePieces_Detail.InitVars
            End If
        End If
        Me.tableAvances = CType(MyBase.Tables("Avances"),AvancesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAvances) Is Nothing) Then
                Me.tableAvances.InitVars
            End If
        End If
        Me.tableRemise_Detail = CType(MyBase.Tables("Remise_Detail"),Remise_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRemise_Detail) Is Nothing) Then
                Me.tableRemise_Detail.InitVars
            End If
        End If
        Me.tableProduit = CType(MyBase.Tables("Produit"),ProduitDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduit) Is Nothing) Then
                Me.tableProduit.InitVars
            End If
        End If
        Me.relationFK_Remise_Banque = Me.Relations("FK_Remise_Banque")
        Me.relationFK_Remise_Detail_Remise = Me.Relations("FK_Remise_Detail_Remise")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DsPieces"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsPieces.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBanque = New BanqueDataTable
        MyBase.Tables.Add(Me.tableBanque)
        Me.tableRemise = New RemiseDataTable(false)
        MyBase.Tables.Add(Me.tableRemise)
        Me.tableFrRemiseDetail = New FrRemiseDetailDataTable
        MyBase.Tables.Add(Me.tableFrRemiseDetail)
        Me.tableReglement = New ReglementDataTable
        MyBase.Tables.Add(Me.tableReglement)
        Me.tableFrReglementDetail = New FrReglementDetailDataTable
        MyBase.Tables.Add(Me.tableFrReglementDetail)
        Me.tablePieces = New PiecesDataTable(false)
        MyBase.Tables.Add(Me.tablePieces)
        Me.tableChildObjects = New ChildObjectsDataTable
        MyBase.Tables.Add(Me.tableChildObjects)
        Me.tablePieces_Detail = New Pieces_DetailDataTable
        MyBase.Tables.Add(Me.tablePieces_Detail)
        Me.tableAvances = New AvancesDataTable
        MyBase.Tables.Add(Me.tableAvances)
        Me.tableRemise_Detail = New Remise_DetailDataTable
        MyBase.Tables.Add(Me.tableRemise_Detail)
        Me.tableProduit = New ProduitDataTable(false)
        MyBase.Tables.Add(Me.tableProduit)
        Me.relationFK_Remise_Banque = New Global.System.Data.DataRelation("FK_Remise_Banque", New Global.System.Data.DataColumn() {Me.tableBanque.nBanqueColumn}, New Global.System.Data.DataColumn() {Me.tableRemise.nBanqueColumn}, false)
        Me.Relations.Add(Me.relationFK_Remise_Banque)
        Me.relationFK_Remise_Detail_Remise = New Global.System.Data.DataRelation("FK_Remise_Detail_Remise", New Global.System.Data.DataColumn() {Me.tableRemise.nRemiseColumn}, New Global.System.Data.DataColumn() {Me.tableRemise_Detail.nRemiseColumn}, false)
        Me.Relations.Add(Me.relationFK_Remise_Detail_Remise)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBanque() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRemise() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFrRemiseDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReglement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFrReglementDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePieces() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeChildObjects() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePieces_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAvances() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRemise_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsPieces = New DsPieces
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.Remise.NomBanqueColumn.Expression = "Parent.Libelle"
        Me.Pieces.nomObsColumn.Expression = "nom + iif(observation is null,'', ' '+ observation)"
        Me.Pieces.DateEcheance2Column.Expression = "iif(paye,null,DateEcheance)"
        Me.Produit.CodeProduit_LibelleColumn.Expression = "CodeProduit + ' - ' + Libelle"
    End Sub
    
    Public Delegate Sub BanqueRowChangeEventHandler(ByVal sender As Object, ByVal e As BanqueRowChangeEvent)
    
    Public Delegate Sub RemiseRowChangeEventHandler(ByVal sender As Object, ByVal e As RemiseRowChangeEvent)
    
    Public Delegate Sub FrRemiseDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As FrRemiseDetailRowChangeEvent)
    
    Public Delegate Sub ReglementRowChangeEventHandler(ByVal sender As Object, ByVal e As ReglementRowChangeEvent)
    
    Public Delegate Sub FrReglementDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As FrReglementDetailRowChangeEvent)
    
    Public Delegate Sub PiecesRowChangeEventHandler(ByVal sender As Object, ByVal e As PiecesRowChangeEvent)
    
    Public Delegate Sub ChildObjectsRowChangeEventHandler(ByVal sender As Object, ByVal e As ChildObjectsRowChangeEvent)
    
    Public Delegate Sub Pieces_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As Pieces_DetailRowChangeEvent)
    
    Public Delegate Sub AvancesRowChangeEventHandler(ByVal sender As Object, ByVal e As AvancesRowChangeEvent)
    
    Public Delegate Sub Remise_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As Remise_DetailRowChangeEvent)
    
    Public Delegate Sub ProduitRowChangeEventHandler(ByVal sender As Object, ByVal e As ProduitRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BanqueDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnBanque As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNCompte As Global.System.Data.DataColumn
        
        Private columnNActivite As Global.System.Data.DataColumn
        
        Private columnRIBCodeAgence As Global.System.Data.DataColumn
        
        Private columnRIBCodeGuichet As Global.System.Data.DataColumn
        
        Private columnRIBNCompte As Global.System.Data.DataColumn
        
        Private columnRIBCle As Global.System.Data.DataColumn
        
        Private columnRIBNEmetteur As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Banque"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nBanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActivite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBCodeAgenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBCodeAgence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBCodeGuichetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBCodeGuichet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBNCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBNCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBCleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBCle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBNEmetteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBNEmetteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BanqueRow
            Get
                Return CType(Me.Rows(index),BanqueRow)
            End Get
        End Property
        
        Public Event BanqueRowChanging As BanqueRowChangeEventHandler
        
        Public Event BanqueRowChanged As BanqueRowChangeEventHandler
        
        Public Event BanqueRowDeleting As BanqueRowChangeEventHandler
        
        Public Event BanqueRowDeleted As BanqueRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBanqueRow(ByVal row As BanqueRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBanqueRow(ByVal nBanque As Decimal, ByVal Libelle As String, ByVal NCompte As String, ByVal NActivite As String, ByVal RIBCodeAgence As String, ByVal RIBCodeGuichet As String, ByVal RIBNCompte As String, ByVal RIBCle As String, ByVal RIBNEmetteur As String) As BanqueRow
            Dim rowBanqueRow As BanqueRow = CType(Me.NewRow,BanqueRow)
            Dim columnValuesArray() As Object = New Object() {nBanque, Libelle, NCompte, NActivite, RIBCodeAgence, RIBCodeGuichet, RIBNCompte, RIBCle, RIBNEmetteur}
            rowBanqueRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBanqueRow)
            Return rowBanqueRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynBanque(ByVal nBanque As Decimal) As BanqueRow
            Return CType(Me.Rows.Find(New Object() {nBanque}),BanqueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BanqueDataTable = CType(MyBase.Clone,BanqueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BanqueDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnBanque = MyBase.Columns("nBanque")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNCompte = MyBase.Columns("NCompte")
            Me.columnNActivite = MyBase.Columns("NActivite")
            Me.columnRIBCodeAgence = MyBase.Columns("RIBCodeAgence")
            Me.columnRIBCodeGuichet = MyBase.Columns("RIBCodeGuichet")
            Me.columnRIBNCompte = MyBase.Columns("RIBNCompte")
            Me.columnRIBCle = MyBase.Columns("RIBCle")
            Me.columnRIBNEmetteur = MyBase.Columns("RIBNEmetteur")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnBanque = New Global.System.Data.DataColumn("nBanque", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnBanque)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNCompte = New Global.System.Data.DataColumn("NCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompte)
            Me.columnNActivite = New Global.System.Data.DataColumn("NActivite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActivite)
            Me.columnRIBCodeAgence = New Global.System.Data.DataColumn("RIBCodeAgence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBCodeAgence)
            Me.columnRIBCodeGuichet = New Global.System.Data.DataColumn("RIBCodeGuichet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBCodeGuichet)
            Me.columnRIBNCompte = New Global.System.Data.DataColumn("RIBNCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBNCompte)
            Me.columnRIBCle = New Global.System.Data.DataColumn("RIBCle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBCle)
            Me.columnRIBNEmetteur = New Global.System.Data.DataColumn("RIBNEmetteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBNEmetteur)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnBanque}, true))
            Me.columnnBanque.AllowDBNull = false
            Me.columnnBanque.Unique = true
            Me.columnLibelle.MaxLength = 50
            Me.columnNCompte.MaxLength = 8
            Me.columnNActivite.MaxLength = 4
            Me.columnRIBCodeAgence.MaxLength = 50
            Me.columnRIBCodeGuichet.MaxLength = 50
            Me.columnRIBNCompte.MaxLength = 50
            Me.columnRIBCle.MaxLength = 50
            Me.columnRIBNEmetteur.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBanqueRow() As BanqueRow
            Return CType(Me.NewRow,BanqueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BanqueRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BanqueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BanqueRowChangedEvent) Is Nothing) Then
                RaiseEvent BanqueRowChanged(Me, New BanqueRowChangeEvent(CType(e.Row,BanqueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BanqueRowChangingEvent) Is Nothing) Then
                RaiseEvent BanqueRowChanging(Me, New BanqueRowChangeEvent(CType(e.Row,BanqueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BanqueRowDeletedEvent) Is Nothing) Then
                RaiseEvent BanqueRowDeleted(Me, New BanqueRowChangeEvent(CType(e.Row,BanqueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BanqueRowDeletingEvent) Is Nothing) Then
                RaiseEvent BanqueRowDeleting(Me, New BanqueRowChangeEvent(CType(e.Row,BanqueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBanqueRow(ByVal row As BanqueRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BanqueDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RemiseDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnRemise As Global.System.Data.DataColumn
        
        Private columnnRemiseBanque As Global.System.Data.DataColumn
        
        Private columnDateRemise As Global.System.Data.DataColumn
        
        Private columnTypeRemise As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnNExportRemise As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnnBanque As Global.System.Data.DataColumn
        
        Private columnNomBanque As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Remise"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nRemiseBanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRemiseBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NExportRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNExportRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nBanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomBanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RemiseRow
            Get
                Return CType(Me.Rows(index),RemiseRow)
            End Get
        End Property
        
        Public Event RemiseRowChanging As RemiseRowChangeEventHandler
        
        Public Event RemiseRowChanged As RemiseRowChangeEventHandler
        
        Public Event RemiseRowDeleting As RemiseRowChangeEventHandler
        
        Public Event RemiseRowDeleted As RemiseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRemiseRow(ByVal row As RemiseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRemiseRow(ByVal nRemise As Decimal, ByVal nRemiseBanque As String, ByVal DateRemise As Date, ByVal TypeRemise As String, ByVal Observation As String, ByVal Montant As Decimal, ByVal NExportRemise As Decimal, ByVal ExportCompta As Boolean, ByVal DateExportCompta As Date, ByVal parentBanqueRowByFK_Remise_Banque As BanqueRow, ByVal NomBanque As String) As RemiseRow
            Dim rowRemiseRow As RemiseRow = CType(Me.NewRow,RemiseRow)
            Dim columnValuesArray() As Object = New Object() {nRemise, nRemiseBanque, DateRemise, TypeRemise, Observation, Montant, NExportRemise, ExportCompta, DateExportCompta, Nothing, NomBanque}
            If (Not (parentBanqueRowByFK_Remise_Banque) Is Nothing) Then
                columnValuesArray(9) = parentBanqueRowByFK_Remise_Banque(0)
            End If
            rowRemiseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRemiseRow)
            Return rowRemiseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRemiseRow(ByVal nRemise As Decimal, ByVal nRemiseBanque As String, ByVal DateRemise As Date, ByVal TypeRemise As String, ByVal Observation As String, ByVal Montant As Decimal, ByVal NExportRemise As Decimal, ByVal ExportCompta As Boolean, ByVal DateExportCompta As Date, ByVal parentBanqueRowByFK_Remise_Banque As BanqueRow) As RemiseRow
            Dim rowRemiseRow As RemiseRow = CType(Me.NewRow,RemiseRow)
            Dim columnValuesArray() As Object = New Object() {nRemise, nRemiseBanque, DateRemise, TypeRemise, Observation, Montant, NExportRemise, ExportCompta, DateExportCompta, Nothing, Nothing}
            If (Not (parentBanqueRowByFK_Remise_Banque) Is Nothing) Then
                columnValuesArray(9) = parentBanqueRowByFK_Remise_Banque(0)
            End If
            rowRemiseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRemiseRow)
            Return rowRemiseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynRemise(ByVal nRemise As Decimal) As RemiseRow
            Return CType(Me.Rows.Find(New Object() {nRemise}),RemiseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RemiseDataTable = CType(MyBase.Clone,RemiseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RemiseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnRemise = MyBase.Columns("nRemise")
            Me.columnnRemiseBanque = MyBase.Columns("nRemiseBanque")
            Me.columnDateRemise = MyBase.Columns("DateRemise")
            Me.columnTypeRemise = MyBase.Columns("TypeRemise")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnNExportRemise = MyBase.Columns("NExportRemise")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnnBanque = MyBase.Columns("nBanque")
            Me.columnNomBanque = MyBase.Columns("NomBanque")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnRemise = New Global.System.Data.DataColumn("nRemise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRemise)
            Me.columnnRemiseBanque = New Global.System.Data.DataColumn("nRemiseBanque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRemiseBanque)
            Me.columnDateRemise = New Global.System.Data.DataColumn("DateRemise", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRemise)
            Me.columnTypeRemise = New Global.System.Data.DataColumn("TypeRemise", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeRemise)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnNExportRemise = New Global.System.Data.DataColumn("NExportRemise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNExportRemise)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnnBanque = New Global.System.Data.DataColumn("nBanque", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnBanque)
            Me.columnNomBanque = New Global.System.Data.DataColumn("NomBanque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomBanque)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnRemise}, true))
            Me.columnnRemise.AllowDBNull = false
            Me.columnnRemise.Unique = true
            Me.columnnRemiseBanque.MaxLength = 255
            Me.columnTypeRemise.MaxLength = 50
            Me.columnObservation.MaxLength = 255
            Me.columnNomBanque.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRemiseRow() As RemiseRow
            Return CType(Me.NewRow,RemiseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RemiseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RemiseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.NomBanqueColumn.Expression = "Parent.Libelle"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RemiseRowChangedEvent) Is Nothing) Then
                RaiseEvent RemiseRowChanged(Me, New RemiseRowChangeEvent(CType(e.Row,RemiseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RemiseRowChangingEvent) Is Nothing) Then
                RaiseEvent RemiseRowChanging(Me, New RemiseRowChangeEvent(CType(e.Row,RemiseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RemiseRowDeletedEvent) Is Nothing) Then
                RaiseEvent RemiseRowDeleted(Me, New RemiseRowChangeEvent(CType(e.Row,RemiseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RemiseRowDeletingEvent) Is Nothing) Then
                RaiseEvent RemiseRowDeleting(Me, New RemiseRowChangeEvent(CType(e.Row,RemiseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRemiseRow(ByVal row As RemiseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RemiseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FrRemiseDetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailRemise As Global.System.Data.DataColumn
        
        Private columnnReglement As Global.System.Data.DataColumn
        
        Private columnDateReglement As Global.System.Data.DataColumn
        
        Private columnNom As Global.System.Data.DataColumn
        
        Private columnnMode As Global.System.Data.DataColumn
        
        Private columnBanqueClient As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnnRemise As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FrRemiseDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nModeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnMode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BanqueClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanqueClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FrRemiseDetailRow
            Get
                Return CType(Me.Rows(index),FrRemiseDetailRow)
            End Get
        End Property
        
        Public Event FrRemiseDetailRowChanging As FrRemiseDetailRowChangeEventHandler
        
        Public Event FrRemiseDetailRowChanged As FrRemiseDetailRowChangeEventHandler
        
        Public Event FrRemiseDetailRowDeleting As FrRemiseDetailRowChangeEventHandler
        
        Public Event FrRemiseDetailRowDeleted As FrRemiseDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFrRemiseDetailRow(ByVal row As FrRemiseDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFrRemiseDetailRow(ByVal nDetailRemise As Decimal, ByVal nReglement As Decimal, ByVal DateReglement As Date, ByVal Nom As String, ByVal nMode As String, ByVal BanqueClient As String, ByVal Montant As Decimal, ByVal nRemise As Decimal, ByVal Observation As String) As FrRemiseDetailRow
            Dim rowFrRemiseDetailRow As FrRemiseDetailRow = CType(Me.NewRow,FrRemiseDetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailRemise, nReglement, DateReglement, Nom, nMode, BanqueClient, Montant, nRemise, Observation}
            rowFrRemiseDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFrRemiseDetailRow)
            Return rowFrRemiseDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FrRemiseDetailDataTable = CType(MyBase.Clone,FrRemiseDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FrRemiseDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailRemise = MyBase.Columns("nDetailRemise")
            Me.columnnReglement = MyBase.Columns("nReglement")
            Me.columnDateReglement = MyBase.Columns("DateReglement")
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnnMode = MyBase.Columns("nMode")
            Me.columnBanqueClient = MyBase.Columns("BanqueClient")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnnRemise = MyBase.Columns("nRemise")
            Me.columnObservation = MyBase.Columns("Observation")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailRemise = New Global.System.Data.DataColumn("nDetailRemise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailRemise)
            Me.columnnReglement = New Global.System.Data.DataColumn("nReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnReglement)
            Me.columnDateReglement = New Global.System.Data.DataColumn("DateReglement", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateReglement)
            Me.columnNom = New Global.System.Data.DataColumn("Nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnnMode = New Global.System.Data.DataColumn("nMode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnMode)
            Me.columnBanqueClient = New Global.System.Data.DataColumn("BanqueClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanqueClient)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnnRemise = New Global.System.Data.DataColumn("nRemise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRemise)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnnDetailRemise.AllowDBNull = false
            Me.columnnReglement.AllowDBNull = false
            Me.columnNom.MaxLength = 255
            Me.columnnMode.MaxLength = 255
            Me.columnBanqueClient.MaxLength = 255
            Me.columnnRemise.AllowDBNull = false
            Me.columnObservation.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFrRemiseDetailRow() As FrRemiseDetailRow
            Return CType(Me.NewRow,FrRemiseDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FrRemiseDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FrRemiseDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FrRemiseDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent FrRemiseDetailRowChanged(Me, New FrRemiseDetailRowChangeEvent(CType(e.Row,FrRemiseDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FrRemiseDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent FrRemiseDetailRowChanging(Me, New FrRemiseDetailRowChangeEvent(CType(e.Row,FrRemiseDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FrRemiseDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent FrRemiseDetailRowDeleted(Me, New FrRemiseDetailRowChangeEvent(CType(e.Row,FrRemiseDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FrRemiseDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent FrRemiseDetailRowDeleting(Me, New FrRemiseDetailRowChangeEvent(CType(e.Row,FrRemiseDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFrRemiseDetailRow(ByVal row As FrRemiseDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FrRemiseDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReglementDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnReglement As Global.System.Data.DataColumn
        
        Private columnDateReglement As Global.System.Data.DataColumn
        
        Private columnDateDepot As Global.System.Data.DataColumn
        
        Private columnnEntreprise As Global.System.Data.DataColumn
        
        Private columnnMode As Global.System.Data.DataColumn
        
        Private columnnCheque As Global.System.Data.DataColumn
        
        Private columnModeReglement As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnPerte As Global.System.Data.DataColumn
        
        Private columnProfit As Global.System.Data.DataColumn
        
        Private columnDepose As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnTxEscompte As Global.System.Data.DataColumn
        
        Private columnMontantEscompte As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnBanqueClient As Global.System.Data.DataColumn
        
        Private columnPayeur As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Reglement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateDepotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateDepot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nModeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnMode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nChequeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCheque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModeReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PerteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProfitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProfit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxEscompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxEscompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantEscompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantEscompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BanqueClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanqueClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReglementRow
            Get
                Return CType(Me.Rows(index),ReglementRow)
            End Get
        End Property
        
        Public Event ReglementRowChanging As ReglementRowChangeEventHandler
        
        Public Event ReglementRowChanged As ReglementRowChangeEventHandler
        
        Public Event ReglementRowDeleting As ReglementRowChangeEventHandler
        
        Public Event ReglementRowDeleted As ReglementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReglementRow(ByVal row As ReglementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReglementRow( _
                    ByVal nReglement As Decimal,  _
                    ByVal DateReglement As Date,  _
                    ByVal DateDepot As Date,  _
                    ByVal nEntreprise As Decimal,  _
                    ByVal nMode As String,  _
                    ByVal nCheque As String,  _
                    ByVal ModeReglement As String,  _
                    ByVal Observation As String,  _
                    ByVal Montant As Decimal,  _
                    ByVal Perte As Decimal,  _
                    ByVal Profit As Decimal,  _
                    ByVal Depose As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal TxEscompte As Decimal,  _
                    ByVal MontantEscompte As Decimal,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal BanqueClient As String,  _
                    ByVal Payeur As String) As ReglementRow
            Dim rowReglementRow As ReglementRow = CType(Me.NewRow,ReglementRow)
            Dim columnValuesArray() As Object = New Object() {nReglement, DateReglement, DateDepot, nEntreprise, nMode, nCheque, ModeReglement, Observation, Montant, Perte, Profit, Depose, ExportCompta, TxEscompte, MontantEscompte, DateExportCompta, BanqueClient, Payeur}
            rowReglementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReglementRow)
            Return rowReglementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynReglement(ByVal nReglement As Decimal) As ReglementRow
            Return CType(Me.Rows.Find(New Object() {nReglement}),ReglementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReglementDataTable = CType(MyBase.Clone,ReglementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReglementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnReglement = MyBase.Columns("nReglement")
            Me.columnDateReglement = MyBase.Columns("DateReglement")
            Me.columnDateDepot = MyBase.Columns("DateDepot")
            Me.columnnEntreprise = MyBase.Columns("nEntreprise")
            Me.columnnMode = MyBase.Columns("nMode")
            Me.columnnCheque = MyBase.Columns("nCheque")
            Me.columnModeReglement = MyBase.Columns("ModeReglement")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnPerte = MyBase.Columns("Perte")
            Me.columnProfit = MyBase.Columns("Profit")
            Me.columnDepose = MyBase.Columns("Depose")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnTxEscompte = MyBase.Columns("TxEscompte")
            Me.columnMontantEscompte = MyBase.Columns("MontantEscompte")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnBanqueClient = MyBase.Columns("BanqueClient")
            Me.columnPayeur = MyBase.Columns("Payeur")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnReglement = New Global.System.Data.DataColumn("nReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnReglement)
            Me.columnDateReglement = New Global.System.Data.DataColumn("DateReglement", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateReglement)
            Me.columnDateDepot = New Global.System.Data.DataColumn("DateDepot", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateDepot)
            Me.columnnEntreprise = New Global.System.Data.DataColumn("nEntreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnEntreprise)
            Me.columnnMode = New Global.System.Data.DataColumn("nMode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnMode)
            Me.columnnCheque = New Global.System.Data.DataColumn("nCheque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCheque)
            Me.columnModeReglement = New Global.System.Data.DataColumn("ModeReglement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModeReglement)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnPerte = New Global.System.Data.DataColumn("Perte", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerte)
            Me.columnProfit = New Global.System.Data.DataColumn("Profit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProfit)
            Me.columnDepose = New Global.System.Data.DataColumn("Depose", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepose)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnTxEscompte = New Global.System.Data.DataColumn("TxEscompte", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxEscompte)
            Me.columnMontantEscompte = New Global.System.Data.DataColumn("MontantEscompte", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantEscompte)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnBanqueClient = New Global.System.Data.DataColumn("BanqueClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanqueClient)
            Me.columnPayeur = New Global.System.Data.DataColumn("Payeur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayeur)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnReglement}, true))
            Me.columnnReglement.AllowDBNull = false
            Me.columnnReglement.Unique = true
            Me.columnnMode.MaxLength = 255
            Me.columnnCheque.MaxLength = 255
            Me.columnModeReglement.MaxLength = 255
            Me.columnObservation.MaxLength = 255
            Me.columnDepose.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
            Me.columnBanqueClient.MaxLength = 255
            Me.columnPayeur.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReglementRow() As ReglementRow
            Return CType(Me.NewRow,ReglementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReglementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReglementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReglementRowChangedEvent) Is Nothing) Then
                RaiseEvent ReglementRowChanged(Me, New ReglementRowChangeEvent(CType(e.Row,ReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReglementRowChangingEvent) Is Nothing) Then
                RaiseEvent ReglementRowChanging(Me, New ReglementRowChangeEvent(CType(e.Row,ReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReglementRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReglementRowDeleted(Me, New ReglementRowChangeEvent(CType(e.Row,ReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReglementRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReglementRowDeleting(Me, New ReglementRowChangeEvent(CType(e.Row,ReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReglementRow(ByVal row As ReglementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReglementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FrReglementDetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailReglement As Global.System.Data.DataColumn
        
        Private columnndevis As Global.System.Data.DataColumn
        
        Private columnnfacture As Global.System.Data.DataColumn
        
        Private columndatefacture As Global.System.Data.DataColumn
        
        Private columnclient As Global.System.Data.DataColumn
        
        Private columnmontantTTC As Global.System.Data.DataColumn
        
        Private columnmontant As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FrReglementDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ndevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnndevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nfactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnfacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datefactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatefacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FrReglementDetailRow
            Get
                Return CType(Me.Rows(index),FrReglementDetailRow)
            End Get
        End Property
        
        Public Event FrReglementDetailRowChanging As FrReglementDetailRowChangeEventHandler
        
        Public Event FrReglementDetailRowChanged As FrReglementDetailRowChangeEventHandler
        
        Public Event FrReglementDetailRowDeleting As FrReglementDetailRowChangeEventHandler
        
        Public Event FrReglementDetailRowDeleted As FrReglementDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFrReglementDetailRow(ByVal row As FrReglementDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFrReglementDetailRow(ByVal nDetailReglement As Decimal, ByVal ndevis As Decimal, ByVal nfacture As Decimal, ByVal datefacture As Date, ByVal client As String, ByVal montantTTC As Decimal, ByVal montant As Decimal) As FrReglementDetailRow
            Dim rowFrReglementDetailRow As FrReglementDetailRow = CType(Me.NewRow,FrReglementDetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailReglement, ndevis, nfacture, datefacture, client, montantTTC, montant}
            rowFrReglementDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFrReglementDetailRow)
            Return rowFrReglementDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FrReglementDetailDataTable = CType(MyBase.Clone,FrReglementDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FrReglementDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailReglement = MyBase.Columns("nDetailReglement")
            Me.columnndevis = MyBase.Columns("ndevis")
            Me.columnnfacture = MyBase.Columns("nfacture")
            Me.columndatefacture = MyBase.Columns("datefacture")
            Me.columnclient = MyBase.Columns("client")
            Me.columnmontantTTC = MyBase.Columns("montantTTC")
            Me.columnmontant = MyBase.Columns("montant")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailReglement = New Global.System.Data.DataColumn("nDetailReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailReglement)
            Me.columnndevis = New Global.System.Data.DataColumn("ndevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnndevis)
            Me.columnnfacture = New Global.System.Data.DataColumn("nfacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnfacture)
            Me.columndatefacture = New Global.System.Data.DataColumn("datefacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatefacture)
            Me.columnclient = New Global.System.Data.DataColumn("client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclient)
            Me.columnmontantTTC = New Global.System.Data.DataColumn("montantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontantTTC)
            Me.columnmontant = New Global.System.Data.DataColumn("montant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontant)
            Me.columnnDetailReglement.AllowDBNull = false
            Me.columnndevis.AllowDBNull = false
            Me.columnclient.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFrReglementDetailRow() As FrReglementDetailRow
            Return CType(Me.NewRow,FrReglementDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FrReglementDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FrReglementDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FrReglementDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent FrReglementDetailRowChanged(Me, New FrReglementDetailRowChangeEvent(CType(e.Row,FrReglementDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FrReglementDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent FrReglementDetailRowChanging(Me, New FrReglementDetailRowChangeEvent(CType(e.Row,FrReglementDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FrReglementDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent FrReglementDetailRowDeleted(Me, New FrReglementDetailRowChangeEvent(CType(e.Row,FrReglementDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FrReglementDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent FrReglementDetailRowDeleting(Me, New FrReglementDetailRowChangeEvent(CType(e.Row,FrReglementDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFrReglementDetailRow(ByVal row As FrReglementDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FrReglementDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PiecesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnnomObs As Global.System.Data.DataColumn
        
        Private columnDateEcheance2 As Global.System.Data.DataColumn
        
        Private columnNom As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnnRelance As Global.System.Data.DataColumn
        
        Private columnDateImpr As Global.System.Data.DataColumn
        
        Private columnDateRelance As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        Private columnCommercial As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnreste As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnPrescripteur As Global.System.Data.DataColumn
        
        Private columnDepot As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Pieces"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomObsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomObs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nRelanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRelance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateImprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateImpr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PiecesRow
            Get
                Return CType(Me.Rows(index),PiecesRow)
            End Get
        End Property
        
        Public Event PiecesRowChanging As PiecesRowChangeEventHandler
        
        Public Event PiecesRowChanged As PiecesRowChangeEventHandler
        
        Public Event PiecesRowDeleting As PiecesRowChangeEventHandler
        
        Public Event PiecesRowDeleted As PiecesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPiecesRow(ByVal row As PiecesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPiecesRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal nClient As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal Paye As Boolean,  _
                    ByVal nomObs As String,  _
                    ByVal DateEcheance2 As Date,  _
                    ByVal Nom As String,  _
                    ByVal Observation As String,  _
                    ByVal nRelance As Integer,  _
                    ByVal DateImpr As Date,  _
                    ByVal DateRelance As Date,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal Commercial As String,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal reste As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal Secteur As String,  _
                    ByVal Prescripteur As String,  _
                    ByVal Depot As String) As PiecesRow
            Dim rowPiecesRow As PiecesRow = CType(Me.NewRow,PiecesRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nFacture, DateFacture, DateEcheance, nClient, MontantTTC, Paye, nomObs, DateEcheance2, Nom, Observation, nRelance, DateImpr, DateRelance, FacturationTTC, Commercial, nCommercial, reste, AdresseFacture, Secteur, Prescripteur, Depot}
            rowPiecesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPiecesRow)
            Return rowPiecesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPiecesRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal nClient As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal Paye As Boolean,  _
                    ByVal Nom As String,  _
                    ByVal Observation As String,  _
                    ByVal nRelance As Integer,  _
                    ByVal DateImpr As Date,  _
                    ByVal DateRelance As Date,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal Commercial As String,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal reste As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal Secteur As String,  _
                    ByVal Prescripteur As String,  _
                    ByVal Depot As String) As PiecesRow
            Dim rowPiecesRow As PiecesRow = CType(Me.NewRow,PiecesRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nFacture, DateFacture, DateEcheance, nClient, MontantTTC, Paye, Nothing, Nothing, Nom, Observation, nRelance, DateImpr, DateRelance, FacturationTTC, Commercial, nCommercial, reste, AdresseFacture, Secteur, Prescripteur, Depot}
            rowPiecesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPiecesRow)
            Return rowPiecesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As PiecesRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),PiecesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PiecesDataTable = CType(MyBase.Clone,PiecesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PiecesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnnomObs = MyBase.Columns("nomObs")
            Me.columnDateEcheance2 = MyBase.Columns("DateEcheance2")
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnnRelance = MyBase.Columns("nRelance")
            Me.columnDateImpr = MyBase.Columns("DateImpr")
            Me.columnDateRelance = MyBase.Columns("DateRelance")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
            Me.columnCommercial = MyBase.Columns("Commercial")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnreste = MyBase.Columns("reste")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnPrescripteur = MyBase.Columns("Prescripteur")
            Me.columnDepot = MyBase.Columns("Depot")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnnomObs = New Global.System.Data.DataColumn("nomObs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomObs)
            Me.columnDateEcheance2 = New Global.System.Data.DataColumn("DateEcheance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance2)
            Me.columnNom = New Global.System.Data.DataColumn("Nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnnRelance = New Global.System.Data.DataColumn("nRelance", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRelance)
            Me.columnDateImpr = New Global.System.Data.DataColumn("DateImpr", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateImpr)
            Me.columnDateRelance = New Global.System.Data.DataColumn("DateRelance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.columnCommercial = New Global.System.Data.DataColumn("Commercial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommercial)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnreste = New Global.System.Data.DataColumn("reste", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreste)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnPrescripteur = New Global.System.Data.DataColumn("Prescripteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrescripteur)
            Me.columnDepot = New Global.System.Data.DataColumn("Depot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepot)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnOrigine.MaxLength = 1073741823
            Me.columnPaye.AllowDBNull = false
            Me.columnnomObs.ReadOnly = true
            Me.columnDateEcheance2.ReadOnly = true
            Me.columnNom.MaxLength = 255
            Me.columnObservation.MaxLength = 1073741823
            Me.columnCommercial.MaxLength = 255
            Me.columnreste.ReadOnly = true
            Me.columnAdresseFacture.MaxLength = 2147483647
            Me.columnSecteur.MaxLength = 50
            Me.columnPrescripteur.MaxLength = 255
            Me.columnDepot.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPiecesRow() As PiecesRow
            Return CType(Me.NewRow,PiecesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PiecesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PiecesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.nomObsColumn.Expression = "nom + iif(observation is null,'', ' '+ observation)"
            Me.DateEcheance2Column.Expression = "iif(paye,null,DateEcheance)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PiecesRowChangedEvent) Is Nothing) Then
                RaiseEvent PiecesRowChanged(Me, New PiecesRowChangeEvent(CType(e.Row,PiecesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PiecesRowChangingEvent) Is Nothing) Then
                RaiseEvent PiecesRowChanging(Me, New PiecesRowChangeEvent(CType(e.Row,PiecesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PiecesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PiecesRowDeleted(Me, New PiecesRowChangeEvent(CType(e.Row,PiecesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PiecesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PiecesRowDeleting(Me, New PiecesRowChangeEvent(CType(e.Row,PiecesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePiecesRow(ByVal row As PiecesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PiecesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ChildObjectsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columntablename As Global.System.Data.DataColumn
        
        Private columnlib As Global.System.Data.DataColumn
        
        Private columnnb As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ChildObjects"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tablenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntablename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ChildObjectsRow
            Get
                Return CType(Me.Rows(index),ChildObjectsRow)
            End Get
        End Property
        
        Public Event ChildObjectsRowChanging As ChildObjectsRowChangeEventHandler
        
        Public Event ChildObjectsRowChanged As ChildObjectsRowChangeEventHandler
        
        Public Event ChildObjectsRowDeleting As ChildObjectsRowChangeEventHandler
        
        Public Event ChildObjectsRowDeleted As ChildObjectsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddChildObjectsRow(ByVal row As ChildObjectsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddChildObjectsRow(ByVal nDevis As Decimal, ByVal tablename As String, ByVal _lib As String, ByVal nb As Integer) As ChildObjectsRow
            Dim rowChildObjectsRow As ChildObjectsRow = CType(Me.NewRow,ChildObjectsRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, tablename, _lib, nb}
            rowChildObjectsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowChildObjectsRow)
            Return rowChildObjectsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ChildObjectsDataTable = CType(MyBase.Clone,ChildObjectsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ChildObjectsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columntablename = MyBase.Columns("tablename")
            Me.columnlib = MyBase.Columns("lib")
            Me.columnnb = MyBase.Columns("nb")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columntablename = New Global.System.Data.DataColumn("tablename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntablename)
            Me.columnlib = New Global.System.Data.DataColumn("lib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnlib.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "libColumn")
            Me.columnlib.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnlib")
            Me.columnlib.ExtendedProperties.Add("Generator_UserColumnName", "lib")
            MyBase.Columns.Add(Me.columnlib)
            Me.columnnb = New Global.System.Data.DataColumn("nb", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnb)
            Me.columnnDevis.ReadOnly = true
            Me.columntablename.ReadOnly = true
            Me.columntablename.MaxLength = 9
            Me.columnlib.ReadOnly = true
            Me.columnlib.MaxLength = 9
            Me.columnnb.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewChildObjectsRow() As ChildObjectsRow
            Return CType(Me.NewRow,ChildObjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ChildObjectsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ChildObjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ChildObjectsRowChangedEvent) Is Nothing) Then
                RaiseEvent ChildObjectsRowChanged(Me, New ChildObjectsRowChangeEvent(CType(e.Row,ChildObjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ChildObjectsRowChangingEvent) Is Nothing) Then
                RaiseEvent ChildObjectsRowChanging(Me, New ChildObjectsRowChangeEvent(CType(e.Row,ChildObjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ChildObjectsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ChildObjectsRowDeleted(Me, New ChildObjectsRowChangeEvent(CType(e.Row,ChildObjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ChildObjectsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ChildObjectsRowDeleting(Me, New ChildObjectsRowChangeEvent(CType(e.Row,ChildObjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveChildObjectsRow(ByVal row As ChildObjectsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ChildObjectsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pieces_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        Private columnNCompte As Global.System.Data.DataColumn
        
        Private columnNActivite As Global.System.Data.DataColumn
        
        Private columnPrixUAchatHT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pieces_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActivite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUAchatHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUAchatHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pieces_DetailRow
            Get
                Return CType(Me.Rows(index),Pieces_DetailRow)
            End Get
        End Property
        
        Public Event Pieces_DetailRowChanging As Pieces_DetailRowChangeEventHandler
        
        Public Event Pieces_DetailRowChanged As Pieces_DetailRowChangeEventHandler
        
        Public Event Pieces_DetailRowDeleting As Pieces_DetailRowChangeEventHandler
        
        Public Event Pieces_DetailRowDeleted As Pieces_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPieces_DetailRow(ByVal row As Pieces_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPieces_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Decimal,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal,  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Decimal) As Pieces_DetailRow
            Dim rowPieces_DetailRow As Pieces_DetailRow = CType(Me.NewRow,Pieces_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUAchatHT}
            rowPieces_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPieces_DetailRow)
            Return rowPieces_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As Pieces_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),Pieces_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pieces_DetailDataTable = CType(MyBase.Clone,Pieces_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pieces_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
            Me.columnNCompte = MyBase.Columns("NCompte")
            Me.columnNActivite = MyBase.Columns("NActivite")
            Me.columnPrixUAchatHT = MyBase.Columns("PrixUAchatHT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.columnNCompte = New Global.System.Data.DataColumn("NCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompte)
            Me.columnNActivite = New Global.System.Data.DataColumn("NActivite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActivite)
            Me.columnPrixUAchatHT = New Global.System.Data.DataColumn("PrixUAchatHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUAchatHT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
            Me.columnNLot.MaxLength = 50
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 1073741823
            Me.columnLibUnite1.MaxLength = 5
            Me.columnLibUnite2.MaxLength = 5
            Me.columnTTVA.MaxLength = 50
            Me.columnNCompte.MaxLength = 8
            Me.columnNActivite.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPieces_DetailRow() As Pieces_DetailRow
            Return CType(Me.NewRow,Pieces_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pieces_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pieces_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pieces_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent Pieces_DetailRowChanged(Me, New Pieces_DetailRowChangeEvent(CType(e.Row,Pieces_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pieces_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent Pieces_DetailRowChanging(Me, New Pieces_DetailRowChangeEvent(CType(e.Row,Pieces_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pieces_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pieces_DetailRowDeleted(Me, New Pieces_DetailRowChangeEvent(CType(e.Row,Pieces_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pieces_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pieces_DetailRowDeleting(Me, New Pieces_DetailRowChangeEvent(CType(e.Row,Pieces_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePieces_DetailRow(ByVal row As Pieces_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pieces_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AvancesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columndate As Global.System.Data.DataColumn
        
        Private columnReste As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Avances"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AvancesRow
            Get
                Return CType(Me.Rows(index),AvancesRow)
            End Get
        End Property
        
        Public Event AvancesRowChanging As AvancesRowChangeEventHandler
        
        Public Event AvancesRowChanged As AvancesRowChangeEventHandler
        
        Public Event AvancesRowDeleting As AvancesRowChangeEventHandler
        
        Public Event AvancesRowDeleted As AvancesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAvancesRow(ByVal row As AvancesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAvancesRow(ByVal Type As String, ByVal id As Decimal, ByVal Libelle As String, ByVal _date As Date, ByVal Reste As Decimal, ByVal Montant As Decimal) As AvancesRow
            Dim rowAvancesRow As AvancesRow = CType(Me.NewRow,AvancesRow)
            Dim columnValuesArray() As Object = New Object() {Type, id, Libelle, _date, Reste, Montant}
            rowAvancesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAvancesRow)
            Return rowAvancesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AvancesDataTable = CType(MyBase.Clone,AvancesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AvancesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnType = MyBase.Columns("Type")
            Me.columnid = MyBase.Columns("id")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columndate = MyBase.Columns("date")
            Me.columnReste = MyBase.Columns("Reste")
            Me.columnMontant = MyBase.Columns("Montant")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columndate = New Global.System.Data.DataColumn("date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn")
            Me.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate")
            Me.columndate.ExtendedProperties.Add("Generator_UserColumnName", "date")
            MyBase.Columns.Add(Me.columndate)
            Me.columnReste = New Global.System.Data.DataColumn("Reste", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReste)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnType.ReadOnly = true
            Me.columnType.MaxLength = 1
            Me.columnLibelle.ReadOnly = true
            Me.columnLibelle.MaxLength = 513
            Me.columnReste.ReadOnly = true
            Me.columnMontant.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAvancesRow() As AvancesRow
            Return CType(Me.NewRow,AvancesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AvancesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AvancesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AvancesRowChangedEvent) Is Nothing) Then
                RaiseEvent AvancesRowChanged(Me, New AvancesRowChangeEvent(CType(e.Row,AvancesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AvancesRowChangingEvent) Is Nothing) Then
                RaiseEvent AvancesRowChanging(Me, New AvancesRowChangeEvent(CType(e.Row,AvancesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AvancesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AvancesRowDeleted(Me, New AvancesRowChangeEvent(CType(e.Row,AvancesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AvancesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AvancesRowDeleting(Me, New AvancesRowChangeEvent(CType(e.Row,AvancesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAvancesRow(ByVal row As AvancesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AvancesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Remise_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailRemise As Global.System.Data.DataColumn
        
        Private columnnRemise As Global.System.Data.DataColumn
        
        Private columnnReglement As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Remise_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Remise_DetailRow
            Get
                Return CType(Me.Rows(index),Remise_DetailRow)
            End Get
        End Property
        
        Public Event Remise_DetailRowChanging As Remise_DetailRowChangeEventHandler
        
        Public Event Remise_DetailRowChanged As Remise_DetailRowChangeEventHandler
        
        Public Event Remise_DetailRowDeleting As Remise_DetailRowChangeEventHandler
        
        Public Event Remise_DetailRowDeleted As Remise_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRemise_DetailRow(ByVal row As Remise_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRemise_DetailRow(ByVal nDetailRemise As Decimal, ByVal parentRemiseRowByFK_Remise_Detail_Remise As RemiseRow, ByVal nReglement As Decimal) As Remise_DetailRow
            Dim rowRemise_DetailRow As Remise_DetailRow = CType(Me.NewRow,Remise_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailRemise, Nothing, nReglement}
            If (Not (parentRemiseRowByFK_Remise_Detail_Remise) Is Nothing) Then
                columnValuesArray(1) = parentRemiseRowByFK_Remise_Detail_Remise(0)
            End If
            rowRemise_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRemise_DetailRow)
            Return rowRemise_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailRemise(ByVal nDetailRemise As Decimal) As Remise_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailRemise}),Remise_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Remise_DetailDataTable = CType(MyBase.Clone,Remise_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Remise_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailRemise = MyBase.Columns("nDetailRemise")
            Me.columnnRemise = MyBase.Columns("nRemise")
            Me.columnnReglement = MyBase.Columns("nReglement")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailRemise = New Global.System.Data.DataColumn("nDetailRemise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailRemise)
            Me.columnnRemise = New Global.System.Data.DataColumn("nRemise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRemise)
            Me.columnnReglement = New Global.System.Data.DataColumn("nReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnReglement)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDetailRemise}, true))
            Me.columnnDetailRemise.AllowDBNull = false
            Me.columnnDetailRemise.Unique = true
            Me.columnnRemise.AllowDBNull = false
            Me.columnnReglement.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRemise_DetailRow() As Remise_DetailRow
            Return CType(Me.NewRow,Remise_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Remise_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Remise_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Remise_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent Remise_DetailRowChanged(Me, New Remise_DetailRowChangeEvent(CType(e.Row,Remise_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Remise_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent Remise_DetailRowChanging(Me, New Remise_DetailRowChangeEvent(CType(e.Row,Remise_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Remise_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent Remise_DetailRowDeleted(Me, New Remise_DetailRowChangeEvent(CType(e.Row,Remise_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Remise_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent Remise_DetailRowDeleting(Me, New Remise_DetailRowChangeEvent(CType(e.Row,Remise_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRemise_DetailRow(ByVal row As Remise_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Remise_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProduitDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnProduit As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnLibelleLong As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnPrixAHT As Global.System.Data.DataColumn
        
        Private columnPrixATTC As Global.System.Data.DataColumn
        
        Private columnPrixVHT As Global.System.Data.DataColumn
        
        Private columnPrixVTTC As Global.System.Data.DataColumn
        
        Private columnIsPrixHT As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnProduitAchat As Global.System.Data.DataColumn
        
        Private columnProduitVente As Global.System.Data.DataColumn
        
        Private columnNCompteA As Global.System.Data.DataColumn
        
        Private columnNActiviteA As Global.System.Data.DataColumn
        
        Private columnNCompteV As Global.System.Data.DataColumn
        
        Private columnNActiviteV As Global.System.Data.DataColumn
        
        Private columnFamille1 As Global.System.Data.DataColumn
        
        Private columnFamille2 As Global.System.Data.DataColumn
        
        Private columnFamille3 As Global.System.Data.DataColumn
        
        Private columnU1U2Independant As Global.System.Data.DataColumn
        
        Private columnU1xU2 As Global.System.Data.DataColumn
        
        Private columnCodeBarre As Global.System.Data.DataColumn
        
        Private columnInactif As Global.System.Data.DataColumn
        
        Private columnCoefU2 As Global.System.Data.DataColumn
        
        Private columnTypeFacturation As Global.System.Data.DataColumn
        
        Private columnCoefAV As Global.System.Data.DataColumn
        
        Private columnProduitCompose As Global.System.Data.DataColumn
        
        Private columnImage As Global.System.Data.DataColumn
        
        Private columnGestionStock As Global.System.Data.DataColumn
        
        Private columnDecompteAuto As Global.System.Data.DataColumn
        
        Private columnRefFournisseur As Global.System.Data.DataColumn
        
        Private columnnFournisseur As Global.System.Data.DataColumn
        
        Private columnIsSortieImpr As Global.System.Data.DataColumn
        
        Private columnIsEnVente As Global.System.Data.DataColumn
        
        Private columnAMM As Global.System.Data.DataColumn
        
        Private columnTAXSM As Global.System.Data.DataColumn
        
        Private columnIsAMM As Global.System.Data.DataColumn
        
        Private columnDateMaj As Global.System.Data.DataColumn
        
        Private columnisComm As Global.System.Data.DataColumn
        
        Private columnConditionnement As Global.System.Data.DataColumn
        
        Private columnSeuilStock As Global.System.Data.DataColumn
        
        Private columnNCompteX As Global.System.Data.DataColumn
        
        Private columnNActiviteX As Global.System.Data.DataColumn
        
        Private columnIngredients As Global.System.Data.DataColumn
        
        Private columnCodeProduit_Libelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Produit"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleLongColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelleLong
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixAHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixAHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixATTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixATTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPrixHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPrixHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitAchatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitAchat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1U2IndependantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1U2Independant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1xU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1xU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeBarreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeBarre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InactifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefAVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefAV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitComposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitCompose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GestionStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGestionStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DecompteAutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDecompteAuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefFournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSortieImprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSortieImpr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsEnVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsEnVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXSMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXSM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsAMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsAMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateMajColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateMaj
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isCommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConditionnementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConditionnement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeuilStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeuilStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngredientsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngredients
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduit_LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit_Libelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProduitRow
            Get
                Return CType(Me.Rows(index),ProduitRow)
            End Get
        End Property
        
        Public Event ProduitRowChanging As ProduitRowChangeEventHandler
        
        Public Event ProduitRowChanged As ProduitRowChangeEventHandler
        
        Public Event ProduitRowDeleting As ProduitRowChangeEventHandler
        
        Public Event ProduitRowDeleted As ProduitRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduitRow(ByVal row As ProduitRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduitRow( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Decimal,  _
                    ByVal PrixATTC As Decimal,  _
                    ByVal PrixVHT As Decimal,  _
                    ByVal PrixVTTC As Decimal,  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Short,  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Boolean,  _
                    ByVal U1xU2 As Decimal,  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Boolean,  _
                    ByVal CoefU2 As Decimal,  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Decimal,  _
                    ByVal ProduitCompose As Boolean,  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Boolean,  _
                    ByVal DecompteAuto As Boolean,  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Decimal,  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Decimal,  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Date,  _
                    ByVal isComm As Boolean,  _
                    ByVal Conditionnement As Integer,  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String,  _
                    ByVal CodeProduit_Libelle As String) As ProduitRow
            Dim rowProduitRow As ProduitRow = CType(Me.NewRow,ProduitRow)
            Dim columnValuesArray() As Object = New Object() {nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredients, CodeProduit_Libelle}
            rowProduitRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduitRow)
            Return rowProduitRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduitRow( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Decimal,  _
                    ByVal PrixATTC As Decimal,  _
                    ByVal PrixVHT As Decimal,  _
                    ByVal PrixVTTC As Decimal,  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Short,  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Boolean,  _
                    ByVal U1xU2 As Decimal,  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Boolean,  _
                    ByVal CoefU2 As Decimal,  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Decimal,  _
                    ByVal ProduitCompose As Boolean,  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Boolean,  _
                    ByVal DecompteAuto As Boolean,  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Decimal,  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Decimal,  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Date,  _
                    ByVal isComm As Boolean,  _
                    ByVal Conditionnement As Integer,  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String) As ProduitRow
            Dim rowProduitRow As ProduitRow = CType(Me.NewRow,ProduitRow)
            Dim columnValuesArray() As Object = New Object() {nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredients, Nothing}
            rowProduitRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduitRow)
            Return rowProduitRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynProduit(ByVal nProduit As Decimal) As ProduitRow
            Return CType(Me.Rows.Find(New Object() {nProduit}),ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProduitDataTable = CType(MyBase.Clone,ProduitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProduitDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnProduit = MyBase.Columns("nProduit")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnLibelleLong = MyBase.Columns("LibelleLong")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnPrixAHT = MyBase.Columns("PrixAHT")
            Me.columnPrixATTC = MyBase.Columns("PrixATTC")
            Me.columnPrixVHT = MyBase.Columns("PrixVHT")
            Me.columnPrixVTTC = MyBase.Columns("PrixVTTC")
            Me.columnIsPrixHT = MyBase.Columns("IsPrixHT")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnProduitAchat = MyBase.Columns("ProduitAchat")
            Me.columnProduitVente = MyBase.Columns("ProduitVente")
            Me.columnNCompteA = MyBase.Columns("NCompteA")
            Me.columnNActiviteA = MyBase.Columns("NActiviteA")
            Me.columnNCompteV = MyBase.Columns("NCompteV")
            Me.columnNActiviteV = MyBase.Columns("NActiviteV")
            Me.columnFamille1 = MyBase.Columns("Famille1")
            Me.columnFamille2 = MyBase.Columns("Famille2")
            Me.columnFamille3 = MyBase.Columns("Famille3")
            Me.columnU1U2Independant = MyBase.Columns("U1U2Independant")
            Me.columnU1xU2 = MyBase.Columns("U1xU2")
            Me.columnCodeBarre = MyBase.Columns("CodeBarre")
            Me.columnInactif = MyBase.Columns("Inactif")
            Me.columnCoefU2 = MyBase.Columns("CoefU2")
            Me.columnTypeFacturation = MyBase.Columns("TypeFacturation")
            Me.columnCoefAV = MyBase.Columns("CoefAV")
            Me.columnProduitCompose = MyBase.Columns("ProduitCompose")
            Me.columnImage = MyBase.Columns("Image")
            Me.columnGestionStock = MyBase.Columns("GestionStock")
            Me.columnDecompteAuto = MyBase.Columns("DecompteAuto")
            Me.columnRefFournisseur = MyBase.Columns("RefFournisseur")
            Me.columnnFournisseur = MyBase.Columns("nFournisseur")
            Me.columnIsSortieImpr = MyBase.Columns("IsSortieImpr")
            Me.columnIsEnVente = MyBase.Columns("IsEnVente")
            Me.columnAMM = MyBase.Columns("AMM")
            Me.columnTAXSM = MyBase.Columns("TAXSM")
            Me.columnIsAMM = MyBase.Columns("IsAMM")
            Me.columnDateMaj = MyBase.Columns("DateMaj")
            Me.columnisComm = MyBase.Columns("isComm")
            Me.columnConditionnement = MyBase.Columns("Conditionnement")
            Me.columnSeuilStock = MyBase.Columns("SeuilStock")
            Me.columnNCompteX = MyBase.Columns("NCompteX")
            Me.columnNActiviteX = MyBase.Columns("NActiviteX")
            Me.columnIngredients = MyBase.Columns("Ingredients")
            Me.columnCodeProduit_Libelle = MyBase.Columns("CodeProduit_Libelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnProduit = New Global.System.Data.DataColumn("nProduit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnProduit)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnLibelleLong = New Global.System.Data.DataColumn("LibelleLong", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelleLong)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnPrixAHT = New Global.System.Data.DataColumn("PrixAHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixAHT)
            Me.columnPrixATTC = New Global.System.Data.DataColumn("PrixATTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixATTC)
            Me.columnPrixVHT = New Global.System.Data.DataColumn("PrixVHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVHT)
            Me.columnPrixVTTC = New Global.System.Data.DataColumn("PrixVTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVTTC)
            Me.columnIsPrixHT = New Global.System.Data.DataColumn("IsPrixHT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPrixHT)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnProduitAchat = New Global.System.Data.DataColumn("ProduitAchat", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitAchat)
            Me.columnProduitVente = New Global.System.Data.DataColumn("ProduitVente", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitVente)
            Me.columnNCompteA = New Global.System.Data.DataColumn("NCompteA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteA)
            Me.columnNActiviteA = New Global.System.Data.DataColumn("NActiviteA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteA)
            Me.columnNCompteV = New Global.System.Data.DataColumn("NCompteV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteV)
            Me.columnNActiviteV = New Global.System.Data.DataColumn("NActiviteV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteV)
            Me.columnFamille1 = New Global.System.Data.DataColumn("Famille1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille1)
            Me.columnFamille2 = New Global.System.Data.DataColumn("Famille2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille2)
            Me.columnFamille3 = New Global.System.Data.DataColumn("Famille3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille3)
            Me.columnU1U2Independant = New Global.System.Data.DataColumn("U1U2Independant", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1U2Independant)
            Me.columnU1xU2 = New Global.System.Data.DataColumn("U1xU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1xU2)
            Me.columnCodeBarre = New Global.System.Data.DataColumn("CodeBarre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeBarre)
            Me.columnInactif = New Global.System.Data.DataColumn("Inactif", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactif)
            Me.columnCoefU2 = New Global.System.Data.DataColumn("CoefU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefU2)
            Me.columnTypeFacturation = New Global.System.Data.DataColumn("TypeFacturation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeFacturation)
            Me.columnCoefAV = New Global.System.Data.DataColumn("CoefAV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefAV)
            Me.columnProduitCompose = New Global.System.Data.DataColumn("ProduitCompose", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitCompose)
            Me.columnImage = New Global.System.Data.DataColumn("Image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImage)
            Me.columnGestionStock = New Global.System.Data.DataColumn("GestionStock", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGestionStock)
            Me.columnDecompteAuto = New Global.System.Data.DataColumn("DecompteAuto", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDecompteAuto)
            Me.columnRefFournisseur = New Global.System.Data.DataColumn("RefFournisseur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefFournisseur)
            Me.columnnFournisseur = New Global.System.Data.DataColumn("nFournisseur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFournisseur)
            Me.columnIsSortieImpr = New Global.System.Data.DataColumn("IsSortieImpr", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSortieImpr)
            Me.columnIsEnVente = New Global.System.Data.DataColumn("IsEnVente", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsEnVente)
            Me.columnAMM = New Global.System.Data.DataColumn("AMM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMM)
            Me.columnTAXSM = New Global.System.Data.DataColumn("TAXSM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXSM)
            Me.columnIsAMM = New Global.System.Data.DataColumn("IsAMM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAMM)
            Me.columnDateMaj = New Global.System.Data.DataColumn("DateMaj", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateMaj)
            Me.columnisComm = New Global.System.Data.DataColumn("isComm", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisComm)
            Me.columnConditionnement = New Global.System.Data.DataColumn("Conditionnement", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConditionnement)
            Me.columnSeuilStock = New Global.System.Data.DataColumn("SeuilStock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeuilStock)
            Me.columnNCompteX = New Global.System.Data.DataColumn("NCompteX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteX)
            Me.columnNActiviteX = New Global.System.Data.DataColumn("NActiviteX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteX)
            Me.columnIngredients = New Global.System.Data.DataColumn("Ingredients", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngredients)
            Me.columnCodeProduit_Libelle = New Global.System.Data.DataColumn("CodeProduit_Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit_Libelle)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnProduit}, true))
            Me.columnnProduit.AllowDBNull = false
            Me.columnnProduit.Unique = true
            Me.columnCodeProduit.AllowDBNull = false
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 255
            Me.columnLibelleLong.MaxLength = 1073741823
            Me.columnTTVA.MaxLength = 50
            Me.columnIsPrixHT.AllowDBNull = false
            Me.columnUnite1.MaxLength = 2
            Me.columnUnite2.MaxLength = 2
            Me.columnProduitAchat.AllowDBNull = false
            Me.columnProduitVente.AllowDBNull = false
            Me.columnNCompteA.MaxLength = 8
            Me.columnNActiviteA.MaxLength = 4
            Me.columnNCompteV.MaxLength = 8
            Me.columnNActiviteV.MaxLength = 8
            Me.columnFamille2.MaxLength = 50
            Me.columnFamille3.MaxLength = 50
            Me.columnCodeBarre.MaxLength = 13
            Me.columnTypeFacturation.MaxLength = 50
            Me.columnImage.MaxLength = 1073741823
            Me.columnRefFournisseur.MaxLength = 255
            Me.columnIsSortieImpr.AllowDBNull = false
            Me.columnIsEnVente.AllowDBNull = false
            Me.columnAMM.MaxLength = 10
            Me.columnIsAMM.AllowDBNull = false
            Me.columnSeuilStock.AllowDBNull = false
            Me.columnNCompteX.MaxLength = 8
            Me.columnNActiviteX.MaxLength = 4
            Me.columnIngredients.MaxLength = 1073741823
            Me.columnCodeProduit_Libelle.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduitRow() As ProduitRow
            Return CType(Me.NewRow,ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProduitRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.CodeProduit_LibelleColumn.Expression = "CodeProduit + ' - ' + Libelle"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProduitRowChangedEvent) Is Nothing) Then
                RaiseEvent ProduitRowChanged(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProduitRowChangingEvent) Is Nothing) Then
                RaiseEvent ProduitRowChanging(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProduitRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProduitRowDeleted(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProduitRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProduitRowDeleting(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduitRow(ByVal row As ProduitRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsPieces = New DsPieces
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProduitDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BanqueRow
        Inherits Global.System.Data.DataRow
        
        Private tableBanque As BanqueDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBanque = CType(Me.Table,BanqueDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nBanque() As Decimal
            Get
                Return CType(Me(Me.tableBanque.nBanqueColumn),Decimal)
            End Get
            Set
                Me(Me.tableBanque.nBanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompte() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.NCompteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompte' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.NCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActivite() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.NActiviteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActivite' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.NActiviteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBCodeAgence() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.RIBCodeAgenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBCodeAgence' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.RIBCodeAgenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBCodeGuichet() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.RIBCodeGuichetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBCodeGuichet' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.RIBCodeGuichetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBNCompte() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.RIBNCompteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBNCompte' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.RIBNCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBCle() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.RIBCleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBCle' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.RIBCleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBNEmetteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.RIBNEmetteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBNEmetteur' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.RIBNEmetteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableBanque.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableBanque.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteNull() As Boolean
            Return Me.IsNull(Me.tableBanque.NCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteNull()
            Me(Me.tableBanque.NCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteNull() As Boolean
            Return Me.IsNull(Me.tableBanque.NActiviteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteNull()
            Me(Me.tableBanque.NActiviteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBCodeAgenceNull() As Boolean
            Return Me.IsNull(Me.tableBanque.RIBCodeAgenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBCodeAgenceNull()
            Me(Me.tableBanque.RIBCodeAgenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBCodeGuichetNull() As Boolean
            Return Me.IsNull(Me.tableBanque.RIBCodeGuichetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBCodeGuichetNull()
            Me(Me.tableBanque.RIBCodeGuichetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBNCompteNull() As Boolean
            Return Me.IsNull(Me.tableBanque.RIBNCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBNCompteNull()
            Me(Me.tableBanque.RIBNCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBCleNull() As Boolean
            Return Me.IsNull(Me.tableBanque.RIBCleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBCleNull()
            Me(Me.tableBanque.RIBCleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBNEmetteurNull() As Boolean
            Return Me.IsNull(Me.tableBanque.RIBNEmetteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBNEmetteurNull()
            Me(Me.tableBanque.RIBNEmetteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRemiseRows() As RemiseRow()
            If (Me.Table.ChildRelations("FK_Remise_Banque") Is Nothing) Then
                Return New RemiseRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Remise_Banque")),RemiseRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RemiseRow
        Inherits Global.System.Data.DataRow
        
        Private tableRemise As RemiseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRemise = CType(Me.Table,RemiseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nRemise() As Decimal
            Get
                Return CType(Me(Me.tableRemise.nRemiseColumn),Decimal)
            End Get
            Set
                Me(Me.tableRemise.nRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nRemiseBanque() As String
            Get
                Try 
                    Return CType(Me(Me.tableRemise.nRemiseBanqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nRemiseBanque' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.nRemiseBanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRemise() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRemise.DateRemiseColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRemise' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.DateRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeRemise() As String
            Get
                Try 
                    Return CType(Me(Me.tableRemise.TypeRemiseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeRemise' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.TypeRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableRemise.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRemise.MontantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Montant' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NExportRemise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRemise.NExportRemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NExportRemise' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.NExportRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRemise.ExportComptaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExportCompta' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRemise.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExportCompta' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nBanque() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRemise.nBanqueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nBanque' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.nBanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomBanque() As String
            Get
                Try 
                    Return CType(Me(Me.tableRemise.NomBanqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NomBanque' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.NomBanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BanqueRow() As BanqueRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Remise_Banque")),BanqueRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Remise_Banque"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnRemiseBanqueNull() As Boolean
            Return Me.IsNull(Me.tableRemise.nRemiseBanqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnRemiseBanqueNull()
            Me(Me.tableRemise.nRemiseBanqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRemiseNull() As Boolean
            Return Me.IsNull(Me.tableRemise.DateRemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRemiseNull()
            Me(Me.tableRemise.DateRemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeRemiseNull() As Boolean
            Return Me.IsNull(Me.tableRemise.TypeRemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeRemiseNull()
            Me(Me.tableRemise.TypeRemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableRemise.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableRemise.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableRemise.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableRemise.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNExportRemiseNull() As Boolean
            Return Me.IsNull(Me.tableRemise.NExportRemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNExportRemiseNull()
            Me(Me.tableRemise.NExportRemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableRemise.ExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExportComptaNull()
            Me(Me.tableRemise.ExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableRemise.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableRemise.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnBanqueNull() As Boolean
            Return Me.IsNull(Me.tableRemise.nBanqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnBanqueNull()
            Me(Me.tableRemise.nBanqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomBanqueNull() As Boolean
            Return Me.IsNull(Me.tableRemise.NomBanqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomBanqueNull()
            Me(Me.tableRemise.NomBanqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRemise_DetailRows() As Remise_DetailRow()
            If (Me.Table.ChildRelations("FK_Remise_Detail_Remise") Is Nothing) Then
                Return New Remise_DetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Remise_Detail_Remise")),Remise_DetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FrRemiseDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableFrRemiseDetail As FrRemiseDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFrRemiseDetail = CType(Me.Table,FrRemiseDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailRemise() As Decimal
            Get
                Return CType(Me(Me.tableFrRemiseDetail.nDetailRemiseColumn),Decimal)
            End Get
            Set
                Me(Me.tableFrRemiseDetail.nDetailRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nReglement() As Decimal
            Get
                Return CType(Me(Me.tableFrRemiseDetail.nReglementColumn),Decimal)
            End Get
            Set
                Me(Me.tableFrRemiseDetail.nReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateReglement() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFrRemiseDetail.DateReglementColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateReglement' in table 'FrRemiseDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrRemiseDetail.DateReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableFrRemiseDetail.NomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nom' in table 'FrRemiseDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrRemiseDetail.NomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nMode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFrRemiseDetail.nModeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nMode' in table 'FrRemiseDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrRemiseDetail.nModeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BanqueClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableFrRemiseDetail.BanqueClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BanqueClient' in table 'FrRemiseDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrRemiseDetail.BanqueClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFrRemiseDetail.MontantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Montant' in table 'FrRemiseDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrRemiseDetail.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nRemise() As Decimal
            Get
                Return CType(Me(Me.tableFrRemiseDetail.nRemiseColumn),Decimal)
            End Get
            Set
                Me(Me.tableFrRemiseDetail.nRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableFrRemiseDetail.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'FrRemiseDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrRemiseDetail.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateReglementNull() As Boolean
            Return Me.IsNull(Me.tableFrRemiseDetail.DateReglementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateReglementNull()
            Me(Me.tableFrRemiseDetail.DateReglementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomNull() As Boolean
            Return Me.IsNull(Me.tableFrRemiseDetail.NomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomNull()
            Me(Me.tableFrRemiseDetail.NomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnModeNull() As Boolean
            Return Me.IsNull(Me.tableFrRemiseDetail.nModeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnModeNull()
            Me(Me.tableFrRemiseDetail.nModeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBanqueClientNull() As Boolean
            Return Me.IsNull(Me.tableFrRemiseDetail.BanqueClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBanqueClientNull()
            Me(Me.tableFrRemiseDetail.BanqueClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableFrRemiseDetail.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableFrRemiseDetail.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableFrRemiseDetail.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableFrRemiseDetail.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReglementRow
        Inherits Global.System.Data.DataRow
        
        Private tableReglement As ReglementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReglement = CType(Me.Table,ReglementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nReglement() As Decimal
            Get
                Return CType(Me(Me.tableReglement.nReglementColumn),Decimal)
            End Get
            Set
                Me(Me.tableReglement.nReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateReglement() As Date
            Get
                Try 
                    Return CType(Me(Me.tableReglement.DateReglementColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateReglement' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.DateReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateDepot() As Date
            Get
                Try 
                    Return CType(Me(Me.tableReglement.DateDepotColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateDepot' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.DateDepotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nEntreprise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement.nEntrepriseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nEntreprise' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.nEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nMode() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.nModeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nMode' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.nModeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCheque() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.nChequeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCheque' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.nChequeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModeReglement() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.ModeReglementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModeReglement' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.ModeReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement.MontantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Montant' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Perte() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement.PerteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Perte' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.PerteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Profit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement.ProfitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Profit' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.ProfitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depose() As Boolean
            Get
                Return CType(Me(Me.tableReglement.DeposeColumn),Boolean)
            End Get
            Set
                Me(Me.tableReglement.DeposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableReglement.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableReglement.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxEscompte() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement.TxEscompteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxEscompte' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.TxEscompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantEscompte() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement.MontantEscompteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantEscompte' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.MontantEscompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableReglement.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExportCompta' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BanqueClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.BanqueClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BanqueClient' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.BanqueClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Payeur() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.PayeurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Payeur' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.PayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateReglementNull() As Boolean
            Return Me.IsNull(Me.tableReglement.DateReglementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateReglementNull()
            Me(Me.tableReglement.DateReglementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateDepotNull() As Boolean
            Return Me.IsNull(Me.tableReglement.DateDepotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateDepotNull()
            Me(Me.tableReglement.DateDepotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnEntrepriseNull() As Boolean
            Return Me.IsNull(Me.tableReglement.nEntrepriseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnEntrepriseNull()
            Me(Me.tableReglement.nEntrepriseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnModeNull() As Boolean
            Return Me.IsNull(Me.tableReglement.nModeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnModeNull()
            Me(Me.tableReglement.nModeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnChequeNull() As Boolean
            Return Me.IsNull(Me.tableReglement.nChequeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnChequeNull()
            Me(Me.tableReglement.nChequeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeReglementNull() As Boolean
            Return Me.IsNull(Me.tableReglement.ModeReglementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeReglementNull()
            Me(Me.tableReglement.ModeReglementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableReglement.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableReglement.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableReglement.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableReglement.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPerteNull() As Boolean
            Return Me.IsNull(Me.tableReglement.PerteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPerteNull()
            Me(Me.tableReglement.PerteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProfitNull() As Boolean
            Return Me.IsNull(Me.tableReglement.ProfitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProfitNull()
            Me(Me.tableReglement.ProfitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxEscompteNull() As Boolean
            Return Me.IsNull(Me.tableReglement.TxEscompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxEscompteNull()
            Me(Me.tableReglement.TxEscompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantEscompteNull() As Boolean
            Return Me.IsNull(Me.tableReglement.MontantEscompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantEscompteNull()
            Me(Me.tableReglement.MontantEscompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableReglement.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableReglement.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBanqueClientNull() As Boolean
            Return Me.IsNull(Me.tableReglement.BanqueClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBanqueClientNull()
            Me(Me.tableReglement.BanqueClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayeurNull() As Boolean
            Return Me.IsNull(Me.tableReglement.PayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayeurNull()
            Me(Me.tableReglement.PayeurColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FrReglementDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableFrReglementDetail As FrReglementDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFrReglementDetail = CType(Me.Table,FrReglementDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailReglement() As Decimal
            Get
                Return CType(Me(Me.tableFrReglementDetail.nDetailReglementColumn),Decimal)
            End Get
            Set
                Me(Me.tableFrReglementDetail.nDetailReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ndevis() As Decimal
            Get
                Return CType(Me(Me.tableFrReglementDetail.ndevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableFrReglementDetail.ndevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nfacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFrReglementDetail.nfactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nfacture' in table 'FrReglementDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrReglementDetail.nfactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datefacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFrReglementDetail.datefactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'datefacture' in table 'FrReglementDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrReglementDetail.datefactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property client() As String
            Get
                Try 
                    Return CType(Me(Me.tableFrReglementDetail.clientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'client' in table 'FrReglementDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrReglementDetail.clientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFrReglementDetail.montantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'montantTTC' in table 'FrReglementDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrReglementDetail.montantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFrReglementDetail.montantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'montant' in table 'FrReglementDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFrReglementDetail.montantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnfactureNull() As Boolean
            Return Me.IsNull(Me.tableFrReglementDetail.nfactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnfactureNull()
            Me(Me.tableFrReglementDetail.nfactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdatefactureNull() As Boolean
            Return Me.IsNull(Me.tableFrReglementDetail.datefactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdatefactureNull()
            Me(Me.tableFrReglementDetail.datefactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclientNull() As Boolean
            Return Me.IsNull(Me.tableFrReglementDetail.clientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclientNull()
            Me(Me.tableFrReglementDetail.clientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableFrReglementDetail.montantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontantTTCNull()
            Me(Me.tableFrReglementDetail.montantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontantNull() As Boolean
            Return Me.IsNull(Me.tableFrReglementDetail.montantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontantNull()
            Me(Me.tableFrReglementDetail.montantColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PiecesRow
        Inherits Global.System.Data.DataRow
        
        Private tablePieces As PiecesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePieces = CType(Me.Table,PiecesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tablePieces.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tablePieces.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Origine' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nOrigine' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFacture' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePieces.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFacture' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePieces.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEcheance' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nClient' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTTC' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tablePieces.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tablePieces.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomObs() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces.nomObsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nomObs' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.nomObsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePieces.DateEcheance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEcheance2' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.DateEcheance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces.NomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nom' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.NomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nRelance() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePieces.nRelanceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nRelance' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.nRelanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateImpr() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePieces.DateImprColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateImpr' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.DateImprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePieces.DateRelanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.DateRelanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePieces.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FacturationTTC' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commercial() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces.CommercialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Commercial' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.CommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCommercial' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property reste() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces.resteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'reste' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.resteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdresseFacture' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Secteur' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prescripteur() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces.PrescripteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prescripteur' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.PrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depot() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces.DepotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depot' in table 'Pieces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces.DepotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tablePieces.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tablePieces.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tablePieces.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tablePieces.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tablePieces.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tablePieces.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tablePieces.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tablePieces.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tablePieces.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tablePieces.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tablePieces.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tablePieces.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tablePieces.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tablePieces.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomObsNull() As Boolean
            Return Me.IsNull(Me.tablePieces.nomObsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomObsNull()
            Me(Me.tablePieces.nomObsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheance2Null() As Boolean
            Return Me.IsNull(Me.tablePieces.DateEcheance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheance2Null()
            Me(Me.tablePieces.DateEcheance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomNull() As Boolean
            Return Me.IsNull(Me.tablePieces.NomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomNull()
            Me(Me.tablePieces.NomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tablePieces.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tablePieces.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnRelanceNull() As Boolean
            Return Me.IsNull(Me.tablePieces.nRelanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnRelanceNull()
            Me(Me.tablePieces.nRelanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateImprNull() As Boolean
            Return Me.IsNull(Me.tablePieces.DateImprColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateImprNull()
            Me(Me.tablePieces.DateImprColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelanceNull() As Boolean
            Return Me.IsNull(Me.tablePieces.DateRelanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelanceNull()
            Me(Me.tablePieces.DateRelanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tablePieces.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tablePieces.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommercialNull() As Boolean
            Return Me.IsNull(Me.tablePieces.CommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommercialNull()
            Me(Me.tablePieces.CommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tablePieces.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tablePieces.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsresteNull() As Boolean
            Return Me.IsNull(Me.tablePieces.resteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetresteNull()
            Me(Me.tablePieces.resteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tablePieces.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tablePieces.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tablePieces.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tablePieces.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tablePieces.PrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrescripteurNull()
            Me(Me.tablePieces.PrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepotNull() As Boolean
            Return Me.IsNull(Me.tablePieces.DepotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepotNull()
            Me(Me.tablePieces.DepotColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ChildObjectsRow
        Inherits Global.System.Data.DataRow
        
        Private tableChildObjects As ChildObjectsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableChildObjects = CType(Me.Table,ChildObjectsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableChildObjects.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nDevis' in table 'ChildObjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChildObjects.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tablename() As String
            Get
                Try 
                    Return CType(Me(Me.tableChildObjects.tablenameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tablename' in table 'ChildObjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChildObjects.tablenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _lib() As String
            Get
                Try 
                    Return CType(Me(Me.tableChildObjects.libColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lib' in table 'ChildObjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChildObjects.libColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nb() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChildObjects.nbColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nb' in table 'ChildObjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChildObjects.nbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableChildObjects.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableChildObjects.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstablenameNull() As Boolean
            Return Me.IsNull(Me.tableChildObjects.tablenameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettablenameNull()
            Me(Me.tableChildObjects.tablenameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_libNull() As Boolean
            Return Me.IsNull(Me.tableChildObjects.libColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_libNull()
            Me(Me.tableChildObjects.libColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnbNull() As Boolean
            Return Me.IsNull(Me.tableChildObjects.nbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnbNull()
            Me(Me.tableChildObjects.nbColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pieces_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tablePieces_Detail As Pieces_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePieces_Detail = CType(Me.Table,Pieces_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tablePieces_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tablePieces_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nDevis' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLigne' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLot' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NbParution' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite2' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUHT' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTva' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTVA' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTC' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneHT' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTVA' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTTC' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompte() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.NCompteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompte' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.NCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActivite() As String
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.NActiviteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActivite' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.NActiviteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUAchatHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePieces_Detail.PrixUAchatHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUAchatHT' in table 'Pieces_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePieces_Detail.PrixUAchatHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tablePieces_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tablePieces_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tablePieces_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tablePieces_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tablePieces_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tablePieces_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tablePieces_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tablePieces_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tablePieces_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tablePieces_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tablePieces_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tablePieces_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tablePieces_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tablePieces_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tablePieces_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tablePieces_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tablePieces_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tablePieces_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tablePieces_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.NCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteNull()
            Me(Me.tablePieces_Detail.NCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.NActiviteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteNull()
            Me(Me.tablePieces_Detail.NActiviteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUAchatHTNull() As Boolean
            Return Me.IsNull(Me.tablePieces_Detail.PrixUAchatHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUAchatHTNull()
            Me(Me.tablePieces_Detail.PrixUAchatHTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AvancesRow
        Inherits Global.System.Data.DataRow
        
        Private tableAvances As AvancesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAvances = CType(Me.Table,AvancesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvances.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'Avances' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvances.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAvances.idColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'id' in table 'Avances' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvances.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvances.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'Avances' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvances.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAvances.dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'date' in table 'Avances' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvances.dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reste() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAvances.ResteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reste' in table 'Avances' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvances.ResteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAvances.MontantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Montant' in table 'Avances' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvances.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableAvances.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableAvances.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tableAvances.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidNull()
            Me(Me.tableAvances.idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableAvances.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableAvances.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tableAvances.dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_dateNull()
            Me(Me.tableAvances.dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResteNull() As Boolean
            Return Me.IsNull(Me.tableAvances.ResteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResteNull()
            Me(Me.tableAvances.ResteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableAvances.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableAvances.MontantColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Remise_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableRemise_Detail As Remise_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRemise_Detail = CType(Me.Table,Remise_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailRemise() As Decimal
            Get
                Return CType(Me(Me.tableRemise_Detail.nDetailRemiseColumn),Decimal)
            End Get
            Set
                Me(Me.tableRemise_Detail.nDetailRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nRemise() As Decimal
            Get
                Return CType(Me(Me.tableRemise_Detail.nRemiseColumn),Decimal)
            End Get
            Set
                Me(Me.tableRemise_Detail.nRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nReglement() As Decimal
            Get
                Return CType(Me(Me.tableRemise_Detail.nReglementColumn),Decimal)
            End Get
            Set
                Me(Me.tableRemise_Detail.nReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RemiseRow() As RemiseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Remise_Detail_Remise")),RemiseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Remise_Detail_Remise"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProduitRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduit As ProduitDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduit = CType(Me.Table,ProduitDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nProduit() As Decimal
            Get
                Return CType(Me(Me.tableProduit.nProduitColumn),Decimal)
            End Get
            Set
                Me(Me.tableProduit.nProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Return CType(Me(Me.tableProduit.CodeProduitColumn),String)
            End Get
            Set
                Me(Me.tableProduit.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibelleLong() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.LibelleLongColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibelleLong' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.LibelleLongColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixAHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixAHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixAHT' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixAHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixATTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixATTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixATTC' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixATTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixVHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVHT' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixVHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixVTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVTTC' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixVTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPrixHT() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsPrixHTColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsPrixHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Unite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Unite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitAchat() As Boolean
            Get
                Return CType(Me(Me.tableProduit.ProduitAchatColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.ProduitAchatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitVente() As Boolean
            Get
                Return CType(Me(Me.tableProduit.ProduitVenteColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.ProduitVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteV() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteV() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille1' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille3() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille3' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1U2Independant() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.U1U2IndependantColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U1U2Independant' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.U1U2IndependantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1xU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.U1xU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U1xU2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.U1xU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeBarre() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CodeBarreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeBarre' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CodeBarreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactif() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.InactifColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactif' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.InactifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CoefU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefU2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CoefU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeFacturation() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TypeFacturationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeFacturation' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TypeFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefAV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CoefAVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefAV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CoefAVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitCompose() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ProduitComposeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProduitCompose' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ProduitComposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Image() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ImageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Image' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GestionStock() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.GestionStockColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GestionStock' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.GestionStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DecompteAuto() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.DecompteAutoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DecompteAuto' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.DecompteAutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefFournisseur() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.RefFournisseurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefFournisseur' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.RefFournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFournisseur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.nFournisseurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFournisseur' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.nFournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSortieImpr() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsSortieImprColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsSortieImprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsEnVente() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsEnVenteColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsEnVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMM() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.AMMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMM' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.AMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXSM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TAXSMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXSM' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TAXSMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsAMM() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsAMMColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsAMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateMaj() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProduit.DateMajColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateMaj' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.DateMajColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isComm() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.isCommColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isComm' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.isCommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Conditionnement() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ConditionnementColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Conditionnement' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ConditionnementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeuilStock() As Decimal
            Get
                Return CType(Me(Me.tableProduit.SeuilStockColumn),Decimal)
            End Get
            Set
                Me(Me.tableProduit.SeuilStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteX() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteX' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteX() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteX' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ingredients() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.IngredientsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ingredients' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.IngredientsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit_Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CodeProduit_LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit_Libelle' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CodeProduit_LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableProduit.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableProduit.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleLongNull() As Boolean
            Return Me.IsNull(Me.tableProduit.LibelleLongColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleLongNull()
            Me(Me.tableProduit.LibelleLongColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableProduit.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableProduit.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixAHTNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixAHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixAHTNull()
            Me(Me.tableProduit.PrixAHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixATTCNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixATTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixATTCNull()
            Me(Me.tableProduit.PrixATTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVHTNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixVHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVHTNull()
            Me(Me.tableProduit.PrixVHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVTTCNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixVTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVTTCNull()
            Me(Me.tableProduit.PrixVTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableProduit.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableProduit.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteANull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteANull()
            Me(Me.tableProduit.NCompteAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteANull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteANull()
            Me(Me.tableProduit.NActiviteAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteVNull()
            Me(Me.tableProduit.NCompteVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteVNull()
            Me(Me.tableProduit.NActiviteVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille1Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille1Null()
            Me(Me.tableProduit.Famille1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille2Null()
            Me(Me.tableProduit.Famille2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille3Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille3Null()
            Me(Me.tableProduit.Famille3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1U2IndependantNull() As Boolean
            Return Me.IsNull(Me.tableProduit.U1U2IndependantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1U2IndependantNull()
            Me(Me.tableProduit.U1U2IndependantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1xU2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.U1xU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1xU2Null()
            Me(Me.tableProduit.U1xU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeBarreNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CodeBarreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeBarreNull()
            Me(Me.tableProduit.CodeBarreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactifNull() As Boolean
            Return Me.IsNull(Me.tableProduit.InactifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactifNull()
            Me(Me.tableProduit.InactifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefU2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.CoefU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefU2Null()
            Me(Me.tableProduit.CoefU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeFacturationNull() As Boolean
            Return Me.IsNull(Me.tableProduit.TypeFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeFacturationNull()
            Me(Me.tableProduit.TypeFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefAVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CoefAVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefAVNull()
            Me(Me.tableProduit.CoefAVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProduitComposeNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ProduitComposeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProduitComposeNull()
            Me(Me.tableProduit.ProduitComposeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImageNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImageNull()
            Me(Me.tableProduit.ImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGestionStockNull() As Boolean
            Return Me.IsNull(Me.tableProduit.GestionStockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGestionStockNull()
            Me(Me.tableProduit.GestionStockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDecompteAutoNull() As Boolean
            Return Me.IsNull(Me.tableProduit.DecompteAutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDecompteAutoNull()
            Me(Me.tableProduit.DecompteAutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableProduit.RefFournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefFournisseurNull()
            Me(Me.tableProduit.RefFournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableProduit.nFournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFournisseurNull()
            Me(Me.tableProduit.nFournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMMNull() As Boolean
            Return Me.IsNull(Me.tableProduit.AMMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMMNull()
            Me(Me.tableProduit.AMMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXSMNull() As Boolean
            Return Me.IsNull(Me.tableProduit.TAXSMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXSMNull()
            Me(Me.tableProduit.TAXSMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateMajNull() As Boolean
            Return Me.IsNull(Me.tableProduit.DateMajColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateMajNull()
            Me(Me.tableProduit.DateMajColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisCommNull() As Boolean
            Return Me.IsNull(Me.tableProduit.isCommColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisCommNull()
            Me(Me.tableProduit.isCommColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConditionnementNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ConditionnementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConditionnementNull()
            Me(Me.tableProduit.ConditionnementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteXNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteXNull()
            Me(Me.tableProduit.NCompteXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteXNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteXNull()
            Me(Me.tableProduit.NActiviteXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngredientsNull() As Boolean
            Return Me.IsNull(Me.tableProduit.IngredientsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngredientsNull()
            Me(Me.tableProduit.IngredientsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduit_LibelleNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CodeProduit_LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduit_LibelleNull()
            Me(Me.tableProduit.CodeProduit_LibelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BanqueRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BanqueRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BanqueRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BanqueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RemiseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RemiseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RemiseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RemiseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FrRemiseDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FrRemiseDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FrRemiseDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FrRemiseDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReglementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReglementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReglementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReglementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FrReglementDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FrReglementDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FrReglementDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FrReglementDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PiecesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PiecesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PiecesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PiecesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ChildObjectsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ChildObjectsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ChildObjectsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ChildObjectsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pieces_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pieces_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pieces_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pieces_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AvancesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AvancesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AvancesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AvancesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Remise_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Remise_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Remise_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Remise_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProduitRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProduitRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProduitRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProduitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DsPiecesTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BanqueTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Banque"
            tableMapping.ColumnMappings.Add("nBanque", "nBanque")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("NCompte", "NCompte")
            tableMapping.ColumnMappings.Add("NActivite", "NActivite")
            tableMapping.ColumnMappings.Add("RIBCodeAgence", "RIBCodeAgence")
            tableMapping.ColumnMappings.Add("RIBCodeGuichet", "RIBCodeGuichet")
            tableMapping.ColumnMappings.Add("RIBNCompte", "RIBNCompte")
            tableMapping.ColumnMappings.Add("RIBCle", "RIBCle")
            tableMapping.ColumnMappings.Add("RIBNEmetteur", "RIBNEmetteur")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Banque] WHERE (([nBanque] = @Original_nBanque))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nBanque", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nBanque", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Banque] ([nBanque], [Libelle], [NCompte], [NActivite], [RIBCodeAgenc"& _ 
                "e], [RIBCodeGuichet], [RIBNCompte], [RIBCle], [RIBNEmetteur]) VALUES (@nBanque, "& _ 
                "@Libelle, @NCompte, @NActivite, @RIBCodeAgence, @RIBCodeGuichet, @RIBNCompte, @R"& _ 
                "IBCle, @RIBNEmetteur);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nBanque, Libelle, NCompte, NActivite, RIBCodeAgen"& _ 
                "ce, RIBCodeGuichet, RIBNCompte, RIBCle, RIBNEmetteur FROM Banque WHERE (nBanque "& _ 
                "= @nBanque)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nBanque", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nBanque", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIBCodeAgence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIBCodeAgence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIBCodeGuichet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIBCodeGuichet", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIBNCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIBNCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIBCle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIBCle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIBNEmetteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIBNEmetteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Banque] SET [nBanque] = @nBanque, [Libelle] = @Libelle, [NCompte] = @NCom"& _ 
                "pte, [NActivite] = @NActivite, [RIBCodeAgence] = @RIBCodeAgence, [RIBCodeGuichet"& _ 
                "] = @RIBCodeGuichet, [RIBNCompte] = @RIBNCompte, [RIBCle] = @RIBCle, [RIBNEmette"& _ 
                "ur] = @RIBNEmetteur WHERE (([nBanque] = @Original_nBanque));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nBanque, Li"& _ 
                "belle, NCompte, NActivite, RIBCodeAgence, RIBCodeGuichet, RIBNCompte, RIBCle, RI"& _ 
                "BNEmetteur FROM Banque WHERE (nBanque = @nBanque)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nBanque", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nBanque", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIBCodeAgence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIBCodeAgence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIBCodeGuichet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIBCodeGuichet", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIBNCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIBNCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIBCle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIBCle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIBNEmetteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIBNEmetteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nBanque", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nBanque", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Banque.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Banque"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsPieces.BanqueDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DsPieces.BanqueDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsPieces.BanqueDataTable = New DsPieces.BanqueDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DsPieces.BanqueDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DsPieces) As Integer
            Return Me.Adapter.Update(dataSet, "Banque")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nBanque As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nBanque,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal nBanque As Decimal, ByVal Libelle As String, ByVal NCompte As String, ByVal NActivite As String, ByVal RIBCodeAgence As String, ByVal RIBCodeGuichet As String, ByVal RIBNCompte As String, ByVal RIBCle As String, ByVal RIBNEmetteur As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nBanque,Decimal)
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Libelle,String)
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NActivite,String)
            End If
            If (RIBCodeAgence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RIBCodeAgence,String)
            End If
            If (RIBCodeGuichet Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(RIBCodeGuichet,String)
            End If
            If (RIBNCompte Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(RIBNCompte,String)
            End If
            If (RIBCle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(RIBCle,String)
            End If
            If (RIBNEmetteur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(RIBNEmetteur,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nBanque As Decimal, ByVal Libelle As String, ByVal NCompte As String, ByVal NActivite As String, ByVal RIBCodeAgence As String, ByVal RIBCodeGuichet As String, ByVal RIBNCompte As String, ByVal RIBCle As String, ByVal RIBNEmetteur As String, ByVal Original_nBanque As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nBanque,Decimal)
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Libelle,String)
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NActivite,String)
            End If
            If (RIBCodeAgence Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RIBCodeAgence,String)
            End If
            If (RIBCodeGuichet Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RIBCodeGuichet,String)
            End If
            If (RIBNCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RIBNCompte,String)
            End If
            If (RIBCle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(RIBCle,String)
            End If
            If (RIBNEmetteur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RIBNEmetteur,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_nBanque,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Libelle As String, ByVal NCompte As String, ByVal NActivite As String, ByVal RIBCodeAgence As String, ByVal RIBCodeGuichet As String, ByVal RIBNCompte As String, ByVal RIBCle As String, ByVal RIBNEmetteur As String, ByVal Original_nBanque As Decimal) As Integer
            Return Me.Update(Original_nBanque, Libelle, NCompte, NActivite, RIBCodeAgence, RIBCodeGuichet, RIBNCompte, RIBCle, RIBNEmetteur, Original_nBanque)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RemiseTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Remise"
            tableMapping.ColumnMappings.Add("nRemise", "nRemise")
            tableMapping.ColumnMappings.Add("nRemiseBanque", "nRemiseBanque")
            tableMapping.ColumnMappings.Add("DateRemise", "DateRemise")
            tableMapping.ColumnMappings.Add("TypeRemise", "TypeRemise")
            tableMapping.ColumnMappings.Add("Observation", "Observation")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("NExportRemise", "NExportRemise")
            tableMapping.ColumnMappings.Add("ExportCompta", "ExportCompta")
            tableMapping.ColumnMappings.Add("DateExportCompta", "DateExportCompta")
            tableMapping.ColumnMappings.Add("nBanque", "nBanque")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Remise] WHERE (([nRemise] = @Original_nRemise))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nRemise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Remise] ([nRemise], [nRemiseBanque], [DateRemise], [TypeRemise], [Ob"& _ 
                "servation], [Montant], [NExportRemise], [ExportCompta], [DateExportCompta], [nBa"& _ 
                "nque]) VALUES (@nRemise, @nRemiseBanque, @DateRemise, @TypeRemise, @Observation,"& _ 
                " @Montant, @NExportRemise, @ExportCompta, @DateExportCompta, @nBanque);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "nRemise, nRemiseBanque, DateRemise, TypeRemise, Observation, Montant, NExportRem"& _ 
                "ise, ExportCompta, DateExportCompta, nBanque FROM Remise WHERE (nRemise = @nRemi"& _ 
                "se)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRemiseBanque", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRemiseBanque", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRemise", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeRemise", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NExportRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "NExportRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nBanque", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nBanque", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Remise] SET [nRemise] = @nRemise, [nRemiseBanque] = @nRemiseBanque, [Date"& _ 
                "Remise] = @DateRemise, [TypeRemise] = @TypeRemise, [Observation] = @Observation,"& _ 
                " [Montant] = @Montant, [NExportRemise] = @NExportRemise, [ExportCompta] = @Expor"& _ 
                "tCompta, [DateExportCompta] = @DateExportCompta, [nBanque] = @nBanque WHERE (([n"& _ 
                "Remise] = @Original_nRemise));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nRemise, nRemiseBanque, DateRemise, TypeR"& _ 
                "emise, Observation, Montant, NExportRemise, ExportCompta, DateExportCompta, nBan"& _ 
                "que FROM Remise WHERE (nRemise = @nRemise)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRemiseBanque", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRemiseBanque", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRemise", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeRemise", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NExportRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "NExportRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nBanque", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nBanque", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nRemise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Remise.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Remise"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsPieces.RemiseDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DsPieces.RemiseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsPieces.RemiseDataTable = New DsPieces.RemiseDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DsPieces.RemiseDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DsPieces) As Integer
            Return Me.Adapter.Update(dataSet, "Remise")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nRemise As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nRemise,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal nRemise As Decimal, ByVal nRemiseBanque As String, ByVal DateRemise As Global.System.Nullable(Of Date), ByVal TypeRemise As String, ByVal Observation As String, ByVal Montant As Global.System.Nullable(Of Decimal), ByVal NExportRemise As Global.System.Nullable(Of Decimal), ByVal ExportCompta As Global.System.Nullable(Of Boolean), ByVal DateExportCompta As Global.System.Nullable(Of Date), ByVal nBanque As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nRemise,Decimal)
            If (nRemiseBanque Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nRemiseBanque,String)
            End If
            If (DateRemise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateRemise.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TypeRemise Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TypeRemise,String)
            End If
            If (Observation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Observation,String)
            End If
            If (Montant.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Montant.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (NExportRemise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NExportRemise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ExportCompta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ExportCompta.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DateExportCompta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DateExportCompta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (nBanque.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(nBanque.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nRemise As Decimal, ByVal nRemiseBanque As String, ByVal DateRemise As Global.System.Nullable(Of Date), ByVal TypeRemise As String, ByVal Observation As String, ByVal Montant As Global.System.Nullable(Of Decimal), ByVal NExportRemise As Global.System.Nullable(Of Decimal), ByVal ExportCompta As Global.System.Nullable(Of Boolean), ByVal DateExportCompta As Global.System.Nullable(Of Date), ByVal nBanque As Global.System.Nullable(Of Decimal), ByVal Original_nRemise As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nRemise,Decimal)
            If (nRemiseBanque Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nRemiseBanque,String)
            End If
            If (DateRemise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DateRemise.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TypeRemise Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TypeRemise,String)
            End If
            If (Observation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Observation,String)
            End If
            If (Montant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Montant.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (NExportRemise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NExportRemise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ExportCompta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ExportCompta.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DateExportCompta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DateExportCompta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (nBanque.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(nBanque.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_nRemise,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nRemiseBanque As String, ByVal DateRemise As Global.System.Nullable(Of Date), ByVal TypeRemise As String, ByVal Observation As String, ByVal Montant As Global.System.Nullable(Of Decimal), ByVal NExportRemise As Global.System.Nullable(Of Decimal), ByVal ExportCompta As Global.System.Nullable(Of Boolean), ByVal DateExportCompta As Global.System.Nullable(Of Date), ByVal nBanque As Global.System.Nullable(Of Decimal), ByVal Original_nRemise As Decimal) As Integer
            Return Me.Update(Original_nRemise, nRemiseBanque, DateRemise, TypeRemise, Observation, Montant, NExportRemise, ExportCompta, DateExportCompta, nBanque, Original_nRemise)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FrRemiseDetailTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FrRemiseDetail"
            tableMapping.ColumnMappings.Add("nDetailRemise", "nDetailRemise")
            tableMapping.ColumnMappings.Add("nReglement", "nReglement")
            tableMapping.ColumnMappings.Add("DateReglement", "DateReglement")
            tableMapping.ColumnMappings.Add("Nom", "Nom")
            tableMapping.ColumnMappings.Add("nMode", "nMode")
            tableMapping.ColumnMappings.Add("BanqueClient", "BanqueClient")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("nRemise", "nRemise")
            tableMapping.ColumnMappings.Add("Observation", "Observation")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        rmd.nRemise, rmd.nDetailRemise, rg.nReglement, rg.DateReglement, pa"& _ 
                "yeur.Nom, rg.nMode, rg.BanqueClient, rg.Montant, rg.Observation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM           "& _ 
                " Remise_Detail AS rmd INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Reglement AS rg ON rg"& _ 
                ".nReglement = rmd.nReglement INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise AS "& _ 
                "payeur ON rg.nEntreprise = payeur.nEntreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (rmd.nRemise = @nRem"& _ 
                "ise)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRemise", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "nRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        0 as nRemise, 0 as nDetailRemise, nReglement, DateReglement, payeur"& _ 
                ".Nom, nMode, BanqueClient, Montant, Observation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Reglement AS rg"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INNER JOIN  Entreprise AS payeur ON rg.nEntreprise = payeur.nEntreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                "        nReglement= @nReglement"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nReglement", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "nReglement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByRemise(ByVal dataTable As DsPieces.FrRemiseDetailDataTable, ByVal nRemise As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nRemise,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataByRemise(ByVal nRemise As Decimal) As DsPieces.FrRemiseDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nRemise,Decimal)
            Dim dataTable As DsPieces.FrRemiseDetailDataTable = New DsPieces.FrRemiseDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillDummyByReglement(ByVal dataTable As DsPieces.FrRemiseDetailDataTable, ByVal nReglement As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nReglement,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDummyDataByReglement(ByVal nReglement As Decimal) As DsPieces.FrRemiseDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nReglement,Decimal)
            Dim dataTable As DsPieces.FrRemiseDetailDataTable = New DsPieces.FrRemiseDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ReglementTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Reglement"
            tableMapping.ColumnMappings.Add("nReglement", "nReglement")
            tableMapping.ColumnMappings.Add("DateReglement", "DateReglement")
            tableMapping.ColumnMappings.Add("DateDepot", "DateDepot")
            tableMapping.ColumnMappings.Add("nEntreprise", "nEntreprise")
            tableMapping.ColumnMappings.Add("nMode", "nMode")
            tableMapping.ColumnMappings.Add("nCheque", "nCheque")
            tableMapping.ColumnMappings.Add("ModeReglement", "ModeReglement")
            tableMapping.ColumnMappings.Add("Observation", "Observation")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Perte", "Perte")
            tableMapping.ColumnMappings.Add("Profit", "Profit")
            tableMapping.ColumnMappings.Add("Depose", "Depose")
            tableMapping.ColumnMappings.Add("ExportCompta", "ExportCompta")
            tableMapping.ColumnMappings.Add("TxEscompte", "TxEscompte")
            tableMapping.ColumnMappings.Add("MontantEscompte", "MontantEscompte")
            tableMapping.ColumnMappings.Add("DateExportCompta", "DateExportCompta")
            tableMapping.ColumnMappings.Add("BanqueClient", "BanqueClient")
            tableMapping.ColumnMappings.Add("Payeur", "Payeur")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Reglement.*, Entreprise.Nom AS Payeur"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Reglement IN"& _ 
                "NER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise ON Reglement.nEntreprise = Entrepr"& _ 
                "ise.nEntreprise"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        AReglement.nReglement, AReglement.DateReglement, AReglement.DateDep"& _ 
                "ot, AReglement.nEntreprise, AReglement.nMode, AReglement.nCheque, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             AReglement.ModeReglement, AReglement.Observation, AReglement.Montan"& _ 
                "t, AReglement.Perte, AReglement.Profit, AReglement.Depose, AReglement.ExportComp"& _ 
                "ta,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          AReglement.TxEscompte, AReglement.MontantEscompte"& _ 
                ", AReglement.DateExportCompta, AReglement.BanqueClient, Entreprise.Nom AS Payeur"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AReglement INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise ON "& _ 
                "AReglement.nEntreprise = Entreprise.nEntreprise"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillVente(ByVal dataTable As DsPieces.ReglementDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataVente() As DsPieces.ReglementDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsPieces.ReglementDataTable = New DsPieces.ReglementDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillAchat(ByVal dataTable As DsPieces.ReglementDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataAchat() As DsPieces.ReglementDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As DsPieces.ReglementDataTable = New DsPieces.ReglementDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FrReglementDetailTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FrReglementDetail"
            tableMapping.ColumnMappings.Add("nDetailReglement", "nDetailReglement")
            tableMapping.ColumnMappings.Add("ndevis", "ndevis")
            tableMapping.ColumnMappings.Add("nfacture", "nfacture")
            tableMapping.ColumnMappings.Add("datefacture", "datefacture")
            tableMapping.ColumnMappings.Add("client", "client")
            tableMapping.ColumnMappings.Add("montantTTC", "montantTTC")
            tableMapping.ColumnMappings.Add("montant", "montant")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select rd.nDetailReglement,f.ndevis, f.nfacture,f.datefacture,e.nom as client,f.m"& _ 
                "ontantTTC,rd.montant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from reglement_detail rd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join vfacture f on f.ndevi"& _ 
                "s=rd.nfacture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join entreprise e on f.nclient=e.nentreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where nreglem"& _ 
                "ent=@nReglement"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nReglement", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "nReglement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select rd.nDetailReglement,f.ndevis, f.nfacture,f.datefacture,e.nom as client,f.m"& _ 
                "ontantTTC,rd.montant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from Areglement_detail rd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join Afacture f on f.ndev"& _ 
                "is=rd.nfacture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join entreprise e on f.nclient=e.nentreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where nregle"& _ 
                "ment=@nReglement"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nReglement", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "nReglement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "select 0 as nDetailReglement,@nDevis as nDevis, f.nfacture,f.datefacture,e.nom as"& _ 
                " client,f.montantTTC,@montant as Montant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from afacture f "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join entrepris"& _ 
                "e e on f.nclient=e.nentreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where f.ndevis=@nDevis"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@montant", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 2, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "select 0 as nDetailReglement,@nDevis as nDevis, f.nfacture,f.datefacture,e.nom as"& _ 
                " client,f.montantTTC,@montant as Montant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from vfacture f "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join entrepris"& _ 
                "e e on f.nclient=e.nentreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where f.ndevis=@nDevis"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@montant", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 0, 2, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByReglementVente(ByVal dataTable As DsPieces.FrReglementDetailDataTable, ByVal nReglement As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (nReglement.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nReglement.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataByReglementVente(ByVal nReglement As Global.System.Nullable(Of Decimal)) As DsPieces.FrReglementDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (nReglement.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nReglement.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DsPieces.FrReglementDetailDataTable = New DsPieces.FrReglementDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReglementAchat(ByVal dataTable As DsPieces.FrReglementDetailDataTable, ByVal nReglement As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nReglement.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nReglement.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReglementAchat(ByVal nReglement As Global.System.Nullable(Of Decimal)) As DsPieces.FrReglementDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nReglement.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nReglement.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DsPieces.FrReglementDetailDataTable = New DsPieces.FrReglementDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillDummyByFactureAchat(ByVal dataTable As DsPieces.FrReglementDetailDataTable, ByVal nDevis As Decimal, ByVal montant As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(montant,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDummyDataByFactureAchat(ByVal nDevis As Decimal, ByVal montant As Decimal) As DsPieces.FrReglementDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(montant,Decimal)
            Dim dataTable As DsPieces.FrReglementDetailDataTable = New DsPieces.FrReglementDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillDummyByFactureVente(ByVal dataTable As DsPieces.FrReglementDetailDataTable, ByVal nDevis As Decimal, ByVal montant As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(montant,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDummyDataByFactureVente(ByVal nDevis As Decimal, ByVal montant As Decimal) As DsPieces.FrReglementDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(montant,Decimal)
            Dim dataTable As DsPieces.FrReglementDetailDataTable = New DsPieces.FrReglementDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PiecesTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pieces"
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("Origine", "Origine")
            tableMapping.ColumnMappings.Add("nOrigine", "nOrigine")
            tableMapping.ColumnMappings.Add("nFacture", "nFacture")
            tableMapping.ColumnMappings.Add("DateFacture", "DateFacture")
            tableMapping.ColumnMappings.Add("DateEcheance", "DateEcheance")
            tableMapping.ColumnMappings.Add("nClient", "nClient")
            tableMapping.ColumnMappings.Add("MontantTTC", "MontantTTC")
            tableMapping.ColumnMappings.Add("Paye", "Paye")
            tableMapping.ColumnMappings.Add("Nom", "Nom")
            tableMapping.ColumnMappings.Add("Observation", "Observation")
            tableMapping.ColumnMappings.Add("nRelance", "nRelance")
            tableMapping.ColumnMappings.Add("DateImpr", "DateImpr")
            tableMapping.ColumnMappings.Add("DateRelance", "DateRelance")
            tableMapping.ColumnMappings.Add("FacturationTTC", "FacturationTTC")
            tableMapping.ColumnMappings.Add("Commercial", "Commercial")
            tableMapping.ColumnMappings.Add("nCommercial", "nCommercial")
            tableMapping.ColumnMappings.Add("reste", "reste")
            tableMapping.ColumnMappings.Add("AdresseFacture", "AdresseFacture")
            tableMapping.ColumnMappings.Add("Secteur", "Secteur")
            tableMapping.ColumnMappings.Add("Prescripteur", "Prescripteur")
            tableMapping.ColumnMappings.Add("Depot", "Depot")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(21) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, f.MontantTTC - ISNULL(r.TotalRe"& _ 
                "gle, 0) AS reste, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         f.Observation, f.nRelance, f.DateIm"& _ 
                "pr, f.DateRelance, f.FacturationTTC, Personne.Nom AS Commercial, f.nCommercial, "& _ 
                "f.AdresseFacture, f.Secteur, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise.Nom AS Prescr"& _ 
                "ipteur, f.Depot"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFacture AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    Entreprise AS e ON f.nClient = e.nEntreprise LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "           Entreprise ON f.nPrescripteur = Entreprise.nEntreprise LEFT OUTER JOI"& _ 
                "N"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Personne ON f.nCommercial = Personne.nPersonne LEFT "& _ 
                "OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             (SELECT        nFacture, SUM(Montant) A"& _ 
                "S TotalRegle"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               FROM            Reglement_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                              GROUP BY nFacture) AS r ON r.nFacture = f.nDevis"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BEGIN TRANSACTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      DELETE FROM ABon"& _ 
                "Reception_Detail WHERE nDevis=@nDevis_Original"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      DELETE FRO"& _ 
                "M ABonReception WHERE nDevis=@nDevis_Original"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      COMMIT TRAN"& _ 
                "SACTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis_Original", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BEGIN TRANSACTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      --Ca va planter "& _ 
                "si on n'a pas supprimé les liens vers le réglement, donc il faut avoir géré ca a"& _ 
                "vant."&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      DELETE FROM AFacture_Detail WHERE nDevis=@nDevis_Or"& _ 
                "iginal"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      DELETE FROM AFacture WHERE nDevis=@nDevis_Original"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      COMMIT TRANSACTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis_Original", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BEGIN TRANSACTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      DELETE FROM VBon"& _ 
                "Commande_Detail WHERE nDevis=@nDevis_Original"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      DELETE FROM"& _ 
                " VBonCommande WHERE nDevis=@nDevis_Original"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      COMMIT TRANSA"& _ 
                "CTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis_Original", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BEGIN TRANSACTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      DELETE FROM VBon"& _ 
                "Livraison_Detail WHERE nDevis=@nDevis_Original"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      DELETE FRO"& _ 
                "M VBonLivraison WHERE nDevis=@nDevis_Original"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      COMMIT TRAN"& _ 
                "SACTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis_Original", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BEGIN TRANSACTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      DELETE FROM VDev"& _ 
                "is_Detail WHERE nDevis=@nDevis_Original"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      DELETE FROM VDevi"& _ 
                "s WHERE nDevis=@nDevis_Original"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      COMMIT TRANSACTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "               "
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis_Original", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "BEGIN TRANSACTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"--Ca va planter si on n'a pas supprimé les liens vers le régle"& _ 
                "ment, donc il faut avoir géré ca avant."&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"DELETE FROM VFacture_Detail WHERE nDevi"& _ 
                "s=@nDevis_Original"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"DELETE FROM VFacture WHERE nDevis=@nDevis_Original"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"COMMIT T"& _ 
                "RANSACTION"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis_Original", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance, f"& _ 
                ".FacturationTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ABonReception AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "         Entreprise AS e ON f.nClient = e.nEntreprise"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance, f"& _ 
                ".FacturationTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ABonReception AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "         Entreprise AS e ON f.nClient = e.nEntreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (e.nEntrepri"& _ 
                "se = @nClient)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance, f"& _ 
                ".FacturationTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AFacture AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    Entreprise AS e ON f.nClient = e.nEntreprise"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance, f"& _ 
                ".FacturationTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AFacture AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    Entreprise AS e ON f.nClient = e.nEntreprise"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (e.nEntreprise = "& _ 
                "@nClient)"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(11).Connection = Me.Connection
            Me._commandCollection(11).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"F"& _ 
                "ROM            AFacture AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise AS "& _ 
                "e ON f.nClient = e.nEntreprise LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             (SE"& _ 
                "LECT        nFacture, SUM(Montant) AS TotalRegle"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              "& _ 
                " FROM            AReglement_Detail AS AReglement_Detail_1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "          GROUP BY nFacture) AS r ON r.nFacture = f.nDevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (e.nEnt"& _ 
                "reprise = @nClient) AND (f.Paye = @Paye)"
            Me._commandCollection(11).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paye", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(12) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(12).Connection = Me.Connection
            Me._commandCollection(12).CommandText = "SELECT        f.nDevis, CAST(f.Origine AS NVARCHAR(2000)) AS Origine, f.nOrigine,"& _ 
                " f.nFacture, f.DateFacture, f.DateEcheance, f.nClient, e.Nom, f.MontantTTC, f.Pa"& _ 
                "ye, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         f.MontantTTC - ISNULL(r.TotalRegle, 0) AS reste, "& _ 
                "CAST(f.Observation AS NVARCHAR(2000)) AS Observation, f.nRelance, f.DateImpr, f."& _ 
                "DateRelance"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFacture AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "Entreprise AS e ON f.nClient = e.nEntreprise LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "           (SELECT        nFacture, SUM(Montant) AS TotalRegle"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "               FROM            Reglement_Detail AS Reglement_Detail_1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                      GROUP BY nFacture) AS r ON r.nFacture = f.nDevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   "& _ 
                "     (f.Paye = 0) AND (e.nEntreprise = @nEntreprise)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        f.nDe"& _ 
                "vis, CAST(f.Origine AS NVARCHAR(2000)) AS Origine, f.nOrigine, f.nFacture, f.Dat"& _ 
                "eFacture, f.DateEcheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             f.MontantTTC - ISNULL(r_1.TotalRegle, 0) AS reste, CAST(f.Observati"& _ 
                "on AS NVARCHAR(2000)) AS Observation, f.nRelance, f.DateImpr, f.DateRelance"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FRO"& _ 
                "M            VFacture AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise AS e "& _ 
                "ON f.nClient = e.nEntreprise LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Reglement"& _ 
                "_Detail ON f.nDevis = Reglement_Detail.nFacture LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "              (SELECT        nFacture, SUM(Montant) AS TotalRegle"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "                  FROM            Reglement_Detail AS Reglement_Detail_1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                         GROUP BY nFacture) AS r_1 ON r_1.nFacture = f.nDevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"W"& _ 
                "HERE        (f.Paye = 1) AND (e.nEntreprise = @nEntreprise) AND (Reglement_Detai"& _ 
                "l.nDetailReglement IS NULL)"
            Me._commandCollection(12).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(12).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(13).Connection = Me.Connection
            Me._commandCollection(13).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance, f"& _ 
                ".FacturationTTC, Personne.Nom AS Commercial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VBonCommande AS f I"& _ 
                "NNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise AS e ON f.nClient = e.nEntreprise"& _ 
                " LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Personne ON f.nCommercial = Personne."& _ 
                "nPersonne"
            Me._commandCollection(13).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(14) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(14).Connection = Me.Connection
            Me._commandCollection(14).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance, f"& _ 
                ".FacturationTTC, Personne.Nom AS Commercial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VBonCommande AS f I"& _ 
                "NNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise AS e ON f.nClient = e.nEntreprise"& _ 
                " LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Personne ON f.nCommercial = Personne."& _ 
                "nPersonne"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (e.nEntreprise = @nClient)"
            Me._commandCollection(14).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(15).Connection = Me.Connection
            Me._commandCollection(15).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance, f"& _ 
                ".FacturationTTC, Personne.Nom AS Commercial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VBonLivraison AS f "& _ 
                "INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise AS e ON f.nClient = e.nEntrepris"& _ 
                "e LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Personne ON f.nCommercial = Personne"& _ 
                ".nPersonne"
            Me._commandCollection(15).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(16) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(16).Connection = Me.Connection
            Me._commandCollection(16).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance, f"& _ 
                ".FacturationTTC, Personne.Nom AS Commercial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VBonLivraison AS f "& _ 
                "INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise AS e ON f.nClient = e.nEntrepris"& _ 
                "e LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Personne ON f.nCommercial = Personne"& _ 
                ".nPersonne"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (e.nEntreprise = @nClient)"
            Me._commandCollection(16).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(17) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(17).Connection = Me.Connection
            Me._commandCollection(17).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance, f"& _ 
                ".FacturationTTC, Personne.Nom AS Commercial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VDevis AS f INNER J"& _ 
                "OIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise AS e ON f.nClient = e.nEntreprise LEFT "& _ 
                "OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Personne ON f.nCommercial = Personne.nPerso"& _ 
                "nne"
            Me._commandCollection(17).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(18) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(18).Connection = Me.Connection
            Me._commandCollection(18).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, 0.0 AS reste, f.Observation, 0 "& _ 
                "AS nRelance, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS DateImpr, NULL AS DateRelance, f"& _ 
                ".FacturationTTC, Personne.Nom AS Commercial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VDevis AS f INNER J"& _ 
                "OIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Entreprise AS e ON f.nClient = e.nEntreprise LEFT "& _ 
                "OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Personne ON f.nCommercial = Personne.nPerso"& _ 
                "nne"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (e.nEntreprise = @nClient)"
            Me._commandCollection(18).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(18).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(19) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(19).Connection = Me.Connection
            Me._commandCollection(19).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, f.MontantTTC - ISNULL(r.TotalRe"& _ 
                "gle, 0) AS reste, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         f.Observation, f.nRelance, f.DateIm"& _ 
                "pr, f.DateRelance, f.FacturationTTC, Personne.Nom AS Commercial, f.nCommercial, "& _ 
                "f.AdresseFacture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFacture AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "     Entreprise AS e ON f.nClient = e.nEntreprise LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            Personne ON f.nCommercial = Personne.nPersonne LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                         (SELECT        nFacture, SUM(Montant) AS TotalRegle"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                             FROM            Reglement_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "              GROUP BY nFacture) AS r ON r.nFacture = f.nDevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (e."& _ 
                "nEntreprise = @nClient)"
            Me._commandCollection(19).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(19).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(20) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(20).Connection = Me.Connection
            Me._commandCollection(20).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, f.MontantTTC - ISNULL(r.TotalRe"& _ 
                "gle, 0) AS reste, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         f.Observation, f.nRelance, f.DateIm"& _ 
                "pr, f.DateRelance"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFacture AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      Entreprise AS e ON f.nClient = e.nEntreprise LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "                 (SELECT        nFacture, SUM(Montant) AS TotalRegle"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "                     FROM            Reglement_Detail AS Reglement_Detail_1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                            GROUP BY nFacture) AS r ON r.nFacture = f.nDevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WH"& _ 
                "ERE        (e.nEntreprise = @nClient) AND (f.Paye = @Paye)"
            Me._commandCollection(20).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(20).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(20).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paye", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(21) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(21).Connection = Me.Connection
            Me._commandCollection(21).CommandText = "SELECT        f.nDevis, f.Origine, f.nOrigine, f.nFacture, f.DateFacture, f.DateE"& _ 
                "cheance, f.nClient, e.Nom, f.MontantTTC, f.Paye, f.MontantTTC - ISNULL(r.TotalRe"& _ 
                "gle, 0) AS reste, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         f.Observation, f.nRelance, f.DateIm"& _ 
                "pr, f.DateRelance, f.FacturationTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFacture AS f INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                        Entreprise AS e ON f.nClient = e.nEntreprise LEFT OUTER "& _ 
                "JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             (SELECT        nFacture, SUM(Montant) AS Tota"& _ 
                "lRegle"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               FROM            Reglement_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                        GROUP BY nFacture) AS r ON r.nFacture = f.nDevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "(nDevis=@nDevis)"
            Me._commandCollection(21).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(21).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillVFacture(ByVal dataTable As DsPieces.PiecesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetVFactureData() As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillABonReception(ByVal dataTable As DsPieces.PiecesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetABonReceptionData() As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillABonReceptionByClient(ByVal dataTable As DsPieces.PiecesDataTable, ByVal nClient As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetABonReceptionDataByClient(ByVal nClient As Decimal) As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillAFacture(ByVal dataTable As DsPieces.PiecesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAFactureData() As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillAFactureByClient(ByVal dataTable As DsPieces.PiecesDataTable, ByVal nClient As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAFactureDataByClient(ByVal nClient As Decimal) As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillAFactureByClientByPaye(ByVal dataTable As DsPieces.PiecesDataTable, ByVal nClient As Decimal, ByVal Paye As Boolean) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(11)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Paye,Boolean)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataAFactureByClientByPaye(ByVal nClient As Decimal, ByVal Paye As Boolean) As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(11)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Paye,Boolean)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillImputationReglementByClient(ByVal dataTable As DsPieces.PiecesDataTable, ByVal nEntreprise As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(12)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nEntreprise,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataImputationReglementByClient(ByVal nEntreprise As Decimal) As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(12)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nEntreprise,Decimal)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillVBonCommande(ByVal dataTable As DsPieces.PiecesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(13)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetVBonCommandeData() As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(13)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillVBonCommandeByClient(ByVal dataTable As DsPieces.PiecesDataTable, ByVal nClient As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(14)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetVBonCommandeDataByClient(ByVal nClient As Decimal) As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(14)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillVBonLivraison(ByVal dataTable As DsPieces.PiecesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(15)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetVBonLivraisonData() As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(15)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillVBonLivraisonByClient(ByVal dataTable As DsPieces.PiecesDataTable, ByVal nClient As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(16)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetVBonLivraisonDataByClient(ByVal nClient As Decimal) As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(16)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillVDevis(ByVal dataTable As DsPieces.PiecesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(17)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetVDevisData() As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(17)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillVDevisByClient(ByVal dataTable As DsPieces.PiecesDataTable, ByVal nClient As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(18)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetVDevisDataByClient(ByVal nClient As Decimal) As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(18)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillVFactureByClient(ByVal dataTable As DsPieces.PiecesDataTable, ByVal nClient As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(19)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetVFactureDataByClient(ByVal nClient As Decimal) As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(19)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillVFactureByClientByPaye(ByVal dataTable As DsPieces.PiecesDataTable, ByVal nClient As Decimal, ByVal Paye As Boolean) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(20)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Paye,Boolean)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataVFactureByClientByPaye(ByVal nClient As Decimal, ByVal Paye As Boolean) As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(20)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Paye,Boolean)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillVFactureBynDevis(ByVal dataTable As DsPieces.PiecesDataTable, ByVal nDevis As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(21)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetVFactureDataBynDevis(ByVal nDevis As Decimal) As DsPieces.PiecesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(21)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            Dim dataTable As DsPieces.PiecesDataTable = New DsPieces.PiecesDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteABonReception(ByVal nDevis_Original As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(nDevis_Original,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteAFacture(ByVal nDevis_Original As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(nDevis_Original,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteVBonCommande(ByVal nDevis_Original As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(nDevis_Original,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteVBonLivraison(ByVal nDevis_Original As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(nDevis_Original,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteVDevis(ByVal nDevis_Original As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            command.Parameters(0).Value = CType(nDevis_Original,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteVFacture(ByVal nDevis_Original As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            command.Parameters(0).Value = CType(nDevis_Original,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ChildObjectsTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ChildObjects"
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("tablename", "tablename")
            tableMapping.ColumnMappings.Add("lib", "lib")
            tableMapping.ColumnMappings.Add("nb", "nb")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select @nDevis as nDevis,'Reglement' as tablename, 'Réglement' as lib, count(*) a"& _ 
                "s nb from Reglement_detail where nFacture=@nDevis and @table='VFacture' having C"& _ 
                "ount(*)>0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION select @nDevis as nDevis,'Reglement' as tablename, 'Réglement' "& _ 
                "as lib, count(*) as nb from AReglement_detail where nFacture=@nDevis and @table="& _ 
                "'AFacture' having Count(*)>0"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@table", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByNDevisAndTable(ByVal dataTable As DsPieces.ChildObjectsDataTable, ByVal nDevis As Global.System.Nullable(Of Decimal), ByVal table As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (table Is Nothing) Then
                Throw New Global.System.ArgumentNullException("table")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(table,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataNDevisAndTable(ByVal nDevis As Global.System.Nullable(Of Decimal), ByVal table As String) As DsPieces.ChildObjectsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (table Is Nothing) Then
                Throw New Global.System.ArgumentNullException("table")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(table,String)
            End If
            Dim dataTable As DsPieces.ChildObjectsDataTable = New DsPieces.ChildObjectsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pieces_DetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pieces_Detail"
            tableMapping.ColumnMappings.Add("nDetailDevis", "nDetailDevis")
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("nLigne", "nLigne")
            tableMapping.ColumnMappings.Add("NLot", "NLot")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("NbParution", "NbParution")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("LibUnite1", "LibUnite1")
            tableMapping.ColumnMappings.Add("Unite2", "Unite2")
            tableMapping.ColumnMappings.Add("LibUnite2", "LibUnite2")
            tableMapping.ColumnMappings.Add("PrixUHT", "PrixUHT")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("TxTva", "TxTva")
            tableMapping.ColumnMappings.Add("PrixUTVA", "PrixUTVA")
            tableMapping.ColumnMappings.Add("PrixUTTC", "PrixUTTC")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("MontantLigneHT", "MontantLigneHT")
            tableMapping.ColumnMappings.Add("MontantLigneTVA", "MontantLigneTVA")
            tableMapping.ColumnMappings.Add("MontantLigneTTC", "MontantLigneTTC")
            tableMapping.ColumnMappings.Add("NCompte", "NCompte")
            tableMapping.ColumnMappings.Add("NActivite", "NActivite")
            tableMapping.ColumnMappings.Add("PrixUAchatHT", "PrixUAchatHT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VFacture_Detail] WHERE (([nDetailDevis] = @Original_nDetailDev"& _ 
                "is) AND ((@IsNull_nDevis = 1 AND [nDevis] IS NULL) OR ([nDevis] = @Original_nDev"& _ 
                "is)) AND ((@IsNull_nLigne = 1 AND [nLigne] IS NULL) OR ([nLigne] = @Original_nLi"& _ 
                "gne)) AND ((@IsNull_NLot = 1 AND [NLot] IS NULL) OR ([NLot] = @Original_NLot)) A"& _ 
                "ND ((@IsNull_CodeProduit = 1 AND [CodeProduit] IS NULL) OR ([CodeProduit] = @Ori"& _ 
                "ginal_CodeProduit)) AND ((@IsNull_NbParution = 1 AND [NbParution] IS NULL) OR (["& _ 
                "NbParution] = @Original_NbParution)) AND ((@IsNull_Unite1 = 1 AND [Unite1] IS NU"& _ 
                "LL) OR ([Unite1] = @Original_Unite1)) AND ((@IsNull_LibUnite1 = 1 AND [LibUnite1"& _ 
                "] IS NULL) OR ([LibUnite1] = @Original_LibUnite1)) AND ((@IsNull_Unite2 = 1 AND "& _ 
                "[Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) AND ((@IsNull_LibUnite2 = 1 "& _ 
                "AND [LibUnite2] IS NULL) OR ([LibUnite2] = @Original_LibUnite2)) AND ((@IsNull_P"& _ 
                "rixUHT = 1 AND [PrixUHT] IS NULL) OR ([PrixUHT] = @Original_PrixUHT)) AND ((@IsN"& _ 
                "ull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA)) AND ((@IsNull_TxT"& _ 
                "va = 1 AND [TxTva] IS NULL) OR ([TxTva] = @Original_TxTva)) AND ((@IsNull_PrixUT"& _ 
                "VA = 1 AND [PrixUTVA] IS NULL) OR ([PrixUTVA] = @Original_PrixUTVA)) AND ((@IsNu"& _ 
                "ll_PrixUTTC = 1 AND [PrixUTTC] IS NULL) OR ([PrixUTTC] = @Original_PrixUTTC)) AN"& _ 
                "D ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Original_Remise)) A"& _ 
                "ND ((@IsNull_MontantLigneHT = 1 AND [MontantLigneHT] IS NULL) OR ([MontantLigneH"& _ 
                "T] = @Original_MontantLigneHT)) AND ((@IsNull_MontantLigneTVA = 1 AND [MontantLi"& _ 
                "gneTVA] IS NULL) OR ([MontantLigneTVA] = @Original_MontantLigneTVA)) AND ((@IsNu"& _ 
                "ll_MontantLigneTTC = 1 AND [MontantLigneTTC] IS NULL) OR ([MontantLigneTTC] = @O"& _ 
                "riginal_MontantLigneTTC)) AND ((@IsNull_NCompte = 1 AND [NCompte] IS NULL) OR (["& _ 
                "NCompte] = @Original_NCompte)) AND ((@IsNull_NActivite = 1 AND [NActivite] IS NU"& _ 
                "LL) OR ([NActivite] = @Original_NActivite)) AND ((@IsNull_PrixUAchatHT = 1 AND ["& _ 
                "PrixUAchatHT] IS NULL) OR ([PrixUAchatHT] = @Original_PrixUAchatHT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDevis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeProduit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NbParution", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NbParution", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxTva", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxTva", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActivite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUAchatHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VFacture_Detail] ([nDetailDevis], [nDevis], [nLigne], [NLot], "& _ 
                "[CodeProduit], [Libelle], [NbParution], [Unite1], [LibUnite1], [Unite2], [LibUni"& _ 
                "te2], [PrixUHT], [TTVA], [TxTva], [PrixUTVA], [PrixUTTC], [Remise], [MontantLign"& _ 
                "eHT], [MontantLigneTVA], [MontantLigneTTC], [NCompte], [NActivite], [PrixUAchatH"& _ 
                "T]) VALUES (@nDetailDevis, @nDevis, @nLigne, @NLot, @CodeProduit, @Libelle, @NbP"& _ 
                "arution, @Unite1, @LibUnite1, @Unite2, @LibUnite2, @PrixUHT, @TTVA, @TxTva, @Pri"& _ 
                "xUTVA, @PrixUTTC, @Remise, @MontantLigneHT, @MontantLigneTVA, @MontantLigneTTC, "& _ 
                "@NCompte, @NActivite, @PrixUAchatHT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, NLot"& _ 
                ", CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUH"& _ 
                "T, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, Mon"& _ 
                "tantLigneTTC, NCompte, NActivite, PrixUAchatHT FROM VFacture_Detail WHERE (nDeta"& _ 
                "ilDevis = @nDetailDevis)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VFacture_Detail] SET [nDetailDevis] = @nDetailDevis, [nDevis] = @nD"& _ 
                "evis, [nLigne] = @nLigne, [NLot] = @NLot, [CodeProduit] = @CodeProduit, [Libelle"& _ 
                "] = @Libelle, [NbParution] = @NbParution, [Unite1] = @Unite1, [LibUnite1] = @Lib"& _ 
                "Unite1, [Unite2] = @Unite2, [LibUnite2] = @LibUnite2, [PrixUHT] = @PrixUHT, [TTV"& _ 
                "A] = @TTVA, [TxTva] = @TxTva, [PrixUTVA] = @PrixUTVA, [PrixUTTC] = @PrixUTTC, [R"& _ 
                "emise] = @Remise, [MontantLigneHT] = @MontantLigneHT, [MontantLigneTVA] = @Monta"& _ 
                "ntLigneTVA, [MontantLigneTTC] = @MontantLigneTTC, [NCompte] = @NCompte, [NActivi"& _ 
                "te] = @NActivite, [PrixUAchatHT] = @PrixUAchatHT WHERE (([nDetailDevis] = @Origi"& _ 
                "nal_nDetailDevis) AND ((@IsNull_nDevis = 1 AND [nDevis] IS NULL) OR ([nDevis] = "& _ 
                "@Original_nDevis)) AND ((@IsNull_nLigne = 1 AND [nLigne] IS NULL) OR ([nLigne] ="& _ 
                " @Original_nLigne)) AND ((@IsNull_NLot = 1 AND [NLot] IS NULL) OR ([NLot] = @Ori"& _ 
                "ginal_NLot)) AND ((@IsNull_CodeProduit = 1 AND [CodeProduit] IS NULL) OR ([CodeP"& _ 
                "roduit] = @Original_CodeProduit)) AND ((@IsNull_NbParution = 1 AND [NbParution] "& _ 
                "IS NULL) OR ([NbParution] = @Original_NbParution)) AND ((@IsNull_Unite1 = 1 AND "& _ 
                "[Unite1] IS NULL) OR ([Unite1] = @Original_Unite1)) AND ((@IsNull_LibUnite1 = 1 "& _ 
                "AND [LibUnite1] IS NULL) OR ([LibUnite1] = @Original_LibUnite1)) AND ((@IsNull_U"& _ 
                "nite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) AND ((@IsNull_"& _ 
                "LibUnite2 = 1 AND [LibUnite2] IS NULL) OR ([LibUnite2] = @Original_LibUnite2)) A"& _ 
                "ND ((@IsNull_PrixUHT = 1 AND [PrixUHT] IS NULL) OR ([PrixUHT] = @Original_PrixUH"& _ 
                "T)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA)) AND"& _ 
                " ((@IsNull_TxTva = 1 AND [TxTva] IS NULL) OR ([TxTva] = @Original_TxTva)) AND (("& _ 
                "@IsNull_PrixUTVA = 1 AND [PrixUTVA] IS NULL) OR ([PrixUTVA] = @Original_PrixUTVA"& _ 
                ")) AND ((@IsNull_PrixUTTC = 1 AND [PrixUTTC] IS NULL) OR ([PrixUTTC] = @Original"& _ 
                "_PrixUTTC)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Origi"& _ 
                "nal_Remise)) AND ((@IsNull_MontantLigneHT = 1 AND [MontantLigneHT] IS NULL) OR ("& _ 
                "[MontantLigneHT] = @Original_MontantLigneHT)) AND ((@IsNull_MontantLigneTVA = 1 "& _ 
                "AND [MontantLigneTVA] IS NULL) OR ([MontantLigneTVA] = @Original_MontantLigneTVA"& _ 
                ")) AND ((@IsNull_MontantLigneTTC = 1 AND [MontantLigneTTC] IS NULL) OR ([Montant"& _ 
                "LigneTTC] = @Original_MontantLigneTTC)) AND ((@IsNull_NCompte = 1 AND [NCompte] "& _ 
                "IS NULL) OR ([NCompte] = @Original_NCompte)) AND ((@IsNull_NActivite = 1 AND [NA"& _ 
                "ctivite] IS NULL) OR ([NActivite] = @Original_NActivite)) AND ((@IsNull_PrixUAch"& _ 
                "atHT = 1 AND [PrixUAchatHT] IS NULL) OR ([PrixUAchatHT] = @Original_PrixUAchatHT"& _ 
                ")));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParutio"& _ 
                "n, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTT"& _ 
                "C, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite,"& _ 
                " PrixUAchatHT FROM VFacture_Detail WHERE (nDetailDevis = @nDetailDevis)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDevis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeProduit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NbParution", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NbParution", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxTva", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxTva", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActivite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUAchatHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unit"& _ 
                "e1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remi"& _ 
                "se, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUA"& _ 
                "chatHT FROM dbo.VFacture_Detail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsPieces.Pieces_DetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DsPieces.Pieces_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsPieces.Pieces_DetailDataTable = New DsPieces.Pieces_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DsPieces.Pieces_DetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DsPieces) As Integer
            Return Me.Adapter.Update(dataSet, "Pieces_Detail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDetailDevis,Decimal)
            If (Original_nDevis.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nDevis.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_nLigne.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nLigne.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_NLot Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_NLot,String)
            End If
            If (Original_CodeProduit Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_NbParution.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_NbParution.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Unite1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Unite1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_LibUnite1,String)
            End If
            If (Original_Unite2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Unite2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_LibUnite2,String)
            End If
            If (Original_PrixUHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PrixUHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_TTVA,String)
            End If
            If (Original_TxTva.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_TxTva.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompte Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_NCompte,String)
            End If
            If (Original_NActivite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_NActivite,String)
            End If
            If (Original_PrixUAchatHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nDetailDevis,Decimal)
            If (nDevis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (nLigne.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nLigne.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NLot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NLot,String)
            End If
            If (CodeProduit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Libelle,String)
            End If
            If (NbParution.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NbParution.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Unite1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Unite1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LibUnite1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LibUnite1,String)
            End If
            If (Unite2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Unite2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LibUnite2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LibUnite2,String)
            End If
            If (PrixUHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrixUHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(TTVA,String)
            End If
            If (TxTva.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(TxTva.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrixUTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrixUTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(NActivite,String)
            End If
            If (PrixUAchatHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nDetailDevis,Decimal)
            If (nDevis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (nLigne.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nLigne.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NLot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NLot,String)
            End If
            If (CodeProduit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Libelle,String)
            End If
            If (NbParution.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NbParution.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Unite1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Unite1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LibUnite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(LibUnite1,String)
            End If
            If (Unite2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Unite2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LibUnite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LibUnite2,String)
            End If
            If (PrixUHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PrixUHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(TTVA,String)
            End If
            If (TxTva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(TxTva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrixUTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrixUTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(NActivite,String)
            End If
            If (PrixUAchatHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_nDetailDevis,Decimal)
            If (Original_nDevis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_nDevis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_nLigne.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_nLigne.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_NLot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_NLot,String)
            End If
            If (Original_CodeProduit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_NbParution.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_NbParution.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_Unite1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Unite1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_LibUnite1,String)
            End If
            If (Original_Unite2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Unite2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_LibUnite2,String)
            End If
            If (Original_PrixUHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_PrixUHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_TTVA,String)
            End If
            If (Original_TxTva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_TxTva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_NCompte,String)
            End If
            If (Original_NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_NActivite,String)
            End If
            If (Original_PrixUAchatHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUAchatHT, Original_nDetailDevis, Original_nDevis, Original_nLigne, Original_NLot, Original_CodeProduit, Original_NbParution, Original_Unite1, Original_LibUnite1, Original_Unite2, Original_LibUnite2, Original_PrixUHT, Original_TTVA, Original_TxTva, Original_PrixUTVA, Original_PrixUTTC, Original_Remise, Original_MontantLigneHT, Original_MontantLigneTVA, Original_MontantLigneTTC, Original_NCompte, Original_NActivite, Original_PrixUAchatHT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AvancesTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Avances"
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("date", "date")
            tableMapping.ColumnMappings.Add("Reste", "Reste")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        'R' AS Type, r.nReglement AS id, r.nMode + ISNULL(' n°' + r.Observa"& _ 
                "tion, '') AS Libelle, r.DateReglement AS date, r.Montant, r.Montant - SUM(ISNULL"& _ 
                "(rd.Montant, 0) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         - ISNULL(rd.Perte, 0) + ISNULL(rd.Pro"& _ 
                "fit, 0) - ISNULL(r.MontantEscompte, 0)) AS Reste"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Reglement AS r"& _ 
                " LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Reglement_Detail AS rd ON r.nReglemen"& _ 
                "t = rd.nReglement"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (r.nEntreprise = @nClient)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY r.nReglemen"& _ 
                "t, r.nMode, r.Observation, r.DateReglement, r.Montant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"HAVING        (r.Montant "& _ 
                "- SUM(ISNULL(rd.Montant, 0) - ISNULL(rd.Perte, 0) + ISNULL(rd.Profit, 0) - ISNUL"& _ 
                "L(r.MontantEscompte, 0)) <> 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        'A' AS Type, f.nDevis AS id"& _ 
                ", 'Avoir n°' + CAST(f.nFacture AS varchar(10)) AS Libelle, f.DateFacture AS date"& _ 
                ", - f.MontantTTC AS montant, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         - f.MontantTTC + SUM(ISN"& _ 
                "ULL(rd.Montant, 0)) AS Reste"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFacture AS f LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                      Reglement_Detail AS rd ON f.nDevis = rd.nFacture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   "& _ 
                "     (f.MontantTTC < 0) AND (f.nClient = @nClient)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY f.nDevis, f.nFactur"& _ 
                "e, f.DateFacture, f.MontantTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"HAVING        (f.MontantTTC - SUM(ISNULL(rd.Mont"& _ 
                "ant, 0)) <> 0)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        f.MontantTTC - ISNULL(r.TotalRegle, 0) AS reste"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VF"& _ 
                "acture AS f "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN (SELECT        nFacture, SUM(Montant) AS TotalRegle"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                            FROM            Reglement_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "             GROUP BY nFacture) AS r ON r.nFacture = f.nDevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        f.nD"& _ 
                "evis=@nDevis"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByNClient(ByVal dataTable As DsPieces.AvancesDataTable, ByVal nClient As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (nClient.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataByNClient(ByVal nClient As Global.System.Nullable(Of Decimal)) As DsPieces.AvancesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (nClient.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nClient.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DsPieces.AvancesDataTable = New DsPieces.AvancesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetResteAPayer(ByVal nDevis As Decimal) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(nDevis,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Remise_DetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Remise_Detail"
            tableMapping.ColumnMappings.Add("nDetailRemise", "nDetailRemise")
            tableMapping.ColumnMappings.Add("nRemise", "nRemise")
            tableMapping.ColumnMappings.Add("nReglement", "nReglement")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Remise_Detail] WHERE (([nDetailRemise] = @Original_nDetailRemi"& _ 
                "se) AND ([nRemise] = @Original_nRemise) AND ([nReglement] = @Original_nReglement"& _ 
                "))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nDetailRemise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nRemise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nReglement", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nReglement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Remise_Detail] ([nDetailRemise], [nRemise], [nReglement]) VALU"& _ 
                "ES (@nDetailRemise, @nRemise, @nReglement);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailRemise, nRemise, nReg"& _ 
                "lement FROM Remise_Detail WHERE (nDetailRemise = @nDetailRemise)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nDetailRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nReglement", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nReglement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Remise_Detail] SET [nDetailRemise] = @nDetailRemise, [nRemise] = @n"& _ 
                "Remise, [nReglement] = @nReglement WHERE (([nDetailRemise] = @Original_nDetailRe"& _ 
                "mise) AND ([nRemise] = @Original_nRemise) AND ([nReglement] = @Original_nRegleme"& _ 
                "nt));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailRemise, nRemise, nReglement FROM Remise_Detail WHERE (nDeta"& _ 
                "ilRemise = @nDetailRemise)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nDetailRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nRemise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nReglement", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nReglement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nDetailRemise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nRemise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nRemise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nReglement", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nReglement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDetailRemise, nRemise, nReglement FROM dbo.Remise_Detail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nDetailRemise, nRemise, nReglement FROM dbo.Remise_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (nRegleme"& _ 
                "nt = @nReglement)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nReglement", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "nReglement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsPieces.Remise_DetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DsPieces.Remise_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsPieces.Remise_DetailDataTable = New DsPieces.Remise_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynReglement(ByVal dataTable As DsPieces.Remise_DetailDataTable, ByVal nReglement As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nReglement,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynReglement(ByVal nReglement As Decimal) As DsPieces.Remise_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nReglement,Decimal)
            Dim dataTable As DsPieces.Remise_DetailDataTable = New DsPieces.Remise_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DsPieces.Remise_DetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DsPieces) As Integer
            Return Me.Adapter.Update(dataSet, "Remise_Detail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nDetailRemise As Decimal, ByVal Original_nRemise As Decimal, ByVal Original_nReglement As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDetailRemise,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nRemise,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nReglement,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal nDetailRemise As Decimal, ByVal nRemise As Decimal, ByVal nReglement As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nDetailRemise,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(nRemise,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(nReglement,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nDetailRemise As Decimal, ByVal nRemise As Decimal, ByVal nReglement As Decimal, ByVal Original_nDetailRemise As Decimal, ByVal Original_nRemise As Decimal, ByVal Original_nReglement As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nDetailRemise,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nRemise,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nReglement,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_nDetailRemise,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_nRemise,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_nReglement,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nRemise As Decimal, ByVal nReglement As Decimal, ByVal Original_nDetailRemise As Decimal, ByVal Original_nRemise As Decimal, ByVal Original_nReglement As Decimal) As Integer
            Return Me.Update(Original_nDetailRemise, nRemise, nReglement, Original_nDetailRemise, Original_nRemise, Original_nReglement)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProduitTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Produit"
            tableMapping.ColumnMappings.Add("nProduit", "nProduit")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("LibelleLong", "LibelleLong")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("PrixAHT", "PrixAHT")
            tableMapping.ColumnMappings.Add("PrixATTC", "PrixATTC")
            tableMapping.ColumnMappings.Add("PrixVHT", "PrixVHT")
            tableMapping.ColumnMappings.Add("PrixVTTC", "PrixVTTC")
            tableMapping.ColumnMappings.Add("IsPrixHT", "IsPrixHT")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("Unite2", "Unite2")
            tableMapping.ColumnMappings.Add("ProduitAchat", "ProduitAchat")
            tableMapping.ColumnMappings.Add("ProduitVente", "ProduitVente")
            tableMapping.ColumnMappings.Add("NCompteA", "NCompteA")
            tableMapping.ColumnMappings.Add("NActiviteA", "NActiviteA")
            tableMapping.ColumnMappings.Add("NCompteV", "NCompteV")
            tableMapping.ColumnMappings.Add("NActiviteV", "NActiviteV")
            tableMapping.ColumnMappings.Add("Famille1", "Famille1")
            tableMapping.ColumnMappings.Add("Famille2", "Famille2")
            tableMapping.ColumnMappings.Add("Famille3", "Famille3")
            tableMapping.ColumnMappings.Add("U1U2Independant", "U1U2Independant")
            tableMapping.ColumnMappings.Add("U1xU2", "U1xU2")
            tableMapping.ColumnMappings.Add("CodeBarre", "CodeBarre")
            tableMapping.ColumnMappings.Add("Inactif", "Inactif")
            tableMapping.ColumnMappings.Add("CoefU2", "CoefU2")
            tableMapping.ColumnMappings.Add("TypeFacturation", "TypeFacturation")
            tableMapping.ColumnMappings.Add("CoefAV", "CoefAV")
            tableMapping.ColumnMappings.Add("ProduitCompose", "ProduitCompose")
            tableMapping.ColumnMappings.Add("Image", "Image")
            tableMapping.ColumnMappings.Add("GestionStock", "GestionStock")
            tableMapping.ColumnMappings.Add("DecompteAuto", "DecompteAuto")
            tableMapping.ColumnMappings.Add("RefFournisseur", "RefFournisseur")
            tableMapping.ColumnMappings.Add("nFournisseur", "nFournisseur")
            tableMapping.ColumnMappings.Add("IsSortieImpr", "IsSortieImpr")
            tableMapping.ColumnMappings.Add("IsEnVente", "IsEnVente")
            tableMapping.ColumnMappings.Add("AMM", "AMM")
            tableMapping.ColumnMappings.Add("TAXSM", "TAXSM")
            tableMapping.ColumnMappings.Add("IsAMM", "IsAMM")
            tableMapping.ColumnMappings.Add("DateMaj", "DateMaj")
            tableMapping.ColumnMappings.Add("isComm", "isComm")
            tableMapping.ColumnMappings.Add("Conditionnement", "Conditionnement")
            tableMapping.ColumnMappings.Add("SeuilStock", "SeuilStock")
            tableMapping.ColumnMappings.Add("NCompteX", "NCompteX")
            tableMapping.ColumnMappings.Add("NActiviteX", "NActiviteX")
            tableMapping.ColumnMappings.Add("Ingredients", "Ingredients")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Produit] WHERE (([nProduit] = @Original_nProduit) AND ([CodePr"& _ 
                "oduit] = @Original_CodeProduit) AND ((@IsNull_Libelle = 1 AND [Libelle] IS NULL)"& _ 
                " OR ([Libelle] = @Original_Libelle)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) "& _ 
                "OR ([TTVA] = @Original_TTVA)) AND ((@IsNull_PrixAHT = 1 AND [PrixAHT] IS NULL) O"& _ 
                "R ([PrixAHT] = @Original_PrixAHT)) AND ((@IsNull_PrixATTC = 1 AND [PrixATTC] IS "& _ 
                "NULL) OR ([PrixATTC] = @Original_PrixATTC)) AND ((@IsNull_PrixVHT = 1 AND [PrixV"& _ 
                "HT] IS NULL) OR ([PrixVHT] = @Original_PrixVHT)) AND ((@IsNull_PrixVTTC = 1 AND "& _ 
                "[PrixVTTC] IS NULL) OR ([PrixVTTC] = @Original_PrixVTTC)) AND ([IsPrixHT] = @Ori"& _ 
                "ginal_IsPrixHT) AND ((@IsNull_Unite1 = 1 AND [Unite1] IS NULL) OR ([Unite1] = @O"& _ 
                "riginal_Unite1)) AND ((@IsNull_Unite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @"& _ 
                "Original_Unite2)) AND ([ProduitAchat] = @Original_ProduitAchat) AND ([ProduitVen"& _ 
                "te] = @Original_ProduitVente) AND ((@IsNull_NCompteA = 1 AND [NCompteA] IS NULL)"& _ 
                " OR ([NCompteA] = @Original_NCompteA)) AND ((@IsNull_NActiviteA = 1 AND [NActivi"& _ 
                "teA] IS NULL) OR ([NActiviteA] = @Original_NActiviteA)) AND ((@IsNull_NCompteV ="& _ 
                " 1 AND [NCompteV] IS NULL) OR ([NCompteV] = @Original_NCompteV)) AND ((@IsNull_N"& _ 
                "ActiviteV = 1 AND [NActiviteV] IS NULL) OR ([NActiviteV] = @Original_NActiviteV)"& _ 
                ") AND ((@IsNull_Famille1 = 1 AND [Famille1] IS NULL) OR ([Famille1] = @Original_"& _ 
                "Famille1)) AND ((@IsNull_Famille2 = 1 AND [Famille2] IS NULL) OR ([Famille2] = @"& _ 
                "Original_Famille2)) AND ((@IsNull_Famille3 = 1 AND [Famille3] IS NULL) OR ([Fami"& _ 
                "lle3] = @Original_Famille3)) AND ((@IsNull_U1U2Independant = 1 AND [U1U2Independ"& _ 
                "ant] IS NULL) OR ([U1U2Independant] = @Original_U1U2Independant)) AND ((@IsNull_"& _ 
                "U1xU2 = 1 AND [U1xU2] IS NULL) OR ([U1xU2] = @Original_U1xU2)) AND ((@IsNull_Cod"& _ 
                "eBarre = 1 AND [CodeBarre] IS NULL) OR ([CodeBarre] = @Original_CodeBarre)) AND "& _ 
                "((@IsNull_Inactif = 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_Inactif))"& _ 
                " AND ((@IsNull_CoefU2 = 1 AND [CoefU2] IS NULL) OR ([CoefU2] = @Original_CoefU2)"& _ 
                ") AND ((@IsNull_TypeFacturation = 1 AND [TypeFacturation] IS NULL) OR ([TypeFact"& _ 
                "uration] = @Original_TypeFacturation)) AND ((@IsNull_CoefAV = 1 AND [CoefAV] IS "& _ 
                "NULL) OR ([CoefAV] = @Original_CoefAV)) AND ((@IsNull_ProduitCompose = 1 AND [Pr"& _ 
                "oduitCompose] IS NULL) OR ([ProduitCompose] = @Original_ProduitCompose)) AND ((@"& _ 
                "IsNull_GestionStock = 1 AND [GestionStock] IS NULL) OR ([GestionStock] = @Origin"& _ 
                "al_GestionStock)) AND ((@IsNull_DecompteAuto = 1 AND [DecompteAuto] IS NULL) OR "& _ 
                "([DecompteAuto] = @Original_DecompteAuto)) AND ((@IsNull_RefFournisseur = 1 AND "& _ 
                "[RefFournisseur] IS NULL) OR ([RefFournisseur] = @Original_RefFournisseur)) AND "& _ 
                "((@IsNull_nFournisseur = 1 AND [nFournisseur] IS NULL) OR ([nFournisseur] = @Ori"& _ 
                "ginal_nFournisseur)) AND ([IsSortieImpr] = @Original_IsSortieImpr) AND ([IsEnVen"& _ 
                "te] = @Original_IsEnVente) AND ((@IsNull_AMM = 1 AND [AMM] IS NULL) OR ([AMM] = "& _ 
                "@Original_AMM)) AND ((@IsNull_TAXSM = 1 AND [TAXSM] IS NULL) OR ([TAXSM] = @Orig"& _ 
                "inal_TAXSM)) AND ([IsAMM] = @Original_IsAMM) AND ((@IsNull_DateMaj = 1 AND [Date"& _ 
                "Maj] IS NULL) OR ([DateMaj] = @Original_DateMaj)) AND ((@IsNull_isComm = 1 AND ["& _ 
                "isComm] IS NULL) OR ([isComm] = @Original_isComm)) AND ((@IsNull_Conditionnement"& _ 
                " = 1 AND [Conditionnement] IS NULL) OR ([Conditionnement] = @Original_Conditionn"& _ 
                "ement)) AND ([SeuilStock] = @Original_SeuilStock) AND ((@IsNull_NCompteX = 1 AND"& _ 
                " [NCompteX] IS NULL) OR ([NCompteX] = @Original_NCompteX)) AND ((@IsNull_NActivi"& _ 
                "teX = 1 AND [NActiviteX] IS NULL) OR ([NActiviteX] = @Original_NActiviteX)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Libelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixAHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixAHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixATTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixATTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1U2Independant", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1xU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1xU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeBarre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefAV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefAV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProduitCompose", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GestionStock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DecompteAuto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RefFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXSM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateMaj", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isComm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Produit] ([nProduit], [CodeProduit], [Libelle], [LibelleLong],"& _ 
                " [TTVA], [PrixAHT], [PrixATTC], [PrixVHT], [PrixVTTC], [IsPrixHT], [Unite1], [Un"& _ 
                "ite2], [ProduitAchat], [ProduitVente], [NCompteA], [NActiviteA], [NCompteV], [NA"& _ 
                "ctiviteV], [Famille1], [Famille2], [Famille3], [U1U2Independant], [U1xU2], [Code"& _ 
                "Barre], [Inactif], [CoefU2], [TypeFacturation], [CoefAV], [ProduitCompose], [Ima"& _ 
                "ge], [GestionStock], [DecompteAuto], [RefFournisseur], [nFournisseur], [IsSortie"& _ 
                "Impr], [IsEnVente], [AMM], [TAXSM], [IsAMM], [DateMaj], [isComm], [Conditionneme"& _ 
                "nt], [SeuilStock], [NCompteX], [NActiviteX], [Ingredients]) VALUES (@nProduit, @"& _ 
                "CodeProduit, @Libelle, @LibelleLong, @TTVA, @PrixAHT, @PrixATTC, @PrixVHT, @Prix"& _ 
                "VTTC, @IsPrixHT, @Unite1, @Unite2, @ProduitAchat, @ProduitVente, @NCompteA, @NAc"& _ 
                "tiviteA, @NCompteV, @NActiviteV, @Famille1, @Famille2, @Famille3, @U1U2Independa"& _ 
                "nt, @U1xU2, @CodeBarre, @Inactif, @CoefU2, @TypeFacturation, @CoefAV, @ProduitCo"& _ 
                "mpose, @Image, @GestionStock, @DecompteAuto, @RefFournisseur, @nFournisseur, @Is"& _ 
                "SortieImpr, @IsEnVente, @AMM, @TAXSM, @IsAMM, @DateMaj, @isComm, @Conditionnemen"& _ 
                "t, @SeuilStock, @NCompteX, @NActiviteX, @Ingredients);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nProduit, CodePro"& _ 
                "duit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT"& _ 
                ", Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NA"& _ 
                "ctiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inact"& _ 
                "if, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, Decomp"& _ 
                "teAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM"& _ 
                ", DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredient"& _ 
                "s FROM Produit WHERE (nProduit = @nProduit)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibelleLong", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibelleLong", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Image", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Image", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ingredients", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ingredients", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Produit] SET [nProduit] = @nProduit, [CodeProduit] = @CodeProduit, "& _ 
                "[Libelle] = @Libelle, [LibelleLong] = @LibelleLong, [TTVA] = @TTVA, [PrixAHT] = "& _ 
                "@PrixAHT, [PrixATTC] = @PrixATTC, [PrixVHT] = @PrixVHT, [PrixVTTC] = @PrixVTTC, "& _ 
                "[IsPrixHT] = @IsPrixHT, [Unite1] = @Unite1, [Unite2] = @Unite2, [ProduitAchat] ="& _ 
                " @ProduitAchat, [ProduitVente] = @ProduitVente, [NCompteA] = @NCompteA, [NActivi"& _ 
                "teA] = @NActiviteA, [NCompteV] = @NCompteV, [NActiviteV] = @NActiviteV, [Famille"& _ 
                "1] = @Famille1, [Famille2] = @Famille2, [Famille3] = @Famille3, [U1U2Independant"& _ 
                "] = @U1U2Independant, [U1xU2] = @U1xU2, [CodeBarre] = @CodeBarre, [Inactif] = @I"& _ 
                "nactif, [CoefU2] = @CoefU2, [TypeFacturation] = @TypeFacturation, [CoefAV] = @Co"& _ 
                "efAV, [ProduitCompose] = @ProduitCompose, [Image] = @Image, [GestionStock] = @Ge"& _ 
                "stionStock, [DecompteAuto] = @DecompteAuto, [RefFournisseur] = @RefFournisseur, "& _ 
                "[nFournisseur] = @nFournisseur, [IsSortieImpr] = @IsSortieImpr, [IsEnVente] = @I"& _ 
                "sEnVente, [AMM] = @AMM, [TAXSM] = @TAXSM, [IsAMM] = @IsAMM, [DateMaj] = @DateMaj"& _ 
                ", [isComm] = @isComm, [Conditionnement] = @Conditionnement, [SeuilStock] = @Seui"& _ 
                "lStock, [NCompteX] = @NCompteX, [NActiviteX] = @NActiviteX, [Ingredients] = @Ing"& _ 
                "redients WHERE (([nProduit] = @Original_nProduit) AND ([CodeProduit] = @Original"& _ 
                "_CodeProduit) AND ((@IsNull_Libelle = 1 AND [Libelle] IS NULL) OR ([Libelle] = @"& _ 
                "Original_Libelle)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Orig"& _ 
                "inal_TTVA)) AND ((@IsNull_PrixAHT = 1 AND [PrixAHT] IS NULL) OR ([PrixAHT] = @Or"& _ 
                "iginal_PrixAHT)) AND ((@IsNull_PrixATTC = 1 AND [PrixATTC] IS NULL) OR ([PrixATT"& _ 
                "C] = @Original_PrixATTC)) AND ((@IsNull_PrixVHT = 1 AND [PrixVHT] IS NULL) OR (["& _ 
                "PrixVHT] = @Original_PrixVHT)) AND ((@IsNull_PrixVTTC = 1 AND [PrixVTTC] IS NULL"& _ 
                ") OR ([PrixVTTC] = @Original_PrixVTTC)) AND ([IsPrixHT] = @Original_IsPrixHT) AN"& _ 
                "D ((@IsNull_Unite1 = 1 AND [Unite1] IS NULL) OR ([Unite1] = @Original_Unite1)) A"& _ 
                "ND ((@IsNull_Unite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) "& _ 
                "AND ([ProduitAchat] = @Original_ProduitAchat) AND ([ProduitVente] = @Original_Pr"& _ 
                "oduitVente) AND ((@IsNull_NCompteA = 1 AND [NCompteA] IS NULL) OR ([NCompteA] = "& _ 
                "@Original_NCompteA)) AND ((@IsNull_NActiviteA = 1 AND [NActiviteA] IS NULL) OR ("& _ 
                "[NActiviteA] = @Original_NActiviteA)) AND ((@IsNull_NCompteV = 1 AND [NCompteV] "& _ 
                "IS NULL) OR ([NCompteV] = @Original_NCompteV)) AND ((@IsNull_NActiviteV = 1 AND "& _ 
                "[NActiviteV] IS NULL) OR ([NActiviteV] = @Original_NActiviteV)) AND ((@IsNull_Fa"& _ 
                "mille1 = 1 AND [Famille1] IS NULL) OR ([Famille1] = @Original_Famille1)) AND ((@"& _ 
                "IsNull_Famille2 = 1 AND [Famille2] IS NULL) OR ([Famille2] = @Original_Famille2)"& _ 
                ") AND ((@IsNull_Famille3 = 1 AND [Famille3] IS NULL) OR ([Famille3] = @Original_"& _ 
                "Famille3)) AND ((@IsNull_U1U2Independant = 1 AND [U1U2Independant] IS NULL) OR ("& _ 
                "[U1U2Independant] = @Original_U1U2Independant)) AND ((@IsNull_U1xU2 = 1 AND [U1x"& _ 
                "U2] IS NULL) OR ([U1xU2] = @Original_U1xU2)) AND ((@IsNull_CodeBarre = 1 AND [Co"& _ 
                "deBarre] IS NULL) OR ([CodeBarre] = @Original_CodeBarre)) AND ((@IsNull_Inactif "& _ 
                "= 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_Inactif)) AND ((@IsNull_Coe"& _ 
                "fU2 = 1 AND [CoefU2] IS NULL) OR ([CoefU2] = @Original_CoefU2)) AND ((@IsNull_Ty"& _ 
                "peFacturation = 1 AND [TypeFacturation] IS NULL) OR ([TypeFacturation] = @Origin"& _ 
                "al_TypeFacturation)) AND ((@IsNull_CoefAV = 1 AND [CoefAV] IS NULL) OR ([CoefAV]"& _ 
                " = @Original_CoefAV)) AND ((@IsNull_ProduitCompose = 1 AND [ProduitCompose] IS N"& _ 
                "ULL) OR ([ProduitCompose] = @Original_ProduitCompose)) AND ((@IsNull_GestionStoc"& _ 
                "k = 1 AND [GestionStock] IS NULL) OR ([GestionStock] = @Original_GestionStock)) "& _ 
                "AND ((@IsNull_DecompteAuto = 1 AND [DecompteAuto] IS NULL) OR ([DecompteAuto] = "& _ 
                "@Original_DecompteAuto)) AND ((@IsNull_RefFournisseur = 1 AND [RefFournisseur] I"& _ 
                "S NULL) OR ([RefFournisseur] = @Original_RefFournisseur)) AND ((@IsNull_nFournis"& _ 
                "seur = 1 AND [nFournisseur] IS NULL) OR ([nFournisseur] = @Original_nFournisseur"& _ 
                ")) AND ([IsSortieImpr] = @Original_IsSortieImpr) AND ([IsEnVente] = @Original_Is"& _ 
                "EnVente) AND ((@IsNull_AMM = 1 AND [AMM] IS NULL) OR ([AMM] = @Original_AMM)) AN"& _ 
                "D ((@IsNull_TAXSM = 1 AND [TAXSM] IS NULL) OR ([TAXSM] = @Original_TAXSM)) AND ("& _ 
                "[IsAMM] = @Original_IsAMM) AND ((@IsNull_DateMaj = 1 AND [DateMaj] IS NULL) OR ("& _ 
                "[DateMaj] = @Original_DateMaj)) AND ((@IsNull_isComm = 1 AND [isComm] IS NULL) O"& _ 
                "R ([isComm] = @Original_isComm)) AND ((@IsNull_Conditionnement = 1 AND [Conditio"& _ 
                "nnement] IS NULL) OR ([Conditionnement] = @Original_Conditionnement)) AND ([Seui"& _ 
                "lStock] = @Original_SeuilStock) AND ((@IsNull_NCompteX = 1 AND [NCompteX] IS NUL"& _ 
                "L) OR ([NCompteX] = @Original_NCompteX)) AND ((@IsNull_NActiviteX = 1 AND [NActi"& _ 
                "viteX] IS NULL) OR ([NActiviteX] = @Original_NActiviteX)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nProduit, Co"& _ 
                "deProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsP"& _ 
                "rixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompte"& _ 
                "V, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, "& _ 
                "Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, D"& _ 
                "ecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, "& _ 
                "IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingre"& _ 
                "dients FROM Produit WHERE (nProduit = @nProduit)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibelleLong", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibelleLong", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Image", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Image", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ingredients", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ingredients", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Libelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixAHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixAHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixATTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixATTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1U2Independant", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1xU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1xU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeBarre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefAV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefAV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProduitCompose", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GestionStock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DecompteAuto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RefFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXSM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateMaj", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isComm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, Prix"& _ 
                "VHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, N"& _ 
                "ActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, "& _ 
                "U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Imag"& _ 
                "e, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnV"& _ 
                "ente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX,"& _ 
                " NActiviteX, Ingredients FROM dbo.Produit"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsPieces.ProduitDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DsPieces.ProduitDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsPieces.ProduitDataTable = New DsPieces.ProduitDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DsPieces.ProduitDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DsPieces) As Integer
            Return Me.Adapter.Update(dataSet, "Produit")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nProduit,Decimal)
            If (Original_CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CodeProduit")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_Libelle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Libelle,String)
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TTVA,String)
            End If
            If (Original_PrixAHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PrixAHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixATTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PrixATTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_PrixVHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_IsPrixHT,Boolean)
            If (Original_Unite1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Unite1,String)
            End If
            If (Original_Unite2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Unite2,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ProduitAchat,Boolean)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_ProduitVente,Boolean)
            If (Original_NCompteA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_NCompteA,String)
            End If
            If (Original_NActiviteA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_NActiviteA,String)
            End If
            If (Original_NCompteV Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_NCompteV,String)
            End If
            If (Original_NActiviteV Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_NActiviteV,String)
            End If
            If (Original_Famille1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Famille1.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Famille2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Famille2,String)
            End If
            If (Original_Famille3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Famille3,String)
            End If
            If (Original_U1U2Independant.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_U1xU2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_U1xU2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_CodeBarre Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_CodeBarre,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_CoefU2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_CoefU2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_TypeFacturation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_TypeFacturation,String)
            End If
            If (Original_CoefAV.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_CoefAV.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_ProduitCompose.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_GestionStock.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_GestionStock.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_DecompteAuto.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_RefFournisseur Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_RefFournisseur,String)
            End If
            If (Original_nFournisseur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_nFournisseur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_IsSortieImpr,Boolean)
            Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_IsEnVente,Boolean)
            If (Original_AMM Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_AMM,String)
            End If
            If (Original_TAXSM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_TAXSM.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_IsAMM,Boolean)
            If (Original_DateMaj.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_DateMaj.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_isComm.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(Original_isComm.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_Conditionnement.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(Original_Conditionnement.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_SeuilStock,Decimal)
            If (Original_NCompteX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_NCompteX,String)
            End If
            If (Original_NActiviteX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_NActiviteX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nProduit,Decimal)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Libelle,String)
            End If
            If (LibelleLong Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LibelleLong,String)
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TTVA,String)
            End If
            If (PrixAHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PrixAHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PrixATTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PrixATTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PrixVHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PrixVHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PrixVTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(IsPrixHT,Boolean)
            If (Unite1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Unite1,String)
            End If
            If (Unite2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Unite2,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(ProduitAchat,Boolean)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(ProduitVente,Boolean)
            If (NCompteA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NCompteA,String)
            End If
            If (NActiviteA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NActiviteA,String)
            End If
            If (NCompteV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NCompteV,String)
            End If
            If (NActiviteV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(NActiviteV,String)
            End If
            If (Famille1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Famille1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Famille2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Famille2,String)
            End If
            If (Famille3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Famille3,String)
            End If
            If (U1U2Independant.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (U1xU2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(U1xU2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CodeBarre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CodeBarre,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (CoefU2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(CoefU2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TypeFacturation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(TypeFacturation,String)
            End If
            If (CoefAV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(CoefAV.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (ProduitCompose.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Image Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Image,String)
            End If
            If (GestionStock.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(GestionStock.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DecompteAuto.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (RefFournisseur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(RefFournisseur,String)
            End If
            If (nFournisseur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(nFournisseur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(IsSortieImpr,Boolean)
            Me.Adapter.InsertCommand.Parameters(35).Value = CType(IsEnVente,Boolean)
            If (AMM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(AMM,String)
            End If
            If (TAXSM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(TAXSM.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(38).Value = CType(IsAMM,Boolean)
            If (DateMaj.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(DateMaj.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (isComm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(isComm.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Conditionnement.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(Conditionnement.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(42).Value = CType(SeuilStock,Decimal)
            If (NCompteX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(NCompteX,String)
            End If
            If (NActiviteX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(NActiviteX,String)
            End If
            If (Ingredients Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Ingredients,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String,  _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nProduit,Decimal)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Libelle,String)
            End If
            If (LibelleLong Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LibelleLong,String)
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TTVA,String)
            End If
            If (PrixAHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PrixAHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PrixATTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PrixATTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PrixVHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PrixVHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PrixVTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IsPrixHT,Boolean)
            If (Unite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Unite1,String)
            End If
            If (Unite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Unite2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ProduitAchat,Boolean)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ProduitVente,Boolean)
            If (NCompteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(NCompteA,String)
            End If
            If (NActiviteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(NActiviteA,String)
            End If
            If (NCompteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(NCompteV,String)
            End If
            If (NActiviteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(NActiviteV,String)
            End If
            If (Famille1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Famille1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Famille2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Famille2,String)
            End If
            If (Famille3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Famille3,String)
            End If
            If (U1U2Independant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (U1xU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(U1xU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CodeBarre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(CodeBarre,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (CoefU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(CoefU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TypeFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(TypeFacturation,String)
            End If
            If (CoefAV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(CoefAV.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (ProduitCompose.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Image Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Image,String)
            End If
            If (GestionStock.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(GestionStock.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DecompteAuto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (RefFournisseur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(RefFournisseur,String)
            End If
            If (nFournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(nFournisseur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(IsSortieImpr,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(IsEnVente,Boolean)
            If (AMM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(AMM,String)
            End If
            If (TAXSM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(TAXSM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(IsAMM,Boolean)
            If (DateMaj.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(DateMaj.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (isComm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(isComm.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Conditionnement.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Conditionnement.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(SeuilStock,Decimal)
            If (NCompteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(NCompteX,String)
            End If
            If (NActiviteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(NActiviteX,String)
            End If
            If (Ingredients Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Ingredients,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_nProduit,Decimal)
            If (Original_CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CodeProduit")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Libelle,String)
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_TTVA,String)
            End If
            If (Original_PrixAHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_PrixAHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixATTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_PrixATTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_PrixVHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_IsPrixHT,Boolean)
            If (Original_Unite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_Unite1,String)
            End If
            If (Original_Unite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_Unite2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_ProduitAchat,Boolean)
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_ProduitVente,Boolean)
            If (Original_NCompteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_NCompteA,String)
            End If
            If (Original_NActiviteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_NActiviteA,String)
            End If
            If (Original_NCompteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_NCompteV,String)
            End If
            If (Original_NActiviteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_NActiviteV,String)
            End If
            If (Original_Famille1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_Famille1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_Famille2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_Famille2,String)
            End If
            If (Original_Famille3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_Famille3,String)
            End If
            If (Original_U1U2Independant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_U1xU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_U1xU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_CodeBarre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_CodeBarre,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_CoefU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_CoefU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_TypeFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_TypeFacturation,String)
            End If
            If (Original_CoefAV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_CoefAV.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_ProduitCompose.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_GestionStock.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_GestionStock.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_DecompteAuto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_RefFournisseur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_RefFournisseur,String)
            End If
            If (Original_nFournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_nFournisseur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_IsSortieImpr,Boolean)
            Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_IsEnVente,Boolean)
            If (Original_AMM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_AMM,String)
            End If
            If (Original_TAXSM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_TAXSM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_IsAMM,Boolean)
            If (Original_DateMaj.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_DateMaj.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            If (Original_isComm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_isComm.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (Original_Conditionnement.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_Conditionnement.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_SeuilStock,Decimal)
            If (Original_NCompteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_NCompteX,String)
            End If
            If (Original_NActiviteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_NActiviteX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String,  _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Return Me.Update(Original_nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredients, Original_nProduit, Original_CodeProduit, Original_Libelle, Original_TTVA, Original_PrixAHT, Original_PrixATTC, Original_PrixVHT, Original_PrixVTTC, Original_IsPrixHT, Original_Unite1, Original_Unite2, Original_ProduitAchat, Original_ProduitVente, Original_NCompteA, Original_NActiviteA, Original_NCompteV, Original_NActiviteV, Original_Famille1, Original_Famille2, Original_Famille3, Original_U1U2Independant, Original_U1xU2, Original_CodeBarre, Original_Inactif, Original_CoefU2, Original_TypeFacturation, Original_CoefAV, Original_ProduitCompose, Original_GestionStock, Original_DecompteAuto, Original_RefFournisseur, Original_nFournisseur, Original_IsSortieImpr, Original_IsEnVente, Original_AMM, Original_TAXSM, Original_IsAMM, Original_DateMaj, Original_isComm, Original_Conditionnement, Original_SeuilStock, Original_NCompteX, Original_NActiviteX)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ReglementsTA
        Inherits Global.System.ComponentModel.Component
        
        Private _commandCollection() As Global.System.Data.IDbCommand
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.IDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.IDbCommand(7) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.AgriFact.My.MySettings.Default.AgrifactConnString)
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).CommandText = "UPDATE       Reglement"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Observation = @observation, Montant = "& _ 
                "0, Perte = 0, Profit = 0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        nReglement = @nReglement;"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "               UPDATE       Reglement_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              SET "& _ 
                "                Montant = 0, Perte = 0, Profit = 0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            "& _ 
                "  WHERE        nReglement = @nReglement;"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "                     UPDATE       VFacture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                    "& _ 
                "                        SET                 Paye = 0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          "& _ 
                "                                  WHERE        nDevis IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "                                                                   (SELECT      "& _ 
                "  nFacture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                    "& _ 
                "                       FROM            Reglement_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "                                                                    WHERE       "& _ 
                " nReglement = @nReglement)"
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.Text
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nReglement", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "nReglement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@observation", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.AgriFact.My.MySettings.Default.AgrifactConnString)
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).CommandText = "SELECT f.MontantTTC-isnull(rd.SumMontant,0) as reste"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM VFacture f,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT S"& _ 
                "um(Montant) as SumMontant From Reglement_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where nFacture= @nDevis AND nRe"& _ 
                "glement<>@nReglement) as rd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE f.nDevis=@nDevis"
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.Text
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nReglement", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.AgriFact.My.MySettings.Default.AgrifactConnString)
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).CommandText = "SELECT f.MontantTTC-isnull(rd.SumMontant,0) as reste"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM AFacture f,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT S"& _ 
                "um(Montant) as SumMontant From AReglement_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where nFacture= @nDevis AND nR"& _ 
                "eglement<>@nReglement) as rd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE f.nDevis=@nDevis"
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.Text
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nReglement", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(3),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.AgriFact.My.MySettings.Default.AgrifactConnString)
            CType(Me._commandCollection(3),Global.System.Data.SqlClient.SqlCommand).CommandText = "Declare @reste decimal(10,2)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"set @reste=0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT @reste= f.MontantTTC-isnull(SU"& _ 
                "M(rd.Montant),0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM VFacture f LEFT JOIN Reglement_Detail rd ON f.nDevis=rd.n"& _ 
                "Facture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE f.nDevis=@nDevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY f.nDevis,f.MontantTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"update VFactu"& _ 
                "re set Paye=case when @reste=0 then 1 else 0 end where nDevis=@nDevis"
            CType(Me._commandCollection(3),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.Text
            CType(Me._commandCollection(3),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(4),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.AgriFact.My.MySettings.Default.AgrifactConnString)
            CType(Me._commandCollection(4),Global.System.Data.SqlClient.SqlCommand).CommandText = "Declare @reste decimal(10,2)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET @reste=0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT @reste= f.MontantTTC-isnull(SU"& _ 
                "M(rd.Montant),0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM AFacture f LEFT JOIN AReglement_Detail rd ON f.nDevis=rd."& _ 
                "nFacture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE f.nDevis=@nDevis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY f.nDevis,f.MontantTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"update AFact"& _ 
                "ure set Paye=case when @reste=0 then 1 else 0 end where nDevis=@nDevis"
            CType(Me._commandCollection(4),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.Text
            CType(Me._commandCollection(4),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(5),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.AgriFact.My.MySettings.Default.AgrifactConnString)
            CType(Me._commandCollection(5),Global.System.Data.SqlClient.SqlCommand).CommandText = "SELECT        SUM(r.Montant - ISNULL(aff.Montant, 0) + ISNULL(r.MontantEscompte, "& _ 
                "0)) AS avance"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Reglement AS r LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "            (SELECT        nReglement, SUM(ISNULL(Montant, 0) - ISNULL(Perte, 0)"& _ 
                " + ISNULL(Profit, 0)) AS Montant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               FROM           "& _ 
                " Reglement_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               GROUP BY nReglement) AS aff ON"& _ 
                " r.nReglement = aff.nReglement"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (r.nEntreprise = @nEntreprise)"
            CType(Me._commandCollection(5),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.Text
            CType(Me._commandCollection(5),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(6),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.AgriFact.My.MySettings.Default.AgrifactConnString)
            CType(Me._commandCollection(6),Global.System.Data.SqlClient.SqlCommand).CommandText = "select Sum(f.MontantTTC)-Sum(isnull(rd.Montant,0)) as avoirs"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from vfacture f lef"& _ 
                "t join reglement_detail rd on f.nDevis=rd.nFacture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where f.MontantTTC < 0 And n"& _ 
                "Client = @nEntreprise"
            CType(Me._commandCollection(6),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.Text
            CType(Me._commandCollection(6),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(7),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.AgriFact.My.MySettings.Default.AgrifactConnString)
            CType(Me._commandCollection(7),Global.System.Data.SqlClient.SqlCommand).CommandText = "SELECT isnull(sum(Reglement) - sum(Perte) -sum(MontantTTC),0) as Solde "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Ent"& _ 
                "reprise LEFT JOIN  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT nClient,VFacture.nFacture, vFacture.MontantTTC, sum"& _ 
                "(isnull(Montant,0)) as Reglement , sum(isnull(Perte,0)) as Perte "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM VFacture"& _ 
                " LEFT JOIN reglement_detail ON vfacture.ndevis = reglement_detail.nfacture "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GRO"& _ 
                "UP BY nClient,VFacture.nFacture, vFacture.MontantTTC) AS Factures on nEntreprise"& _ 
                "=nClient "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE(nEntreprise =@nClient) GROUP BY nEntreprise,Nom"
            CType(Me._commandCollection(7),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.Text
            CType(Me._commandCollection(7),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function RejeterReglement(ByVal nReglement As Decimal, ByVal observation As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(0),Global.System.Data.SqlClient.SqlCommand)
            command.Parameters(0).Value = CType(nReglement,Decimal)
            If (observation Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(observation,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetResteAReglerVente(ByVal nDevis As Decimal, ByVal nReglement As Global.System.Nullable(Of Decimal)) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(1),Global.System.Data.SqlClient.SqlCommand)
            command.Parameters(0).Value = CType(nDevis,Decimal)
            If (nReglement.HasValue = true) Then
                command.Parameters(1).Value = CType(nReglement.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetResteAReglerAchat(ByVal nDevis As Decimal, ByVal nReglement As Global.System.Nullable(Of Decimal)) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(2),Global.System.Data.SqlClient.SqlCommand)
            command.Parameters(0).Value = CType(nDevis,Decimal)
            If (nReglement.HasValue = true) Then
                command.Parameters(1).Value = CType(nReglement.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateVFacturePaye(ByVal nDevis As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(3),Global.System.Data.SqlClient.SqlCommand)
            command.Parameters(0).Value = CType(nDevis,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateAFacturePaye(ByVal nDevis As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(4),Global.System.Data.SqlClient.SqlCommand)
            command.Parameters(0).Value = CType(nDevis,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetAvanceClient(ByVal nEntreprise As Global.System.Nullable(Of Decimal)) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(5),Global.System.Data.SqlClient.SqlCommand)
            If (nEntreprise.HasValue = true) Then
                command.Parameters(0).Value = CType(nEntreprise.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetAvoirsClient(ByVal nEntreprise As Global.System.Nullable(Of Decimal)) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(6),Global.System.Data.SqlClient.SqlCommand)
            If (nEntreprise.HasValue = true) Then
                command.Parameters(0).Value = CType(nEntreprise.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetSoldeClient(ByVal nClient As Decimal) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(7),Global.System.Data.SqlClient.SqlCommand)
            command.Parameters(0).Value = CType(nClient,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
End Namespace
