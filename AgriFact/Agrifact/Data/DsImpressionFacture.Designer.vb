'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5477
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DsImpressionFacture"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DsImpressionFacture
    Inherits Global.System.Data.DataSet
    
    Private tableTarif As TarifDataTable
    
    Private tableVFacture_Detail_Redevance As VFacture_Detail_RedevanceDataTable
    
    Private tableEntreprise1 As Entreprise1DataTable
    
    Private tableAReglement As AReglementDataTable
    
    Private tablePersonne As PersonneDataTable
    
    Private tableProduit As ProduitDataTable
    
    Private tableTVA As TVADataTable
    
    Private tableVBonCommande As VBonCommandeDataTable
    
    Private tableVBonCommande_Detail As VBonCommande_DetailDataTable
    
    Private tableVBonLivraison As VBonLivraisonDataTable
    
    Private tableVBonLivraison_Detail As VBonLivraison_DetailDataTable
    
    Private tableVDevis As VDevisDataTable
    
    Private tableVDevis_Detail As VDevis_DetailDataTable
    
    Private tableVFacture_Detail As VFacture_DetailDataTable
    
    Private tableTelephone As TelephoneDataTable
    
    Private tableTelephoneEntreprise As TelephoneEntrepriseDataTable
    
    Private tableABonReception As ABonReceptionDataTable
    
    Private tableABonReception_Detail As ABonReception_DetailDataTable
    
    Private tableAFacture As AFactureDataTable
    
    Private tableAFacture_Detail As AFacture_DetailDataTable
    
    Private tableFamille As FamilleDataTable
    
    Private tableReglement As ReglementDataTable
    
    Private tableReglement_Detail As Reglement_DetailDataTable
    
    Private tableRemise_Detail As Remise_DetailDataTable
    
    Private tableRemise As RemiseDataTable
    
    Private tableBanque As BanqueDataTable
    
    Private tableParametres As ParametresDataTable
    
    Private tableEntreprise As EntrepriseDataTable
    
    Private tableTVA_Detail As TVA_DetailDataTable
    
    Private tableAReglement_Detail As AReglement_DetailDataTable
    
    Private tableVFacture As VFactureDataTable
    
    Private relationBanqueRemise As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Tarif")) Is Nothing) Then
                MyBase.Tables.Add(New TarifDataTable(ds.Tables("Tarif")))
            End If
            If (Not (ds.Tables("VFacture_Detail_Redevance")) Is Nothing) Then
                MyBase.Tables.Add(New VFacture_Detail_RedevanceDataTable(ds.Tables("VFacture_Detail_Redevance")))
            End If
            If (Not (ds.Tables("Entreprise1")) Is Nothing) Then
                MyBase.Tables.Add(New Entreprise1DataTable(ds.Tables("Entreprise1")))
            End If
            If (Not (ds.Tables("AReglement")) Is Nothing) Then
                MyBase.Tables.Add(New AReglementDataTable(ds.Tables("AReglement")))
            End If
            If (Not (ds.Tables("Personne")) Is Nothing) Then
                MyBase.Tables.Add(New PersonneDataTable(ds.Tables("Personne")))
            End If
            If (Not (ds.Tables("Produit")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitDataTable(ds.Tables("Produit")))
            End If
            If (Not (ds.Tables("TVA")) Is Nothing) Then
                MyBase.Tables.Add(New TVADataTable(ds.Tables("TVA")))
            End If
            If (Not (ds.Tables("VBonCommande")) Is Nothing) Then
                MyBase.Tables.Add(New VBonCommandeDataTable(ds.Tables("VBonCommande")))
            End If
            If (Not (ds.Tables("VBonCommande_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VBonCommande_DetailDataTable(ds.Tables("VBonCommande_Detail")))
            End If
            If (Not (ds.Tables("VBonLivraison")) Is Nothing) Then
                MyBase.Tables.Add(New VBonLivraisonDataTable(ds.Tables("VBonLivraison")))
            End If
            If (Not (ds.Tables("VBonLivraison_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VBonLivraison_DetailDataTable(ds.Tables("VBonLivraison_Detail")))
            End If
            If (Not (ds.Tables("VDevis")) Is Nothing) Then
                MyBase.Tables.Add(New VDevisDataTable(ds.Tables("VDevis")))
            End If
            If (Not (ds.Tables("VDevis_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VDevis_DetailDataTable(ds.Tables("VDevis_Detail")))
            End If
            If (Not (ds.Tables("VFacture_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VFacture_DetailDataTable(ds.Tables("VFacture_Detail")))
            End If
            If (Not (ds.Tables("Telephone")) Is Nothing) Then
                MyBase.Tables.Add(New TelephoneDataTable(ds.Tables("Telephone")))
            End If
            If (Not (ds.Tables("TelephoneEntreprise")) Is Nothing) Then
                MyBase.Tables.Add(New TelephoneEntrepriseDataTable(ds.Tables("TelephoneEntreprise")))
            End If
            If (Not (ds.Tables("ABonReception")) Is Nothing) Then
                MyBase.Tables.Add(New ABonReceptionDataTable(ds.Tables("ABonReception")))
            End If
            If (Not (ds.Tables("ABonReception_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New ABonReception_DetailDataTable(ds.Tables("ABonReception_Detail")))
            End If
            If (Not (ds.Tables("AFacture")) Is Nothing) Then
                MyBase.Tables.Add(New AFactureDataTable(ds.Tables("AFacture")))
            End If
            If (Not (ds.Tables("AFacture_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New AFacture_DetailDataTable(ds.Tables("AFacture_Detail")))
            End If
            If (Not (ds.Tables("Famille")) Is Nothing) Then
                MyBase.Tables.Add(New FamilleDataTable(ds.Tables("Famille")))
            End If
            If (Not (ds.Tables("Reglement")) Is Nothing) Then
                MyBase.Tables.Add(New ReglementDataTable(ds.Tables("Reglement")))
            End If
            If (Not (ds.Tables("Reglement_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New Reglement_DetailDataTable(ds.Tables("Reglement_Detail")))
            End If
            If (Not (ds.Tables("Remise_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New Remise_DetailDataTable(ds.Tables("Remise_Detail")))
            End If
            If (Not (ds.Tables("Remise")) Is Nothing) Then
                MyBase.Tables.Add(New RemiseDataTable(ds.Tables("Remise")))
            End If
            If (Not (ds.Tables("Banque")) Is Nothing) Then
                MyBase.Tables.Add(New BanqueDataTable(ds.Tables("Banque")))
            End If
            If (Not (ds.Tables("Parametres")) Is Nothing) Then
                MyBase.Tables.Add(New ParametresDataTable(ds.Tables("Parametres")))
            End If
            If (Not (ds.Tables("Entreprise")) Is Nothing) Then
                MyBase.Tables.Add(New EntrepriseDataTable(ds.Tables("Entreprise")))
            End If
            If (Not (ds.Tables("TVA_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New TVA_DetailDataTable(ds.Tables("TVA_Detail")))
            End If
            If (Not (ds.Tables("AReglement_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New AReglement_DetailDataTable(ds.Tables("AReglement_Detail")))
            End If
            If (Not (ds.Tables("VFacture")) Is Nothing) Then
                MyBase.Tables.Add(New VFactureDataTable(ds.Tables("VFacture")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tarif() As TarifDataTable
        Get
            Return Me.tableTarif
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VFacture_Detail_Redevance() As VFacture_Detail_RedevanceDataTable
        Get
            Return Me.tableVFacture_Detail_Redevance
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Entreprise1() As Entreprise1DataTable
        Get
            Return Me.tableEntreprise1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AReglement() As AReglementDataTable
        Get
            Return Me.tableAReglement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Personne() As PersonneDataTable
        Get
            Return Me.tablePersonne
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Produit() As ProduitDataTable
        Get
            Return Me.tableProduit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TVA() As TVADataTable
        Get
            Return Me.tableTVA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VBonCommande() As VBonCommandeDataTable
        Get
            Return Me.tableVBonCommande
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VBonCommande_Detail() As VBonCommande_DetailDataTable
        Get
            Return Me.tableVBonCommande_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VBonLivraison() As VBonLivraisonDataTable
        Get
            Return Me.tableVBonLivraison
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VBonLivraison_Detail() As VBonLivraison_DetailDataTable
        Get
            Return Me.tableVBonLivraison_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VDevis() As VDevisDataTable
        Get
            Return Me.tableVDevis
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VDevis_Detail() As VDevis_DetailDataTable
        Get
            Return Me.tableVDevis_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VFacture_Detail() As VFacture_DetailDataTable
        Get
            Return Me.tableVFacture_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Telephone() As TelephoneDataTable
        Get
            Return Me.tableTelephone
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TelephoneEntreprise() As TelephoneEntrepriseDataTable
        Get
            Return Me.tableTelephoneEntreprise
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ABonReception() As ABonReceptionDataTable
        Get
            Return Me.tableABonReception
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ABonReception_Detail() As ABonReception_DetailDataTable
        Get
            Return Me.tableABonReception_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AFacture() As AFactureDataTable
        Get
            Return Me.tableAFacture
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AFacture_Detail() As AFacture_DetailDataTable
        Get
            Return Me.tableAFacture_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Famille() As FamilleDataTable
        Get
            Return Me.tableFamille
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reglement() As ReglementDataTable
        Get
            Return Me.tableReglement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reglement_Detail() As Reglement_DetailDataTable
        Get
            Return Me.tableReglement_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Remise_Detail() As Remise_DetailDataTable
        Get
            Return Me.tableRemise_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Remise() As RemiseDataTable
        Get
            Return Me.tableRemise
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Banque() As BanqueDataTable
        Get
            Return Me.tableBanque
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Parametres() As ParametresDataTable
        Get
            Return Me.tableParametres
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Entreprise() As EntrepriseDataTable
        Get
            Return Me.tableEntreprise
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TVA_Detail() As TVA_DetailDataTable
        Get
            Return Me.tableTVA_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AReglement_Detail() As AReglement_DetailDataTable
        Get
            Return Me.tableAReglement_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VFacture() As VFactureDataTable
        Get
            Return Me.tableVFacture
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DsImpressionFacture = CType(MyBase.Clone,DsImpressionFacture)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Tarif")) Is Nothing) Then
                MyBase.Tables.Add(New TarifDataTable(ds.Tables("Tarif")))
            End If
            If (Not (ds.Tables("VFacture_Detail_Redevance")) Is Nothing) Then
                MyBase.Tables.Add(New VFacture_Detail_RedevanceDataTable(ds.Tables("VFacture_Detail_Redevance")))
            End If
            If (Not (ds.Tables("Entreprise1")) Is Nothing) Then
                MyBase.Tables.Add(New Entreprise1DataTable(ds.Tables("Entreprise1")))
            End If
            If (Not (ds.Tables("AReglement")) Is Nothing) Then
                MyBase.Tables.Add(New AReglementDataTable(ds.Tables("AReglement")))
            End If
            If (Not (ds.Tables("Personne")) Is Nothing) Then
                MyBase.Tables.Add(New PersonneDataTable(ds.Tables("Personne")))
            End If
            If (Not (ds.Tables("Produit")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitDataTable(ds.Tables("Produit")))
            End If
            If (Not (ds.Tables("TVA")) Is Nothing) Then
                MyBase.Tables.Add(New TVADataTable(ds.Tables("TVA")))
            End If
            If (Not (ds.Tables("VBonCommande")) Is Nothing) Then
                MyBase.Tables.Add(New VBonCommandeDataTable(ds.Tables("VBonCommande")))
            End If
            If (Not (ds.Tables("VBonCommande_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VBonCommande_DetailDataTable(ds.Tables("VBonCommande_Detail")))
            End If
            If (Not (ds.Tables("VBonLivraison")) Is Nothing) Then
                MyBase.Tables.Add(New VBonLivraisonDataTable(ds.Tables("VBonLivraison")))
            End If
            If (Not (ds.Tables("VBonLivraison_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VBonLivraison_DetailDataTable(ds.Tables("VBonLivraison_Detail")))
            End If
            If (Not (ds.Tables("VDevis")) Is Nothing) Then
                MyBase.Tables.Add(New VDevisDataTable(ds.Tables("VDevis")))
            End If
            If (Not (ds.Tables("VDevis_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VDevis_DetailDataTable(ds.Tables("VDevis_Detail")))
            End If
            If (Not (ds.Tables("VFacture_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VFacture_DetailDataTable(ds.Tables("VFacture_Detail")))
            End If
            If (Not (ds.Tables("Telephone")) Is Nothing) Then
                MyBase.Tables.Add(New TelephoneDataTable(ds.Tables("Telephone")))
            End If
            If (Not (ds.Tables("TelephoneEntreprise")) Is Nothing) Then
                MyBase.Tables.Add(New TelephoneEntrepriseDataTable(ds.Tables("TelephoneEntreprise")))
            End If
            If (Not (ds.Tables("ABonReception")) Is Nothing) Then
                MyBase.Tables.Add(New ABonReceptionDataTable(ds.Tables("ABonReception")))
            End If
            If (Not (ds.Tables("ABonReception_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New ABonReception_DetailDataTable(ds.Tables("ABonReception_Detail")))
            End If
            If (Not (ds.Tables("AFacture")) Is Nothing) Then
                MyBase.Tables.Add(New AFactureDataTable(ds.Tables("AFacture")))
            End If
            If (Not (ds.Tables("AFacture_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New AFacture_DetailDataTable(ds.Tables("AFacture_Detail")))
            End If
            If (Not (ds.Tables("Famille")) Is Nothing) Then
                MyBase.Tables.Add(New FamilleDataTable(ds.Tables("Famille")))
            End If
            If (Not (ds.Tables("Reglement")) Is Nothing) Then
                MyBase.Tables.Add(New ReglementDataTable(ds.Tables("Reglement")))
            End If
            If (Not (ds.Tables("Reglement_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New Reglement_DetailDataTable(ds.Tables("Reglement_Detail")))
            End If
            If (Not (ds.Tables("Remise_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New Remise_DetailDataTable(ds.Tables("Remise_Detail")))
            End If
            If (Not (ds.Tables("Remise")) Is Nothing) Then
                MyBase.Tables.Add(New RemiseDataTable(ds.Tables("Remise")))
            End If
            If (Not (ds.Tables("Banque")) Is Nothing) Then
                MyBase.Tables.Add(New BanqueDataTable(ds.Tables("Banque")))
            End If
            If (Not (ds.Tables("Parametres")) Is Nothing) Then
                MyBase.Tables.Add(New ParametresDataTable(ds.Tables("Parametres")))
            End If
            If (Not (ds.Tables("Entreprise")) Is Nothing) Then
                MyBase.Tables.Add(New EntrepriseDataTable(ds.Tables("Entreprise")))
            End If
            If (Not (ds.Tables("TVA_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New TVA_DetailDataTable(ds.Tables("TVA_Detail")))
            End If
            If (Not (ds.Tables("AReglement_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New AReglement_DetailDataTable(ds.Tables("AReglement_Detail")))
            End If
            If (Not (ds.Tables("VFacture")) Is Nothing) Then
                MyBase.Tables.Add(New VFactureDataTable(ds.Tables("VFacture")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTarif = CType(MyBase.Tables("Tarif"),TarifDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTarif) Is Nothing) Then
                Me.tableTarif.InitVars
            End If
        End If
        Me.tableVFacture_Detail_Redevance = CType(MyBase.Tables("VFacture_Detail_Redevance"),VFacture_Detail_RedevanceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVFacture_Detail_Redevance) Is Nothing) Then
                Me.tableVFacture_Detail_Redevance.InitVars
            End If
        End If
        Me.tableEntreprise1 = CType(MyBase.Tables("Entreprise1"),Entreprise1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableEntreprise1) Is Nothing) Then
                Me.tableEntreprise1.InitVars
            End If
        End If
        Me.tableAReglement = CType(MyBase.Tables("AReglement"),AReglementDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAReglement) Is Nothing) Then
                Me.tableAReglement.InitVars
            End If
        End If
        Me.tablePersonne = CType(MyBase.Tables("Personne"),PersonneDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePersonne) Is Nothing) Then
                Me.tablePersonne.InitVars
            End If
        End If
        Me.tableProduit = CType(MyBase.Tables("Produit"),ProduitDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduit) Is Nothing) Then
                Me.tableProduit.InitVars
            End If
        End If
        Me.tableTVA = CType(MyBase.Tables("TVA"),TVADataTable)
        If (initTable = true) Then
            If (Not (Me.tableTVA) Is Nothing) Then
                Me.tableTVA.InitVars
            End If
        End If
        Me.tableVBonCommande = CType(MyBase.Tables("VBonCommande"),VBonCommandeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVBonCommande) Is Nothing) Then
                Me.tableVBonCommande.InitVars
            End If
        End If
        Me.tableVBonCommande_Detail = CType(MyBase.Tables("VBonCommande_Detail"),VBonCommande_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVBonCommande_Detail) Is Nothing) Then
                Me.tableVBonCommande_Detail.InitVars
            End If
        End If
        Me.tableVBonLivraison = CType(MyBase.Tables("VBonLivraison"),VBonLivraisonDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVBonLivraison) Is Nothing) Then
                Me.tableVBonLivraison.InitVars
            End If
        End If
        Me.tableVBonLivraison_Detail = CType(MyBase.Tables("VBonLivraison_Detail"),VBonLivraison_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVBonLivraison_Detail) Is Nothing) Then
                Me.tableVBonLivraison_Detail.InitVars
            End If
        End If
        Me.tableVDevis = CType(MyBase.Tables("VDevis"),VDevisDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVDevis) Is Nothing) Then
                Me.tableVDevis.InitVars
            End If
        End If
        Me.tableVDevis_Detail = CType(MyBase.Tables("VDevis_Detail"),VDevis_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVDevis_Detail) Is Nothing) Then
                Me.tableVDevis_Detail.InitVars
            End If
        End If
        Me.tableVFacture_Detail = CType(MyBase.Tables("VFacture_Detail"),VFacture_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVFacture_Detail) Is Nothing) Then
                Me.tableVFacture_Detail.InitVars
            End If
        End If
        Me.tableTelephone = CType(MyBase.Tables("Telephone"),TelephoneDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTelephone) Is Nothing) Then
                Me.tableTelephone.InitVars
            End If
        End If
        Me.tableTelephoneEntreprise = CType(MyBase.Tables("TelephoneEntreprise"),TelephoneEntrepriseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTelephoneEntreprise) Is Nothing) Then
                Me.tableTelephoneEntreprise.InitVars
            End If
        End If
        Me.tableABonReception = CType(MyBase.Tables("ABonReception"),ABonReceptionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableABonReception) Is Nothing) Then
                Me.tableABonReception.InitVars
            End If
        End If
        Me.tableABonReception_Detail = CType(MyBase.Tables("ABonReception_Detail"),ABonReception_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableABonReception_Detail) Is Nothing) Then
                Me.tableABonReception_Detail.InitVars
            End If
        End If
        Me.tableAFacture = CType(MyBase.Tables("AFacture"),AFactureDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAFacture) Is Nothing) Then
                Me.tableAFacture.InitVars
            End If
        End If
        Me.tableAFacture_Detail = CType(MyBase.Tables("AFacture_Detail"),AFacture_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAFacture_Detail) Is Nothing) Then
                Me.tableAFacture_Detail.InitVars
            End If
        End If
        Me.tableFamille = CType(MyBase.Tables("Famille"),FamilleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFamille) Is Nothing) Then
                Me.tableFamille.InitVars
            End If
        End If
        Me.tableReglement = CType(MyBase.Tables("Reglement"),ReglementDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReglement) Is Nothing) Then
                Me.tableReglement.InitVars
            End If
        End If
        Me.tableReglement_Detail = CType(MyBase.Tables("Reglement_Detail"),Reglement_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReglement_Detail) Is Nothing) Then
                Me.tableReglement_Detail.InitVars
            End If
        End If
        Me.tableRemise_Detail = CType(MyBase.Tables("Remise_Detail"),Remise_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRemise_Detail) Is Nothing) Then
                Me.tableRemise_Detail.InitVars
            End If
        End If
        Me.tableRemise = CType(MyBase.Tables("Remise"),RemiseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRemise) Is Nothing) Then
                Me.tableRemise.InitVars
            End If
        End If
        Me.tableBanque = CType(MyBase.Tables("Banque"),BanqueDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBanque) Is Nothing) Then
                Me.tableBanque.InitVars
            End If
        End If
        Me.tableParametres = CType(MyBase.Tables("Parametres"),ParametresDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParametres) Is Nothing) Then
                Me.tableParametres.InitVars
            End If
        End If
        Me.tableEntreprise = CType(MyBase.Tables("Entreprise"),EntrepriseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEntreprise) Is Nothing) Then
                Me.tableEntreprise.InitVars
            End If
        End If
        Me.tableTVA_Detail = CType(MyBase.Tables("TVA_Detail"),TVA_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTVA_Detail) Is Nothing) Then
                Me.tableTVA_Detail.InitVars
            End If
        End If
        Me.tableAReglement_Detail = CType(MyBase.Tables("AReglement_Detail"),AReglement_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAReglement_Detail) Is Nothing) Then
                Me.tableAReglement_Detail.InitVars
            End If
        End If
        Me.tableVFacture = CType(MyBase.Tables("VFacture"),VFactureDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVFacture) Is Nothing) Then
                Me.tableVFacture.InitVars
            End If
        End If
        Me.relationBanqueRemise = Me.Relations("BanqueRemise")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DsImpressionFacture"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsImpressionFacture.xsd"
        Me.Locale = New Global.System.Globalization.CultureInfo("en-US")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTarif = New TarifDataTable
        MyBase.Tables.Add(Me.tableTarif)
        Me.tableVFacture_Detail_Redevance = New VFacture_Detail_RedevanceDataTable
        MyBase.Tables.Add(Me.tableVFacture_Detail_Redevance)
        Me.tableEntreprise1 = New Entreprise1DataTable
        MyBase.Tables.Add(Me.tableEntreprise1)
        Me.tableAReglement = New AReglementDataTable
        MyBase.Tables.Add(Me.tableAReglement)
        Me.tablePersonne = New PersonneDataTable
        MyBase.Tables.Add(Me.tablePersonne)
        Me.tableProduit = New ProduitDataTable
        MyBase.Tables.Add(Me.tableProduit)
        Me.tableTVA = New TVADataTable
        MyBase.Tables.Add(Me.tableTVA)
        Me.tableVBonCommande = New VBonCommandeDataTable
        MyBase.Tables.Add(Me.tableVBonCommande)
        Me.tableVBonCommande_Detail = New VBonCommande_DetailDataTable
        MyBase.Tables.Add(Me.tableVBonCommande_Detail)
        Me.tableVBonLivraison = New VBonLivraisonDataTable
        MyBase.Tables.Add(Me.tableVBonLivraison)
        Me.tableVBonLivraison_Detail = New VBonLivraison_DetailDataTable
        MyBase.Tables.Add(Me.tableVBonLivraison_Detail)
        Me.tableVDevis = New VDevisDataTable
        MyBase.Tables.Add(Me.tableVDevis)
        Me.tableVDevis_Detail = New VDevis_DetailDataTable
        MyBase.Tables.Add(Me.tableVDevis_Detail)
        Me.tableVFacture_Detail = New VFacture_DetailDataTable
        MyBase.Tables.Add(Me.tableVFacture_Detail)
        Me.tableTelephone = New TelephoneDataTable
        MyBase.Tables.Add(Me.tableTelephone)
        Me.tableTelephoneEntreprise = New TelephoneEntrepriseDataTable
        MyBase.Tables.Add(Me.tableTelephoneEntreprise)
        Me.tableABonReception = New ABonReceptionDataTable
        MyBase.Tables.Add(Me.tableABonReception)
        Me.tableABonReception_Detail = New ABonReception_DetailDataTable
        MyBase.Tables.Add(Me.tableABonReception_Detail)
        Me.tableAFacture = New AFactureDataTable
        MyBase.Tables.Add(Me.tableAFacture)
        Me.tableAFacture_Detail = New AFacture_DetailDataTable
        MyBase.Tables.Add(Me.tableAFacture_Detail)
        Me.tableFamille = New FamilleDataTable
        MyBase.Tables.Add(Me.tableFamille)
        Me.tableReglement = New ReglementDataTable
        MyBase.Tables.Add(Me.tableReglement)
        Me.tableReglement_Detail = New Reglement_DetailDataTable
        MyBase.Tables.Add(Me.tableReglement_Detail)
        Me.tableRemise_Detail = New Remise_DetailDataTable
        MyBase.Tables.Add(Me.tableRemise_Detail)
        Me.tableRemise = New RemiseDataTable
        MyBase.Tables.Add(Me.tableRemise)
        Me.tableBanque = New BanqueDataTable
        MyBase.Tables.Add(Me.tableBanque)
        Me.tableParametres = New ParametresDataTable
        MyBase.Tables.Add(Me.tableParametres)
        Me.tableEntreprise = New EntrepriseDataTable
        MyBase.Tables.Add(Me.tableEntreprise)
        Me.tableTVA_Detail = New TVA_DetailDataTable
        MyBase.Tables.Add(Me.tableTVA_Detail)
        Me.tableAReglement_Detail = New AReglement_DetailDataTable
        MyBase.Tables.Add(Me.tableAReglement_Detail)
        Me.tableVFacture = New VFactureDataTable
        MyBase.Tables.Add(Me.tableVFacture)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("BanqueRemise", New Global.System.Data.DataColumn() {Me.tableBanque.nBanqueColumn}, New Global.System.Data.DataColumn() {Me.tableRemise.nBanqueColumn})
        Me.tableRemise.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationBanqueRemise = New Global.System.Data.DataRelation("BanqueRemise", New Global.System.Data.DataColumn() {Me.tableBanque.nBanqueColumn}, New Global.System.Data.DataColumn() {Me.tableRemise.nBanqueColumn}, false)
        Me.Relations.Add(Me.relationBanqueRemise)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTarif() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVFacture_Detail_Redevance() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEntreprise1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAReglement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePersonne() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTVA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVBonCommande() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVBonCommande_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVBonLivraison() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVBonLivraison_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVDevis() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVDevis_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVFacture_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTelephone() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTelephoneEntreprise() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeABonReception() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeABonReception_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAFacture() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAFacture_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFamille() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReglement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReglement_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRemise_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRemise() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBanque() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeParametres() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEntreprise() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTVA_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAReglement_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVFacture() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsImpressionFacture = New DsImpressionFacture
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub TarifRowChangeEventHandler(ByVal sender As Object, ByVal e As TarifRowChangeEvent)
    
    Public Delegate Sub VFacture_Detail_RedevanceRowChangeEventHandler(ByVal sender As Object, ByVal e As VFacture_Detail_RedevanceRowChangeEvent)
    
    Public Delegate Sub Entreprise1RowChangeEventHandler(ByVal sender As Object, ByVal e As Entreprise1RowChangeEvent)
    
    Public Delegate Sub AReglementRowChangeEventHandler(ByVal sender As Object, ByVal e As AReglementRowChangeEvent)
    
    Public Delegate Sub PersonneRowChangeEventHandler(ByVal sender As Object, ByVal e As PersonneRowChangeEvent)
    
    Public Delegate Sub ProduitRowChangeEventHandler(ByVal sender As Object, ByVal e As ProduitRowChangeEvent)
    
    Public Delegate Sub TVARowChangeEventHandler(ByVal sender As Object, ByVal e As TVARowChangeEvent)
    
    Public Delegate Sub VBonCommandeRowChangeEventHandler(ByVal sender As Object, ByVal e As VBonCommandeRowChangeEvent)
    
    Public Delegate Sub VBonCommande_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VBonCommande_DetailRowChangeEvent)
    
    Public Delegate Sub VBonLivraisonRowChangeEventHandler(ByVal sender As Object, ByVal e As VBonLivraisonRowChangeEvent)
    
    Public Delegate Sub VBonLivraison_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VBonLivraison_DetailRowChangeEvent)
    
    Public Delegate Sub VDevisRowChangeEventHandler(ByVal sender As Object, ByVal e As VDevisRowChangeEvent)
    
    Public Delegate Sub VDevis_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VDevis_DetailRowChangeEvent)
    
    Public Delegate Sub VFacture_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VFacture_DetailRowChangeEvent)
    
    Public Delegate Sub TelephoneRowChangeEventHandler(ByVal sender As Object, ByVal e As TelephoneRowChangeEvent)
    
    Public Delegate Sub TelephoneEntrepriseRowChangeEventHandler(ByVal sender As Object, ByVal e As TelephoneEntrepriseRowChangeEvent)
    
    Public Delegate Sub ABonReceptionRowChangeEventHandler(ByVal sender As Object, ByVal e As ABonReceptionRowChangeEvent)
    
    Public Delegate Sub ABonReception_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As ABonReception_DetailRowChangeEvent)
    
    Public Delegate Sub AFactureRowChangeEventHandler(ByVal sender As Object, ByVal e As AFactureRowChangeEvent)
    
    Public Delegate Sub AFacture_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As AFacture_DetailRowChangeEvent)
    
    Public Delegate Sub FamilleRowChangeEventHandler(ByVal sender As Object, ByVal e As FamilleRowChangeEvent)
    
    Public Delegate Sub ReglementRowChangeEventHandler(ByVal sender As Object, ByVal e As ReglementRowChangeEvent)
    
    Public Delegate Sub Reglement_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As Reglement_DetailRowChangeEvent)
    
    Public Delegate Sub Remise_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As Remise_DetailRowChangeEvent)
    
    Public Delegate Sub RemiseRowChangeEventHandler(ByVal sender As Object, ByVal e As RemiseRowChangeEvent)
    
    Public Delegate Sub BanqueRowChangeEventHandler(ByVal sender As Object, ByVal e As BanqueRowChangeEvent)
    
    Public Delegate Sub ParametresRowChangeEventHandler(ByVal sender As Object, ByVal e As ParametresRowChangeEvent)
    
    Public Delegate Sub EntrepriseRowChangeEventHandler(ByVal sender As Object, ByVal e As EntrepriseRowChangeEvent)
    
    Public Delegate Sub TVA_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As TVA_DetailRowChangeEvent)
    
    Public Delegate Sub AReglement_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As AReglement_DetailRowChangeEvent)
    
    Public Delegate Sub VFactureRowChangeEventHandler(ByVal sender As Object, ByVal e As VFactureRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TarifDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnTarif As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnZoneGeo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tarif"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTarifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTarif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZoneGeoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZoneGeo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TarifRow
            Get
                Return CType(Me.Rows(index),TarifRow)
            End Get
        End Property
        
        Public Event TarifRowChanging As TarifRowChangeEventHandler
        
        Public Event TarifRowChanged As TarifRowChangeEventHandler
        
        Public Event TarifRowDeleting As TarifRowChangeEventHandler
        
        Public Event TarifRowDeleted As TarifRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTarifRow(ByVal row As TarifRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTarifRow(ByVal nTarif As Decimal, ByVal Libelle As String, ByVal ZoneGeo As String) As TarifRow
            Dim rowTarifRow As TarifRow = CType(Me.NewRow,TarifRow)
            Dim columnValuesArray() As Object = New Object() {nTarif, Libelle, ZoneGeo}
            rowTarifRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTarifRow)
            Return rowTarifRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynTarif(ByVal nTarif As Decimal) As TarifRow
            Return CType(Me.Rows.Find(New Object() {nTarif}),TarifRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TarifDataTable = CType(MyBase.Clone,TarifDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TarifDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnTarif = MyBase.Columns("nTarif")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnZoneGeo = MyBase.Columns("ZoneGeo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnTarif = New Global.System.Data.DataColumn("nTarif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTarif)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnZoneGeo = New Global.System.Data.DataColumn("ZoneGeo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZoneGeo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnTarif}, true))
            Me.columnnTarif.AllowDBNull = false
            Me.columnnTarif.Unique = true
            Me.columnLibelle.MaxLength = 50
            Me.columnZoneGeo.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTarifRow() As TarifRow
            Return CType(Me.NewRow,TarifRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TarifRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TarifRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TarifRowChangedEvent) Is Nothing) Then
                RaiseEvent TarifRowChanged(Me, New TarifRowChangeEvent(CType(e.Row,TarifRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TarifRowChangingEvent) Is Nothing) Then
                RaiseEvent TarifRowChanging(Me, New TarifRowChangeEvent(CType(e.Row,TarifRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TarifRowDeletedEvent) Is Nothing) Then
                RaiseEvent TarifRowDeleted(Me, New TarifRowChangeEvent(CType(e.Row,TarifRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TarifRowDeletingEvent) Is Nothing) Then
                RaiseEvent TarifRowDeleting(Me, New TarifRowChangeEvent(CType(e.Row,TarifRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTarifRow(ByVal row As TarifRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TarifDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VFacture_Detail_RedevanceDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VFacture_Detail_Redevance"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VFacture_Detail_RedevanceRow
            Get
                Return CType(Me.Rows(index),VFacture_Detail_RedevanceRow)
            End Get
        End Property
        
        Public Event VFacture_Detail_RedevanceRowChanging As VFacture_Detail_RedevanceRowChangeEventHandler
        
        Public Event VFacture_Detail_RedevanceRowChanged As VFacture_Detail_RedevanceRowChangeEventHandler
        
        Public Event VFacture_Detail_RedevanceRowDeleting As VFacture_Detail_RedevanceRowChangeEventHandler
        
        Public Event VFacture_Detail_RedevanceRowDeleted As VFacture_Detail_RedevanceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVFacture_Detail_RedevanceRow(ByVal row As VFacture_Detail_RedevanceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVFacture_Detail_RedevanceRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Decimal,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal) As VFacture_Detail_RedevanceRow
            Dim rowVFacture_Detail_RedevanceRow As VFacture_Detail_RedevanceRow = CType(Me.NewRow,VFacture_Detail_RedevanceRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC}
            rowVFacture_Detail_RedevanceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVFacture_Detail_RedevanceRow)
            Return rowVFacture_Detail_RedevanceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As VFacture_Detail_RedevanceRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),VFacture_Detail_RedevanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VFacture_Detail_RedevanceDataTable = CType(MyBase.Clone,VFacture_Detail_RedevanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VFacture_Detail_RedevanceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
            Me.columnNLot.MaxLength = 50
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 1073741823
            Me.columnLibUnite1.MaxLength = 5
            Me.columnLibUnite2.MaxLength = 5
            Me.columnTTVA.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVFacture_Detail_RedevanceRow() As VFacture_Detail_RedevanceRow
            Return CType(Me.NewRow,VFacture_Detail_RedevanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VFacture_Detail_RedevanceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VFacture_Detail_RedevanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VFacture_Detail_RedevanceRowChangedEvent) Is Nothing) Then
                RaiseEvent VFacture_Detail_RedevanceRowChanged(Me, New VFacture_Detail_RedevanceRowChangeEvent(CType(e.Row,VFacture_Detail_RedevanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VFacture_Detail_RedevanceRowChangingEvent) Is Nothing) Then
                RaiseEvent VFacture_Detail_RedevanceRowChanging(Me, New VFacture_Detail_RedevanceRowChangeEvent(CType(e.Row,VFacture_Detail_RedevanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VFacture_Detail_RedevanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent VFacture_Detail_RedevanceRowDeleted(Me, New VFacture_Detail_RedevanceRowChangeEvent(CType(e.Row,VFacture_Detail_RedevanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VFacture_Detail_RedevanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent VFacture_Detail_RedevanceRowDeleting(Me, New VFacture_Detail_RedevanceRowChangeEvent(CType(e.Row,VFacture_Detail_RedevanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVFacture_Detail_RedevanceRow(ByVal row As VFacture_Detail_RedevanceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VFacture_Detail_RedevanceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Entreprise1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnEntreprise As Global.System.Data.DataColumn
        
        Private columnDateCreation As Global.System.Data.DataColumn
        
        Private columnDateModification As Global.System.Data.DataColumn
        
        Private columnInfoMAJ As Global.System.Data.DataColumn
        
        Private columnTypeEntreprise As Global.System.Data.DataColumn
        
        Private columnnOrganisme As Global.System.Data.DataColumn
        
        Private columnnMaisonMere As Global.System.Data.DataColumn
        
        Private columnDep As Global.System.Data.DataColumn
        
        Private columnNom As Global.System.Data.DataColumn
        
        Private columnAdresse As Global.System.Data.DataColumn
        
        Private columnCodePostal As Global.System.Data.DataColumn
        
        Private columnVille As Global.System.Data.DataColumn
        
        Private columnPays As Global.System.Data.DataColumn
        
        Private columnFormeJuridique As Global.System.Data.DataColumn
        
        Private columnTypeClient As Global.System.Data.DataColumn
        
        Private columnCibleCommercial As Global.System.Data.DataColumn
        
        Private columnModePaiement As Global.System.Data.DataColumn
        
        Private columnEcheance As Global.System.Data.DataColumn
        
        Private columnBanque As Global.System.Data.DataColumn
        
        Private columnRIB As Global.System.Data.DataColumn
        
        Private columnCA As Global.System.Data.DataColumn
        
        Private columnEMail As Global.System.Data.DataColumn
        
        Private columnSiteInternet As Global.System.Data.DataColumn
        
        Private columnObservations As Global.System.Data.DataColumn
        
        Private columnFinMois As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        Private columnFournisseur As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnSuffixePostal As Global.System.Data.DataColumn
        
        Private columnAdresseLiv As Global.System.Data.DataColumn
        
        Private columnCodePostalLiv As Global.System.Data.DataColumn
        
        Private columnVilleLiv As Global.System.Data.DataColumn
        
        Private columnPaysLiv As Global.System.Data.DataColumn
        
        Private columnInactif As Global.System.Data.DataColumn
        
        Private columnLoginSite As Global.System.Data.DataColumn
        
        Private columnPwdSite As Global.System.Data.DataColumn
        
        Private columnIdSite As Global.System.Data.DataColumn
        
        Private columnNCompteF As Global.System.Data.DataColumn
        
        Private columnNActiviteF As Global.System.Data.DataColumn
        
        Private columnNCompteC As Global.System.Data.DataColumn
        
        Private columnNActiviteC As Global.System.Data.DataColumn
        
        Private columnnTarif As Global.System.Data.DataColumn
        
        Private columnCivilite As Global.System.Data.DataColumn
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnLicence As Global.System.Data.DataColumn
        
        Private columnCritere1 As Global.System.Data.DataColumn
        
        Private columnCritere2 As Global.System.Data.DataColumn
        
        Private columnCritere3 As Global.System.Data.DataColumn
        
        Private columnCritere4 As Global.System.Data.DataColumn
        
        Private columnNTVAIntraCom As Global.System.Data.DataColumn
        
        Private columnIsExport As Global.System.Data.DataColumn
        
        Private columnNomFacturation As Global.System.Data.DataColumn
        
        Private columnNomLivraison As Global.System.Data.DataColumn
        
        Private columnEditionBLNonChiffre As Global.System.Data.DataColumn
        
        Private columnObservationLivraison As Global.System.Data.DataColumn
        
        Private columnIndEscompteSpecifique As Global.System.Data.DataColumn
        
        Private columnTauxEscompteSpecifique As Global.System.Data.DataColumn
        
        Private columnDelaiValiditeEscompte As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnLitigeEnCours As Global.System.Data.DataColumn
        
        Private columnEnCoursMax As Global.System.Data.DataColumn
        
        Private columnRIBBanque As Global.System.Data.DataColumn
        
        Private columnRIBGichet As Global.System.Data.DataColumn
        
        Private columnRIBCompte As Global.System.Data.DataColumn
        
        Private columnRIBCle As Global.System.Data.DataColumn
        
        Private columnsiren As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Entreprise1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateModificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateModification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InfoMAJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInfoMAJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrganismeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrganisme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nMaisonMereColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnMaisonMere
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodePostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodePostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormeJuridiqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormeJuridique
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CibleCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCibleCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModePaiementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModePaiement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SiteInternetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteInternet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinMoisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinMois
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuffixePostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuffixePostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodePostalLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodePostalLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VilleLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVilleLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaysLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaysLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InactifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoginSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoginSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PwdSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPwdSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTarifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTarif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiviliteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCivilite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LicenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLicence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NTVAIntraComColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTVAIntraCom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsExportColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsExport
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomLivraisonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomLivraison
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EditionBLNonChiffreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEditionBLNonChiffre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationLivraisonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservationLivraison
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IndEscompteSpecifiqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndEscompteSpecifique
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TauxEscompteSpecifiqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTauxEscompteSpecifique
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DelaiValiditeEscompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelaiValiditeEscompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LitigeEnCoursColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLitigeEnCours
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnCoursMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnCoursMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBBanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBGichetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBGichet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBCleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBCle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sirenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsiren
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Entreprise1Row
            Get
                Return CType(Me.Rows(index),Entreprise1Row)
            End Get
        End Property
        
        Public Event Entreprise1RowChanging As Entreprise1RowChangeEventHandler
        
        Public Event Entreprise1RowChanged As Entreprise1RowChangeEventHandler
        
        Public Event Entreprise1RowDeleting As Entreprise1RowChangeEventHandler
        
        Public Event Entreprise1RowDeleted As Entreprise1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEntreprise1Row(ByVal row As Entreprise1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEntreprise1Row( _
                    ByVal nEntreprise As Decimal,  _
                    ByVal DateCreation As Date,  _
                    ByVal DateModification As Date,  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypeEntreprise As String,  _
                    ByVal nOrganisme As String,  _
                    ByVal nMaisonMere As Decimal,  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal FormeJuridique As String,  _
                    ByVal TypeClient As String,  _
                    ByVal CibleCommercial As String,  _
                    ByVal ModePaiement As String,  _
                    ByVal Echeance As Decimal,  _
                    ByVal Banque As String,  _
                    ByVal RIB As String,  _
                    ByVal CA As Single,  _
                    ByVal EMail As String,  _
                    ByVal SiteInternet As String,  _
                    ByVal Observations As String,  _
                    ByVal FinMois As Boolean,  _
                    ByVal Remise As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal Fournisseur As Boolean,  _
                    ByVal Client As Boolean,  _
                    ByVal SuffixePostal As String,  _
                    ByVal AdresseLiv As String,  _
                    ByVal CodePostalLiv As String,  _
                    ByVal VilleLiv As String,  _
                    ByVal PaysLiv As String,  _
                    ByVal Inactif As Boolean,  _
                    ByVal LoginSite As String,  _
                    ByVal PwdSite As String,  _
                    ByVal IdSite As Decimal,  _
                    ByVal NCompteF As String,  _
                    ByVal NActiviteF As String,  _
                    ByVal NCompteC As String,  _
                    ByVal NActiviteC As String,  _
                    ByVal nTarif As Decimal,  _
                    ByVal Civilite As String,  _
                    ByVal Logo() As Byte,  _
                    ByVal Licence As String,  _
                    ByVal Critere1 As String,  _
                    ByVal Critere2 As String,  _
                    ByVal Critere3 As String,  _
                    ByVal Critere4 As String,  _
                    ByVal NTVAIntraCom As String,  _
                    ByVal IsExport As Boolean,  _
                    ByVal NomFacturation As String,  _
                    ByVal NomLivraison As String,  _
                    ByVal EditionBLNonChiffre As Boolean,  _
                    ByVal ObservationLivraison As String,  _
                    ByVal IndEscompteSpecifique As Boolean,  _
                    ByVal TauxEscompteSpecifique As Decimal,  _
                    ByVal DelaiValiditeEscompte As Integer,  _
                    ByVal nCommercial As Integer,  _
                    ByVal LitigeEnCours As Boolean,  _
                    ByVal EnCoursMax As Decimal,  _
                    ByVal RIBBanque As String,  _
                    ByVal RIBGichet As String,  _
                    ByVal RIBCompte As String,  _
                    ByVal RIBCle As String,  _
                    ByVal siren As String) As Entreprise1Row
            Dim rowEntreprise1Row As Entreprise1Row = CType(Me.NewRow,Entreprise1Row)
            Dim columnValuesArray() As Object = New Object() {nEntreprise, DateCreation, DateModification, InfoMAJ, TypeEntreprise, nOrganisme, nMaisonMere, Dep, Nom, Adresse, CodePostal, Ville, Pays, FormeJuridique, TypeClient, CibleCommercial, ModePaiement, Echeance, Banque, RIB, CA, EMail, SiteInternet, Observations, FinMois, Remise, TTVA, FacturationTTC, Fournisseur, Client, SuffixePostal, AdresseLiv, CodePostalLiv, VilleLiv, PaysLiv, Inactif, LoginSite, PwdSite, IdSite, NCompteF, NActiviteF, NCompteC, NActiviteC, nTarif, Civilite, Logo, Licence, Critere1, Critere2, Critere3, Critere4, NTVAIntraCom, IsExport, NomFacturation, NomLivraison, EditionBLNonChiffre, ObservationLivraison, IndEscompteSpecifique, TauxEscompteSpecifique, DelaiValiditeEscompte, nCommercial, LitigeEnCours, EnCoursMax, RIBBanque, RIBGichet, RIBCompte, RIBCle, siren}
            rowEntreprise1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowEntreprise1Row)
            Return rowEntreprise1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynEntreprise(ByVal nEntreprise As Decimal) As Entreprise1Row
            Return CType(Me.Rows.Find(New Object() {nEntreprise}),Entreprise1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Entreprise1DataTable = CType(MyBase.Clone,Entreprise1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Entreprise1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnEntreprise = MyBase.Columns("nEntreprise")
            Me.columnDateCreation = MyBase.Columns("DateCreation")
            Me.columnDateModification = MyBase.Columns("DateModification")
            Me.columnInfoMAJ = MyBase.Columns("InfoMAJ")
            Me.columnTypeEntreprise = MyBase.Columns("TypeEntreprise")
            Me.columnnOrganisme = MyBase.Columns("nOrganisme")
            Me.columnnMaisonMere = MyBase.Columns("nMaisonMere")
            Me.columnDep = MyBase.Columns("Dep")
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnAdresse = MyBase.Columns("Adresse")
            Me.columnCodePostal = MyBase.Columns("CodePostal")
            Me.columnVille = MyBase.Columns("Ville")
            Me.columnPays = MyBase.Columns("Pays")
            Me.columnFormeJuridique = MyBase.Columns("FormeJuridique")
            Me.columnTypeClient = MyBase.Columns("TypeClient")
            Me.columnCibleCommercial = MyBase.Columns("CibleCommercial")
            Me.columnModePaiement = MyBase.Columns("ModePaiement")
            Me.columnEcheance = MyBase.Columns("Echeance")
            Me.columnBanque = MyBase.Columns("Banque")
            Me.columnRIB = MyBase.Columns("RIB")
            Me.columnCA = MyBase.Columns("CA")
            Me.columnEMail = MyBase.Columns("EMail")
            Me.columnSiteInternet = MyBase.Columns("SiteInternet")
            Me.columnObservations = MyBase.Columns("Observations")
            Me.columnFinMois = MyBase.Columns("FinMois")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
            Me.columnFournisseur = MyBase.Columns("Fournisseur")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnSuffixePostal = MyBase.Columns("SuffixePostal")
            Me.columnAdresseLiv = MyBase.Columns("AdresseLiv")
            Me.columnCodePostalLiv = MyBase.Columns("CodePostalLiv")
            Me.columnVilleLiv = MyBase.Columns("VilleLiv")
            Me.columnPaysLiv = MyBase.Columns("PaysLiv")
            Me.columnInactif = MyBase.Columns("Inactif")
            Me.columnLoginSite = MyBase.Columns("LoginSite")
            Me.columnPwdSite = MyBase.Columns("PwdSite")
            Me.columnIdSite = MyBase.Columns("IdSite")
            Me.columnNCompteF = MyBase.Columns("NCompteF")
            Me.columnNActiviteF = MyBase.Columns("NActiviteF")
            Me.columnNCompteC = MyBase.Columns("NCompteC")
            Me.columnNActiviteC = MyBase.Columns("NActiviteC")
            Me.columnnTarif = MyBase.Columns("nTarif")
            Me.columnCivilite = MyBase.Columns("Civilite")
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnLicence = MyBase.Columns("Licence")
            Me.columnCritere1 = MyBase.Columns("Critere1")
            Me.columnCritere2 = MyBase.Columns("Critere2")
            Me.columnCritere3 = MyBase.Columns("Critere3")
            Me.columnCritere4 = MyBase.Columns("Critere4")
            Me.columnNTVAIntraCom = MyBase.Columns("NTVAIntraCom")
            Me.columnIsExport = MyBase.Columns("IsExport")
            Me.columnNomFacturation = MyBase.Columns("NomFacturation")
            Me.columnNomLivraison = MyBase.Columns("NomLivraison")
            Me.columnEditionBLNonChiffre = MyBase.Columns("EditionBLNonChiffre")
            Me.columnObservationLivraison = MyBase.Columns("ObservationLivraison")
            Me.columnIndEscompteSpecifique = MyBase.Columns("IndEscompteSpecifique")
            Me.columnTauxEscompteSpecifique = MyBase.Columns("TauxEscompteSpecifique")
            Me.columnDelaiValiditeEscompte = MyBase.Columns("DelaiValiditeEscompte")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnLitigeEnCours = MyBase.Columns("LitigeEnCours")
            Me.columnEnCoursMax = MyBase.Columns("EnCoursMax")
            Me.columnRIBBanque = MyBase.Columns("RIBBanque")
            Me.columnRIBGichet = MyBase.Columns("RIBGichet")
            Me.columnRIBCompte = MyBase.Columns("RIBCompte")
            Me.columnRIBCle = MyBase.Columns("RIBCle")
            Me.columnsiren = MyBase.Columns("siren")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnEntreprise = New Global.System.Data.DataColumn("nEntreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnEntreprise)
            Me.columnDateCreation = New Global.System.Data.DataColumn("DateCreation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreation)
            Me.columnDateModification = New Global.System.Data.DataColumn("DateModification", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateModification)
            Me.columnInfoMAJ = New Global.System.Data.DataColumn("InfoMAJ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInfoMAJ)
            Me.columnTypeEntreprise = New Global.System.Data.DataColumn("TypeEntreprise", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeEntreprise)
            Me.columnnOrganisme = New Global.System.Data.DataColumn("nOrganisme", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrganisme)
            Me.columnnMaisonMere = New Global.System.Data.DataColumn("nMaisonMere", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnMaisonMere)
            Me.columnDep = New Global.System.Data.DataColumn("Dep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDep)
            Me.columnNom = New Global.System.Data.DataColumn("Nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnAdresse = New Global.System.Data.DataColumn("Adresse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresse)
            Me.columnCodePostal = New Global.System.Data.DataColumn("CodePostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodePostal)
            Me.columnVille = New Global.System.Data.DataColumn("Ville", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVille)
            Me.columnPays = New Global.System.Data.DataColumn("Pays", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPays)
            Me.columnFormeJuridique = New Global.System.Data.DataColumn("FormeJuridique", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormeJuridique)
            Me.columnTypeClient = New Global.System.Data.DataColumn("TypeClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeClient)
            Me.columnCibleCommercial = New Global.System.Data.DataColumn("CibleCommercial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCibleCommercial)
            Me.columnModePaiement = New Global.System.Data.DataColumn("ModePaiement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModePaiement)
            Me.columnEcheance = New Global.System.Data.DataColumn("Echeance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEcheance)
            Me.columnBanque = New Global.System.Data.DataColumn("Banque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanque)
            Me.columnRIB = New Global.System.Data.DataColumn("RIB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIB)
            Me.columnCA = New Global.System.Data.DataColumn("CA", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCA)
            Me.columnEMail = New Global.System.Data.DataColumn("EMail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMail)
            Me.columnSiteInternet = New Global.System.Data.DataColumn("SiteInternet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteInternet)
            Me.columnObservations = New Global.System.Data.DataColumn("Observations", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservations)
            Me.columnFinMois = New Global.System.Data.DataColumn("FinMois", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinMois)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.columnFournisseur = New Global.System.Data.DataColumn("Fournisseur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFournisseur)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnSuffixePostal = New Global.System.Data.DataColumn("SuffixePostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuffixePostal)
            Me.columnAdresseLiv = New Global.System.Data.DataColumn("AdresseLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseLiv)
            Me.columnCodePostalLiv = New Global.System.Data.DataColumn("CodePostalLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodePostalLiv)
            Me.columnVilleLiv = New Global.System.Data.DataColumn("VilleLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVilleLiv)
            Me.columnPaysLiv = New Global.System.Data.DataColumn("PaysLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaysLiv)
            Me.columnInactif = New Global.System.Data.DataColumn("Inactif", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactif)
            Me.columnLoginSite = New Global.System.Data.DataColumn("LoginSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoginSite)
            Me.columnPwdSite = New Global.System.Data.DataColumn("PwdSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPwdSite)
            Me.columnIdSite = New Global.System.Data.DataColumn("IdSite", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSite)
            Me.columnNCompteF = New Global.System.Data.DataColumn("NCompteF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteF)
            Me.columnNActiviteF = New Global.System.Data.DataColumn("NActiviteF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteF)
            Me.columnNCompteC = New Global.System.Data.DataColumn("NCompteC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteC)
            Me.columnNActiviteC = New Global.System.Data.DataColumn("NActiviteC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteC)
            Me.columnnTarif = New Global.System.Data.DataColumn("nTarif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTarif)
            Me.columnCivilite = New Global.System.Data.DataColumn("Civilite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCivilite)
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnLicence = New Global.System.Data.DataColumn("Licence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLicence)
            Me.columnCritere1 = New Global.System.Data.DataColumn("Critere1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere1)
            Me.columnCritere2 = New Global.System.Data.DataColumn("Critere2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere2)
            Me.columnCritere3 = New Global.System.Data.DataColumn("Critere3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere3)
            Me.columnCritere4 = New Global.System.Data.DataColumn("Critere4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere4)
            Me.columnNTVAIntraCom = New Global.System.Data.DataColumn("NTVAIntraCom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTVAIntraCom)
            Me.columnIsExport = New Global.System.Data.DataColumn("IsExport", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsExport)
            Me.columnNomFacturation = New Global.System.Data.DataColumn("NomFacturation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomFacturation)
            Me.columnNomLivraison = New Global.System.Data.DataColumn("NomLivraison", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomLivraison)
            Me.columnEditionBLNonChiffre = New Global.System.Data.DataColumn("EditionBLNonChiffre", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEditionBLNonChiffre)
            Me.columnObservationLivraison = New Global.System.Data.DataColumn("ObservationLivraison", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservationLivraison)
            Me.columnIndEscompteSpecifique = New Global.System.Data.DataColumn("IndEscompteSpecifique", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndEscompteSpecifique)
            Me.columnTauxEscompteSpecifique = New Global.System.Data.DataColumn("TauxEscompteSpecifique", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTauxEscompteSpecifique)
            Me.columnDelaiValiditeEscompte = New Global.System.Data.DataColumn("DelaiValiditeEscompte", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelaiValiditeEscompte)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnLitigeEnCours = New Global.System.Data.DataColumn("LitigeEnCours", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLitigeEnCours)
            Me.columnEnCoursMax = New Global.System.Data.DataColumn("EnCoursMax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnCoursMax)
            Me.columnRIBBanque = New Global.System.Data.DataColumn("RIBBanque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBBanque)
            Me.columnRIBGichet = New Global.System.Data.DataColumn("RIBGichet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBGichet)
            Me.columnRIBCompte = New Global.System.Data.DataColumn("RIBCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBCompte)
            Me.columnRIBCle = New Global.System.Data.DataColumn("RIBCle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBCle)
            Me.columnsiren = New Global.System.Data.DataColumn("siren", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsiren)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnEntreprise}, true))
            Me.columnnEntreprise.AllowDBNull = false
            Me.columnnEntreprise.Unique = true
            Me.columnInfoMAJ.MaxLength = 255
            Me.columnTypeEntreprise.MaxLength = 255
            Me.columnnOrganisme.MaxLength = 255
            Me.columnDep.MaxLength = 255
            Me.columnNom.MaxLength = 255
            Me.columnAdresse.MaxLength = 1073741823
            Me.columnCodePostal.MaxLength = 255
            Me.columnVille.MaxLength = 255
            Me.columnPays.MaxLength = 255
            Me.columnFormeJuridique.MaxLength = 255
            Me.columnTypeClient.MaxLength = 255
            Me.columnCibleCommercial.MaxLength = 1073741823
            Me.columnModePaiement.MaxLength = 255
            Me.columnBanque.MaxLength = 255
            Me.columnRIB.MaxLength = 255
            Me.columnEMail.MaxLength = 255
            Me.columnSiteInternet.MaxLength = 255
            Me.columnObservations.MaxLength = 1073741823
            Me.columnTTVA.MaxLength = 50
            Me.columnSuffixePostal.MaxLength = 255
            Me.columnAdresseLiv.MaxLength = 1073741823
            Me.columnCodePostalLiv.MaxLength = 50
            Me.columnVilleLiv.MaxLength = 255
            Me.columnPaysLiv.MaxLength = 255
            Me.columnLoginSite.MaxLength = 50
            Me.columnPwdSite.MaxLength = 50
            Me.columnNCompteF.MaxLength = 8
            Me.columnNActiviteF.MaxLength = 8
            Me.columnNCompteC.MaxLength = 8
            Me.columnNActiviteC.MaxLength = 4
            Me.columnCivilite.MaxLength = 50
            Me.columnLicence.MaxLength = 255
            Me.columnCritere1.MaxLength = 255
            Me.columnCritere2.MaxLength = 255
            Me.columnCritere3.MaxLength = 255
            Me.columnCritere4.MaxLength = 255
            Me.columnNTVAIntraCom.MaxLength = 50
            Me.columnNomFacturation.MaxLength = 255
            Me.columnNomLivraison.MaxLength = 255
            Me.columnObservationLivraison.MaxLength = 255
            Me.columnIndEscompteSpecifique.AllowDBNull = false
            Me.columnLitigeEnCours.AllowDBNull = false
            Me.columnRIBBanque.ReadOnly = true
            Me.columnRIBBanque.MaxLength = 5
            Me.columnRIBGichet.ReadOnly = true
            Me.columnRIBGichet.MaxLength = 5
            Me.columnRIBCompte.ReadOnly = true
            Me.columnRIBCompte.MaxLength = 11
            Me.columnRIBCle.ReadOnly = true
            Me.columnRIBCle.MaxLength = 2
            Me.columnsiren.ReadOnly = true
            Me.columnsiren.MaxLength = 9
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEntreprise1Row() As Entreprise1Row
            Return CType(Me.NewRow,Entreprise1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Entreprise1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Entreprise1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Entreprise1RowChangedEvent) Is Nothing) Then
                RaiseEvent Entreprise1RowChanged(Me, New Entreprise1RowChangeEvent(CType(e.Row,Entreprise1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Entreprise1RowChangingEvent) Is Nothing) Then
                RaiseEvent Entreprise1RowChanging(Me, New Entreprise1RowChangeEvent(CType(e.Row,Entreprise1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Entreprise1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Entreprise1RowDeleted(Me, New Entreprise1RowChangeEvent(CType(e.Row,Entreprise1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Entreprise1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Entreprise1RowDeleting(Me, New Entreprise1RowChangeEvent(CType(e.Row,Entreprise1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEntreprise1Row(ByVal row As Entreprise1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Entreprise1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AReglementDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnReglement As Global.System.Data.DataColumn
        
        Private columnDateReglement As Global.System.Data.DataColumn
        
        Private columnDateDepot As Global.System.Data.DataColumn
        
        Private columnnEntreprise As Global.System.Data.DataColumn
        
        Private columnnMode As Global.System.Data.DataColumn
        
        Private columnnCheque As Global.System.Data.DataColumn
        
        Private columnModeReglement As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnPerte As Global.System.Data.DataColumn
        
        Private columnProfit As Global.System.Data.DataColumn
        
        Private columnDepose As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnBanqueClient As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AReglement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateDepotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateDepot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nModeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnMode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nChequeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCheque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModeReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PerteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProfitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProfit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BanqueClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanqueClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AReglementRow
            Get
                Return CType(Me.Rows(index),AReglementRow)
            End Get
        End Property
        
        Public Event AReglementRowChanging As AReglementRowChangeEventHandler
        
        Public Event AReglementRowChanged As AReglementRowChangeEventHandler
        
        Public Event AReglementRowDeleting As AReglementRowChangeEventHandler
        
        Public Event AReglementRowDeleted As AReglementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAReglementRow(ByVal row As AReglementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAReglementRow(ByVal nReglement As Decimal, ByVal DateReglement As Date, ByVal DateDepot As Date, ByVal nEntreprise As Decimal, ByVal nMode As String, ByVal nCheque As String, ByVal ModeReglement As String, ByVal Observation As String, ByVal Montant As Decimal, ByVal Perte As Decimal, ByVal Profit As Decimal, ByVal Depose As Boolean, ByVal ExportCompta As Boolean, ByVal BanqueClient As String) As AReglementRow
            Dim rowAReglementRow As AReglementRow = CType(Me.NewRow,AReglementRow)
            Dim columnValuesArray() As Object = New Object() {nReglement, DateReglement, DateDepot, nEntreprise, nMode, nCheque, ModeReglement, Observation, Montant, Perte, Profit, Depose, ExportCompta, BanqueClient}
            rowAReglementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAReglementRow)
            Return rowAReglementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynReglement(ByVal nReglement As Decimal) As AReglementRow
            Return CType(Me.Rows.Find(New Object() {nReglement}),AReglementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AReglementDataTable = CType(MyBase.Clone,AReglementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AReglementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnReglement = MyBase.Columns("nReglement")
            Me.columnDateReglement = MyBase.Columns("DateReglement")
            Me.columnDateDepot = MyBase.Columns("DateDepot")
            Me.columnnEntreprise = MyBase.Columns("nEntreprise")
            Me.columnnMode = MyBase.Columns("nMode")
            Me.columnnCheque = MyBase.Columns("nCheque")
            Me.columnModeReglement = MyBase.Columns("ModeReglement")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnPerte = MyBase.Columns("Perte")
            Me.columnProfit = MyBase.Columns("Profit")
            Me.columnDepose = MyBase.Columns("Depose")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnBanqueClient = MyBase.Columns("BanqueClient")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnReglement = New Global.System.Data.DataColumn("nReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnReglement)
            Me.columnDateReglement = New Global.System.Data.DataColumn("DateReglement", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateReglement)
            Me.columnDateDepot = New Global.System.Data.DataColumn("DateDepot", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateDepot)
            Me.columnnEntreprise = New Global.System.Data.DataColumn("nEntreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnEntreprise)
            Me.columnnMode = New Global.System.Data.DataColumn("nMode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnMode)
            Me.columnnCheque = New Global.System.Data.DataColumn("nCheque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCheque)
            Me.columnModeReglement = New Global.System.Data.DataColumn("ModeReglement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModeReglement)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnPerte = New Global.System.Data.DataColumn("Perte", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerte)
            Me.columnProfit = New Global.System.Data.DataColumn("Profit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProfit)
            Me.columnDepose = New Global.System.Data.DataColumn("Depose", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepose)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnBanqueClient = New Global.System.Data.DataColumn("BanqueClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanqueClient)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey5", New Global.System.Data.DataColumn() {Me.columnnReglement}, true))
            Me.columnnReglement.AllowDBNull = false
            Me.columnnReglement.Unique = true
            Me.columnDepose.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAReglementRow() As AReglementRow
            Return CType(Me.NewRow,AReglementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AReglementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AReglementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AReglementRowChangedEvent) Is Nothing) Then
                RaiseEvent AReglementRowChanged(Me, New AReglementRowChangeEvent(CType(e.Row,AReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AReglementRowChangingEvent) Is Nothing) Then
                RaiseEvent AReglementRowChanging(Me, New AReglementRowChangeEvent(CType(e.Row,AReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AReglementRowDeletedEvent) Is Nothing) Then
                RaiseEvent AReglementRowDeleted(Me, New AReglementRowChangeEvent(CType(e.Row,AReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AReglementRowDeletingEvent) Is Nothing) Then
                RaiseEvent AReglementRowDeleting(Me, New AReglementRowChangeEvent(CType(e.Row,AReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAReglementRow(ByVal row As AReglementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AReglementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PersonneDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnPersonne As Global.System.Data.DataColumn
        
        Private columnDateCreation As Global.System.Data.DataColumn
        
        Private columnDateModification As Global.System.Data.DataColumn
        
        Private columnInfoMAJ As Global.System.Data.DataColumn
        
        Private columnTypePersonne As Global.System.Data.DataColumn
        
        Private columnDep As Global.System.Data.DataColumn
        
        Private columnNom As Global.System.Data.DataColumn
        
        Private columnPrenom As Global.System.Data.DataColumn
        
        Private columnnEntreprise As Global.System.Data.DataColumn
        
        Private columnAdresse As Global.System.Data.DataColumn
        
        Private columnCodePostal As Global.System.Data.DataColumn
        
        Private columnVille As Global.System.Data.DataColumn
        
        Private columnPays As Global.System.Data.DataColumn
        
        Private columnNomJeuneFille As Global.System.Data.DataColumn
        
        Private columnTypeClient As Global.System.Data.DataColumn
        
        Private columnFonction As Global.System.Data.DataColumn
        
        Private columnCampagne As Global.System.Data.DataColumn
        
        Private columnDatedeNaissance As Global.System.Data.DataColumn
        
        Private columnLieuNaissance As Global.System.Data.DataColumn
        
        Private columnEMail As Global.System.Data.DataColumn
        
        Private columnAdressehttp As Global.System.Data.DataColumn
        
        Private columnObservations As Global.System.Data.DataColumn
        
        Private columnNpAfficher As Global.System.Data.DataColumn
        
        Private columnNpRecevoirInfo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Personne"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPersonneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPersonne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateModificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateModification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InfoMAJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInfoMAJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypePersonneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypePersonne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrenomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrenom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodePostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodePostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomJeuneFilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomJeuneFille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FonctionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFonction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CampagneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCampagne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatedeNaissanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatedeNaissance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LieuNaissanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLieuNaissance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdressehttpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdressehttp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NpAfficherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNpAfficher
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NpRecevoirInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNpRecevoirInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PersonneRow
            Get
                Return CType(Me.Rows(index),PersonneRow)
            End Get
        End Property
        
        Public Event PersonneRowChanging As PersonneRowChangeEventHandler
        
        Public Event PersonneRowChanged As PersonneRowChangeEventHandler
        
        Public Event PersonneRowDeleting As PersonneRowChangeEventHandler
        
        Public Event PersonneRowDeleted As PersonneRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPersonneRow(ByVal row As PersonneRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPersonneRow( _
                    ByVal nPersonne As Decimal,  _
                    ByVal DateCreation As Date,  _
                    ByVal DateModification As Date,  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypePersonne As String,  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Prenom As String,  _
                    ByVal nEntreprise As Decimal,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal NomJeuneFille As String,  _
                    ByVal TypeClient As String,  _
                    ByVal Fonction As String,  _
                    ByVal Campagne As String,  _
                    ByVal DatedeNaissance As Date,  _
                    ByVal LieuNaissance As String,  _
                    ByVal EMail As String,  _
                    ByVal Adressehttp As String,  _
                    ByVal Observations As String,  _
                    ByVal NpAfficher As Boolean,  _
                    ByVal NpRecevoirInfo As Boolean) As PersonneRow
            Dim rowPersonneRow As PersonneRow = CType(Me.NewRow,PersonneRow)
            Dim columnValuesArray() As Object = New Object() {nPersonne, DateCreation, DateModification, InfoMAJ, TypePersonne, Dep, Nom, Prenom, nEntreprise, Adresse, CodePostal, Ville, Pays, NomJeuneFille, TypeClient, Fonction, Campagne, DatedeNaissance, LieuNaissance, EMail, Adressehttp, Observations, NpAfficher, NpRecevoirInfo}
            rowPersonneRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPersonneRow)
            Return rowPersonneRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynPersonne(ByVal nPersonne As Decimal) As PersonneRow
            Return CType(Me.Rows.Find(New Object() {nPersonne}),PersonneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PersonneDataTable = CType(MyBase.Clone,PersonneDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PersonneDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnPersonne = MyBase.Columns("nPersonne")
            Me.columnDateCreation = MyBase.Columns("DateCreation")
            Me.columnDateModification = MyBase.Columns("DateModification")
            Me.columnInfoMAJ = MyBase.Columns("InfoMAJ")
            Me.columnTypePersonne = MyBase.Columns("TypePersonne")
            Me.columnDep = MyBase.Columns("Dep")
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnPrenom = MyBase.Columns("Prenom")
            Me.columnnEntreprise = MyBase.Columns("nEntreprise")
            Me.columnAdresse = MyBase.Columns("Adresse")
            Me.columnCodePostal = MyBase.Columns("CodePostal")
            Me.columnVille = MyBase.Columns("Ville")
            Me.columnPays = MyBase.Columns("Pays")
            Me.columnNomJeuneFille = MyBase.Columns("NomJeuneFille")
            Me.columnTypeClient = MyBase.Columns("TypeClient")
            Me.columnFonction = MyBase.Columns("Fonction")
            Me.columnCampagne = MyBase.Columns("Campagne")
            Me.columnDatedeNaissance = MyBase.Columns("DatedeNaissance")
            Me.columnLieuNaissance = MyBase.Columns("LieuNaissance")
            Me.columnEMail = MyBase.Columns("EMail")
            Me.columnAdressehttp = MyBase.Columns("Adressehttp")
            Me.columnObservations = MyBase.Columns("Observations")
            Me.columnNpAfficher = MyBase.Columns("NpAfficher")
            Me.columnNpRecevoirInfo = MyBase.Columns("NpRecevoirInfo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnPersonne = New Global.System.Data.DataColumn("nPersonne", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPersonne)
            Me.columnDateCreation = New Global.System.Data.DataColumn("DateCreation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreation)
            Me.columnDateModification = New Global.System.Data.DataColumn("DateModification", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateModification)
            Me.columnInfoMAJ = New Global.System.Data.DataColumn("InfoMAJ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInfoMAJ)
            Me.columnTypePersonne = New Global.System.Data.DataColumn("TypePersonne", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypePersonne)
            Me.columnDep = New Global.System.Data.DataColumn("Dep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDep)
            Me.columnNom = New Global.System.Data.DataColumn("Nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnPrenom = New Global.System.Data.DataColumn("Prenom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrenom)
            Me.columnnEntreprise = New Global.System.Data.DataColumn("nEntreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnEntreprise)
            Me.columnAdresse = New Global.System.Data.DataColumn("Adresse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresse)
            Me.columnCodePostal = New Global.System.Data.DataColumn("CodePostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodePostal)
            Me.columnVille = New Global.System.Data.DataColumn("Ville", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVille)
            Me.columnPays = New Global.System.Data.DataColumn("Pays", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPays)
            Me.columnNomJeuneFille = New Global.System.Data.DataColumn("NomJeuneFille", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomJeuneFille)
            Me.columnTypeClient = New Global.System.Data.DataColumn("TypeClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeClient)
            Me.columnFonction = New Global.System.Data.DataColumn("Fonction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFonction)
            Me.columnCampagne = New Global.System.Data.DataColumn("Campagne", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCampagne)
            Me.columnDatedeNaissance = New Global.System.Data.DataColumn("DatedeNaissance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatedeNaissance)
            Me.columnLieuNaissance = New Global.System.Data.DataColumn("LieuNaissance", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLieuNaissance)
            Me.columnEMail = New Global.System.Data.DataColumn("EMail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMail)
            Me.columnAdressehttp = New Global.System.Data.DataColumn("Adressehttp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdressehttp)
            Me.columnObservations = New Global.System.Data.DataColumn("Observations", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservations)
            Me.columnNpAfficher = New Global.System.Data.DataColumn("NpAfficher", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNpAfficher)
            Me.columnNpRecevoirInfo = New Global.System.Data.DataColumn("NpRecevoirInfo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNpRecevoirInfo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey7", New Global.System.Data.DataColumn() {Me.columnnPersonne}, true))
            Me.columnnPersonne.AllowDBNull = false
            Me.columnnPersonne.Unique = true
            Me.columnNpAfficher.AllowDBNull = false
            Me.columnNpRecevoirInfo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPersonneRow() As PersonneRow
            Return CType(Me.NewRow,PersonneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PersonneRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PersonneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PersonneRowChangedEvent) Is Nothing) Then
                RaiseEvent PersonneRowChanged(Me, New PersonneRowChangeEvent(CType(e.Row,PersonneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PersonneRowChangingEvent) Is Nothing) Then
                RaiseEvent PersonneRowChanging(Me, New PersonneRowChangeEvent(CType(e.Row,PersonneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PersonneRowDeletedEvent) Is Nothing) Then
                RaiseEvent PersonneRowDeleted(Me, New PersonneRowChangeEvent(CType(e.Row,PersonneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PersonneRowDeletingEvent) Is Nothing) Then
                RaiseEvent PersonneRowDeleting(Me, New PersonneRowChangeEvent(CType(e.Row,PersonneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePersonneRow(ByVal row As PersonneRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PersonneDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProduitDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnLibelleLong As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnPrixAHT As Global.System.Data.DataColumn
        
        Private columnPrixATTC As Global.System.Data.DataColumn
        
        Private columnPrixVHT As Global.System.Data.DataColumn
        
        Private columnPrixVTTC As Global.System.Data.DataColumn
        
        Private columnIsPrixHT As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnProduitAchat As Global.System.Data.DataColumn
        
        Private columnProduitVente As Global.System.Data.DataColumn
        
        Private columnNCompteA As Global.System.Data.DataColumn
        
        Private columnNActiviteA As Global.System.Data.DataColumn
        
        Private columnNCompteV As Global.System.Data.DataColumn
        
        Private columnNActiviteV As Global.System.Data.DataColumn
        
        Private columnFamille1 As Global.System.Data.DataColumn
        
        Private columnFamille2 As Global.System.Data.DataColumn
        
        Private columnFamille3 As Global.System.Data.DataColumn
        
        Private columnU1U2Independant As Global.System.Data.DataColumn
        
        Private columnU1xU2 As Global.System.Data.DataColumn
        
        Private columnCodeBarre As Global.System.Data.DataColumn
        
        Private columnInactif As Global.System.Data.DataColumn
        
        Private columnCoefU2 As Global.System.Data.DataColumn
        
        Private columnTypeFacturation As Global.System.Data.DataColumn
        
        Private columnCoefAV As Global.System.Data.DataColumn
        
        Private columnProduitCompose As Global.System.Data.DataColumn
        
        Private columnImage As Global.System.Data.DataColumn
        
        Private columnGestionStock As Global.System.Data.DataColumn
        
        Private columnRefFournisseur As Global.System.Data.DataColumn
        
        Private columnIsSortieImpr As Global.System.Data.DataColumn
        
        Private columnConditionnement As Global.System.Data.DataColumn
        
        Private columnpoidsUnitaire As Global.System.Data.DataColumn
        
        Private columnqteConditionnement As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Produit"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleLongColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelleLong
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixAHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixAHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixATTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixATTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPrixHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPrixHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitAchatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitAchat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1U2IndependantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1U2Independant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1xU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1xU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeBarreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeBarre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InactifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefAVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefAV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitComposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitCompose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GestionStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGestionStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefFournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSortieImprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSortieImpr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConditionnementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConditionnement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property poidsUnitaireColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpoidsUnitaire
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qteConditionnementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqteConditionnement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProduitRow
            Get
                Return CType(Me.Rows(index),ProduitRow)
            End Get
        End Property
        
        Public Event ProduitRowChanging As ProduitRowChangeEventHandler
        
        Public Event ProduitRowChanged As ProduitRowChangeEventHandler
        
        Public Event ProduitRowDeleting As ProduitRowChangeEventHandler
        
        Public Event ProduitRowDeleted As ProduitRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduitRow(ByVal row As ProduitRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduitRow( _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Decimal,  _
                    ByVal PrixATTC As Decimal,  _
                    ByVal PrixVHT As Decimal,  _
                    ByVal PrixVTTC As Decimal,  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Short,  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Boolean,  _
                    ByVal U1xU2 As Decimal,  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Boolean,  _
                    ByVal CoefU2 As Decimal,  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Decimal,  _
                    ByVal ProduitCompose As Boolean,  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Boolean,  _
                    ByVal RefFournisseur As String,  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal Conditionnement As Long,  _
                    ByVal poidsUnitaire As Decimal,  _
                    ByVal qteConditionnement As Decimal) As ProduitRow
            Dim rowProduitRow As ProduitRow = CType(Me.NewRow,ProduitRow)
            Dim columnValuesArray() As Object = New Object() {CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, RefFournisseur, IsSortieImpr, Conditionnement, poidsUnitaire, qteConditionnement}
            rowProduitRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduitRow)
            Return rowProduitRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodeProduit(ByVal CodeProduit As String) As ProduitRow
            Return CType(Me.Rows.Find(New Object() {CodeProduit}),ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProduitDataTable = CType(MyBase.Clone,ProduitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProduitDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnLibelleLong = MyBase.Columns("LibelleLong")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnPrixAHT = MyBase.Columns("PrixAHT")
            Me.columnPrixATTC = MyBase.Columns("PrixATTC")
            Me.columnPrixVHT = MyBase.Columns("PrixVHT")
            Me.columnPrixVTTC = MyBase.Columns("PrixVTTC")
            Me.columnIsPrixHT = MyBase.Columns("IsPrixHT")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnProduitAchat = MyBase.Columns("ProduitAchat")
            Me.columnProduitVente = MyBase.Columns("ProduitVente")
            Me.columnNCompteA = MyBase.Columns("NCompteA")
            Me.columnNActiviteA = MyBase.Columns("NActiviteA")
            Me.columnNCompteV = MyBase.Columns("NCompteV")
            Me.columnNActiviteV = MyBase.Columns("NActiviteV")
            Me.columnFamille1 = MyBase.Columns("Famille1")
            Me.columnFamille2 = MyBase.Columns("Famille2")
            Me.columnFamille3 = MyBase.Columns("Famille3")
            Me.columnU1U2Independant = MyBase.Columns("U1U2Independant")
            Me.columnU1xU2 = MyBase.Columns("U1xU2")
            Me.columnCodeBarre = MyBase.Columns("CodeBarre")
            Me.columnInactif = MyBase.Columns("Inactif")
            Me.columnCoefU2 = MyBase.Columns("CoefU2")
            Me.columnTypeFacturation = MyBase.Columns("TypeFacturation")
            Me.columnCoefAV = MyBase.Columns("CoefAV")
            Me.columnProduitCompose = MyBase.Columns("ProduitCompose")
            Me.columnImage = MyBase.Columns("Image")
            Me.columnGestionStock = MyBase.Columns("GestionStock")
            Me.columnRefFournisseur = MyBase.Columns("RefFournisseur")
            Me.columnIsSortieImpr = MyBase.Columns("IsSortieImpr")
            Me.columnConditionnement = MyBase.Columns("Conditionnement")
            Me.columnpoidsUnitaire = MyBase.Columns("poidsUnitaire")
            Me.columnqteConditionnement = MyBase.Columns("qteConditionnement")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnLibelleLong = New Global.System.Data.DataColumn("LibelleLong", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelleLong)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnPrixAHT = New Global.System.Data.DataColumn("PrixAHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixAHT)
            Me.columnPrixATTC = New Global.System.Data.DataColumn("PrixATTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixATTC)
            Me.columnPrixVHT = New Global.System.Data.DataColumn("PrixVHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVHT)
            Me.columnPrixVTTC = New Global.System.Data.DataColumn("PrixVTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVTTC)
            Me.columnIsPrixHT = New Global.System.Data.DataColumn("IsPrixHT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPrixHT)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnProduitAchat = New Global.System.Data.DataColumn("ProduitAchat", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitAchat)
            Me.columnProduitVente = New Global.System.Data.DataColumn("ProduitVente", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitVente)
            Me.columnNCompteA = New Global.System.Data.DataColumn("NCompteA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteA)
            Me.columnNActiviteA = New Global.System.Data.DataColumn("NActiviteA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteA)
            Me.columnNCompteV = New Global.System.Data.DataColumn("NCompteV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteV)
            Me.columnNActiviteV = New Global.System.Data.DataColumn("NActiviteV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteV)
            Me.columnFamille1 = New Global.System.Data.DataColumn("Famille1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille1)
            Me.columnFamille2 = New Global.System.Data.DataColumn("Famille2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille2)
            Me.columnFamille3 = New Global.System.Data.DataColumn("Famille3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille3)
            Me.columnU1U2Independant = New Global.System.Data.DataColumn("U1U2Independant", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1U2Independant)
            Me.columnU1xU2 = New Global.System.Data.DataColumn("U1xU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1xU2)
            Me.columnCodeBarre = New Global.System.Data.DataColumn("CodeBarre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeBarre)
            Me.columnInactif = New Global.System.Data.DataColumn("Inactif", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactif)
            Me.columnCoefU2 = New Global.System.Data.DataColumn("CoefU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefU2)
            Me.columnTypeFacturation = New Global.System.Data.DataColumn("TypeFacturation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeFacturation)
            Me.columnCoefAV = New Global.System.Data.DataColumn("CoefAV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefAV)
            Me.columnProduitCompose = New Global.System.Data.DataColumn("ProduitCompose", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitCompose)
            Me.columnImage = New Global.System.Data.DataColumn("Image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImage)
            Me.columnGestionStock = New Global.System.Data.DataColumn("GestionStock", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGestionStock)
            Me.columnRefFournisseur = New Global.System.Data.DataColumn("RefFournisseur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefFournisseur)
            Me.columnIsSortieImpr = New Global.System.Data.DataColumn("IsSortieImpr", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSortieImpr)
            Me.columnConditionnement = New Global.System.Data.DataColumn("Conditionnement", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConditionnement)
            Me.columnpoidsUnitaire = New Global.System.Data.DataColumn("poidsUnitaire", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpoidsUnitaire)
            Me.columnqteConditionnement = New Global.System.Data.DataColumn("qteConditionnement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqteConditionnement)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey9", New Global.System.Data.DataColumn() {Me.columnCodeProduit}, true))
            Me.columnCodeProduit.AllowDBNull = false
            Me.columnCodeProduit.Unique = true
            Me.columnIsPrixHT.AllowDBNull = false
            Me.columnProduitAchat.AllowDBNull = false
            Me.columnProduitVente.AllowDBNull = false
            Me.columnIsSortieImpr.DefaultValue = CType(true,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduitRow() As ProduitRow
            Return CType(Me.NewRow,ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProduitRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProduitRowChangedEvent) Is Nothing) Then
                RaiseEvent ProduitRowChanged(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProduitRowChangingEvent) Is Nothing) Then
                RaiseEvent ProduitRowChanging(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProduitRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProduitRowDeleted(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProduitRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProduitRowDeleting(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduitRow(ByVal row As ProduitRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProduitDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TVADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnTVA As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTLibelle As Global.System.Data.DataColumn
        
        Private columnTTaux As Global.System.Data.DataColumn
        
        Private columnTCpt As Global.System.Data.DataColumn
        
        Private columnTJournal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TVA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TLibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTauxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTaux
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TJournalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTJournal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TVARow
            Get
                Return CType(Me.Rows(index),TVARow)
            End Get
        End Property
        
        Public Event TVARowChanging As TVARowChangeEventHandler
        
        Public Event TVARowChanged As TVARowChangeEventHandler
        
        Public Event TVARowDeleting As TVARowChangeEventHandler
        
        Public Event TVARowDeleted As TVARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTVARow(ByVal row As TVARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTVARow(ByVal nTVA As Decimal, ByVal TTVA As String, ByVal TLibelle As String, ByVal TTaux As Decimal, ByVal TCpt As String, ByVal TJournal As String) As TVARow
            Dim rowTVARow As TVARow = CType(Me.NewRow,TVARow)
            Dim columnValuesArray() As Object = New Object() {nTVA, TTVA, TLibelle, TTaux, TCpt, TJournal}
            rowTVARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTVARow)
            Return rowTVARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynTVA(ByVal nTVA As Decimal) As TVARow
            Return CType(Me.Rows.Find(New Object() {nTVA}),TVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TVADataTable = CType(MyBase.Clone,TVADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TVADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnTVA = MyBase.Columns("nTVA")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTLibelle = MyBase.Columns("TLibelle")
            Me.columnTTaux = MyBase.Columns("TTaux")
            Me.columnTCpt = MyBase.Columns("TCpt")
            Me.columnTJournal = MyBase.Columns("TJournal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnTVA = New Global.System.Data.DataColumn("nTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTVA)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTLibelle = New Global.System.Data.DataColumn("TLibelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTLibelle)
            Me.columnTTaux = New Global.System.Data.DataColumn("TTaux", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTaux)
            Me.columnTCpt = New Global.System.Data.DataColumn("TCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCpt)
            Me.columnTJournal = New Global.System.Data.DataColumn("TJournal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTJournal)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey10", New Global.System.Data.DataColumn() {Me.columnnTVA}, true))
            Me.columnnTVA.AllowDBNull = false
            Me.columnnTVA.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTVARow() As TVARow
            Return CType(Me.NewRow,TVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TVARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TVARowChangedEvent) Is Nothing) Then
                RaiseEvent TVARowChanged(Me, New TVARowChangeEvent(CType(e.Row,TVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TVARowChangingEvent) Is Nothing) Then
                RaiseEvent TVARowChanging(Me, New TVARowChangeEvent(CType(e.Row,TVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TVARowDeletedEvent) Is Nothing) Then
                RaiseEvent TVARowDeleted(Me, New TVARowChangeEvent(CType(e.Row,TVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TVARowDeletingEvent) Is Nothing) Then
                RaiseEvent TVARowDeleting(Me, New TVARowChangeEvent(CType(e.Row,TVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTVARow(ByVal row As TVARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TVADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VBonCommandeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnnPrescripteur As Global.System.Data.DataColumn
        
        Private columnnPayeur As Global.System.Data.DataColumn
        
        Private columnnContact As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnFacturationPrescripteur As Global.System.Data.DataColumn
        
        Private columnFacturationClient As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnDateRelance1 As Global.System.Data.DataColumn
        
        Private columnDateRelance2 As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantHT As Global.System.Data.DataColumn
        
        Private columnMontantTVA As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnnPreFacturation As Global.System.Data.DataColumn
        
        Private columnDatePreFacturation As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VBonCommande"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatePreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VBonCommandeRow
            Get
                Return CType(Me.Rows(index),VBonCommandeRow)
            End Get
        End Property
        
        Public Event VBonCommandeRowChanging As VBonCommandeRowChangeEventHandler
        
        Public Event VBonCommandeRowChanged As VBonCommandeRowChangeEventHandler
        
        Public Event VBonCommandeRowDeleting As VBonCommandeRowChangeEventHandler
        
        Public Event VBonCommandeRowDeleted As VBonCommandeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVBonCommandeRow(ByVal row As VBonCommandeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVBonCommandeRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nClient As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Decimal,  _
                    ByVal nPayeur As Decimal,  _
                    ByVal nContact As Decimal,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Date,  _
                    ByVal DateRelance2 As Date,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantHT As Decimal,  _
                    ByVal MontantTVA As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal nPreFacturation As Decimal,  _
                    ByVal DatePreFacturation As Date,  _
                    ByVal FacturationTTC As Boolean) As VBonCommandeRow
            Dim rowVBonCommandeRow As VBonCommandeRow = CType(Me.NewRow,VBonCommandeRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC}
            rowVBonCommandeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVBonCommandeRow)
            Return rowVBonCommandeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As VBonCommandeRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),VBonCommandeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VBonCommandeDataTable = CType(MyBase.Clone,VBonCommandeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VBonCommandeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnnPrescripteur = MyBase.Columns("nPrescripteur")
            Me.columnnPayeur = MyBase.Columns("nPayeur")
            Me.columnnContact = MyBase.Columns("nContact")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnFacturationPrescripteur = MyBase.Columns("FacturationPrescripteur")
            Me.columnFacturationClient = MyBase.Columns("FacturationClient")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnDateRelance1 = MyBase.Columns("DateRelance1")
            Me.columnDateRelance2 = MyBase.Columns("DateRelance2")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantHT = MyBase.Columns("MontantHT")
            Me.columnMontantTVA = MyBase.Columns("MontantTVA")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnnPreFacturation = MyBase.Columns("nPreFacturation")
            Me.columnDatePreFacturation = MyBase.Columns("DatePreFacturation")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnnPrescripteur = New Global.System.Data.DataColumn("nPrescripteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPrescripteur)
            Me.columnnPayeur = New Global.System.Data.DataColumn("nPayeur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPayeur)
            Me.columnnContact = New Global.System.Data.DataColumn("nContact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnContact)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnFacturationPrescripteur = New Global.System.Data.DataColumn("FacturationPrescripteur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationPrescripteur)
            Me.columnFacturationClient = New Global.System.Data.DataColumn("FacturationClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationClient)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnDateRelance1 = New Global.System.Data.DataColumn("DateRelance1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance1)
            Me.columnDateRelance2 = New Global.System.Data.DataColumn("DateRelance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance2)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantHT = New Global.System.Data.DataColumn("MontantHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantHT)
            Me.columnMontantTVA = New Global.System.Data.DataColumn("MontantTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTVA)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnnPreFacturation = New Global.System.Data.DataColumn("nPreFacturation", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPreFacturation)
            Me.columnDatePreFacturation = New Global.System.Data.DataColumn("DatePreFacturation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePreFacturation)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey11", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnFacturationPrescripteur.AllowDBNull = false
            Me.columnFacturationClient.AllowDBNull = false
            Me.columnPaye.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVBonCommandeRow() As VBonCommandeRow
            Return CType(Me.NewRow,VBonCommandeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VBonCommandeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VBonCommandeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VBonCommandeRowChangedEvent) Is Nothing) Then
                RaiseEvent VBonCommandeRowChanged(Me, New VBonCommandeRowChangeEvent(CType(e.Row,VBonCommandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VBonCommandeRowChangingEvent) Is Nothing) Then
                RaiseEvent VBonCommandeRowChanging(Me, New VBonCommandeRowChangeEvent(CType(e.Row,VBonCommandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VBonCommandeRowDeletedEvent) Is Nothing) Then
                RaiseEvent VBonCommandeRowDeleted(Me, New VBonCommandeRowChangeEvent(CType(e.Row,VBonCommandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VBonCommandeRowDeletingEvent) Is Nothing) Then
                RaiseEvent VBonCommandeRowDeleting(Me, New VBonCommandeRowChangeEvent(CType(e.Row,VBonCommandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVBonCommandeRow(ByVal row As VBonCommandeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VBonCommandeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VBonCommande_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VBonCommande_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VBonCommande_DetailRow
            Get
                Return CType(Me.Rows(index),VBonCommande_DetailRow)
            End Get
        End Property
        
        Public Event VBonCommande_DetailRowChanging As VBonCommande_DetailRowChangeEventHandler
        
        Public Event VBonCommande_DetailRowChanged As VBonCommande_DetailRowChangeEventHandler
        
        Public Event VBonCommande_DetailRowDeleting As VBonCommande_DetailRowChangeEventHandler
        
        Public Event VBonCommande_DetailRowDeleted As VBonCommande_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVBonCommande_DetailRow(ByVal row As VBonCommande_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVBonCommande_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Decimal,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal) As VBonCommande_DetailRow
            Dim rowVBonCommande_DetailRow As VBonCommande_DetailRow = CType(Me.NewRow,VBonCommande_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC}
            rowVBonCommande_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVBonCommande_DetailRow)
            Return rowVBonCommande_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As VBonCommande_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),VBonCommande_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VBonCommande_DetailDataTable = CType(MyBase.Clone,VBonCommande_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VBonCommande_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey12", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVBonCommande_DetailRow() As VBonCommande_DetailRow
            Return CType(Me.NewRow,VBonCommande_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VBonCommande_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VBonCommande_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VBonCommande_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VBonCommande_DetailRowChanged(Me, New VBonCommande_DetailRowChangeEvent(CType(e.Row,VBonCommande_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VBonCommande_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VBonCommande_DetailRowChanging(Me, New VBonCommande_DetailRowChangeEvent(CType(e.Row,VBonCommande_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VBonCommande_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VBonCommande_DetailRowDeleted(Me, New VBonCommande_DetailRowChangeEvent(CType(e.Row,VBonCommande_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VBonCommande_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VBonCommande_DetailRowDeleting(Me, New VBonCommande_DetailRowChangeEvent(CType(e.Row,VBonCommande_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVBonCommande_DetailRow(ByVal row As VBonCommande_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VBonCommande_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VBonLivraisonDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnnPrescripteur As Global.System.Data.DataColumn
        
        Private columnnPayeur As Global.System.Data.DataColumn
        
        Private columnnContact As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnFacturationPrescripteur As Global.System.Data.DataColumn
        
        Private columnFacturationClient As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnDateRelance1 As Global.System.Data.DataColumn
        
        Private columnDateRelance2 As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantHT As Global.System.Data.DataColumn
        
        Private columnMontantTVA As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnnPreFacturation As Global.System.Data.DataColumn
        
        Private columnDatePreFacturation As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        Private columnBonCdeOrigine As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VBonLivraison"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatePreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonCdeOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonCdeOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VBonLivraisonRow
            Get
                Return CType(Me.Rows(index),VBonLivraisonRow)
            End Get
        End Property
        
        Public Event VBonLivraisonRowChanging As VBonLivraisonRowChangeEventHandler
        
        Public Event VBonLivraisonRowChanged As VBonLivraisonRowChangeEventHandler
        
        Public Event VBonLivraisonRowDeleting As VBonLivraisonRowChangeEventHandler
        
        Public Event VBonLivraisonRowDeleted As VBonLivraisonRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVBonLivraisonRow(ByVal row As VBonLivraisonRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVBonLivraisonRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nClient As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Decimal,  _
                    ByVal nPayeur As Decimal,  _
                    ByVal nContact As Decimal,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Date,  _
                    ByVal DateRelance2 As Date,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantHT As Decimal,  _
                    ByVal MontantTVA As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal nPreFacturation As Decimal,  _
                    ByVal DatePreFacturation As Date,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal BonCdeOrigine As String) As VBonLivraisonRow
            Dim rowVBonLivraisonRow As VBonLivraisonRow = CType(Me.NewRow,VBonLivraisonRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC, BonCdeOrigine}
            rowVBonLivraisonRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVBonLivraisonRow)
            Return rowVBonLivraisonRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As VBonLivraisonRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),VBonLivraisonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VBonLivraisonDataTable = CType(MyBase.Clone,VBonLivraisonDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VBonLivraisonDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnnPrescripteur = MyBase.Columns("nPrescripteur")
            Me.columnnPayeur = MyBase.Columns("nPayeur")
            Me.columnnContact = MyBase.Columns("nContact")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnFacturationPrescripteur = MyBase.Columns("FacturationPrescripteur")
            Me.columnFacturationClient = MyBase.Columns("FacturationClient")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnDateRelance1 = MyBase.Columns("DateRelance1")
            Me.columnDateRelance2 = MyBase.Columns("DateRelance2")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantHT = MyBase.Columns("MontantHT")
            Me.columnMontantTVA = MyBase.Columns("MontantTVA")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnnPreFacturation = MyBase.Columns("nPreFacturation")
            Me.columnDatePreFacturation = MyBase.Columns("DatePreFacturation")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
            Me.columnBonCdeOrigine = MyBase.Columns("BonCdeOrigine")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnnPrescripteur = New Global.System.Data.DataColumn("nPrescripteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPrescripteur)
            Me.columnnPayeur = New Global.System.Data.DataColumn("nPayeur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPayeur)
            Me.columnnContact = New Global.System.Data.DataColumn("nContact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnContact)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnFacturationPrescripteur = New Global.System.Data.DataColumn("FacturationPrescripteur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationPrescripteur)
            Me.columnFacturationClient = New Global.System.Data.DataColumn("FacturationClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationClient)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnDateRelance1 = New Global.System.Data.DataColumn("DateRelance1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance1)
            Me.columnDateRelance2 = New Global.System.Data.DataColumn("DateRelance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance2)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantHT = New Global.System.Data.DataColumn("MontantHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantHT)
            Me.columnMontantTVA = New Global.System.Data.DataColumn("MontantTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTVA)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnnPreFacturation = New Global.System.Data.DataColumn("nPreFacturation", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPreFacturation)
            Me.columnDatePreFacturation = New Global.System.Data.DataColumn("DatePreFacturation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePreFacturation)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.columnBonCdeOrigine = New Global.System.Data.DataColumn("BonCdeOrigine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonCdeOrigine)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey13", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnFacturationPrescripteur.AllowDBNull = false
            Me.columnFacturationClient.AllowDBNull = false
            Me.columnPaye.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVBonLivraisonRow() As VBonLivraisonRow
            Return CType(Me.NewRow,VBonLivraisonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VBonLivraisonRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VBonLivraisonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VBonLivraisonRowChangedEvent) Is Nothing) Then
                RaiseEvent VBonLivraisonRowChanged(Me, New VBonLivraisonRowChangeEvent(CType(e.Row,VBonLivraisonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VBonLivraisonRowChangingEvent) Is Nothing) Then
                RaiseEvent VBonLivraisonRowChanging(Me, New VBonLivraisonRowChangeEvent(CType(e.Row,VBonLivraisonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VBonLivraisonRowDeletedEvent) Is Nothing) Then
                RaiseEvent VBonLivraisonRowDeleted(Me, New VBonLivraisonRowChangeEvent(CType(e.Row,VBonLivraisonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VBonLivraisonRowDeletingEvent) Is Nothing) Then
                RaiseEvent VBonLivraisonRowDeleting(Me, New VBonLivraisonRowChangeEvent(CType(e.Row,VBonLivraisonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVBonLivraisonRow(ByVal row As VBonLivraisonRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VBonLivraisonDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VBonLivraison_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VBonLivraison_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VBonLivraison_DetailRow
            Get
                Return CType(Me.Rows(index),VBonLivraison_DetailRow)
            End Get
        End Property
        
        Public Event VBonLivraison_DetailRowChanging As VBonLivraison_DetailRowChangeEventHandler
        
        Public Event VBonLivraison_DetailRowChanged As VBonLivraison_DetailRowChangeEventHandler
        
        Public Event VBonLivraison_DetailRowDeleting As VBonLivraison_DetailRowChangeEventHandler
        
        Public Event VBonLivraison_DetailRowDeleted As VBonLivraison_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVBonLivraison_DetailRow(ByVal row As VBonLivraison_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVBonLivraison_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Decimal,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal) As VBonLivraison_DetailRow
            Dim rowVBonLivraison_DetailRow As VBonLivraison_DetailRow = CType(Me.NewRow,VBonLivraison_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC}
            rowVBonLivraison_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVBonLivraison_DetailRow)
            Return rowVBonLivraison_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As VBonLivraison_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),VBonLivraison_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VBonLivraison_DetailDataTable = CType(MyBase.Clone,VBonLivraison_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VBonLivraison_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey14", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVBonLivraison_DetailRow() As VBonLivraison_DetailRow
            Return CType(Me.NewRow,VBonLivraison_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VBonLivraison_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VBonLivraison_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VBonLivraison_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VBonLivraison_DetailRowChanged(Me, New VBonLivraison_DetailRowChangeEvent(CType(e.Row,VBonLivraison_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VBonLivraison_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VBonLivraison_DetailRowChanging(Me, New VBonLivraison_DetailRowChangeEvent(CType(e.Row,VBonLivraison_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VBonLivraison_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VBonLivraison_DetailRowDeleted(Me, New VBonLivraison_DetailRowChangeEvent(CType(e.Row,VBonLivraison_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VBonLivraison_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VBonLivraison_DetailRowDeleting(Me, New VBonLivraison_DetailRowChangeEvent(CType(e.Row,VBonLivraison_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVBonLivraison_DetailRow(ByVal row As VBonLivraison_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VBonLivraison_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VDevisDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnnPrescripteur As Global.System.Data.DataColumn
        
        Private columnnPayeur As Global.System.Data.DataColumn
        
        Private columnnContact As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnFacturationPrescripteur As Global.System.Data.DataColumn
        
        Private columnFacturationClient As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnDateRelance1 As Global.System.Data.DataColumn
        
        Private columnDateRelance2 As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantHT As Global.System.Data.DataColumn
        
        Private columnMontantTVA As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnnPreFacturation As Global.System.Data.DataColumn
        
        Private columnDatePreFacturation As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VDevis"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatePreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VDevisRow
            Get
                Return CType(Me.Rows(index),VDevisRow)
            End Get
        End Property
        
        Public Event VDevisRowChanging As VDevisRowChangeEventHandler
        
        Public Event VDevisRowChanged As VDevisRowChangeEventHandler
        
        Public Event VDevisRowDeleting As VDevisRowChangeEventHandler
        
        Public Event VDevisRowDeleted As VDevisRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVDevisRow(ByVal row As VDevisRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVDevisRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nClient As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Decimal,  _
                    ByVal nPayeur As Decimal,  _
                    ByVal nContact As Decimal,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Date,  _
                    ByVal DateRelance2 As Date,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantHT As Decimal,  _
                    ByVal MontantTVA As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal nPreFacturation As Decimal,  _
                    ByVal DatePreFacturation As Date,  _
                    ByVal FacturationTTC As Boolean) As VDevisRow
            Dim rowVDevisRow As VDevisRow = CType(Me.NewRow,VDevisRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC}
            rowVDevisRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVDevisRow)
            Return rowVDevisRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As VDevisRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),VDevisRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VDevisDataTable = CType(MyBase.Clone,VDevisDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VDevisDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnnPrescripteur = MyBase.Columns("nPrescripteur")
            Me.columnnPayeur = MyBase.Columns("nPayeur")
            Me.columnnContact = MyBase.Columns("nContact")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnFacturationPrescripteur = MyBase.Columns("FacturationPrescripteur")
            Me.columnFacturationClient = MyBase.Columns("FacturationClient")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnDateRelance1 = MyBase.Columns("DateRelance1")
            Me.columnDateRelance2 = MyBase.Columns("DateRelance2")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantHT = MyBase.Columns("MontantHT")
            Me.columnMontantTVA = MyBase.Columns("MontantTVA")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnnPreFacturation = MyBase.Columns("nPreFacturation")
            Me.columnDatePreFacturation = MyBase.Columns("DatePreFacturation")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnnPrescripteur = New Global.System.Data.DataColumn("nPrescripteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPrescripteur)
            Me.columnnPayeur = New Global.System.Data.DataColumn("nPayeur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPayeur)
            Me.columnnContact = New Global.System.Data.DataColumn("nContact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnContact)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnFacturationPrescripteur = New Global.System.Data.DataColumn("FacturationPrescripteur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationPrescripteur)
            Me.columnFacturationClient = New Global.System.Data.DataColumn("FacturationClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationClient)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnDateRelance1 = New Global.System.Data.DataColumn("DateRelance1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance1)
            Me.columnDateRelance2 = New Global.System.Data.DataColumn("DateRelance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance2)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantHT = New Global.System.Data.DataColumn("MontantHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantHT)
            Me.columnMontantTVA = New Global.System.Data.DataColumn("MontantTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTVA)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnnPreFacturation = New Global.System.Data.DataColumn("nPreFacturation", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPreFacturation)
            Me.columnDatePreFacturation = New Global.System.Data.DataColumn("DatePreFacturation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePreFacturation)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey15", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnFacturationPrescripteur.AllowDBNull = false
            Me.columnFacturationClient.AllowDBNull = false
            Me.columnPaye.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVDevisRow() As VDevisRow
            Return CType(Me.NewRow,VDevisRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VDevisRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VDevisRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VDevisRowChangedEvent) Is Nothing) Then
                RaiseEvent VDevisRowChanged(Me, New VDevisRowChangeEvent(CType(e.Row,VDevisRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VDevisRowChangingEvent) Is Nothing) Then
                RaiseEvent VDevisRowChanging(Me, New VDevisRowChangeEvent(CType(e.Row,VDevisRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VDevisRowDeletedEvent) Is Nothing) Then
                RaiseEvent VDevisRowDeleted(Me, New VDevisRowChangeEvent(CType(e.Row,VDevisRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VDevisRowDeletingEvent) Is Nothing) Then
                RaiseEvent VDevisRowDeleting(Me, New VDevisRowChangeEvent(CType(e.Row,VDevisRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVDevisRow(ByVal row As VDevisRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VDevisDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VDevis_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VDevis_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VDevis_DetailRow
            Get
                Return CType(Me.Rows(index),VDevis_DetailRow)
            End Get
        End Property
        
        Public Event VDevis_DetailRowChanging As VDevis_DetailRowChangeEventHandler
        
        Public Event VDevis_DetailRowChanged As VDevis_DetailRowChangeEventHandler
        
        Public Event VDevis_DetailRowDeleting As VDevis_DetailRowChangeEventHandler
        
        Public Event VDevis_DetailRowDeleted As VDevis_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVDevis_DetailRow(ByVal row As VDevis_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVDevis_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Decimal,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal) As VDevis_DetailRow
            Dim rowVDevis_DetailRow As VDevis_DetailRow = CType(Me.NewRow,VDevis_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC}
            rowVDevis_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVDevis_DetailRow)
            Return rowVDevis_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As VDevis_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),VDevis_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VDevis_DetailDataTable = CType(MyBase.Clone,VDevis_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VDevis_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey16", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVDevis_DetailRow() As VDevis_DetailRow
            Return CType(Me.NewRow,VDevis_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VDevis_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VDevis_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VDevis_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VDevis_DetailRowChanged(Me, New VDevis_DetailRowChangeEvent(CType(e.Row,VDevis_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VDevis_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VDevis_DetailRowChanging(Me, New VDevis_DetailRowChangeEvent(CType(e.Row,VDevis_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VDevis_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VDevis_DetailRowDeleted(Me, New VDevis_DetailRowChangeEvent(CType(e.Row,VDevis_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VDevis_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VDevis_DetailRowDeleting(Me, New VDevis_DetailRowChangeEvent(CType(e.Row,VDevis_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVDevis_DetailRow(ByVal row As VDevis_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VDevis_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VFacture_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VFacture_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VFacture_DetailRow
            Get
                Return CType(Me.Rows(index),VFacture_DetailRow)
            End Get
        End Property
        
        Public Event VFacture_DetailRowChanging As VFacture_DetailRowChangeEventHandler
        
        Public Event VFacture_DetailRowChanged As VFacture_DetailRowChangeEventHandler
        
        Public Event VFacture_DetailRowDeleting As VFacture_DetailRowChangeEventHandler
        
        Public Event VFacture_DetailRowDeleted As VFacture_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVFacture_DetailRow(ByVal row As VFacture_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVFacture_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Decimal,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal) As VFacture_DetailRow
            Dim rowVFacture_DetailRow As VFacture_DetailRow = CType(Me.NewRow,VFacture_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC}
            rowVFacture_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVFacture_DetailRow)
            Return rowVFacture_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As VFacture_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),VFacture_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VFacture_DetailDataTable = CType(MyBase.Clone,VFacture_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VFacture_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey18", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVFacture_DetailRow() As VFacture_DetailRow
            Return CType(Me.NewRow,VFacture_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VFacture_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VFacture_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VFacture_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VFacture_DetailRowChanged(Me, New VFacture_DetailRowChangeEvent(CType(e.Row,VFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VFacture_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VFacture_DetailRowChanging(Me, New VFacture_DetailRowChangeEvent(CType(e.Row,VFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VFacture_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VFacture_DetailRowDeleted(Me, New VFacture_DetailRowChangeEvent(CType(e.Row,VFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VFacture_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VFacture_DetailRowDeleting(Me, New VFacture_DetailRowChangeEvent(CType(e.Row,VFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVFacture_DetailRow(ByVal row As VFacture_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VFacture_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TelephoneDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnPersonne As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnNumero As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Telephone"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPersonneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPersonne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TelephoneRow
            Get
                Return CType(Me.Rows(index),TelephoneRow)
            End Get
        End Property
        
        Public Event TelephoneRowChanging As TelephoneRowChangeEventHandler
        
        Public Event TelephoneRowChanged As TelephoneRowChangeEventHandler
        
        Public Event TelephoneRowDeleting As TelephoneRowChangeEventHandler
        
        Public Event TelephoneRowDeleted As TelephoneRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTelephoneRow(ByVal row As TelephoneRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTelephoneRow(ByVal nPersonne As Decimal, ByVal Type As String, ByVal Numero As String) As TelephoneRow
            Dim rowTelephoneRow As TelephoneRow = CType(Me.NewRow,TelephoneRow)
            Dim columnValuesArray() As Object = New Object() {nPersonne, Type, Numero}
            rowTelephoneRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTelephoneRow)
            Return rowTelephoneRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynPersonneType(ByVal nPersonne As Decimal, ByVal Type As String) As TelephoneRow
            Return CType(Me.Rows.Find(New Object() {nPersonne, Type}),TelephoneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TelephoneDataTable = CType(MyBase.Clone,TelephoneDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TelephoneDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnPersonne = MyBase.Columns("nPersonne")
            Me.columnType = MyBase.Columns("Type")
            Me.columnNumero = MyBase.Columns("Numero")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnPersonne = New Global.System.Data.DataColumn("nPersonne", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPersonne)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey19", New Global.System.Data.DataColumn() {Me.columnnPersonne, Me.columnType}, true))
            Me.columnnPersonne.AllowDBNull = false
            Me.columnType.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTelephoneRow() As TelephoneRow
            Return CType(Me.NewRow,TelephoneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TelephoneRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TelephoneRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TelephoneRowChangedEvent) Is Nothing) Then
                RaiseEvent TelephoneRowChanged(Me, New TelephoneRowChangeEvent(CType(e.Row,TelephoneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TelephoneRowChangingEvent) Is Nothing) Then
                RaiseEvent TelephoneRowChanging(Me, New TelephoneRowChangeEvent(CType(e.Row,TelephoneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TelephoneRowDeletedEvent) Is Nothing) Then
                RaiseEvent TelephoneRowDeleted(Me, New TelephoneRowChangeEvent(CType(e.Row,TelephoneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TelephoneRowDeletingEvent) Is Nothing) Then
                RaiseEvent TelephoneRowDeleting(Me, New TelephoneRowChangeEvent(CType(e.Row,TelephoneRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTelephoneRow(ByVal row As TelephoneRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TelephoneDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TelephoneEntrepriseDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnEntreprise As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnNumero As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TelephoneEntreprise"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TelephoneEntrepriseRow
            Get
                Return CType(Me.Rows(index),TelephoneEntrepriseRow)
            End Get
        End Property
        
        Public Event TelephoneEntrepriseRowChanging As TelephoneEntrepriseRowChangeEventHandler
        
        Public Event TelephoneEntrepriseRowChanged As TelephoneEntrepriseRowChangeEventHandler
        
        Public Event TelephoneEntrepriseRowDeleting As TelephoneEntrepriseRowChangeEventHandler
        
        Public Event TelephoneEntrepriseRowDeleted As TelephoneEntrepriseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTelephoneEntrepriseRow(ByVal row As TelephoneEntrepriseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTelephoneEntrepriseRow(ByVal nEntreprise As Decimal, ByVal Type As String, ByVal Numero As String) As TelephoneEntrepriseRow
            Dim rowTelephoneEntrepriseRow As TelephoneEntrepriseRow = CType(Me.NewRow,TelephoneEntrepriseRow)
            Dim columnValuesArray() As Object = New Object() {nEntreprise, Type, Numero}
            rowTelephoneEntrepriseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTelephoneEntrepriseRow)
            Return rowTelephoneEntrepriseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynEntrepriseType(ByVal nEntreprise As Decimal, ByVal Type As String) As TelephoneEntrepriseRow
            Return CType(Me.Rows.Find(New Object() {nEntreprise, Type}),TelephoneEntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TelephoneEntrepriseDataTable = CType(MyBase.Clone,TelephoneEntrepriseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TelephoneEntrepriseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnEntreprise = MyBase.Columns("nEntreprise")
            Me.columnType = MyBase.Columns("Type")
            Me.columnNumero = MyBase.Columns("Numero")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnEntreprise = New Global.System.Data.DataColumn("nEntreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnEntreprise)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey20", New Global.System.Data.DataColumn() {Me.columnnEntreprise, Me.columnType}, true))
            Me.columnnEntreprise.AllowDBNull = false
            Me.columnType.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTelephoneEntrepriseRow() As TelephoneEntrepriseRow
            Return CType(Me.NewRow,TelephoneEntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TelephoneEntrepriseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TelephoneEntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TelephoneEntrepriseRowChangedEvent) Is Nothing) Then
                RaiseEvent TelephoneEntrepriseRowChanged(Me, New TelephoneEntrepriseRowChangeEvent(CType(e.Row,TelephoneEntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TelephoneEntrepriseRowChangingEvent) Is Nothing) Then
                RaiseEvent TelephoneEntrepriseRowChanging(Me, New TelephoneEntrepriseRowChangeEvent(CType(e.Row,TelephoneEntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TelephoneEntrepriseRowDeletedEvent) Is Nothing) Then
                RaiseEvent TelephoneEntrepriseRowDeleted(Me, New TelephoneEntrepriseRowChangeEvent(CType(e.Row,TelephoneEntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TelephoneEntrepriseRowDeletingEvent) Is Nothing) Then
                RaiseEvent TelephoneEntrepriseRowDeleting(Me, New TelephoneEntrepriseRowChangeEvent(CType(e.Row,TelephoneEntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTelephoneEntrepriseRow(ByVal row As TelephoneEntrepriseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TelephoneEntrepriseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ABonReceptionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnnPrescripteur As Global.System.Data.DataColumn
        
        Private columnnPayeur As Global.System.Data.DataColumn
        
        Private columnnContact As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnFacturationPrescripteur As Global.System.Data.DataColumn
        
        Private columnFacturationClient As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnDateRelance1 As Global.System.Data.DataColumn
        
        Private columnDateRelance2 As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantHT As Global.System.Data.DataColumn
        
        Private columnMontantTVA As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnnPreFacturation As Global.System.Data.DataColumn
        
        Private columnDatePreFacturation As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ABonReception"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatePreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ABonReceptionRow
            Get
                Return CType(Me.Rows(index),ABonReceptionRow)
            End Get
        End Property
        
        Public Event ABonReceptionRowChanging As ABonReceptionRowChangeEventHandler
        
        Public Event ABonReceptionRowChanged As ABonReceptionRowChangeEventHandler
        
        Public Event ABonReceptionRowDeleting As ABonReceptionRowChangeEventHandler
        
        Public Event ABonReceptionRowDeleted As ABonReceptionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddABonReceptionRow(ByVal row As ABonReceptionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddABonReceptionRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nClient As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Decimal,  _
                    ByVal nPayeur As Decimal,  _
                    ByVal nContact As Decimal,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Date,  _
                    ByVal DateRelance2 As Date,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantHT As Decimal,  _
                    ByVal MontantTVA As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal nPreFacturation As Decimal,  _
                    ByVal DatePreFacturation As Date,  _
                    ByVal FacturationTTC As Boolean) As ABonReceptionRow
            Dim rowABonReceptionRow As ABonReceptionRow = CType(Me.NewRow,ABonReceptionRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC}
            rowABonReceptionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowABonReceptionRow)
            Return rowABonReceptionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As ABonReceptionRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),ABonReceptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ABonReceptionDataTable = CType(MyBase.Clone,ABonReceptionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ABonReceptionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnnPrescripteur = MyBase.Columns("nPrescripteur")
            Me.columnnPayeur = MyBase.Columns("nPayeur")
            Me.columnnContact = MyBase.Columns("nContact")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnFacturationPrescripteur = MyBase.Columns("FacturationPrescripteur")
            Me.columnFacturationClient = MyBase.Columns("FacturationClient")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnDateRelance1 = MyBase.Columns("DateRelance1")
            Me.columnDateRelance2 = MyBase.Columns("DateRelance2")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantHT = MyBase.Columns("MontantHT")
            Me.columnMontantTVA = MyBase.Columns("MontantTVA")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnnPreFacturation = MyBase.Columns("nPreFacturation")
            Me.columnDatePreFacturation = MyBase.Columns("DatePreFacturation")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnnPrescripteur = New Global.System.Data.DataColumn("nPrescripteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPrescripteur)
            Me.columnnPayeur = New Global.System.Data.DataColumn("nPayeur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPayeur)
            Me.columnnContact = New Global.System.Data.DataColumn("nContact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnContact)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnFacturationPrescripteur = New Global.System.Data.DataColumn("FacturationPrescripteur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationPrescripteur)
            Me.columnFacturationClient = New Global.System.Data.DataColumn("FacturationClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationClient)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnDateRelance1 = New Global.System.Data.DataColumn("DateRelance1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance1)
            Me.columnDateRelance2 = New Global.System.Data.DataColumn("DateRelance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance2)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantHT = New Global.System.Data.DataColumn("MontantHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantHT)
            Me.columnMontantTVA = New Global.System.Data.DataColumn("MontantTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTVA)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnnPreFacturation = New Global.System.Data.DataColumn("nPreFacturation", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPreFacturation)
            Me.columnDatePreFacturation = New Global.System.Data.DataColumn("DatePreFacturation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePreFacturation)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey1", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnFacturationPrescripteur.AllowDBNull = false
            Me.columnFacturationClient.AllowDBNull = false
            Me.columnPaye.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewABonReceptionRow() As ABonReceptionRow
            Return CType(Me.NewRow,ABonReceptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ABonReceptionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ABonReceptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ABonReceptionRowChangedEvent) Is Nothing) Then
                RaiseEvent ABonReceptionRowChanged(Me, New ABonReceptionRowChangeEvent(CType(e.Row,ABonReceptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ABonReceptionRowChangingEvent) Is Nothing) Then
                RaiseEvent ABonReceptionRowChanging(Me, New ABonReceptionRowChangeEvent(CType(e.Row,ABonReceptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ABonReceptionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ABonReceptionRowDeleted(Me, New ABonReceptionRowChangeEvent(CType(e.Row,ABonReceptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ABonReceptionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ABonReceptionRowDeleting(Me, New ABonReceptionRowChangeEvent(CType(e.Row,ABonReceptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveABonReceptionRow(ByVal row As ABonReceptionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ABonReceptionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ABonReception_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        Private columnPrixUTTCVente As Global.System.Data.DataColumn
        
        Private columnCoefAV As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTCVente As Global.System.Data.DataColumn
        
        Private columnPrixUTTCVenteTheo As Global.System.Data.DataColumn
        
        Private columnPrixAHT1 As Global.System.Data.DataColumn
        
        Private columnCoefAV1 As Global.System.Data.DataColumn
        
        Private columnPrixVTTC1 As Global.System.Data.DataColumn
        
        Private columnPrixVTTCTheo As Global.System.Data.DataColumn
        
        Private columnMargePrCt As Global.System.Data.DataColumn
        
        Private columnMargeEuro As Global.System.Data.DataColumn
        
        Private columnPrixVTTCTheo1 As Global.System.Data.DataColumn
        
        Private columnMargePrCt1 As Global.System.Data.DataColumn
        
        Private columnMargeEuro1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ABonReception_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTCVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefAVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefAV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTCVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCVenteTheoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTCVenteTheo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixAHT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixAHT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefAV1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefAV1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVTTC1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVTTC1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVTTCTheoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVTTCTheo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MargePrCtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMargePrCt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MargeEuroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMargeEuro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVTTCTheo1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVTTCTheo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MargePrCt1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMargePrCt1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MargeEuro1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMargeEuro1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ABonReception_DetailRow
            Get
                Return CType(Me.Rows(index),ABonReception_DetailRow)
            End Get
        End Property
        
        Public Event ABonReception_DetailRowChanging As ABonReception_DetailRowChangeEventHandler
        
        Public Event ABonReception_DetailRowChanged As ABonReception_DetailRowChangeEventHandler
        
        Public Event ABonReception_DetailRowDeleting As ABonReception_DetailRowChangeEventHandler
        
        Public Event ABonReception_DetailRowDeleted As ABonReception_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddABonReception_DetailRow(ByVal row As ABonReception_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddABonReception_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Decimal,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal,  _
                    ByVal PrixUTTCVente As Decimal,  _
                    ByVal CoefAV As Decimal,  _
                    ByVal MontantLigneTTCVente As Decimal,  _
                    ByVal PrixUTTCVenteTheo As Decimal,  _
                    ByVal PrixAHT1 As Decimal,  _
                    ByVal CoefAV1 As Decimal,  _
                    ByVal PrixVTTC1 As Decimal,  _
                    ByVal PrixVTTCTheo As Decimal,  _
                    ByVal MargePrCt As Decimal,  _
                    ByVal MargeEuro As Decimal,  _
                    ByVal PrixVTTCTheo1 As Decimal,  _
                    ByVal MargePrCt1 As Decimal,  _
                    ByVal MargeEuro1 As Decimal) As ABonReception_DetailRow
            Dim rowABonReception_DetailRow As ABonReception_DetailRow = CType(Me.NewRow,ABonReception_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, PrixUTTCVente, CoefAV, MontantLigneTTCVente, PrixUTTCVenteTheo, PrixAHT1, CoefAV1, PrixVTTC1, PrixVTTCTheo, MargePrCt, MargeEuro, PrixVTTCTheo1, MargePrCt1, MargeEuro1}
            rowABonReception_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowABonReception_DetailRow)
            Return rowABonReception_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As ABonReception_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),ABonReception_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ABonReception_DetailDataTable = CType(MyBase.Clone,ABonReception_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ABonReception_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
            Me.columnPrixUTTCVente = MyBase.Columns("PrixUTTCVente")
            Me.columnCoefAV = MyBase.Columns("CoefAV")
            Me.columnMontantLigneTTCVente = MyBase.Columns("MontantLigneTTCVente")
            Me.columnPrixUTTCVenteTheo = MyBase.Columns("PrixUTTCVenteTheo")
            Me.columnPrixAHT1 = MyBase.Columns("PrixAHT1")
            Me.columnCoefAV1 = MyBase.Columns("CoefAV1")
            Me.columnPrixVTTC1 = MyBase.Columns("PrixVTTC1")
            Me.columnPrixVTTCTheo = MyBase.Columns("PrixVTTCTheo")
            Me.columnMargePrCt = MyBase.Columns("MargePrCt")
            Me.columnMargeEuro = MyBase.Columns("MargeEuro")
            Me.columnPrixVTTCTheo1 = MyBase.Columns("PrixVTTCTheo1")
            Me.columnMargePrCt1 = MyBase.Columns("MargePrCt1")
            Me.columnMargeEuro1 = MyBase.Columns("MargeEuro1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.columnPrixUTTCVente = New Global.System.Data.DataColumn("PrixUTTCVente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTCVente)
            Me.columnCoefAV = New Global.System.Data.DataColumn("CoefAV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefAV)
            Me.columnMontantLigneTTCVente = New Global.System.Data.DataColumn("MontantLigneTTCVente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTCVente)
            Me.columnPrixUTTCVenteTheo = New Global.System.Data.DataColumn("PrixUTTCVenteTheo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTCVenteTheo)
            Me.columnPrixAHT1 = New Global.System.Data.DataColumn("PrixAHT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixAHT1)
            Me.columnCoefAV1 = New Global.System.Data.DataColumn("CoefAV1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefAV1)
            Me.columnPrixVTTC1 = New Global.System.Data.DataColumn("PrixVTTC1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVTTC1)
            Me.columnPrixVTTCTheo = New Global.System.Data.DataColumn("PrixVTTCTheo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVTTCTheo)
            Me.columnMargePrCt = New Global.System.Data.DataColumn("MargePrCt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMargePrCt)
            Me.columnMargeEuro = New Global.System.Data.DataColumn("MargeEuro", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMargeEuro)
            Me.columnPrixVTTCTheo1 = New Global.System.Data.DataColumn("PrixVTTCTheo1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVTTCTheo1)
            Me.columnMargePrCt1 = New Global.System.Data.DataColumn("MargePrCt1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMargePrCt1)
            Me.columnMargeEuro1 = New Global.System.Data.DataColumn("MargeEuro1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMargeEuro1)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey2", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewABonReception_DetailRow() As ABonReception_DetailRow
            Return CType(Me.NewRow,ABonReception_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ABonReception_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ABonReception_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ABonReception_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent ABonReception_DetailRowChanged(Me, New ABonReception_DetailRowChangeEvent(CType(e.Row,ABonReception_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ABonReception_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent ABonReception_DetailRowChanging(Me, New ABonReception_DetailRowChangeEvent(CType(e.Row,ABonReception_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ABonReception_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent ABonReception_DetailRowDeleted(Me, New ABonReception_DetailRowChangeEvent(CType(e.Row,ABonReception_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ABonReception_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent ABonReception_DetailRowDeleting(Me, New ABonReception_DetailRowChangeEvent(CType(e.Row,ABonReception_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveABonReception_DetailRow(ByVal row As ABonReception_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ABonReception_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AFactureDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnnPrescripteur As Global.System.Data.DataColumn
        
        Private columnnPayeur As Global.System.Data.DataColumn
        
        Private columnnContact As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnFacturationPrescripteur As Global.System.Data.DataColumn
        
        Private columnFacturationClient As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnDateRelance1 As Global.System.Data.DataColumn
        
        Private columnDateRelance2 As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantHT As Global.System.Data.DataColumn
        
        Private columnMontantTVA As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnnPreFacturation As Global.System.Data.DataColumn
        
        Private columnDatePreFacturation As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AFacture"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatePreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AFactureRow
            Get
                Return CType(Me.Rows(index),AFactureRow)
            End Get
        End Property
        
        Public Event AFactureRowChanging As AFactureRowChangeEventHandler
        
        Public Event AFactureRowChanged As AFactureRowChangeEventHandler
        
        Public Event AFactureRowDeleting As AFactureRowChangeEventHandler
        
        Public Event AFactureRowDeleted As AFactureRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAFactureRow(ByVal row As AFactureRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAFactureRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nClient As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Decimal,  _
                    ByVal nPayeur As Decimal,  _
                    ByVal nContact As Decimal,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Date,  _
                    ByVal DateRelance2 As Date,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantHT As Decimal,  _
                    ByVal MontantTVA As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal nPreFacturation As Decimal,  _
                    ByVal DatePreFacturation As Date,  _
                    ByVal FacturationTTC As Boolean) As AFactureRow
            Dim rowAFactureRow As AFactureRow = CType(Me.NewRow,AFactureRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC}
            rowAFactureRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAFactureRow)
            Return rowAFactureRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As AFactureRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),AFactureRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AFactureDataTable = CType(MyBase.Clone,AFactureDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AFactureDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnnPrescripteur = MyBase.Columns("nPrescripteur")
            Me.columnnPayeur = MyBase.Columns("nPayeur")
            Me.columnnContact = MyBase.Columns("nContact")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnFacturationPrescripteur = MyBase.Columns("FacturationPrescripteur")
            Me.columnFacturationClient = MyBase.Columns("FacturationClient")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnDateRelance1 = MyBase.Columns("DateRelance1")
            Me.columnDateRelance2 = MyBase.Columns("DateRelance2")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantHT = MyBase.Columns("MontantHT")
            Me.columnMontantTVA = MyBase.Columns("MontantTVA")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnnPreFacturation = MyBase.Columns("nPreFacturation")
            Me.columnDatePreFacturation = MyBase.Columns("DatePreFacturation")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnnPrescripteur = New Global.System.Data.DataColumn("nPrescripteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPrescripteur)
            Me.columnnPayeur = New Global.System.Data.DataColumn("nPayeur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPayeur)
            Me.columnnContact = New Global.System.Data.DataColumn("nContact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnContact)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnFacturationPrescripteur = New Global.System.Data.DataColumn("FacturationPrescripteur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationPrescripteur)
            Me.columnFacturationClient = New Global.System.Data.DataColumn("FacturationClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationClient)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnDateRelance1 = New Global.System.Data.DataColumn("DateRelance1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance1)
            Me.columnDateRelance2 = New Global.System.Data.DataColumn("DateRelance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance2)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantHT = New Global.System.Data.DataColumn("MontantHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantHT)
            Me.columnMontantTVA = New Global.System.Data.DataColumn("MontantTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTVA)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnnPreFacturation = New Global.System.Data.DataColumn("nPreFacturation", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPreFacturation)
            Me.columnDatePreFacturation = New Global.System.Data.DataColumn("DatePreFacturation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePreFacturation)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey3", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnFacturationPrescripteur.AllowDBNull = false
            Me.columnFacturationClient.AllowDBNull = false
            Me.columnPaye.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAFactureRow() As AFactureRow
            Return CType(Me.NewRow,AFactureRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AFactureRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AFactureRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AFactureRowChangedEvent) Is Nothing) Then
                RaiseEvent AFactureRowChanged(Me, New AFactureRowChangeEvent(CType(e.Row,AFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AFactureRowChangingEvent) Is Nothing) Then
                RaiseEvent AFactureRowChanging(Me, New AFactureRowChangeEvent(CType(e.Row,AFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AFactureRowDeletedEvent) Is Nothing) Then
                RaiseEvent AFactureRowDeleted(Me, New AFactureRowChangeEvent(CType(e.Row,AFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AFactureRowDeletingEvent) Is Nothing) Then
                RaiseEvent AFactureRowDeleting(Me, New AFactureRowChangeEvent(CType(e.Row,AFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAFactureRow(ByVal row As AFactureRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AFactureDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AFacture_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        Private columnPrixUTTCVente As Global.System.Data.DataColumn
        
        Private columnCoefAV As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTCVente As Global.System.Data.DataColumn
        
        Private columnPrixUTTCVenteTheo As Global.System.Data.DataColumn
        
        Private columnPrixAHT1 As Global.System.Data.DataColumn
        
        Private columnCoefAV1 As Global.System.Data.DataColumn
        
        Private columnPrixVTTC1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AFacture_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTCVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefAVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefAV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTCVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCVenteTheoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTCVenteTheo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixAHT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixAHT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefAV1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefAV1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVTTC1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVTTC1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AFacture_DetailRow
            Get
                Return CType(Me.Rows(index),AFacture_DetailRow)
            End Get
        End Property
        
        Public Event AFacture_DetailRowChanging As AFacture_DetailRowChangeEventHandler
        
        Public Event AFacture_DetailRowChanged As AFacture_DetailRowChangeEventHandler
        
        Public Event AFacture_DetailRowDeleting As AFacture_DetailRowChangeEventHandler
        
        Public Event AFacture_DetailRowDeleted As AFacture_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAFacture_DetailRow(ByVal row As AFacture_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAFacture_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Decimal,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal,  _
                    ByVal PrixUTTCVente As Decimal,  _
                    ByVal CoefAV As Decimal,  _
                    ByVal MontantLigneTTCVente As Decimal,  _
                    ByVal PrixUTTCVenteTheo As Decimal,  _
                    ByVal PrixAHT1 As Decimal,  _
                    ByVal CoefAV1 As Decimal,  _
                    ByVal PrixVTTC1 As Decimal) As AFacture_DetailRow
            Dim rowAFacture_DetailRow As AFacture_DetailRow = CType(Me.NewRow,AFacture_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, PrixUTTCVente, CoefAV, MontantLigneTTCVente, PrixUTTCVenteTheo, PrixAHT1, CoefAV1, PrixVTTC1}
            rowAFacture_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAFacture_DetailRow)
            Return rowAFacture_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As AFacture_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),AFacture_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AFacture_DetailDataTable = CType(MyBase.Clone,AFacture_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AFacture_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
            Me.columnPrixUTTCVente = MyBase.Columns("PrixUTTCVente")
            Me.columnCoefAV = MyBase.Columns("CoefAV")
            Me.columnMontantLigneTTCVente = MyBase.Columns("MontantLigneTTCVente")
            Me.columnPrixUTTCVenteTheo = MyBase.Columns("PrixUTTCVenteTheo")
            Me.columnPrixAHT1 = MyBase.Columns("PrixAHT1")
            Me.columnCoefAV1 = MyBase.Columns("CoefAV1")
            Me.columnPrixVTTC1 = MyBase.Columns("PrixVTTC1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.columnPrixUTTCVente = New Global.System.Data.DataColumn("PrixUTTCVente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTCVente)
            Me.columnCoefAV = New Global.System.Data.DataColumn("CoefAV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefAV)
            Me.columnMontantLigneTTCVente = New Global.System.Data.DataColumn("MontantLigneTTCVente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTCVente)
            Me.columnPrixUTTCVenteTheo = New Global.System.Data.DataColumn("PrixUTTCVenteTheo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTCVenteTheo)
            Me.columnPrixAHT1 = New Global.System.Data.DataColumn("PrixAHT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixAHT1)
            Me.columnCoefAV1 = New Global.System.Data.DataColumn("CoefAV1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefAV1)
            Me.columnPrixVTTC1 = New Global.System.Data.DataColumn("PrixVTTC1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVTTC1)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey4", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAFacture_DetailRow() As AFacture_DetailRow
            Return CType(Me.NewRow,AFacture_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AFacture_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AFacture_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AFacture_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent AFacture_DetailRowChanged(Me, New AFacture_DetailRowChangeEvent(CType(e.Row,AFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AFacture_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent AFacture_DetailRowChanging(Me, New AFacture_DetailRowChangeEvent(CType(e.Row,AFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AFacture_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent AFacture_DetailRowDeleted(Me, New AFacture_DetailRowChangeEvent(CType(e.Row,AFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AFacture_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent AFacture_DetailRowDeleting(Me, New AFacture_DetailRowChangeEvent(CType(e.Row,AFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAFacture_DetailRow(ByVal row As AFacture_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AFacture_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FamilleDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnFamille As Global.System.Data.DataColumn
        
        Private columnFamille As Global.System.Data.DataColumn
        
        Private columnnGroupe As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Famille"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFamilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFamille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FamilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nGroupeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnGroupe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FamilleRow
            Get
                Return CType(Me.Rows(index),FamilleRow)
            End Get
        End Property
        
        Public Event FamilleRowChanging As FamilleRowChangeEventHandler
        
        Public Event FamilleRowChanged As FamilleRowChangeEventHandler
        
        Public Event FamilleRowDeleting As FamilleRowChangeEventHandler
        
        Public Event FamilleRowDeleted As FamilleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFamilleRow(ByVal row As FamilleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFamilleRow(ByVal nFamille As Short, ByVal Famille As String, ByVal nGroupe As Short) As FamilleRow
            Dim rowFamilleRow As FamilleRow = CType(Me.NewRow,FamilleRow)
            Dim columnValuesArray() As Object = New Object() {nFamille, Famille, nGroupe}
            rowFamilleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFamilleRow)
            Return rowFamilleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynFamille(ByVal nFamille As Short) As FamilleRow
            Return CType(Me.Rows.Find(New Object() {nFamille}),FamilleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FamilleDataTable = CType(MyBase.Clone,FamilleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FamilleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnFamille = MyBase.Columns("nFamille")
            Me.columnFamille = MyBase.Columns("Famille")
            Me.columnnGroupe = MyBase.Columns("nGroupe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnFamille = New Global.System.Data.DataColumn("nFamille", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFamille)
            Me.columnFamille = New Global.System.Data.DataColumn("Famille", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille)
            Me.columnnGroupe = New Global.System.Data.DataColumn("nGroupe", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnGroupe)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey21", New Global.System.Data.DataColumn() {Me.columnnFamille}, true))
            Me.columnnFamille.AllowDBNull = false
            Me.columnnFamille.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFamilleRow() As FamilleRow
            Return CType(Me.NewRow,FamilleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FamilleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FamilleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FamilleRowChangedEvent) Is Nothing) Then
                RaiseEvent FamilleRowChanged(Me, New FamilleRowChangeEvent(CType(e.Row,FamilleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FamilleRowChangingEvent) Is Nothing) Then
                RaiseEvent FamilleRowChanging(Me, New FamilleRowChangeEvent(CType(e.Row,FamilleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FamilleRowDeletedEvent) Is Nothing) Then
                RaiseEvent FamilleRowDeleted(Me, New FamilleRowChangeEvent(CType(e.Row,FamilleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FamilleRowDeletingEvent) Is Nothing) Then
                RaiseEvent FamilleRowDeleting(Me, New FamilleRowChangeEvent(CType(e.Row,FamilleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFamilleRow(ByVal row As FamilleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FamilleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReglementDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnReglement As Global.System.Data.DataColumn
        
        Private columnDateReglement As Global.System.Data.DataColumn
        
        Private columnDateDepot As Global.System.Data.DataColumn
        
        Private columnnEntreprise As Global.System.Data.DataColumn
        
        Private columnnMode As Global.System.Data.DataColumn
        
        Private columnnCheque As Global.System.Data.DataColumn
        
        Private columnModeReglement As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnPerte As Global.System.Data.DataColumn
        
        Private columnProfit As Global.System.Data.DataColumn
        
        Private columnDepose As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnBanqueClient As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Reglement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateDepotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateDepot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nModeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnMode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nChequeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCheque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModeReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PerteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProfitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProfit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BanqueClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanqueClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReglementRow
            Get
                Return CType(Me.Rows(index),ReglementRow)
            End Get
        End Property
        
        Public Event ReglementRowChanging As ReglementRowChangeEventHandler
        
        Public Event ReglementRowChanged As ReglementRowChangeEventHandler
        
        Public Event ReglementRowDeleting As ReglementRowChangeEventHandler
        
        Public Event ReglementRowDeleted As ReglementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReglementRow(ByVal row As ReglementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReglementRow(ByVal nReglement As Decimal, ByVal DateReglement As Date, ByVal DateDepot As Date, ByVal nEntreprise As Decimal, ByVal nMode As String, ByVal nCheque As String, ByVal ModeReglement As String, ByVal Observation As String, ByVal Montant As Decimal, ByVal Perte As Decimal, ByVal Profit As Decimal, ByVal Depose As Boolean, ByVal ExportCompta As Boolean, ByVal BanqueClient As String) As ReglementRow
            Dim rowReglementRow As ReglementRow = CType(Me.NewRow,ReglementRow)
            Dim columnValuesArray() As Object = New Object() {nReglement, DateReglement, DateDepot, nEntreprise, nMode, nCheque, ModeReglement, Observation, Montant, Perte, Profit, Depose, ExportCompta, BanqueClient}
            rowReglementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReglementRow)
            Return rowReglementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynReglement(ByVal nReglement As Decimal) As ReglementRow
            Return CType(Me.Rows.Find(New Object() {nReglement}),ReglementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReglementDataTable = CType(MyBase.Clone,ReglementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReglementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnReglement = MyBase.Columns("nReglement")
            Me.columnDateReglement = MyBase.Columns("DateReglement")
            Me.columnDateDepot = MyBase.Columns("DateDepot")
            Me.columnnEntreprise = MyBase.Columns("nEntreprise")
            Me.columnnMode = MyBase.Columns("nMode")
            Me.columnnCheque = MyBase.Columns("nCheque")
            Me.columnModeReglement = MyBase.Columns("ModeReglement")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnPerte = MyBase.Columns("Perte")
            Me.columnProfit = MyBase.Columns("Profit")
            Me.columnDepose = MyBase.Columns("Depose")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnBanqueClient = MyBase.Columns("BanqueClient")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnReglement = New Global.System.Data.DataColumn("nReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnReglement)
            Me.columnDateReglement = New Global.System.Data.DataColumn("DateReglement", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateReglement)
            Me.columnDateDepot = New Global.System.Data.DataColumn("DateDepot", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateDepot)
            Me.columnnEntreprise = New Global.System.Data.DataColumn("nEntreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnEntreprise)
            Me.columnnMode = New Global.System.Data.DataColumn("nMode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnMode)
            Me.columnnCheque = New Global.System.Data.DataColumn("nCheque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCheque)
            Me.columnModeReglement = New Global.System.Data.DataColumn("ModeReglement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModeReglement)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnPerte = New Global.System.Data.DataColumn("Perte", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerte)
            Me.columnProfit = New Global.System.Data.DataColumn("Profit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProfit)
            Me.columnDepose = New Global.System.Data.DataColumn("Depose", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepose)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnBanqueClient = New Global.System.Data.DataColumn("BanqueClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanqueClient)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey22", New Global.System.Data.DataColumn() {Me.columnnReglement}, true))
            Me.columnnReglement.AllowDBNull = false
            Me.columnnReglement.Unique = true
            Me.columnDepose.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReglementRow() As ReglementRow
            Return CType(Me.NewRow,ReglementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReglementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReglementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReglementRowChangedEvent) Is Nothing) Then
                RaiseEvent ReglementRowChanged(Me, New ReglementRowChangeEvent(CType(e.Row,ReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReglementRowChangingEvent) Is Nothing) Then
                RaiseEvent ReglementRowChanging(Me, New ReglementRowChangeEvent(CType(e.Row,ReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReglementRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReglementRowDeleted(Me, New ReglementRowChangeEvent(CType(e.Row,ReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReglementRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReglementRowDeleting(Me, New ReglementRowChangeEvent(CType(e.Row,ReglementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReglementRow(ByVal row As ReglementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReglementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Reglement_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailReglement As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnnReglement As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnPerte As Global.System.Data.DataColumn
        
        Private columnProfit As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Reglement_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PerteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProfitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProfit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Reglement_DetailRow
            Get
                Return CType(Me.Rows(index),Reglement_DetailRow)
            End Get
        End Property
        
        Public Event Reglement_DetailRowChanging As Reglement_DetailRowChangeEventHandler
        
        Public Event Reglement_DetailRowChanged As Reglement_DetailRowChangeEventHandler
        
        Public Event Reglement_DetailRowDeleting As Reglement_DetailRowChangeEventHandler
        
        Public Event Reglement_DetailRowDeleted As Reglement_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReglement_DetailRow(ByVal row As Reglement_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReglement_DetailRow(ByVal nDetailReglement As Decimal, ByVal nFacture As Decimal, ByVal nReglement As Decimal, ByVal Montant As Decimal, ByVal Perte As Decimal, ByVal Profit As Decimal) As Reglement_DetailRow
            Dim rowReglement_DetailRow As Reglement_DetailRow = CType(Me.NewRow,Reglement_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailReglement, nFacture, nReglement, Montant, Perte, Profit}
            rowReglement_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReglement_DetailRow)
            Return rowReglement_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailReglement(ByVal nDetailReglement As Decimal) As Reglement_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailReglement}),Reglement_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Reglement_DetailDataTable = CType(MyBase.Clone,Reglement_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Reglement_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailReglement = MyBase.Columns("nDetailReglement")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnnReglement = MyBase.Columns("nReglement")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnPerte = MyBase.Columns("Perte")
            Me.columnProfit = MyBase.Columns("Profit")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailReglement = New Global.System.Data.DataColumn("nDetailReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailReglement)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnnReglement = New Global.System.Data.DataColumn("nReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnReglement)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnPerte = New Global.System.Data.DataColumn("Perte", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerte)
            Me.columnProfit = New Global.System.Data.DataColumn("Profit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProfit)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey23", New Global.System.Data.DataColumn() {Me.columnnDetailReglement}, true))
            Me.columnnDetailReglement.AllowDBNull = false
            Me.columnnDetailReglement.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReglement_DetailRow() As Reglement_DetailRow
            Return CType(Me.NewRow,Reglement_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Reglement_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Reglement_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Reglement_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent Reglement_DetailRowChanged(Me, New Reglement_DetailRowChangeEvent(CType(e.Row,Reglement_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Reglement_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent Reglement_DetailRowChanging(Me, New Reglement_DetailRowChangeEvent(CType(e.Row,Reglement_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Reglement_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent Reglement_DetailRowDeleted(Me, New Reglement_DetailRowChangeEvent(CType(e.Row,Reglement_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Reglement_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent Reglement_DetailRowDeleting(Me, New Reglement_DetailRowChangeEvent(CType(e.Row,Reglement_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReglement_DetailRow(ByVal row As Reglement_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Reglement_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Remise_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailRemise As Global.System.Data.DataColumn
        
        Private columnnRemise As Global.System.Data.DataColumn
        
        Private columnnReglement As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Remise_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Remise_DetailRow
            Get
                Return CType(Me.Rows(index),Remise_DetailRow)
            End Get
        End Property
        
        Public Event Remise_DetailRowChanging As Remise_DetailRowChangeEventHandler
        
        Public Event Remise_DetailRowChanged As Remise_DetailRowChangeEventHandler
        
        Public Event Remise_DetailRowDeleting As Remise_DetailRowChangeEventHandler
        
        Public Event Remise_DetailRowDeleted As Remise_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRemise_DetailRow(ByVal row As Remise_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRemise_DetailRow(ByVal nDetailRemise As Decimal, ByVal nRemise As Decimal, ByVal nReglement As Decimal) As Remise_DetailRow
            Dim rowRemise_DetailRow As Remise_DetailRow = CType(Me.NewRow,Remise_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailRemise, nRemise, nReglement}
            rowRemise_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRemise_DetailRow)
            Return rowRemise_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailRemise(ByVal nDetailRemise As Decimal) As Remise_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailRemise}),Remise_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Remise_DetailDataTable = CType(MyBase.Clone,Remise_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Remise_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailRemise = MyBase.Columns("nDetailRemise")
            Me.columnnRemise = MyBase.Columns("nRemise")
            Me.columnnReglement = MyBase.Columns("nReglement")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailRemise = New Global.System.Data.DataColumn("nDetailRemise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailRemise)
            Me.columnnRemise = New Global.System.Data.DataColumn("nRemise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRemise)
            Me.columnnReglement = New Global.System.Data.DataColumn("nReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnReglement)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey25", New Global.System.Data.DataColumn() {Me.columnnDetailRemise}, true))
            Me.columnnDetailRemise.AllowDBNull = false
            Me.columnnDetailRemise.Unique = true
            Me.columnnRemise.AllowDBNull = false
            Me.columnnReglement.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRemise_DetailRow() As Remise_DetailRow
            Return CType(Me.NewRow,Remise_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Remise_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Remise_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Remise_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent Remise_DetailRowChanged(Me, New Remise_DetailRowChangeEvent(CType(e.Row,Remise_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Remise_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent Remise_DetailRowChanging(Me, New Remise_DetailRowChangeEvent(CType(e.Row,Remise_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Remise_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent Remise_DetailRowDeleted(Me, New Remise_DetailRowChangeEvent(CType(e.Row,Remise_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Remise_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent Remise_DetailRowDeleting(Me, New Remise_DetailRowChangeEvent(CType(e.Row,Remise_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRemise_DetailRow(ByVal row As Remise_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Remise_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RemiseDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnRemise As Global.System.Data.DataColumn
        
        Private columnnRemiseBanque As Global.System.Data.DataColumn
        
        Private columnnBanque As Global.System.Data.DataColumn
        
        Private columnDateRemise As Global.System.Data.DataColumn
        
        Private columnTypeRemise As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnNExportRemise As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Remise"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nRemiseBanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRemiseBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nBanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NExportRemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNExportRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RemiseRow
            Get
                Return CType(Me.Rows(index),RemiseRow)
            End Get
        End Property
        
        Public Event RemiseRowChanging As RemiseRowChangeEventHandler
        
        Public Event RemiseRowChanged As RemiseRowChangeEventHandler
        
        Public Event RemiseRowDeleting As RemiseRowChangeEventHandler
        
        Public Event RemiseRowDeleted As RemiseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRemiseRow(ByVal row As RemiseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRemiseRow(ByVal nRemise As Decimal, ByVal nRemiseBanque As String, ByVal parentBanqueRowByBanqueRemise As BanqueRow, ByVal DateRemise As Date, ByVal TypeRemise As String, ByVal Observation As String, ByVal Montant As Decimal, ByVal NExportRemise As Decimal, ByVal ExportCompta As Boolean, ByVal DateExportCompta As Date) As RemiseRow
            Dim rowRemiseRow As RemiseRow = CType(Me.NewRow,RemiseRow)
            Dim columnValuesArray() As Object = New Object() {nRemise, nRemiseBanque, Nothing, DateRemise, TypeRemise, Observation, Montant, NExportRemise, ExportCompta, DateExportCompta}
            If (Not (parentBanqueRowByBanqueRemise) Is Nothing) Then
                columnValuesArray(2) = parentBanqueRowByBanqueRemise(0)
            End If
            rowRemiseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRemiseRow)
            Return rowRemiseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynRemise(ByVal nRemise As Decimal) As RemiseRow
            Return CType(Me.Rows.Find(New Object() {nRemise}),RemiseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RemiseDataTable = CType(MyBase.Clone,RemiseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RemiseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnRemise = MyBase.Columns("nRemise")
            Me.columnnRemiseBanque = MyBase.Columns("nRemiseBanque")
            Me.columnnBanque = MyBase.Columns("nBanque")
            Me.columnDateRemise = MyBase.Columns("DateRemise")
            Me.columnTypeRemise = MyBase.Columns("TypeRemise")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnNExportRemise = MyBase.Columns("NExportRemise")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnRemise = New Global.System.Data.DataColumn("nRemise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRemise)
            Me.columnnRemiseBanque = New Global.System.Data.DataColumn("nRemiseBanque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRemiseBanque)
            Me.columnnBanque = New Global.System.Data.DataColumn("nBanque", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnBanque)
            Me.columnDateRemise = New Global.System.Data.DataColumn("DateRemise", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRemise)
            Me.columnTypeRemise = New Global.System.Data.DataColumn("TypeRemise", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeRemise)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnNExportRemise = New Global.System.Data.DataColumn("NExportRemise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNExportRemise)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey24", New Global.System.Data.DataColumn() {Me.columnnRemise}, true))
            Me.columnnRemise.AllowDBNull = false
            Me.columnnRemise.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRemiseRow() As RemiseRow
            Return CType(Me.NewRow,RemiseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RemiseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RemiseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RemiseRowChangedEvent) Is Nothing) Then
                RaiseEvent RemiseRowChanged(Me, New RemiseRowChangeEvent(CType(e.Row,RemiseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RemiseRowChangingEvent) Is Nothing) Then
                RaiseEvent RemiseRowChanging(Me, New RemiseRowChangeEvent(CType(e.Row,RemiseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RemiseRowDeletedEvent) Is Nothing) Then
                RaiseEvent RemiseRowDeleted(Me, New RemiseRowChangeEvent(CType(e.Row,RemiseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RemiseRowDeletingEvent) Is Nothing) Then
                RaiseEvent RemiseRowDeleting(Me, New RemiseRowChangeEvent(CType(e.Row,RemiseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRemiseRow(ByVal row As RemiseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RemiseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BanqueDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnBanque As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNCompte As Global.System.Data.DataColumn
        
        Private columnNActivite As Global.System.Data.DataColumn
        
        Private columnRIBCodeAgence As Global.System.Data.DataColumn
        
        Private columnRIBCodeGuichet As Global.System.Data.DataColumn
        
        Private columnRIBNCompte As Global.System.Data.DataColumn
        
        Private columnRIBCle As Global.System.Data.DataColumn
        
        Private columnRIBNEmetteur As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Banque"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nBanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActivite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBCodeAgenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBCodeAgence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBCodeGuichetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBCodeGuichet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBNCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBNCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBCleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBCle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBNEmetteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIBNEmetteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BanqueRow
            Get
                Return CType(Me.Rows(index),BanqueRow)
            End Get
        End Property
        
        Public Event BanqueRowChanging As BanqueRowChangeEventHandler
        
        Public Event BanqueRowChanged As BanqueRowChangeEventHandler
        
        Public Event BanqueRowDeleting As BanqueRowChangeEventHandler
        
        Public Event BanqueRowDeleted As BanqueRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBanqueRow(ByVal row As BanqueRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBanqueRow(ByVal nBanque As Decimal, ByVal Libelle As String, ByVal NCompte As String, ByVal NActivite As String, ByVal RIBCodeAgence As String, ByVal RIBCodeGuichet As String, ByVal RIBNCompte As String, ByVal RIBCle As String, ByVal RIBNEmetteur As String) As BanqueRow
            Dim rowBanqueRow As BanqueRow = CType(Me.NewRow,BanqueRow)
            Dim columnValuesArray() As Object = New Object() {nBanque, Libelle, NCompte, NActivite, RIBCodeAgence, RIBCodeGuichet, RIBNCompte, RIBCle, RIBNEmetteur}
            rowBanqueRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBanqueRow)
            Return rowBanqueRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynBanque(ByVal nBanque As Decimal) As BanqueRow
            Return CType(Me.Rows.Find(New Object() {nBanque}),BanqueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BanqueDataTable = CType(MyBase.Clone,BanqueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BanqueDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnBanque = MyBase.Columns("nBanque")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNCompte = MyBase.Columns("NCompte")
            Me.columnNActivite = MyBase.Columns("NActivite")
            Me.columnRIBCodeAgence = MyBase.Columns("RIBCodeAgence")
            Me.columnRIBCodeGuichet = MyBase.Columns("RIBCodeGuichet")
            Me.columnRIBNCompte = MyBase.Columns("RIBNCompte")
            Me.columnRIBCle = MyBase.Columns("RIBCle")
            Me.columnRIBNEmetteur = MyBase.Columns("RIBNEmetteur")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnBanque = New Global.System.Data.DataColumn("nBanque", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnBanque)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNCompte = New Global.System.Data.DataColumn("NCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompte)
            Me.columnNActivite = New Global.System.Data.DataColumn("NActivite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActivite)
            Me.columnRIBCodeAgence = New Global.System.Data.DataColumn("RIBCodeAgence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBCodeAgence)
            Me.columnRIBCodeGuichet = New Global.System.Data.DataColumn("RIBCodeGuichet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBCodeGuichet)
            Me.columnRIBNCompte = New Global.System.Data.DataColumn("RIBNCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBNCompte)
            Me.columnRIBCle = New Global.System.Data.DataColumn("RIBCle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBCle)
            Me.columnRIBNEmetteur = New Global.System.Data.DataColumn("RIBNEmetteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIBNEmetteur)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey26", New Global.System.Data.DataColumn() {Me.columnnBanque}, true))
            Me.columnnBanque.AllowDBNull = false
            Me.columnnBanque.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBanqueRow() As BanqueRow
            Return CType(Me.NewRow,BanqueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BanqueRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BanqueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BanqueRowChangedEvent) Is Nothing) Then
                RaiseEvent BanqueRowChanged(Me, New BanqueRowChangeEvent(CType(e.Row,BanqueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BanqueRowChangingEvent) Is Nothing) Then
                RaiseEvent BanqueRowChanging(Me, New BanqueRowChangeEvent(CType(e.Row,BanqueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BanqueRowDeletedEvent) Is Nothing) Then
                RaiseEvent BanqueRowDeleted(Me, New BanqueRowChangeEvent(CType(e.Row,BanqueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BanqueRowDeletingEvent) Is Nothing) Then
                RaiseEvent BanqueRowDeleting(Me, New BanqueRowChangeEvent(CType(e.Row,BanqueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBanqueRow(ByVal row As BanqueRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BanqueDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ParametresDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnParametre As Global.System.Data.DataColumn
        
        Private columnLogo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Parametres"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nParametreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnParametre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParametresRow
            Get
                Return CType(Me.Rows(index),ParametresRow)
            End Get
        End Property
        
        Public Event ParametresRowChanging As ParametresRowChangeEventHandler
        
        Public Event ParametresRowChanged As ParametresRowChangeEventHandler
        
        Public Event ParametresRowDeleting As ParametresRowChangeEventHandler
        
        Public Event ParametresRowDeleted As ParametresRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddParametresRow(ByVal row As ParametresRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddParametresRow(ByVal Logo() As Byte) As ParametresRow
            Dim rowParametresRow As ParametresRow = CType(Me.NewRow,ParametresRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Logo}
            rowParametresRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParametresRow)
            Return rowParametresRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynParametre(ByVal nParametre As Decimal) As ParametresRow
            Return CType(Me.Rows.Find(New Object() {nParametre}),ParametresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ParametresDataTable = CType(MyBase.Clone,ParametresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ParametresDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnParametre = MyBase.Columns("nParametre")
            Me.columnLogo = MyBase.Columns("Logo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnParametre = New Global.System.Data.DataColumn("nParametre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnParametre)
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey27", New Global.System.Data.DataColumn() {Me.columnnParametre}, true))
            Me.columnnParametre.AutoIncrement = true
            Me.columnnParametre.AllowDBNull = false
            Me.columnnParametre.ReadOnly = true
            Me.columnnParametre.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewParametresRow() As ParametresRow
            Return CType(Me.NewRow,ParametresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ParametresRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ParametresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParametresRowChangedEvent) Is Nothing) Then
                RaiseEvent ParametresRowChanged(Me, New ParametresRowChangeEvent(CType(e.Row,ParametresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParametresRowChangingEvent) Is Nothing) Then
                RaiseEvent ParametresRowChanging(Me, New ParametresRowChangeEvent(CType(e.Row,ParametresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParametresRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParametresRowDeleted(Me, New ParametresRowChangeEvent(CType(e.Row,ParametresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParametresRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParametresRowDeleting(Me, New ParametresRowChangeEvent(CType(e.Row,ParametresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveParametresRow(ByVal row As ParametresRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParametresDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EntrepriseDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnEntreprise As Global.System.Data.DataColumn
        
        Private columnDateCreation As Global.System.Data.DataColumn
        
        Private columnDateModification As Global.System.Data.DataColumn
        
        Private columnInfoMAJ As Global.System.Data.DataColumn
        
        Private columnTypeEntreprise As Global.System.Data.DataColumn
        
        Private columnnOrganisme As Global.System.Data.DataColumn
        
        Private columnnMaisonMere As Global.System.Data.DataColumn
        
        Private columnDep As Global.System.Data.DataColumn
        
        Private columnNom As Global.System.Data.DataColumn
        
        Private columnAdresse As Global.System.Data.DataColumn
        
        Private columnCodePostal As Global.System.Data.DataColumn
        
        Private columnVille As Global.System.Data.DataColumn
        
        Private columnPays As Global.System.Data.DataColumn
        
        Private columnFormeJuridique As Global.System.Data.DataColumn
        
        Private columnTypeClient As Global.System.Data.DataColumn
        
        Private columnCibleCommercial As Global.System.Data.DataColumn
        
        Private columnModePaiement As Global.System.Data.DataColumn
        
        Private columnEcheance As Global.System.Data.DataColumn
        
        Private columnBanque As Global.System.Data.DataColumn
        
        Private columnRIB As Global.System.Data.DataColumn
        
        Private columnCA As Global.System.Data.DataColumn
        
        Private columnEMail As Global.System.Data.DataColumn
        
        Private columnSiteInternet As Global.System.Data.DataColumn
        
        Private columnObservations As Global.System.Data.DataColumn
        
        Private columnFinMois As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        Private columnFournisseur As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnSuffixePostal As Global.System.Data.DataColumn
        
        Private columnAdresseLiv As Global.System.Data.DataColumn
        
        Private columnCodePostalLiv As Global.System.Data.DataColumn
        
        Private columnVilleLiv As Global.System.Data.DataColumn
        
        Private columnPaysLiv As Global.System.Data.DataColumn
        
        Private columnInactif As Global.System.Data.DataColumn
        
        Private columnLoginSite As Global.System.Data.DataColumn
        
        Private columnPwdSite As Global.System.Data.DataColumn
        
        Private columnIdSite As Global.System.Data.DataColumn
        
        Private columnNCompteF As Global.System.Data.DataColumn
        
        Private columnNActiviteF As Global.System.Data.DataColumn
        
        Private columnNCompteC As Global.System.Data.DataColumn
        
        Private columnNActiviteC As Global.System.Data.DataColumn
        
        Private columnnTarif As Global.System.Data.DataColumn
        
        Private columnCivilite As Global.System.Data.DataColumn
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnLicence As Global.System.Data.DataColumn
        
        Private columnSituationCompte As Global.System.Data.DataColumn
        
        Private columnNTvaIntraCom As Global.System.Data.DataColumn
        
        Private columnCodeInterne As Global.System.Data.DataColumn
        
        Private columnCritere1 As Global.System.Data.DataColumn
        
        Private columnCritere2 As Global.System.Data.DataColumn
        
        Private columnCritere3 As Global.System.Data.DataColumn
        
        Private columnCritere4 As Global.System.Data.DataColumn
        
        Private columnAfficheStat As Global.System.Data.DataColumn
        
        Private columnSiren As Global.System.Data.DataColumn
        
        Private columnNomLivraison As Global.System.Data.DataColumn
        
        Private columnNomFacturation As Global.System.Data.DataColumn
        
        Private columnCodeClient As Global.System.Data.DataColumn
        
        Private columnObservationLivraison As Global.System.Data.DataColumn
        
        Private columnIndEscompteSpecifique As Global.System.Data.DataColumn
        
        Private columnTauxEscompteSpecifique As Global.System.Data.DataColumn
        
        Private columnDelaiValiditeEscompte As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnnAdherent As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Entreprise"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateModificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateModification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InfoMAJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInfoMAJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeEntrepriseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeEntreprise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrganismeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrganisme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nMaisonMereColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnMaisonMere
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodePostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodePostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormeJuridiqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormeJuridique
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CibleCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCibleCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModePaiementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModePaiement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BanqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SiteInternetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteInternet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinMoisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinMois
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuffixePostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuffixePostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodePostalLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodePostalLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VilleLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVilleLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaysLivColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaysLiv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InactifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoginSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoginSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PwdSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPwdSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTarifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTarif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiviliteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCivilite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LicenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLicence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SituationCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSituationCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NTvaIntraComColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTvaIntraCom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeInterneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeInterne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Critere4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritere4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AfficheStatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAfficheStat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SirenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiren
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomLivraisonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomLivraison
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationLivraisonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservationLivraison
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IndEscompteSpecifiqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndEscompteSpecifique
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TauxEscompteSpecifiqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTauxEscompteSpecifique
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DelaiValiditeEscompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelaiValiditeEscompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nAdherentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnAdherent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EntrepriseRow
            Get
                Return CType(Me.Rows(index),EntrepriseRow)
            End Get
        End Property
        
        Public Event EntrepriseRowChanging As EntrepriseRowChangeEventHandler
        
        Public Event EntrepriseRowChanged As EntrepriseRowChangeEventHandler
        
        Public Event EntrepriseRowDeleting As EntrepriseRowChangeEventHandler
        
        Public Event EntrepriseRowDeleted As EntrepriseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEntrepriseRow(ByVal row As EntrepriseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEntrepriseRow( _
                    ByVal nEntreprise As Decimal,  _
                    ByVal DateCreation As Date,  _
                    ByVal DateModification As Date,  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypeEntreprise As String,  _
                    ByVal nOrganisme As String,  _
                    ByVal nMaisonMere As Decimal,  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal FormeJuridique As String,  _
                    ByVal TypeClient As String,  _
                    ByVal CibleCommercial As String,  _
                    ByVal ModePaiement As String,  _
                    ByVal Echeance As Decimal,  _
                    ByVal Banque As String,  _
                    ByVal RIB As String,  _
                    ByVal CA As Single,  _
                    ByVal EMail As String,  _
                    ByVal SiteInternet As String,  _
                    ByVal Observations As String,  _
                    ByVal FinMois As Boolean,  _
                    ByVal Remise As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal Fournisseur As Boolean,  _
                    ByVal Client As Boolean,  _
                    ByVal SuffixePostal As String,  _
                    ByVal AdresseLiv As String,  _
                    ByVal CodePostalLiv As String,  _
                    ByVal VilleLiv As String,  _
                    ByVal PaysLiv As String,  _
                    ByVal Inactif As Boolean,  _
                    ByVal LoginSite As String,  _
                    ByVal PwdSite As String,  _
                    ByVal IdSite As Decimal,  _
                    ByVal NCompteF As String,  _
                    ByVal NActiviteF As String,  _
                    ByVal NCompteC As String,  _
                    ByVal NActiviteC As String,  _
                    ByVal nTarif As Decimal,  _
                    ByVal Civilite As String,  _
                    ByVal Logo() As Byte,  _
                    ByVal Licence As String,  _
                    ByVal SituationCompte As Decimal,  _
                    ByVal NTvaIntraCom As String,  _
                    ByVal CodeInterne As String,  _
                    ByVal Critere1 As String,  _
                    ByVal Critere2 As String,  _
                    ByVal Critere3 As String,  _
                    ByVal Critere4 As String,  _
                    ByVal AfficheStat As Boolean,  _
                    ByVal Siren As String,  _
                    ByVal NomLivraison As String,  _
                    ByVal NomFacturation As String,  _
                    ByVal CodeClient As String,  _
                    ByVal ObservationLivraison As String,  _
                    ByVal IndEscompteSpecifique As Boolean,  _
                    ByVal TauxEscompteSpecifique As Decimal,  _
                    ByVal DelaiValiditeEscompte As Short,  _
                    ByVal nCommercial As Integer,  _
                    ByVal nAdherent As Integer) As EntrepriseRow
            Dim rowEntrepriseRow As EntrepriseRow = CType(Me.NewRow,EntrepriseRow)
            Dim columnValuesArray() As Object = New Object() {nEntreprise, DateCreation, DateModification, InfoMAJ, TypeEntreprise, nOrganisme, nMaisonMere, Dep, Nom, Adresse, CodePostal, Ville, Pays, FormeJuridique, TypeClient, CibleCommercial, ModePaiement, Echeance, Banque, RIB, CA, EMail, SiteInternet, Observations, FinMois, Remise, TTVA, FacturationTTC, Fournisseur, Client, SuffixePostal, AdresseLiv, CodePostalLiv, VilleLiv, PaysLiv, Inactif, LoginSite, PwdSite, IdSite, NCompteF, NActiviteF, NCompteC, NActiviteC, nTarif, Civilite, Logo, Licence, SituationCompte, NTvaIntraCom, CodeInterne, Critere1, Critere2, Critere3, Critere4, AfficheStat, Siren, NomLivraison, NomFacturation, CodeClient, ObservationLivraison, IndEscompteSpecifique, TauxEscompteSpecifique, DelaiValiditeEscompte, nCommercial, nAdherent}
            rowEntrepriseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEntrepriseRow)
            Return rowEntrepriseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynEntreprise(ByVal nEntreprise As Decimal) As EntrepriseRow
            Return CType(Me.Rows.Find(New Object() {nEntreprise}),EntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EntrepriseDataTable = CType(MyBase.Clone,EntrepriseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EntrepriseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnEntreprise = MyBase.Columns("nEntreprise")
            Me.columnDateCreation = MyBase.Columns("DateCreation")
            Me.columnDateModification = MyBase.Columns("DateModification")
            Me.columnInfoMAJ = MyBase.Columns("InfoMAJ")
            Me.columnTypeEntreprise = MyBase.Columns("TypeEntreprise")
            Me.columnnOrganisme = MyBase.Columns("nOrganisme")
            Me.columnnMaisonMere = MyBase.Columns("nMaisonMere")
            Me.columnDep = MyBase.Columns("Dep")
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnAdresse = MyBase.Columns("Adresse")
            Me.columnCodePostal = MyBase.Columns("CodePostal")
            Me.columnVille = MyBase.Columns("Ville")
            Me.columnPays = MyBase.Columns("Pays")
            Me.columnFormeJuridique = MyBase.Columns("FormeJuridique")
            Me.columnTypeClient = MyBase.Columns("TypeClient")
            Me.columnCibleCommercial = MyBase.Columns("CibleCommercial")
            Me.columnModePaiement = MyBase.Columns("ModePaiement")
            Me.columnEcheance = MyBase.Columns("Echeance")
            Me.columnBanque = MyBase.Columns("Banque")
            Me.columnRIB = MyBase.Columns("RIB")
            Me.columnCA = MyBase.Columns("CA")
            Me.columnEMail = MyBase.Columns("EMail")
            Me.columnSiteInternet = MyBase.Columns("SiteInternet")
            Me.columnObservations = MyBase.Columns("Observations")
            Me.columnFinMois = MyBase.Columns("FinMois")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
            Me.columnFournisseur = MyBase.Columns("Fournisseur")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnSuffixePostal = MyBase.Columns("SuffixePostal")
            Me.columnAdresseLiv = MyBase.Columns("AdresseLiv")
            Me.columnCodePostalLiv = MyBase.Columns("CodePostalLiv")
            Me.columnVilleLiv = MyBase.Columns("VilleLiv")
            Me.columnPaysLiv = MyBase.Columns("PaysLiv")
            Me.columnInactif = MyBase.Columns("Inactif")
            Me.columnLoginSite = MyBase.Columns("LoginSite")
            Me.columnPwdSite = MyBase.Columns("PwdSite")
            Me.columnIdSite = MyBase.Columns("IdSite")
            Me.columnNCompteF = MyBase.Columns("NCompteF")
            Me.columnNActiviteF = MyBase.Columns("NActiviteF")
            Me.columnNCompteC = MyBase.Columns("NCompteC")
            Me.columnNActiviteC = MyBase.Columns("NActiviteC")
            Me.columnnTarif = MyBase.Columns("nTarif")
            Me.columnCivilite = MyBase.Columns("Civilite")
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnLicence = MyBase.Columns("Licence")
            Me.columnSituationCompte = MyBase.Columns("SituationCompte")
            Me.columnNTvaIntraCom = MyBase.Columns("NTvaIntraCom")
            Me.columnCodeInterne = MyBase.Columns("CodeInterne")
            Me.columnCritere1 = MyBase.Columns("Critere1")
            Me.columnCritere2 = MyBase.Columns("Critere2")
            Me.columnCritere3 = MyBase.Columns("Critere3")
            Me.columnCritere4 = MyBase.Columns("Critere4")
            Me.columnAfficheStat = MyBase.Columns("AfficheStat")
            Me.columnSiren = MyBase.Columns("Siren")
            Me.columnNomLivraison = MyBase.Columns("NomLivraison")
            Me.columnNomFacturation = MyBase.Columns("NomFacturation")
            Me.columnCodeClient = MyBase.Columns("CodeClient")
            Me.columnObservationLivraison = MyBase.Columns("ObservationLivraison")
            Me.columnIndEscompteSpecifique = MyBase.Columns("IndEscompteSpecifique")
            Me.columnTauxEscompteSpecifique = MyBase.Columns("TauxEscompteSpecifique")
            Me.columnDelaiValiditeEscompte = MyBase.Columns("DelaiValiditeEscompte")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnnAdherent = MyBase.Columns("nAdherent")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnEntreprise = New Global.System.Data.DataColumn("nEntreprise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnEntreprise)
            Me.columnDateCreation = New Global.System.Data.DataColumn("DateCreation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreation)
            Me.columnDateModification = New Global.System.Data.DataColumn("DateModification", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateModification)
            Me.columnInfoMAJ = New Global.System.Data.DataColumn("InfoMAJ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInfoMAJ)
            Me.columnTypeEntreprise = New Global.System.Data.DataColumn("TypeEntreprise", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeEntreprise)
            Me.columnnOrganisme = New Global.System.Data.DataColumn("nOrganisme", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrganisme)
            Me.columnnMaisonMere = New Global.System.Data.DataColumn("nMaisonMere", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnMaisonMere)
            Me.columnDep = New Global.System.Data.DataColumn("Dep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDep)
            Me.columnNom = New Global.System.Data.DataColumn("Nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnAdresse = New Global.System.Data.DataColumn("Adresse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresse)
            Me.columnCodePostal = New Global.System.Data.DataColumn("CodePostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodePostal)
            Me.columnVille = New Global.System.Data.DataColumn("Ville", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVille)
            Me.columnPays = New Global.System.Data.DataColumn("Pays", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPays)
            Me.columnFormeJuridique = New Global.System.Data.DataColumn("FormeJuridique", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormeJuridique)
            Me.columnTypeClient = New Global.System.Data.DataColumn("TypeClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeClient)
            Me.columnCibleCommercial = New Global.System.Data.DataColumn("CibleCommercial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCibleCommercial)
            Me.columnModePaiement = New Global.System.Data.DataColumn("ModePaiement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModePaiement)
            Me.columnEcheance = New Global.System.Data.DataColumn("Echeance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEcheance)
            Me.columnBanque = New Global.System.Data.DataColumn("Banque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanque)
            Me.columnRIB = New Global.System.Data.DataColumn("RIB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIB)
            Me.columnCA = New Global.System.Data.DataColumn("CA", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCA)
            Me.columnEMail = New Global.System.Data.DataColumn("EMail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMail)
            Me.columnSiteInternet = New Global.System.Data.DataColumn("SiteInternet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteInternet)
            Me.columnObservations = New Global.System.Data.DataColumn("Observations", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservations)
            Me.columnFinMois = New Global.System.Data.DataColumn("FinMois", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinMois)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.columnFournisseur = New Global.System.Data.DataColumn("Fournisseur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFournisseur)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnSuffixePostal = New Global.System.Data.DataColumn("SuffixePostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuffixePostal)
            Me.columnAdresseLiv = New Global.System.Data.DataColumn("AdresseLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseLiv)
            Me.columnCodePostalLiv = New Global.System.Data.DataColumn("CodePostalLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodePostalLiv)
            Me.columnVilleLiv = New Global.System.Data.DataColumn("VilleLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVilleLiv)
            Me.columnPaysLiv = New Global.System.Data.DataColumn("PaysLiv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaysLiv)
            Me.columnInactif = New Global.System.Data.DataColumn("Inactif", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactif)
            Me.columnLoginSite = New Global.System.Data.DataColumn("LoginSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoginSite)
            Me.columnPwdSite = New Global.System.Data.DataColumn("PwdSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPwdSite)
            Me.columnIdSite = New Global.System.Data.DataColumn("IdSite", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSite)
            Me.columnNCompteF = New Global.System.Data.DataColumn("NCompteF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteF)
            Me.columnNActiviteF = New Global.System.Data.DataColumn("NActiviteF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteF)
            Me.columnNCompteC = New Global.System.Data.DataColumn("NCompteC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteC)
            Me.columnNActiviteC = New Global.System.Data.DataColumn("NActiviteC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteC)
            Me.columnnTarif = New Global.System.Data.DataColumn("nTarif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTarif)
            Me.columnCivilite = New Global.System.Data.DataColumn("Civilite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCivilite)
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnLicence = New Global.System.Data.DataColumn("Licence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLicence)
            Me.columnSituationCompte = New Global.System.Data.DataColumn("SituationCompte", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSituationCompte)
            Me.columnNTvaIntraCom = New Global.System.Data.DataColumn("NTvaIntraCom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTvaIntraCom)
            Me.columnCodeInterne = New Global.System.Data.DataColumn("CodeInterne", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeInterne)
            Me.columnCritere1 = New Global.System.Data.DataColumn("Critere1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere1)
            Me.columnCritere2 = New Global.System.Data.DataColumn("Critere2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere2)
            Me.columnCritere3 = New Global.System.Data.DataColumn("Critere3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere3)
            Me.columnCritere4 = New Global.System.Data.DataColumn("Critere4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritere4)
            Me.columnAfficheStat = New Global.System.Data.DataColumn("AfficheStat", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAfficheStat)
            Me.columnSiren = New Global.System.Data.DataColumn("Siren", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiren)
            Me.columnNomLivraison = New Global.System.Data.DataColumn("NomLivraison", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomLivraison)
            Me.columnNomFacturation = New Global.System.Data.DataColumn("NomFacturation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomFacturation)
            Me.columnCodeClient = New Global.System.Data.DataColumn("CodeClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeClient)
            Me.columnObservationLivraison = New Global.System.Data.DataColumn("ObservationLivraison", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservationLivraison)
            Me.columnIndEscompteSpecifique = New Global.System.Data.DataColumn("IndEscompteSpecifique", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndEscompteSpecifique)
            Me.columnTauxEscompteSpecifique = New Global.System.Data.DataColumn("TauxEscompteSpecifique", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTauxEscompteSpecifique)
            Me.columnDelaiValiditeEscompte = New Global.System.Data.DataColumn("DelaiValiditeEscompte", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelaiValiditeEscompte)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnnAdherent = New Global.System.Data.DataColumn("nAdherent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnAdherent)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey28", New Global.System.Data.DataColumn() {Me.columnnEntreprise}, true))
            Me.columnnEntreprise.AllowDBNull = false
            Me.columnnEntreprise.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEntrepriseRow() As EntrepriseRow
            Return CType(Me.NewRow,EntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EntrepriseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EntrepriseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EntrepriseRowChangedEvent) Is Nothing) Then
                RaiseEvent EntrepriseRowChanged(Me, New EntrepriseRowChangeEvent(CType(e.Row,EntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EntrepriseRowChangingEvent) Is Nothing) Then
                RaiseEvent EntrepriseRowChanging(Me, New EntrepriseRowChangeEvent(CType(e.Row,EntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EntrepriseRowDeletedEvent) Is Nothing) Then
                RaiseEvent EntrepriseRowDeleted(Me, New EntrepriseRowChangeEvent(CType(e.Row,EntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EntrepriseRowDeletingEvent) Is Nothing) Then
                RaiseEvent EntrepriseRowDeleting(Me, New EntrepriseRowChangeEvent(CType(e.Row,EntrepriseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEntrepriseRow(ByVal row As EntrepriseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EntrepriseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TVA_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnTVA As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTTaux As Global.System.Data.DataColumn
        
        Private columnTCoef As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TVA_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTauxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTaux
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCoefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCoef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TVA_DetailRow
            Get
                Return CType(Me.Rows(index),TVA_DetailRow)
            End Get
        End Property
        
        Public Event TVA_DetailRowChanging As TVA_DetailRowChangeEventHandler
        
        Public Event TVA_DetailRowChanged As TVA_DetailRowChangeEventHandler
        
        Public Event TVA_DetailRowDeleting As TVA_DetailRowChangeEventHandler
        
        Public Event TVA_DetailRowDeleted As TVA_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTVA_DetailRow(ByVal row As TVA_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTVA_DetailRow(ByVal nTVA As Decimal, ByVal TTVA As String, ByVal TTaux As Decimal, ByVal TCoef As Decimal) As TVA_DetailRow
            Dim rowTVA_DetailRow As TVA_DetailRow = CType(Me.NewRow,TVA_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nTVA, TTVA, TTaux, TCoef}
            rowTVA_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTVA_DetailRow)
            Return rowTVA_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TVA_DetailDataTable = CType(MyBase.Clone,TVA_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TVA_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnTVA = MyBase.Columns("nTVA")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTTaux = MyBase.Columns("TTaux")
            Me.columnTCoef = MyBase.Columns("TCoef")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnTVA = New Global.System.Data.DataColumn("nTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTVA)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTTaux = New Global.System.Data.DataColumn("TTaux", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTaux)
            Me.columnTCoef = New Global.System.Data.DataColumn("TCoef", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCoef)
            Me.columnnTVA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTVA_DetailRow() As TVA_DetailRow
            Return CType(Me.NewRow,TVA_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TVA_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TVA_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TVA_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent TVA_DetailRowChanged(Me, New TVA_DetailRowChangeEvent(CType(e.Row,TVA_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TVA_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent TVA_DetailRowChanging(Me, New TVA_DetailRowChangeEvent(CType(e.Row,TVA_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TVA_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent TVA_DetailRowDeleted(Me, New TVA_DetailRowChangeEvent(CType(e.Row,TVA_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TVA_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent TVA_DetailRowDeleting(Me, New TVA_DetailRowChangeEvent(CType(e.Row,TVA_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTVA_DetailRow(ByVal row As TVA_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TVA_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AReglement_DetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDetailReglement As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnnReglement As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnPerte As Global.System.Data.DataColumn
        
        Private columnProfit As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AReglement_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nReglementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnReglement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PerteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProfitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProfit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AReglement_DetailRow
            Get
                Return CType(Me.Rows(index),AReglement_DetailRow)
            End Get
        End Property
        
        Public Event AReglement_DetailRowChanging As AReglement_DetailRowChangeEventHandler
        
        Public Event AReglement_DetailRowChanged As AReglement_DetailRowChangeEventHandler
        
        Public Event AReglement_DetailRowDeleting As AReglement_DetailRowChangeEventHandler
        
        Public Event AReglement_DetailRowDeleted As AReglement_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAReglement_DetailRow(ByVal row As AReglement_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAReglement_DetailRow(ByVal nDetailReglement As Decimal, ByVal nFacture As Decimal, ByVal nReglement As Decimal, ByVal Montant As Decimal, ByVal Perte As Decimal, ByVal Profit As Decimal) As AReglement_DetailRow
            Dim rowAReglement_DetailRow As AReglement_DetailRow = CType(Me.NewRow,AReglement_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailReglement, nFacture, nReglement, Montant, Perte, Profit}
            rowAReglement_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAReglement_DetailRow)
            Return rowAReglement_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailReglement(ByVal nDetailReglement As Decimal) As AReglement_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailReglement}),AReglement_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AReglement_DetailDataTable = CType(MyBase.Clone,AReglement_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AReglement_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailReglement = MyBase.Columns("nDetailReglement")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnnReglement = MyBase.Columns("nReglement")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnPerte = MyBase.Columns("Perte")
            Me.columnProfit = MyBase.Columns("Profit")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailReglement = New Global.System.Data.DataColumn("nDetailReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailReglement)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnnReglement = New Global.System.Data.DataColumn("nReglement", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnReglement)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnPerte = New Global.System.Data.DataColumn("Perte", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerte)
            Me.columnProfit = New Global.System.Data.DataColumn("Profit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProfit)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDetailReglement}, true))
            Me.columnnDetailReglement.AllowDBNull = false
            Me.columnnDetailReglement.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAReglement_DetailRow() As AReglement_DetailRow
            Return CType(Me.NewRow,AReglement_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AReglement_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AReglement_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AReglement_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent AReglement_DetailRowChanged(Me, New AReglement_DetailRowChangeEvent(CType(e.Row,AReglement_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AReglement_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent AReglement_DetailRowChanging(Me, New AReglement_DetailRowChangeEvent(CType(e.Row,AReglement_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AReglement_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent AReglement_DetailRowDeleted(Me, New AReglement_DetailRowChangeEvent(CType(e.Row,AReglement_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AReglement_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent AReglement_DetailRowDeleting(Me, New AReglement_DetailRowChangeEvent(CType(e.Row,AReglement_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAReglement_DetailRow(ByVal row As AReglement_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AReglement_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VFactureDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnnPrescripteur As Global.System.Data.DataColumn
        
        Private columnnPayeur As Global.System.Data.DataColumn
        
        Private columnnContact As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnFacturationPrescripteur As Global.System.Data.DataColumn
        
        Private columnFacturationClient As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnDateRelance1 As Global.System.Data.DataColumn
        
        Private columnDateRelance2 As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantHT As Global.System.Data.DataColumn
        
        Private columnMontantTVA As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnnPreFacturation As Global.System.Data.DataColumn
        
        Private columnDatePreFacturation As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        Private columnnRelance As Global.System.Data.DataColumn
        
        Private columnDateRelance As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VFacture"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatePreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nRelanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRelance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VFactureRow
            Get
                Return CType(Me.Rows(index),VFactureRow)
            End Get
        End Property
        
        Public Event VFactureRowChanging As VFactureRowChangeEventHandler
        
        Public Event VFactureRowChanged As VFactureRowChangeEventHandler
        
        Public Event VFactureRowDeleting As VFactureRowChangeEventHandler
        
        Public Event VFactureRowDeleted As VFactureRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVFactureRow(ByVal row As VFactureRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVFactureRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nClient As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Decimal,  _
                    ByVal nPayeur As Decimal,  _
                    ByVal nContact As Decimal,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Date,  _
                    ByVal DateRelance2 As Date,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantHT As Decimal,  _
                    ByVal MontantTVA As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal nPreFacturation As Decimal,  _
                    ByVal DatePreFacturation As Date,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal nRelance As Integer,  _
                    ByVal DateRelance As Date) As VFactureRow
            Dim rowVFactureRow As VFactureRow = CType(Me.NewRow,VFactureRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC, nRelance, DateRelance}
            rowVFactureRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVFactureRow)
            Return rowVFactureRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As VFactureRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),VFactureRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VFactureDataTable = CType(MyBase.Clone,VFactureDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VFactureDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnnPrescripteur = MyBase.Columns("nPrescripteur")
            Me.columnnPayeur = MyBase.Columns("nPayeur")
            Me.columnnContact = MyBase.Columns("nContact")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnFacturationPrescripteur = MyBase.Columns("FacturationPrescripteur")
            Me.columnFacturationClient = MyBase.Columns("FacturationClient")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnDateRelance1 = MyBase.Columns("DateRelance1")
            Me.columnDateRelance2 = MyBase.Columns("DateRelance2")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantHT = MyBase.Columns("MontantHT")
            Me.columnMontantTVA = MyBase.Columns("MontantTVA")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnnPreFacturation = MyBase.Columns("nPreFacturation")
            Me.columnDatePreFacturation = MyBase.Columns("DatePreFacturation")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
            Me.columnnRelance = MyBase.Columns("nRelance")
            Me.columnDateRelance = MyBase.Columns("DateRelance")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnnPrescripteur = New Global.System.Data.DataColumn("nPrescripteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPrescripteur)
            Me.columnnPayeur = New Global.System.Data.DataColumn("nPayeur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPayeur)
            Me.columnnContact = New Global.System.Data.DataColumn("nContact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnContact)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnFacturationPrescripteur = New Global.System.Data.DataColumn("FacturationPrescripteur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationPrescripteur)
            Me.columnFacturationClient = New Global.System.Data.DataColumn("FacturationClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationClient)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnDateRelance1 = New Global.System.Data.DataColumn("DateRelance1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance1)
            Me.columnDateRelance2 = New Global.System.Data.DataColumn("DateRelance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance2)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantHT = New Global.System.Data.DataColumn("MontantHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantHT)
            Me.columnMontantTVA = New Global.System.Data.DataColumn("MontantTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTVA)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnnPreFacturation = New Global.System.Data.DataColumn("nPreFacturation", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPreFacturation)
            Me.columnDatePreFacturation = New Global.System.Data.DataColumn("DatePreFacturation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePreFacturation)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.columnnRelance = New Global.System.Data.DataColumn("nRelance", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRelance)
            Me.columnDateRelance = New Global.System.Data.DataColumn("DateRelance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DsImpressionFactureKey17", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnFacturationPrescripteur.AllowDBNull = false
            Me.columnFacturationClient.AllowDBNull = false
            Me.columnPaye.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
            Me.columnnRelance.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVFactureRow() As VFactureRow
            Return CType(Me.NewRow,VFactureRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VFactureRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VFactureRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VFactureRowChangedEvent) Is Nothing) Then
                RaiseEvent VFactureRowChanged(Me, New VFactureRowChangeEvent(CType(e.Row,VFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VFactureRowChangingEvent) Is Nothing) Then
                RaiseEvent VFactureRowChanging(Me, New VFactureRowChangeEvent(CType(e.Row,VFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VFactureRowDeletedEvent) Is Nothing) Then
                RaiseEvent VFactureRowDeleted(Me, New VFactureRowChangeEvent(CType(e.Row,VFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VFactureRowDeletingEvent) Is Nothing) Then
                RaiseEvent VFactureRowDeleting(Me, New VFactureRowChangeEvent(CType(e.Row,VFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVFactureRow(ByVal row As VFactureRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpressionFacture = New DsImpressionFacture
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VFactureDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TarifRow
        Inherits Global.System.Data.DataRow
        
        Private tableTarif As TarifDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTarif = CType(Me.Table,TarifDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTarif() As Decimal
            Get
                Return CType(Me(Me.tableTarif.nTarifColumn),Decimal)
            End Get
            Set
                Me(Me.tableTarif.nTarifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableTarif.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'Tarif' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTarif.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZoneGeo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTarif.ZoneGeoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZoneGeo' in table 'Tarif' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTarif.ZoneGeoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableTarif.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableTarif.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZoneGeoNull() As Boolean
            Return Me.IsNull(Me.tableTarif.ZoneGeoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZoneGeoNull()
            Me(Me.tableTarif.ZoneGeoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VFacture_Detail_RedevanceRow
        Inherits Global.System.Data.DataRow
        
        Private tableVFacture_Detail_Redevance As VFacture_Detail_RedevanceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVFacture_Detail_Redevance = CType(Me.Table,VFacture_Detail_RedevanceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableVFacture_Detail_Redevance.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nDevis' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLigne' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLot' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'VFacture_Detail_Redevance' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NbParution' in table 'VFacture_Detail_Redevance' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite2' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUHT' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTva' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTVA' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTC' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'VFacture_Detail_Redevance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneHT' in table 'VFacture_Detail_Redevance' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTVA' in table 'VFacture_Detail_Redevance' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail_Redevance.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTTC' in table 'VFacture_Detail_Redevance' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail_Redevance.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableVFacture_Detail_Redevance.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableVFacture_Detail_Redevance.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableVFacture_Detail_Redevance.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableVFacture_Detail_Redevance.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableVFacture_Detail_Redevance.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableVFacture_Detail_Redevance.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableVFacture_Detail_Redevance.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableVFacture_Detail_Redevance.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableVFacture_Detail_Redevance.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableVFacture_Detail_Redevance.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableVFacture_Detail_Redevance.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableVFacture_Detail_Redevance.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableVFacture_Detail_Redevance.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableVFacture_Detail_Redevance.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableVFacture_Detail_Redevance.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVFacture_Detail_Redevance.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableVFacture_Detail_Redevance.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableVFacture_Detail_Redevance.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail_Redevance.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableVFacture_Detail_Redevance.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Entreprise1Row
        Inherits Global.System.Data.DataRow
        
        Private tableEntreprise1 As Entreprise1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEntreprise1 = CType(Me.Table,Entreprise1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nEntreprise() As Decimal
            Get
                Return CType(Me(Me.tableEntreprise1.nEntrepriseColumn),Decimal)
            End Get
            Set
                Me(Me.tableEntreprise1.nEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.DateCreationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreation' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.DateCreationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateModification() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.DateModificationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateModification' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.DateModificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InfoMAJ() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.InfoMAJColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InfoMAJ' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.InfoMAJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeEntreprise() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.TypeEntrepriseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeEntreprise' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.TypeEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrganisme() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.nOrganismeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nOrganisme' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.nOrganismeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nMaisonMere() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.nMaisonMereColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nMaisonMere' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.nMaisonMereColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dep() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.DepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dep' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.DepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.NomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nom' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.NomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adresse() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.AdresseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Adresse' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.AdresseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodePostal() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.CodePostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodePostal' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.CodePostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ville() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.VilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ville' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.VilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pays() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.PaysColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pays' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.PaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormeJuridique() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.FormeJuridiqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormeJuridique' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.FormeJuridiqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.TypeClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeClient' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.TypeClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CibleCommercial() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.CibleCommercialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CibleCommercial' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.CibleCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModePaiement() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.ModePaiementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModePaiement' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.ModePaiementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Echeance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.EcheanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Echeance' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.EcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Banque() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.BanqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Banque' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.BanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIB() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.RIBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIB' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.RIBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CA() As Single
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.CAColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CA' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.CAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMail() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.EMailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMail' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.EMailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SiteInternet() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.SiteInternetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SiteInternet' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.SiteInternetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observations() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.ObservationsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observations' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.ObservationsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinMois() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.FinMoisColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinMois' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.FinMoisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FacturationTTC' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fournisseur() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.FournisseurColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fournisseur' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.FournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.ClientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Client' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuffixePostal() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.SuffixePostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuffixePostal' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.SuffixePostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.AdresseLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdresseLiv' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.AdresseLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodePostalLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.CodePostalLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodePostalLiv' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.CodePostalLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VilleLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.VilleLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VilleLiv' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.VilleLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaysLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.PaysLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaysLiv' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.PaysLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactif() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.InactifColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactif' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.InactifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoginSite() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.LoginSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoginSite' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.LoginSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PwdSite() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.PwdSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PwdSite' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.PwdSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSite() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.IdSiteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdSite' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.IdSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteF() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.NCompteFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteF' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.NCompteFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteF() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.NActiviteFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteF' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.NActiviteFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.NCompteCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteC' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.NCompteCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.NActiviteCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteC' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.NActiviteCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTarif() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.nTarifColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nTarif' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.nTarifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Civilite() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.CiviliteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Civilite' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.CiviliteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Licence() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.LicenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Licence' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.LicenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.Critere1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere1' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.Critere1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.Critere2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere2' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.Critere2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere3() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.Critere3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere3' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.Critere3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere4() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.Critere4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere4' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.Critere4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NTVAIntraCom() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.NTVAIntraComColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTVAIntraCom' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.NTVAIntraComColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsExport() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.IsExportColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsExport' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.IsExportColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomFacturation() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.NomFacturationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NomFacturation' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.NomFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomLivraison() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.NomLivraisonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NomLivraison' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.NomLivraisonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EditionBLNonChiffre() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.EditionBLNonChiffreColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EditionBLNonChiffre' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.EditionBLNonChiffreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObservationLivraison() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.ObservationLivraisonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObservationLivraison' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.ObservationLivraisonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IndEscompteSpecifique() As Boolean
            Get
                Return CType(Me(Me.tableEntreprise1.IndEscompteSpecifiqueColumn),Boolean)
            End Get
            Set
                Me(Me.tableEntreprise1.IndEscompteSpecifiqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TauxEscompteSpecifique() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.TauxEscompteSpecifiqueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TauxEscompteSpecifique' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.TauxEscompteSpecifiqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DelaiValiditeEscompte() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.DelaiValiditeEscompteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DelaiValiditeEscompte' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.DelaiValiditeEscompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.nCommercialColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCommercial' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LitigeEnCours() As Boolean
            Get
                Return CType(Me(Me.tableEntreprise1.LitigeEnCoursColumn),Boolean)
            End Get
            Set
                Me(Me.tableEntreprise1.LitigeEnCoursColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnCoursMax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.EnCoursMaxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EnCoursMax' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.EnCoursMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBBanque() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.RIBBanqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBBanque' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.RIBBanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBGichet() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.RIBGichetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBGichet' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.RIBGichetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBCompte() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.RIBCompteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBCompte' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.RIBCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBCle() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.RIBCleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBCle' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.RIBCleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property siren() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise1.sirenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'siren' in table 'Entreprise1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise1.sirenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreationNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.DateCreationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreationNull()
            Me(Me.tableEntreprise1.DateCreationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateModificationNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.DateModificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateModificationNull()
            Me(Me.tableEntreprise1.DateModificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInfoMAJNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.InfoMAJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInfoMAJNull()
            Me(Me.tableEntreprise1.InfoMAJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeEntrepriseNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.TypeEntrepriseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeEntrepriseNull()
            Me(Me.tableEntreprise1.TypeEntrepriseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrganismeNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.nOrganismeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrganismeNull()
            Me(Me.tableEntreprise1.nOrganismeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnMaisonMereNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.nMaisonMereColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnMaisonMereNull()
            Me(Me.tableEntreprise1.nMaisonMereColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.DepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepNull()
            Me(Me.tableEntreprise1.DepColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.NomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomNull()
            Me(Me.tableEntreprise1.NomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.AdresseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseNull()
            Me(Me.tableEntreprise1.AdresseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodePostalNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.CodePostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodePostalNull()
            Me(Me.tableEntreprise1.CodePostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVilleNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.VilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVilleNull()
            Me(Me.tableEntreprise1.VilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaysNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.PaysColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaysNull()
            Me(Me.tableEntreprise1.PaysColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormeJuridiqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.FormeJuridiqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormeJuridiqueNull()
            Me(Me.tableEntreprise1.FormeJuridiqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeClientNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.TypeClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeClientNull()
            Me(Me.tableEntreprise1.TypeClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCibleCommercialNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.CibleCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCibleCommercialNull()
            Me(Me.tableEntreprise1.CibleCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModePaiementNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.ModePaiementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModePaiementNull()
            Me(Me.tableEntreprise1.ModePaiementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.EcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEcheanceNull()
            Me(Me.tableEntreprise1.EcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBanqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.BanqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBanqueNull()
            Me(Me.tableEntreprise1.BanqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.RIBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBNull()
            Me(Me.tableEntreprise1.RIBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.CAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANull()
            Me(Me.tableEntreprise1.CAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.EMailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMailNull()
            Me(Me.tableEntreprise1.EMailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSiteInternetNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.SiteInternetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSiteInternetNull()
            Me(Me.tableEntreprise1.SiteInternetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationsNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.ObservationsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationsNull()
            Me(Me.tableEntreprise1.ObservationsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinMoisNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.FinMoisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinMoisNull()
            Me(Me.tableEntreprise1.FinMoisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableEntreprise1.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableEntreprise1.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableEntreprise1.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.FournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFournisseurNull()
            Me(Me.tableEntreprise1.FournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableEntreprise1.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuffixePostalNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.SuffixePostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuffixePostalNull()
            Me(Me.tableEntreprise1.SuffixePostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.AdresseLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseLivNull()
            Me(Me.tableEntreprise1.AdresseLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodePostalLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.CodePostalLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodePostalLivNull()
            Me(Me.tableEntreprise1.CodePostalLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVilleLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.VilleLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVilleLivNull()
            Me(Me.tableEntreprise1.VilleLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaysLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.PaysLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaysLivNull()
            Me(Me.tableEntreprise1.PaysLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactifNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.InactifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactifNull()
            Me(Me.tableEntreprise1.InactifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoginSiteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.LoginSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoginSiteNull()
            Me(Me.tableEntreprise1.LoginSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPwdSiteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.PwdSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPwdSiteNull()
            Me(Me.tableEntreprise1.PwdSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdSiteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.IdSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdSiteNull()
            Me(Me.tableEntreprise1.IdSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteFNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.NCompteFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteFNull()
            Me(Me.tableEntreprise1.NCompteFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteFNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.NActiviteFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteFNull()
            Me(Me.tableEntreprise1.NActiviteFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteCNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.NCompteCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteCNull()
            Me(Me.tableEntreprise1.NCompteCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteCNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.NActiviteCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteCNull()
            Me(Me.tableEntreprise1.NActiviteCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnTarifNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.nTarifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnTarifNull()
            Me(Me.tableEntreprise1.nTarifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiviliteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.CiviliteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiviliteNull()
            Me(Me.tableEntreprise1.CiviliteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableEntreprise1.LogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLicenceNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.LicenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLicenceNull()
            Me(Me.tableEntreprise1.LicenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere1Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.Critere1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere1Null()
            Me(Me.tableEntreprise1.Critere1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere2Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.Critere2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere2Null()
            Me(Me.tableEntreprise1.Critere2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere3Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.Critere3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere3Null()
            Me(Me.tableEntreprise1.Critere3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere4Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.Critere4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere4Null()
            Me(Me.tableEntreprise1.Critere4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNTVAIntraComNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.NTVAIntraComColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNTVAIntraComNull()
            Me(Me.tableEntreprise1.NTVAIntraComColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsExportNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.IsExportColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsExportNull()
            Me(Me.tableEntreprise1.IsExportColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomFacturationNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.NomFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomFacturationNull()
            Me(Me.tableEntreprise1.NomFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomLivraisonNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.NomLivraisonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomLivraisonNull()
            Me(Me.tableEntreprise1.NomLivraisonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEditionBLNonChiffreNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.EditionBLNonChiffreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEditionBLNonChiffreNull()
            Me(Me.tableEntreprise1.EditionBLNonChiffreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationLivraisonNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.ObservationLivraisonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationLivraisonNull()
            Me(Me.tableEntreprise1.ObservationLivraisonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTauxEscompteSpecifiqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.TauxEscompteSpecifiqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTauxEscompteSpecifiqueNull()
            Me(Me.tableEntreprise1.TauxEscompteSpecifiqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelaiValiditeEscompteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.DelaiValiditeEscompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelaiValiditeEscompteNull()
            Me(Me.tableEntreprise1.DelaiValiditeEscompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableEntreprise1.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnCoursMaxNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.EnCoursMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnCoursMaxNull()
            Me(Me.tableEntreprise1.EnCoursMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBBanqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.RIBBanqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBBanqueNull()
            Me(Me.tableEntreprise1.RIBBanqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBGichetNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.RIBGichetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBGichetNull()
            Me(Me.tableEntreprise1.RIBGichetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBCompteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.RIBCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBCompteNull()
            Me(Me.tableEntreprise1.RIBCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBCleNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.RIBCleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBCleNull()
            Me(Me.tableEntreprise1.RIBCleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssirenNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise1.sirenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsirenNull()
            Me(Me.tableEntreprise1.sirenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AReglementRow
        Inherits Global.System.Data.DataRow
        
        Private tableAReglement As AReglementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAReglement = CType(Me.Table,AReglementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nReglement() As Decimal
            Get
                Return CType(Me(Me.tableAReglement.nReglementColumn),Decimal)
            End Get
            Set
                Me(Me.tableAReglement.nReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateReglement() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.DateReglementColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateReglement' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.DateReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateDepot() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.DateDepotColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateDepot' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.DateDepotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nEntreprise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.nEntrepriseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nEntreprise' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.nEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nMode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.nModeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nMode' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.nModeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCheque() As String
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.nChequeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCheque' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.nChequeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModeReglement() As String
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.ModeReglementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModeReglement' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.ModeReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.MontantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Montant' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Perte() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.PerteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Perte' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.PerteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Profit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.ProfitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Profit' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.ProfitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depose() As Boolean
            Get
                Return CType(Me(Me.tableAReglement.DeposeColumn),Boolean)
            End Get
            Set
                Me(Me.tableAReglement.DeposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableAReglement.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableAReglement.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BanqueClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableAReglement.BanqueClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BanqueClient' in table 'AReglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement.BanqueClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateReglementNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.DateReglementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateReglementNull()
            Me(Me.tableAReglement.DateReglementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateDepotNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.DateDepotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateDepotNull()
            Me(Me.tableAReglement.DateDepotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnEntrepriseNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.nEntrepriseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnEntrepriseNull()
            Me(Me.tableAReglement.nEntrepriseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnModeNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.nModeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnModeNull()
            Me(Me.tableAReglement.nModeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnChequeNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.nChequeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnChequeNull()
            Me(Me.tableAReglement.nChequeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeReglementNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.ModeReglementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeReglementNull()
            Me(Me.tableAReglement.ModeReglementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableAReglement.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableAReglement.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPerteNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.PerteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPerteNull()
            Me(Me.tableAReglement.PerteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProfitNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.ProfitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProfitNull()
            Me(Me.tableAReglement.ProfitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBanqueClientNull() As Boolean
            Return Me.IsNull(Me.tableAReglement.BanqueClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBanqueClientNull()
            Me(Me.tableAReglement.BanqueClientColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PersonneRow
        Inherits Global.System.Data.DataRow
        
        Private tablePersonne As PersonneDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePersonne = CType(Me.Table,PersonneDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPersonne() As Decimal
            Get
                Return CType(Me(Me.tablePersonne.nPersonneColumn),Decimal)
            End Get
            Set
                Me(Me.tablePersonne.nPersonneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreation() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.DateCreationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreation' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.DateCreationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateModification() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.DateModificationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateModification' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.DateModificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InfoMAJ() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.InfoMAJColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InfoMAJ' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.InfoMAJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypePersonne() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.TypePersonneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypePersonne' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.TypePersonneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dep() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.DepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dep' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.DepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.NomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nom' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.NomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prenom() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.PrenomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prenom' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.PrenomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nEntreprise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.nEntrepriseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nEntreprise' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.nEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adresse() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.AdresseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Adresse' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.AdresseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodePostal() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.CodePostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodePostal' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.CodePostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ville() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.VilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ville' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.VilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pays() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.PaysColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pays' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.PaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomJeuneFille() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.NomJeuneFilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NomJeuneFille' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.NomJeuneFilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeClient() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.TypeClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeClient' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.TypeClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fonction() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.FonctionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fonction' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.FonctionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Campagne() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.CampagneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Campagne' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.CampagneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatedeNaissance() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.DatedeNaissanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatedeNaissance' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.DatedeNaissanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LieuNaissance() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.LieuNaissanceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LieuNaissance' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.LieuNaissanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMail() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.EMailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMail' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.EMailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adressehttp() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.AdressehttpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Adressehttp' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.AdressehttpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observations() As String
            Get
                Try 
                    Return CType(Me(Me.tablePersonne.ObservationsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observations' in table 'Personne' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePersonne.ObservationsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NpAfficher() As Boolean
            Get
                Return CType(Me(Me.tablePersonne.NpAfficherColumn),Boolean)
            End Get
            Set
                Me(Me.tablePersonne.NpAfficherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NpRecevoirInfo() As Boolean
            Get
                Return CType(Me(Me.tablePersonne.NpRecevoirInfoColumn),Boolean)
            End Get
            Set
                Me(Me.tablePersonne.NpRecevoirInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreationNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.DateCreationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreationNull()
            Me(Me.tablePersonne.DateCreationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateModificationNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.DateModificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateModificationNull()
            Me(Me.tablePersonne.DateModificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInfoMAJNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.InfoMAJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInfoMAJNull()
            Me(Me.tablePersonne.InfoMAJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypePersonneNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.TypePersonneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypePersonneNull()
            Me(Me.tablePersonne.TypePersonneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.DepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepNull()
            Me(Me.tablePersonne.DepColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.NomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomNull()
            Me(Me.tablePersonne.NomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrenomNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.PrenomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrenomNull()
            Me(Me.tablePersonne.PrenomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnEntrepriseNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.nEntrepriseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnEntrepriseNull()
            Me(Me.tablePersonne.nEntrepriseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.AdresseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseNull()
            Me(Me.tablePersonne.AdresseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodePostalNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.CodePostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodePostalNull()
            Me(Me.tablePersonne.CodePostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVilleNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.VilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVilleNull()
            Me(Me.tablePersonne.VilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaysNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.PaysColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaysNull()
            Me(Me.tablePersonne.PaysColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomJeuneFilleNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.NomJeuneFilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomJeuneFilleNull()
            Me(Me.tablePersonne.NomJeuneFilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeClientNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.TypeClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeClientNull()
            Me(Me.tablePersonne.TypeClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFonctionNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.FonctionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFonctionNull()
            Me(Me.tablePersonne.FonctionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCampagneNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.CampagneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCampagneNull()
            Me(Me.tablePersonne.CampagneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatedeNaissanceNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.DatedeNaissanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatedeNaissanceNull()
            Me(Me.tablePersonne.DatedeNaissanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLieuNaissanceNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.LieuNaissanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLieuNaissanceNull()
            Me(Me.tablePersonne.LieuNaissanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.EMailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMailNull()
            Me(Me.tablePersonne.EMailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdressehttpNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.AdressehttpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdressehttpNull()
            Me(Me.tablePersonne.AdressehttpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationsNull() As Boolean
            Return Me.IsNull(Me.tablePersonne.ObservationsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationsNull()
            Me(Me.tablePersonne.ObservationsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProduitRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduit As ProduitDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduit = CType(Me.Table,ProduitDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Return CType(Me(Me.tableProduit.CodeProduitColumn),String)
            End Get
            Set
                Me(Me.tableProduit.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibelleLong() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.LibelleLongColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibelleLong' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.LibelleLongColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixAHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixAHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixAHT' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixAHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixATTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixATTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixATTC' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixATTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixVHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVHT' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixVHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixVTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVTTC' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixVTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPrixHT() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsPrixHTColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsPrixHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Unite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Unite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitAchat() As Boolean
            Get
                Return CType(Me(Me.tableProduit.ProduitAchatColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.ProduitAchatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitVente() As Boolean
            Get
                Return CType(Me(Me.tableProduit.ProduitVenteColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.ProduitVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteV() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteV() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille1' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille3() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille3' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1U2Independant() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.U1U2IndependantColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U1U2Independant' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.U1U2IndependantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1xU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.U1xU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U1xU2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.U1xU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeBarre() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CodeBarreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeBarre' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CodeBarreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactif() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.InactifColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactif' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.InactifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CoefU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefU2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CoefU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeFacturation() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TypeFacturationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeFacturation' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TypeFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefAV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CoefAVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefAV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CoefAVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitCompose() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ProduitComposeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProduitCompose' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ProduitComposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Image() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ImageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Image' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GestionStock() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.GestionStockColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GestionStock' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.GestionStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefFournisseur() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.RefFournisseurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefFournisseur' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.RefFournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSortieImpr() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.IsSortieImprColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsSortieImpr' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.IsSortieImprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Conditionnement() As Long
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ConditionnementColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Conditionnement' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ConditionnementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property poidsUnitaire() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.poidsUnitaireColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'poidsUnitaire' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.poidsUnitaireColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qteConditionnement() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.qteConditionnementColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qteConditionnement' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.qteConditionnementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableProduit.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableProduit.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleLongNull() As Boolean
            Return Me.IsNull(Me.tableProduit.LibelleLongColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleLongNull()
            Me(Me.tableProduit.LibelleLongColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableProduit.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableProduit.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixAHTNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixAHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixAHTNull()
            Me(Me.tableProduit.PrixAHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixATTCNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixATTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixATTCNull()
            Me(Me.tableProduit.PrixATTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVHTNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixVHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVHTNull()
            Me(Me.tableProduit.PrixVHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVTTCNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixVTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVTTCNull()
            Me(Me.tableProduit.PrixVTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableProduit.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableProduit.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteANull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteANull()
            Me(Me.tableProduit.NCompteAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteANull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteANull()
            Me(Me.tableProduit.NActiviteAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteVNull()
            Me(Me.tableProduit.NCompteVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteVNull()
            Me(Me.tableProduit.NActiviteVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille1Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille1Null()
            Me(Me.tableProduit.Famille1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille2Null()
            Me(Me.tableProduit.Famille2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille3Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille3Null()
            Me(Me.tableProduit.Famille3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1U2IndependantNull() As Boolean
            Return Me.IsNull(Me.tableProduit.U1U2IndependantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1U2IndependantNull()
            Me(Me.tableProduit.U1U2IndependantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1xU2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.U1xU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1xU2Null()
            Me(Me.tableProduit.U1xU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeBarreNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CodeBarreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeBarreNull()
            Me(Me.tableProduit.CodeBarreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactifNull() As Boolean
            Return Me.IsNull(Me.tableProduit.InactifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactifNull()
            Me(Me.tableProduit.InactifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefU2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.CoefU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefU2Null()
            Me(Me.tableProduit.CoefU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeFacturationNull() As Boolean
            Return Me.IsNull(Me.tableProduit.TypeFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeFacturationNull()
            Me(Me.tableProduit.TypeFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefAVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CoefAVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefAVNull()
            Me(Me.tableProduit.CoefAVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProduitComposeNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ProduitComposeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProduitComposeNull()
            Me(Me.tableProduit.ProduitComposeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImageNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImageNull()
            Me(Me.tableProduit.ImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGestionStockNull() As Boolean
            Return Me.IsNull(Me.tableProduit.GestionStockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGestionStockNull()
            Me(Me.tableProduit.GestionStockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableProduit.RefFournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefFournisseurNull()
            Me(Me.tableProduit.RefFournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsSortieImprNull() As Boolean
            Return Me.IsNull(Me.tableProduit.IsSortieImprColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsSortieImprNull()
            Me(Me.tableProduit.IsSortieImprColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConditionnementNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ConditionnementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConditionnementNull()
            Me(Me.tableProduit.ConditionnementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspoidsUnitaireNull() As Boolean
            Return Me.IsNull(Me.tableProduit.poidsUnitaireColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpoidsUnitaireNull()
            Me(Me.tableProduit.poidsUnitaireColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsqteConditionnementNull() As Boolean
            Return Me.IsNull(Me.tableProduit.qteConditionnementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetqteConditionnementNull()
            Me(Me.tableProduit.qteConditionnementColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TVARow
        Inherits Global.System.Data.DataRow
        
        Private tableTVA As TVADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTVA = CType(Me.Table,TVADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTVA() As Decimal
            Get
                Return CType(Me(Me.tableTVA.nTVAColumn),Decimal)
            End Get
            Set
                Me(Me.tableTVA.nTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'TVA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TLibelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TLibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TLibelle' in table 'TVA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TLibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTaux() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TTauxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTaux' in table 'TVA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TTauxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TCpt' in table 'TVA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TJournal() As String
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TJournalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TJournal' in table 'TVA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TJournalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableTVA.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableTVA.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTLibelleNull() As Boolean
            Return Me.IsNull(Me.tableTVA.TLibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTLibelleNull()
            Me(Me.tableTVA.TLibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTauxNull() As Boolean
            Return Me.IsNull(Me.tableTVA.TTauxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTauxNull()
            Me(Me.tableTVA.TTauxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCptNull() As Boolean
            Return Me.IsNull(Me.tableTVA.TCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCptNull()
            Me(Me.tableTVA.TCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTJournalNull() As Boolean
            Return Me.IsNull(Me.tableTVA.TJournalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTJournalNull()
            Me(Me.tableTVA.TJournalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VBonCommandeRow
        Inherits Global.System.Data.DataRow
        
        Private tableVBonCommande As VBonCommandeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVBonCommande = CType(Me.Table,VBonCommandeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tableVBonCommande.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVBonCommande.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Origine' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nOrigine' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nClient' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdresseFacture' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPrescripteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nPrescripteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPrescripteur' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPayeur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nPayeurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPayeur' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nPayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nContact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nContactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nContact' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCommercial' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Secteur' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationPrescripteur() As Boolean
            Get
                Return CType(Me(Me.tableVBonCommande.FacturationPrescripteurColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonCommande.FacturationPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationClient() As Boolean
            Get
                Return CType(Me(Me.tableVBonCommande.FacturationClientColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonCommande.FacturationClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFacture' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFacture' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tableVBonCommande.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonCommande.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableVBonCommande.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonCommande.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExportCompta' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEcheance' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DateRelance1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance1' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DateRelance1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DateRelance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance2' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DateRelance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.MontantHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantHT' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.MontantHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.MontantTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTVA' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.MontantTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTTC' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPreFacturation() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nPreFacturationColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPreFacturation' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nPreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatePreFacturation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DatePreFacturationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatePreFacturation' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DatePreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FacturationTTC' in table 'VBonCommande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tableVBonCommande.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tableVBonCommande.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tableVBonCommande.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tableVBonCommande.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nPrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPrescripteurNull()
            Me(Me.tableVBonCommande.nPrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPayeurNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nPayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPayeurNull()
            Me(Me.tableVBonCommande.nPayeurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnContactNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnContactNull()
            Me(Me.tableVBonCommande.nContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableVBonCommande.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tableVBonCommande.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableVBonCommande.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableVBonCommande.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableVBonCommande.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tableVBonCommande.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableVBonCommande.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance1Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DateRelance1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance1Null()
            Me(Me.tableVBonCommande.DateRelance1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance2Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DateRelance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance2Null()
            Me(Me.tableVBonCommande.DateRelance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVBonCommande.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.MontantHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantHTNull()
            Me(Me.tableVBonCommande.MontantHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.MontantTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTVANull()
            Me(Me.tableVBonCommande.MontantTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tableVBonCommande.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nPreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPreFacturationNull()
            Me(Me.tableVBonCommande.nPreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatePreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DatePreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatePreFacturationNull()
            Me(Me.tableVBonCommande.DatePreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableVBonCommande.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VBonCommande_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVBonCommande_Detail As VBonCommande_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVBonCommande_Detail = CType(Me.Table,VBonCommande_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableVBonCommande_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nDevis' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLigne' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLot' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NbParution' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite2' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUHT' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTva' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTVA' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTC' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneHT' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTVA' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTTC' in table 'VBonCommande_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableVBonCommande_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableVBonCommande_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableVBonCommande_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableVBonCommande_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableVBonCommande_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableVBonCommande_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableVBonCommande_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableVBonCommande_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableVBonCommande_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableVBonCommande_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableVBonCommande_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableVBonCommande_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableVBonCommande_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableVBonCommande_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableVBonCommande_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVBonCommande_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableVBonCommande_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableVBonCommande_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableVBonCommande_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VBonLivraisonRow
        Inherits Global.System.Data.DataRow
        
        Private tableVBonLivraison As VBonLivraisonDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVBonLivraison = CType(Me.Table,VBonLivraisonDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tableVBonLivraison.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVBonLivraison.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Origine' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nOrigine' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nClient' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdresseFacture' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPrescripteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nPrescripteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPrescripteur' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPayeur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nPayeurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPayeur' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nPayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nContact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nContactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nContact' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCommercial' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Secteur' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationPrescripteur() As Boolean
            Get
                Return CType(Me(Me.tableVBonLivraison.FacturationPrescripteurColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonLivraison.FacturationPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationClient() As Boolean
            Get
                Return CType(Me(Me.tableVBonLivraison.FacturationClientColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonLivraison.FacturationClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFacture' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFacture' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tableVBonLivraison.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonLivraison.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableVBonLivraison.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonLivraison.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExportCompta' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEcheance' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DateRelance1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance1' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DateRelance1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DateRelance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance2' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DateRelance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.MontantHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantHT' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.MontantHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.MontantTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTVA' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.MontantTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTTC' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPreFacturation() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nPreFacturationColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPreFacturation' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nPreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatePreFacturation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DatePreFacturationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatePreFacturation' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DatePreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FacturationTTC' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonCdeOrigine() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.BonCdeOrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonCdeOrigine' in table 'VBonLivraison' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.BonCdeOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tableVBonLivraison.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tableVBonLivraison.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tableVBonLivraison.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tableVBonLivraison.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nPrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPrescripteurNull()
            Me(Me.tableVBonLivraison.nPrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPayeurNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nPayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPayeurNull()
            Me(Me.tableVBonLivraison.nPayeurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnContactNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnContactNull()
            Me(Me.tableVBonLivraison.nContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableVBonLivraison.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tableVBonLivraison.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableVBonLivraison.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableVBonLivraison.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableVBonLivraison.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tableVBonLivraison.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableVBonLivraison.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance1Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DateRelance1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance1Null()
            Me(Me.tableVBonLivraison.DateRelance1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance2Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DateRelance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance2Null()
            Me(Me.tableVBonLivraison.DateRelance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVBonLivraison.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.MontantHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantHTNull()
            Me(Me.tableVBonLivraison.MontantHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.MontantTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTVANull()
            Me(Me.tableVBonLivraison.MontantTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tableVBonLivraison.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nPreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPreFacturationNull()
            Me(Me.tableVBonLivraison.nPreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatePreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DatePreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatePreFacturationNull()
            Me(Me.tableVBonLivraison.DatePreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableVBonLivraison.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonCdeOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.BonCdeOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonCdeOrigineNull()
            Me(Me.tableVBonLivraison.BonCdeOrigineColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VBonLivraison_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVBonLivraison_Detail As VBonLivraison_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVBonLivraison_Detail = CType(Me.Table,VBonLivraison_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableVBonLivraison_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nDevis' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLigne' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLot' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NbParution' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite2' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUHT' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTva' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTVA' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTC' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneHT' in table 'VBonLivraison_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTVA' in table 'VBonLivraison_Detail' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTTC' in table 'VBonLivraison_Detail' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableVBonLivraison_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableVBonLivraison_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableVBonLivraison_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableVBonLivraison_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableVBonLivraison_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableVBonLivraison_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableVBonLivraison_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableVBonLivraison_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableVBonLivraison_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableVBonLivraison_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableVBonLivraison_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableVBonLivraison_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableVBonLivraison_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableVBonLivraison_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableVBonLivraison_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVBonLivraison_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableVBonLivraison_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableVBonLivraison_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableVBonLivraison_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VDevisRow
        Inherits Global.System.Data.DataRow
        
        Private tableVDevis As VDevisDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVDevis = CType(Me.Table,VDevisDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tableVDevis.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVDevis.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Origine' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nOrigine' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nClient' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdresseFacture' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPrescripteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nPrescripteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPrescripteur' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPayeur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nPayeurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPayeur' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nPayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nContact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nContactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nContact' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCommercial' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Secteur' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationPrescripteur() As Boolean
            Get
                Return CType(Me(Me.tableVDevis.FacturationPrescripteurColumn),Boolean)
            End Get
            Set
                Me(Me.tableVDevis.FacturationPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationClient() As Boolean
            Get
                Return CType(Me(Me.tableVDevis.FacturationClientColumn),Boolean)
            End Get
            Set
                Me(Me.tableVDevis.FacturationClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFacture' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFacture' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tableVDevis.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tableVDevis.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableVDevis.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableVDevis.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExportCompta' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEcheance' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DateRelance1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance1' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DateRelance1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DateRelance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance2' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DateRelance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.MontantHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantHT' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.MontantHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.MontantTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTVA' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.MontantTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTTC' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPreFacturation() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nPreFacturationColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPreFacturation' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nPreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatePreFacturation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DatePreFacturationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatePreFacturation' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DatePreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FacturationTTC' in table 'VDevis' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tableVDevis.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tableVDevis.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tableVDevis.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tableVDevis.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nPrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPrescripteurNull()
            Me(Me.tableVDevis.nPrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPayeurNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nPayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPayeurNull()
            Me(Me.tableVDevis.nPayeurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnContactNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnContactNull()
            Me(Me.tableVDevis.nContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableVDevis.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tableVDevis.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableVDevis.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableVDevis.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableVDevis.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tableVDevis.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableVDevis.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance1Null() As Boolean
            Return Me.IsNull(Me.tableVDevis.DateRelance1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance1Null()
            Me(Me.tableVDevis.DateRelance1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance2Null() As Boolean
            Return Me.IsNull(Me.tableVDevis.DateRelance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance2Null()
            Me(Me.tableVDevis.DateRelance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVDevis.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantHTNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.MontantHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantHTNull()
            Me(Me.tableVDevis.MontantHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTVANull() As Boolean
            Return Me.IsNull(Me.tableVDevis.MontantTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTVANull()
            Me(Me.tableVDevis.MontantTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tableVDevis.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nPreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPreFacturationNull()
            Me(Me.tableVDevis.nPreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatePreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.DatePreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatePreFacturationNull()
            Me(Me.tableVDevis.DatePreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableVDevis.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VDevis_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVDevis_Detail As VDevis_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVDevis_Detail = CType(Me.Table,VDevis_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableVDevis_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVDevis_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nDevis' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLigne' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLot' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NbParution' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite2' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUHT' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTva' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTVA' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTC' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneHT' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTVA' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTTC' in table 'VDevis_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableVDevis_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableVDevis_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableVDevis_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableVDevis_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableVDevis_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableVDevis_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableVDevis_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableVDevis_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableVDevis_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableVDevis_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableVDevis_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableVDevis_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableVDevis_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableVDevis_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableVDevis_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVDevis_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableVDevis_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableVDevis_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableVDevis_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VFacture_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVFacture_Detail As VFacture_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVFacture_Detail = CType(Me.Table,VFacture_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableVFacture_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVFacture_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nDevis' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLigne' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLot' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NbParution' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite2' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUHT' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTva' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTVA' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTC' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneHT' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTVA' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTTC' in table 'VFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableVFacture_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableVFacture_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableVFacture_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableVFacture_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableVFacture_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableVFacture_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableVFacture_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableVFacture_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableVFacture_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableVFacture_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableVFacture_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableVFacture_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableVFacture_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableVFacture_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableVFacture_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVFacture_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableVFacture_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableVFacture_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableVFacture_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TelephoneRow
        Inherits Global.System.Data.DataRow
        
        Private tableTelephone As TelephoneDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTelephone = CType(Me.Table,TelephoneDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPersonne() As Decimal
            Get
                Return CType(Me(Me.tableTelephone.nPersonneColumn),Decimal)
            End Get
            Set
                Me(Me.tableTelephone.nPersonneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Return CType(Me(Me.tableTelephone.TypeColumn),String)
            End Get
            Set
                Me(Me.tableTelephone.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero() As String
            Get
                Try 
                    Return CType(Me(Me.tableTelephone.NumeroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Numero' in table 'Telephone' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTelephone.NumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroNull() As Boolean
            Return Me.IsNull(Me.tableTelephone.NumeroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroNull()
            Me(Me.tableTelephone.NumeroColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TelephoneEntrepriseRow
        Inherits Global.System.Data.DataRow
        
        Private tableTelephoneEntreprise As TelephoneEntrepriseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTelephoneEntreprise = CType(Me.Table,TelephoneEntrepriseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nEntreprise() As Decimal
            Get
                Return CType(Me(Me.tableTelephoneEntreprise.nEntrepriseColumn),Decimal)
            End Get
            Set
                Me(Me.tableTelephoneEntreprise.nEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Return CType(Me(Me.tableTelephoneEntreprise.TypeColumn),String)
            End Get
            Set
                Me(Me.tableTelephoneEntreprise.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero() As String
            Get
                Try 
                    Return CType(Me(Me.tableTelephoneEntreprise.NumeroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Numero' in table 'TelephoneEntreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTelephoneEntreprise.NumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroNull() As Boolean
            Return Me.IsNull(Me.tableTelephoneEntreprise.NumeroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroNull()
            Me(Me.tableTelephoneEntreprise.NumeroColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ABonReceptionRow
        Inherits Global.System.Data.DataRow
        
        Private tableABonReception As ABonReceptionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableABonReception = CType(Me.Table,ABonReceptionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tableABonReception.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableABonReception.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Origine' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nOrigine' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nClient' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdresseFacture' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPrescripteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.nPrescripteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPrescripteur' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.nPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPayeur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.nPayeurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPayeur' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.nPayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nContact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.nContactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nContact' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.nContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCommercial' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Secteur' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationPrescripteur() As Boolean
            Get
                Return CType(Me(Me.tableABonReception.FacturationPrescripteurColumn),Boolean)
            End Get
            Set
                Me(Me.tableABonReception.FacturationPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationClient() As Boolean
            Get
                Return CType(Me(Me.tableABonReception.FacturationClientColumn),Boolean)
            End Get
            Set
                Me(Me.tableABonReception.FacturationClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFacture' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFacture' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tableABonReception.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tableABonReception.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableABonReception.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableABonReception.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExportCompta' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEcheance' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.DateRelance1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance1' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.DateRelance1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.DateRelance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance2' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.DateRelance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.MontantHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantHT' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.MontantHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.MontantTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTVA' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.MontantTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTTC' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPreFacturation() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.nPreFacturationColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPreFacturation' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.nPreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatePreFacturation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.DatePreFacturationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatePreFacturation' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.DatePreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableABonReception.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FacturationTTC' in table 'ABonReception' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tableABonReception.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tableABonReception.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tableABonReception.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tableABonReception.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.nPrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPrescripteurNull()
            Me(Me.tableABonReception.nPrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPayeurNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.nPayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPayeurNull()
            Me(Me.tableABonReception.nPayeurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnContactNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.nContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnContactNull()
            Me(Me.tableABonReception.nContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableABonReception.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tableABonReception.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableABonReception.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableABonReception.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableABonReception.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tableABonReception.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableABonReception.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance1Null() As Boolean
            Return Me.IsNull(Me.tableABonReception.DateRelance1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance1Null()
            Me(Me.tableABonReception.DateRelance1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance2Null() As Boolean
            Return Me.IsNull(Me.tableABonReception.DateRelance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance2Null()
            Me(Me.tableABonReception.DateRelance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableABonReception.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantHTNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.MontantHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantHTNull()
            Me(Me.tableABonReception.MontantHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTVANull() As Boolean
            Return Me.IsNull(Me.tableABonReception.MontantTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTVANull()
            Me(Me.tableABonReception.MontantTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tableABonReception.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.nPreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPreFacturationNull()
            Me(Me.tableABonReception.nPreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatePreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.DatePreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatePreFacturationNull()
            Me(Me.tableABonReception.DatePreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableABonReception.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableABonReception.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ABonReception_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableABonReception_Detail As ABonReception_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableABonReception_Detail = CType(Me.Table,ABonReception_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableABonReception_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableABonReception_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nDevis' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLigne' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLot' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NbParution' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite2' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUHT' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTva' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTVA' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTC' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneHT' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTVA' in table 'ABonReception_Detail' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTTC' in table 'ABonReception_Detail' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTCVente() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.PrixUTTCVenteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTCVente' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.PrixUTTCVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefAV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.CoefAVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefAV' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.CoefAVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTCVente() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.MontantLigneTTCVenteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTTCVente' in table 'ABonReception_Detail' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.MontantLigneTTCVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTCVenteTheo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.PrixUTTCVenteTheoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTCVenteTheo' in table 'ABonReception_Detail' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.PrixUTTCVenteTheoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixAHT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.PrixAHT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixAHT1' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.PrixAHT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefAV1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.CoefAV1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefAV1' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.CoefAV1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVTTC1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.PrixVTTC1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVTTC1' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.PrixVTTC1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVTTCTheo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.PrixVTTCTheoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVTTCTheo' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.PrixVTTCTheoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MargePrCt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.MargePrCtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MargePrCt' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.MargePrCtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MargeEuro() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.MargeEuroColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MargeEuro' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.MargeEuroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVTTCTheo1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.PrixVTTCTheo1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVTTCTheo1' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.PrixVTTCTheo1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MargePrCt1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.MargePrCt1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MargePrCt1' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.MargePrCt1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MargeEuro1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableABonReception_Detail.MargeEuro1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MargeEuro1' in table 'ABonReception_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableABonReception_Detail.MargeEuro1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableABonReception_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableABonReception_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableABonReception_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableABonReception_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableABonReception_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableABonReception_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableABonReception_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableABonReception_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableABonReception_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableABonReception_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableABonReception_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableABonReception_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableABonReception_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableABonReception_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableABonReception_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableABonReception_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableABonReception_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableABonReception_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableABonReception_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCVenteNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.PrixUTTCVenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCVenteNull()
            Me(Me.tableABonReception_Detail.PrixUTTCVenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefAVNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.CoefAVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefAVNull()
            Me(Me.tableABonReception_Detail.CoefAVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCVenteNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.MontantLigneTTCVenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCVenteNull()
            Me(Me.tableABonReception_Detail.MontantLigneTTCVenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCVenteTheoNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.PrixUTTCVenteTheoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCVenteTheoNull()
            Me(Me.tableABonReception_Detail.PrixUTTCVenteTheoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixAHT1Null() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.PrixAHT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixAHT1Null()
            Me(Me.tableABonReception_Detail.PrixAHT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefAV1Null() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.CoefAV1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefAV1Null()
            Me(Me.tableABonReception_Detail.CoefAV1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVTTC1Null() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.PrixVTTC1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVTTC1Null()
            Me(Me.tableABonReception_Detail.PrixVTTC1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVTTCTheoNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.PrixVTTCTheoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVTTCTheoNull()
            Me(Me.tableABonReception_Detail.PrixVTTCTheoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMargePrCtNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.MargePrCtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMargePrCtNull()
            Me(Me.tableABonReception_Detail.MargePrCtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMargeEuroNull() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.MargeEuroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMargeEuroNull()
            Me(Me.tableABonReception_Detail.MargeEuroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVTTCTheo1Null() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.PrixVTTCTheo1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVTTCTheo1Null()
            Me(Me.tableABonReception_Detail.PrixVTTCTheo1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMargePrCt1Null() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.MargePrCt1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMargePrCt1Null()
            Me(Me.tableABonReception_Detail.MargePrCt1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMargeEuro1Null() As Boolean
            Return Me.IsNull(Me.tableABonReception_Detail.MargeEuro1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMargeEuro1Null()
            Me(Me.tableABonReception_Detail.MargeEuro1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AFactureRow
        Inherits Global.System.Data.DataRow
        
        Private tableAFacture As AFactureDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAFacture = CType(Me.Table,AFactureDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tableAFacture.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableAFacture.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Origine' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nOrigine' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nClient' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdresseFacture' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPrescripteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.nPrescripteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPrescripteur' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.nPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPayeur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.nPayeurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPayeur' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.nPayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nContact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.nContactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nContact' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.nContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCommercial' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Secteur' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationPrescripteur() As Boolean
            Get
                Return CType(Me(Me.tableAFacture.FacturationPrescripteurColumn),Boolean)
            End Get
            Set
                Me(Me.tableAFacture.FacturationPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationClient() As Boolean
            Get
                Return CType(Me(Me.tableAFacture.FacturationClientColumn),Boolean)
            End Get
            Set
                Me(Me.tableAFacture.FacturationClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFacture' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFacture' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tableAFacture.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tableAFacture.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableAFacture.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableAFacture.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExportCompta' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEcheance' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.DateRelance1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance1' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.DateRelance1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.DateRelance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance2' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.DateRelance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.MontantHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantHT' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.MontantHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.MontantTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTVA' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.MontantTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTTC' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPreFacturation() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.nPreFacturationColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPreFacturation' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.nPreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatePreFacturation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.DatePreFacturationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatePreFacturation' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.DatePreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAFacture.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FacturationTTC' in table 'AFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tableAFacture.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tableAFacture.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tableAFacture.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tableAFacture.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.nPrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPrescripteurNull()
            Me(Me.tableAFacture.nPrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPayeurNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.nPayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPayeurNull()
            Me(Me.tableAFacture.nPayeurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnContactNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.nContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnContactNull()
            Me(Me.tableAFacture.nContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableAFacture.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tableAFacture.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableAFacture.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableAFacture.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableAFacture.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tableAFacture.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableAFacture.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance1Null() As Boolean
            Return Me.IsNull(Me.tableAFacture.DateRelance1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance1Null()
            Me(Me.tableAFacture.DateRelance1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance2Null() As Boolean
            Return Me.IsNull(Me.tableAFacture.DateRelance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance2Null()
            Me(Me.tableAFacture.DateRelance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableAFacture.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantHTNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.MontantHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantHTNull()
            Me(Me.tableAFacture.MontantHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTVANull() As Boolean
            Return Me.IsNull(Me.tableAFacture.MontantTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTVANull()
            Me(Me.tableAFacture.MontantTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tableAFacture.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.nPreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPreFacturationNull()
            Me(Me.tableAFacture.nPreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatePreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.DatePreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatePreFacturationNull()
            Me(Me.tableAFacture.DatePreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableAFacture.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableAFacture.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AFacture_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableAFacture_Detail As AFacture_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAFacture_Detail = CType(Me.Table,AFacture_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableAFacture_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableAFacture_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nDevis' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nLigne' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLot' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NbParution' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite1' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibUnite2' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUHT' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTva' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTVA' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTC' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneHT' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTVA' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTTC' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTCVente() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.PrixUTTCVenteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTCVente' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.PrixUTTCVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefAV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.CoefAVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefAV' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.CoefAVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTCVente() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.MontantLigneTTCVenteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantLigneTTCVente' in table 'AFacture_Detail' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.MontantLigneTTCVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTCVenteTheo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.PrixUTTCVenteTheoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixUTTCVenteTheo' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.PrixUTTCVenteTheoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixAHT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.PrixAHT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixAHT1' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.PrixAHT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefAV1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.CoefAV1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefAV1' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.CoefAV1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVTTC1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAFacture_Detail.PrixVTTC1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVTTC1' in table 'AFacture_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAFacture_Detail.PrixVTTC1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableAFacture_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableAFacture_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableAFacture_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableAFacture_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableAFacture_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableAFacture_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableAFacture_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableAFacture_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableAFacture_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableAFacture_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableAFacture_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableAFacture_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableAFacture_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableAFacture_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableAFacture_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableAFacture_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableAFacture_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableAFacture_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableAFacture_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCVenteNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.PrixUTTCVenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCVenteNull()
            Me(Me.tableAFacture_Detail.PrixUTTCVenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefAVNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.CoefAVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefAVNull()
            Me(Me.tableAFacture_Detail.CoefAVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCVenteNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.MontantLigneTTCVenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCVenteNull()
            Me(Me.tableAFacture_Detail.MontantLigneTTCVenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCVenteTheoNull() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.PrixUTTCVenteTheoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCVenteTheoNull()
            Me(Me.tableAFacture_Detail.PrixUTTCVenteTheoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixAHT1Null() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.PrixAHT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixAHT1Null()
            Me(Me.tableAFacture_Detail.PrixAHT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefAV1Null() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.CoefAV1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefAV1Null()
            Me(Me.tableAFacture_Detail.CoefAV1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVTTC1Null() As Boolean
            Return Me.IsNull(Me.tableAFacture_Detail.PrixVTTC1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVTTC1Null()
            Me(Me.tableAFacture_Detail.PrixVTTC1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FamilleRow
        Inherits Global.System.Data.DataRow
        
        Private tableFamille As FamilleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFamille = CType(Me.Table,FamilleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFamille() As Short
            Get
                Return CType(Me(Me.tableFamille.nFamilleColumn),Short)
            End Get
            Set
                Me(Me.tableFamille.nFamilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille() As String
            Get
                Try 
                    Return CType(Me(Me.tableFamille.FamilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille' in table 'Famille' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFamille.FamilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nGroupe() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFamille.nGroupeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nGroupe' in table 'Famille' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFamille.nGroupeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamilleNull() As Boolean
            Return Me.IsNull(Me.tableFamille.FamilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamilleNull()
            Me(Me.tableFamille.FamilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnGroupeNull() As Boolean
            Return Me.IsNull(Me.tableFamille.nGroupeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnGroupeNull()
            Me(Me.tableFamille.nGroupeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReglementRow
        Inherits Global.System.Data.DataRow
        
        Private tableReglement As ReglementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReglement = CType(Me.Table,ReglementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nReglement() As Decimal
            Get
                Return CType(Me(Me.tableReglement.nReglementColumn),Decimal)
            End Get
            Set
                Me(Me.tableReglement.nReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateReglement() As Date
            Get
                Try 
                    Return CType(Me(Me.tableReglement.DateReglementColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateReglement' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.DateReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateDepot() As Date
            Get
                Try 
                    Return CType(Me(Me.tableReglement.DateDepotColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateDepot' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.DateDepotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nEntreprise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement.nEntrepriseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nEntreprise' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.nEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nMode() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.nModeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nMode' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.nModeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCheque() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.nChequeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCheque' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.nChequeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModeReglement() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.ModeReglementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModeReglement' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.ModeReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement.MontantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Montant' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Perte() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement.PerteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Perte' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.PerteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Profit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement.ProfitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Profit' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.ProfitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depose() As Boolean
            Get
                Return CType(Me(Me.tableReglement.DeposeColumn),Boolean)
            End Get
            Set
                Me(Me.tableReglement.DeposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableReglement.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableReglement.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BanqueClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableReglement.BanqueClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BanqueClient' in table 'Reglement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement.BanqueClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateReglementNull() As Boolean
            Return Me.IsNull(Me.tableReglement.DateReglementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateReglementNull()
            Me(Me.tableReglement.DateReglementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateDepotNull() As Boolean
            Return Me.IsNull(Me.tableReglement.DateDepotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateDepotNull()
            Me(Me.tableReglement.DateDepotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnEntrepriseNull() As Boolean
            Return Me.IsNull(Me.tableReglement.nEntrepriseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnEntrepriseNull()
            Me(Me.tableReglement.nEntrepriseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnModeNull() As Boolean
            Return Me.IsNull(Me.tableReglement.nModeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnModeNull()
            Me(Me.tableReglement.nModeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnChequeNull() As Boolean
            Return Me.IsNull(Me.tableReglement.nChequeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnChequeNull()
            Me(Me.tableReglement.nChequeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeReglementNull() As Boolean
            Return Me.IsNull(Me.tableReglement.ModeReglementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeReglementNull()
            Me(Me.tableReglement.ModeReglementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableReglement.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableReglement.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableReglement.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableReglement.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPerteNull() As Boolean
            Return Me.IsNull(Me.tableReglement.PerteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPerteNull()
            Me(Me.tableReglement.PerteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProfitNull() As Boolean
            Return Me.IsNull(Me.tableReglement.ProfitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProfitNull()
            Me(Me.tableReglement.ProfitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBanqueClientNull() As Boolean
            Return Me.IsNull(Me.tableReglement.BanqueClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBanqueClientNull()
            Me(Me.tableReglement.BanqueClientColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Reglement_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableReglement_Detail As Reglement_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReglement_Detail = CType(Me.Table,Reglement_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailReglement() As Decimal
            Get
                Return CType(Me(Me.tableReglement_Detail.nDetailReglementColumn),Decimal)
            End Get
            Set
                Me(Me.tableReglement_Detail.nDetailReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement_Detail.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFacture' in table 'Reglement_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement_Detail.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nReglement() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement_Detail.nReglementColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nReglement' in table 'Reglement_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement_Detail.nReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement_Detail.MontantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Montant' in table 'Reglement_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement_Detail.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Perte() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement_Detail.PerteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Perte' in table 'Reglement_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement_Detail.PerteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Profit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReglement_Detail.ProfitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Profit' in table 'Reglement_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReglement_Detail.ProfitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableReglement_Detail.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableReglement_Detail.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnReglementNull() As Boolean
            Return Me.IsNull(Me.tableReglement_Detail.nReglementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnReglementNull()
            Me(Me.tableReglement_Detail.nReglementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableReglement_Detail.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableReglement_Detail.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPerteNull() As Boolean
            Return Me.IsNull(Me.tableReglement_Detail.PerteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPerteNull()
            Me(Me.tableReglement_Detail.PerteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProfitNull() As Boolean
            Return Me.IsNull(Me.tableReglement_Detail.ProfitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProfitNull()
            Me(Me.tableReglement_Detail.ProfitColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Remise_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableRemise_Detail As Remise_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRemise_Detail = CType(Me.Table,Remise_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailRemise() As Decimal
            Get
                Return CType(Me(Me.tableRemise_Detail.nDetailRemiseColumn),Decimal)
            End Get
            Set
                Me(Me.tableRemise_Detail.nDetailRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nRemise() As Decimal
            Get
                Return CType(Me(Me.tableRemise_Detail.nRemiseColumn),Decimal)
            End Get
            Set
                Me(Me.tableRemise_Detail.nRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nReglement() As Decimal
            Get
                Return CType(Me(Me.tableRemise_Detail.nReglementColumn),Decimal)
            End Get
            Set
                Me(Me.tableRemise_Detail.nReglementColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RemiseRow
        Inherits Global.System.Data.DataRow
        
        Private tableRemise As RemiseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRemise = CType(Me.Table,RemiseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nRemise() As Decimal
            Get
                Return CType(Me(Me.tableRemise.nRemiseColumn),Decimal)
            End Get
            Set
                Me(Me.tableRemise.nRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nRemiseBanque() As String
            Get
                Try 
                    Return CType(Me(Me.tableRemise.nRemiseBanqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nRemiseBanque' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.nRemiseBanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nBanque() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRemise.nBanqueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nBanque' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.nBanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRemise() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRemise.DateRemiseColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRemise' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.DateRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeRemise() As String
            Get
                Try 
                    Return CType(Me(Me.tableRemise.TypeRemiseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeRemise' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.TypeRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableRemise.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRemise.MontantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Montant' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NExportRemise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRemise.NExportRemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NExportRemise' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.NExportRemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRemise.ExportComptaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExportCompta' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRemise.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExportCompta' in table 'Remise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemise.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BanqueRow() As BanqueRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BanqueRemise")),BanqueRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BanqueRemise"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnRemiseBanqueNull() As Boolean
            Return Me.IsNull(Me.tableRemise.nRemiseBanqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnRemiseBanqueNull()
            Me(Me.tableRemise.nRemiseBanqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnBanqueNull() As Boolean
            Return Me.IsNull(Me.tableRemise.nBanqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnBanqueNull()
            Me(Me.tableRemise.nBanqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRemiseNull() As Boolean
            Return Me.IsNull(Me.tableRemise.DateRemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRemiseNull()
            Me(Me.tableRemise.DateRemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeRemiseNull() As Boolean
            Return Me.IsNull(Me.tableRemise.TypeRemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeRemiseNull()
            Me(Me.tableRemise.TypeRemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableRemise.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableRemise.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableRemise.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableRemise.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNExportRemiseNull() As Boolean
            Return Me.IsNull(Me.tableRemise.NExportRemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNExportRemiseNull()
            Me(Me.tableRemise.NExportRemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableRemise.ExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExportComptaNull()
            Me(Me.tableRemise.ExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableRemise.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableRemise.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BanqueRow
        Inherits Global.System.Data.DataRow
        
        Private tableBanque As BanqueDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBanque = CType(Me.Table,BanqueDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nBanque() As Decimal
            Get
                Return CType(Me(Me.tableBanque.nBanqueColumn),Decimal)
            End Get
            Set
                Me(Me.tableBanque.nBanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompte() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.NCompteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompte' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.NCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActivite() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.NActiviteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActivite' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.NActiviteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBCodeAgence() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.RIBCodeAgenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBCodeAgence' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.RIBCodeAgenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBCodeGuichet() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.RIBCodeGuichetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBCodeGuichet' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.RIBCodeGuichetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBNCompte() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.RIBNCompteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBNCompte' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.RIBNCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBCle() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.RIBCleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBCle' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.RIBCleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIBNEmetteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableBanque.RIBNEmetteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIBNEmetteur' in table 'Banque' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBanque.RIBNEmetteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableBanque.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableBanque.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteNull() As Boolean
            Return Me.IsNull(Me.tableBanque.NCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteNull()
            Me(Me.tableBanque.NCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteNull() As Boolean
            Return Me.IsNull(Me.tableBanque.NActiviteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteNull()
            Me(Me.tableBanque.NActiviteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBCodeAgenceNull() As Boolean
            Return Me.IsNull(Me.tableBanque.RIBCodeAgenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBCodeAgenceNull()
            Me(Me.tableBanque.RIBCodeAgenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBCodeGuichetNull() As Boolean
            Return Me.IsNull(Me.tableBanque.RIBCodeGuichetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBCodeGuichetNull()
            Me(Me.tableBanque.RIBCodeGuichetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBNCompteNull() As Boolean
            Return Me.IsNull(Me.tableBanque.RIBNCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBNCompteNull()
            Me(Me.tableBanque.RIBNCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBCleNull() As Boolean
            Return Me.IsNull(Me.tableBanque.RIBCleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBCleNull()
            Me(Me.tableBanque.RIBCleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBNEmetteurNull() As Boolean
            Return Me.IsNull(Me.tableBanque.RIBNEmetteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBNEmetteurNull()
            Me(Me.tableBanque.RIBNEmetteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRemiseRows() As RemiseRow()
            If (Me.Table.ChildRelations("BanqueRemise") Is Nothing) Then
                Return New RemiseRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("BanqueRemise")),RemiseRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ParametresRow
        Inherits Global.System.Data.DataRow
        
        Private tableParametres As ParametresDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParametres = CType(Me.Table,ParametresDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nParametre() As Decimal
            Get
                Return CType(Me(Me.tableParametres.nParametreColumn),Decimal)
            End Get
            Set
                Me(Me.tableParametres.nParametreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableParametres.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo' in table 'Parametres' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametres.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableParametres.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableParametres.LogoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EntrepriseRow
        Inherits Global.System.Data.DataRow
        
        Private tableEntreprise As EntrepriseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEntreprise = CType(Me.Table,EntrepriseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nEntreprise() As Decimal
            Get
                Return CType(Me(Me.tableEntreprise.nEntrepriseColumn),Decimal)
            End Get
            Set
                Me(Me.tableEntreprise.nEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.DateCreationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreation' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.DateCreationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateModification() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.DateModificationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateModification' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.DateModificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InfoMAJ() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.InfoMAJColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InfoMAJ' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.InfoMAJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeEntreprise() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.TypeEntrepriseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeEntreprise' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.TypeEntrepriseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrganisme() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.nOrganismeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nOrganisme' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.nOrganismeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nMaisonMere() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.nMaisonMereColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nMaisonMere' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.nMaisonMereColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dep() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.DepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dep' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.DepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nom' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adresse() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.AdresseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Adresse' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.AdresseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodePostal() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CodePostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodePostal' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CodePostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ville() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.VilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ville' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.VilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pays() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.PaysColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pays' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.PaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormeJuridique() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.FormeJuridiqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormeJuridique' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.FormeJuridiqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.TypeClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeClient' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.TypeClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CibleCommercial() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CibleCommercialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CibleCommercial' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CibleCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModePaiement() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.ModePaiementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModePaiement' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.ModePaiementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Echeance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.EcheanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Echeance' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.EcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Banque() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.BanqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Banque' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.BanqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIB() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.RIBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIB' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.RIBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CA() As Single
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CAColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CA' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMail() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.EMailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMail' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.EMailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SiteInternet() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.SiteInternetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SiteInternet' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.SiteInternetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observations() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.ObservationsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observations' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.ObservationsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinMois() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.FinMoisColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinMois' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.FinMoisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FacturationTTC' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fournisseur() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.FournisseurColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fournisseur' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.FournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.ClientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Client' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuffixePostal() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.SuffixePostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuffixePostal' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.SuffixePostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.AdresseLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdresseLiv' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.AdresseLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodePostalLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CodePostalLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodePostalLiv' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CodePostalLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VilleLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.VilleLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VilleLiv' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.VilleLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaysLiv() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.PaysLivColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaysLiv' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.PaysLivColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactif() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.InactifColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactif' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.InactifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoginSite() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.LoginSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoginSite' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.LoginSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PwdSite() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.PwdSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PwdSite' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.PwdSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSite() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.IdSiteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdSite' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.IdSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteF() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NCompteFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteF' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NCompteFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteF() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NActiviteFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteF' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NActiviteFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NCompteCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteC' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NCompteCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NActiviteCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteC' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NActiviteCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTarif() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.nTarifColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nTarif' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.nTarifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Civilite() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CiviliteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Civilite' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CiviliteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Licence() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.LicenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Licence' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.LicenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SituationCompte() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.SituationCompteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SituationCompte' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.SituationCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NTvaIntraCom() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NTvaIntraComColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTvaIntraCom' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NTvaIntraComColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeInterne() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CodeInterneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeInterne' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CodeInterneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.Critere1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere1' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.Critere1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.Critere2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere2' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.Critere2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere3() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.Critere3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere3' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.Critere3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Critere4() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.Critere4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Critere4' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.Critere4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AfficheStat() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.AfficheStatColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AfficheStat' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.AfficheStatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Siren() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.SirenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Siren' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.SirenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomLivraison() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NomLivraisonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NomLivraison' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NomLivraisonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomFacturation() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.NomFacturationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NomFacturation' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.NomFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.CodeClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeClient' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.CodeClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObservationLivraison() As String
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.ObservationLivraisonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObservationLivraison' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.ObservationLivraisonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IndEscompteSpecifique() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.IndEscompteSpecifiqueColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IndEscompteSpecifique' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.IndEscompteSpecifiqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TauxEscompteSpecifique() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.TauxEscompteSpecifiqueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TauxEscompteSpecifique' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.TauxEscompteSpecifiqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DelaiValiditeEscompte() As Short
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.DelaiValiditeEscompteColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DelaiValiditeEscompte' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.DelaiValiditeEscompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.nCommercialColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCommercial' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nAdherent() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEntreprise.nAdherentColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nAdherent' in table 'Entreprise' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntreprise.nAdherentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreationNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.DateCreationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreationNull()
            Me(Me.tableEntreprise.DateCreationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateModificationNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.DateModificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateModificationNull()
            Me(Me.tableEntreprise.DateModificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInfoMAJNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.InfoMAJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInfoMAJNull()
            Me(Me.tableEntreprise.InfoMAJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeEntrepriseNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.TypeEntrepriseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeEntrepriseNull()
            Me(Me.tableEntreprise.TypeEntrepriseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrganismeNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.nOrganismeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrganismeNull()
            Me(Me.tableEntreprise.nOrganismeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnMaisonMereNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.nMaisonMereColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnMaisonMereNull()
            Me(Me.tableEntreprise.nMaisonMereColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.DepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepNull()
            Me(Me.tableEntreprise.DepColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomNull()
            Me(Me.tableEntreprise.NomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.AdresseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseNull()
            Me(Me.tableEntreprise.AdresseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodePostalNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CodePostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodePostalNull()
            Me(Me.tableEntreprise.CodePostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVilleNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.VilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVilleNull()
            Me(Me.tableEntreprise.VilleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaysNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.PaysColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaysNull()
            Me(Me.tableEntreprise.PaysColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormeJuridiqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.FormeJuridiqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormeJuridiqueNull()
            Me(Me.tableEntreprise.FormeJuridiqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeClientNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.TypeClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeClientNull()
            Me(Me.tableEntreprise.TypeClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCibleCommercialNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CibleCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCibleCommercialNull()
            Me(Me.tableEntreprise.CibleCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModePaiementNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.ModePaiementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModePaiementNull()
            Me(Me.tableEntreprise.ModePaiementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.EcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEcheanceNull()
            Me(Me.tableEntreprise.EcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBanqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.BanqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBanqueNull()
            Me(Me.tableEntreprise.BanqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIBNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.RIBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIBNull()
            Me(Me.tableEntreprise.RIBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANull()
            Me(Me.tableEntreprise.CAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.EMailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMailNull()
            Me(Me.tableEntreprise.EMailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSiteInternetNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.SiteInternetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSiteInternetNull()
            Me(Me.tableEntreprise.SiteInternetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationsNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.ObservationsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationsNull()
            Me(Me.tableEntreprise.ObservationsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinMoisNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.FinMoisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinMoisNull()
            Me(Me.tableEntreprise.FinMoisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableEntreprise.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableEntreprise.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableEntreprise.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.FournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFournisseurNull()
            Me(Me.tableEntreprise.FournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableEntreprise.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuffixePostalNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.SuffixePostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuffixePostalNull()
            Me(Me.tableEntreprise.SuffixePostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.AdresseLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseLivNull()
            Me(Me.tableEntreprise.AdresseLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodePostalLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CodePostalLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodePostalLivNull()
            Me(Me.tableEntreprise.CodePostalLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVilleLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.VilleLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVilleLivNull()
            Me(Me.tableEntreprise.VilleLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaysLivNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.PaysLivColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaysLivNull()
            Me(Me.tableEntreprise.PaysLivColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactifNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.InactifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactifNull()
            Me(Me.tableEntreprise.InactifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoginSiteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.LoginSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoginSiteNull()
            Me(Me.tableEntreprise.LoginSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPwdSiteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.PwdSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPwdSiteNull()
            Me(Me.tableEntreprise.PwdSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdSiteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.IdSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdSiteNull()
            Me(Me.tableEntreprise.IdSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteFNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NCompteFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteFNull()
            Me(Me.tableEntreprise.NCompteFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteFNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NActiviteFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteFNull()
            Me(Me.tableEntreprise.NActiviteFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteCNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NCompteCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteCNull()
            Me(Me.tableEntreprise.NCompteCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteCNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NActiviteCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteCNull()
            Me(Me.tableEntreprise.NActiviteCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnTarifNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.nTarifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnTarifNull()
            Me(Me.tableEntreprise.nTarifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiviliteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CiviliteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiviliteNull()
            Me(Me.tableEntreprise.CiviliteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableEntreprise.LogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLicenceNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.LicenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLicenceNull()
            Me(Me.tableEntreprise.LicenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSituationCompteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.SituationCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSituationCompteNull()
            Me(Me.tableEntreprise.SituationCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNTvaIntraComNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NTvaIntraComColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNTvaIntraComNull()
            Me(Me.tableEntreprise.NTvaIntraComColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeInterneNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CodeInterneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeInterneNull()
            Me(Me.tableEntreprise.CodeInterneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere1Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise.Critere1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere1Null()
            Me(Me.tableEntreprise.Critere1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere2Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise.Critere2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere2Null()
            Me(Me.tableEntreprise.Critere2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere3Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise.Critere3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere3Null()
            Me(Me.tableEntreprise.Critere3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCritere4Null() As Boolean
            Return Me.IsNull(Me.tableEntreprise.Critere4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCritere4Null()
            Me(Me.tableEntreprise.Critere4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAfficheStatNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.AfficheStatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAfficheStatNull()
            Me(Me.tableEntreprise.AfficheStatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSirenNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.SirenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSirenNull()
            Me(Me.tableEntreprise.SirenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomLivraisonNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NomLivraisonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomLivraisonNull()
            Me(Me.tableEntreprise.NomLivraisonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomFacturationNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.NomFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomFacturationNull()
            Me(Me.tableEntreprise.NomFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeClientNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.CodeClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeClientNull()
            Me(Me.tableEntreprise.CodeClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationLivraisonNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.ObservationLivraisonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationLivraisonNull()
            Me(Me.tableEntreprise.ObservationLivraisonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIndEscompteSpecifiqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.IndEscompteSpecifiqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIndEscompteSpecifiqueNull()
            Me(Me.tableEntreprise.IndEscompteSpecifiqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTauxEscompteSpecifiqueNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.TauxEscompteSpecifiqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTauxEscompteSpecifiqueNull()
            Me(Me.tableEntreprise.TauxEscompteSpecifiqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelaiValiditeEscompteNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.DelaiValiditeEscompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelaiValiditeEscompteNull()
            Me(Me.tableEntreprise.DelaiValiditeEscompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableEntreprise.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnAdherentNull() As Boolean
            Return Me.IsNull(Me.tableEntreprise.nAdherentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnAdherentNull()
            Me(Me.tableEntreprise.nAdherentColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TVA_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableTVA_Detail As TVA_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTVA_Detail = CType(Me.Table,TVA_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTVA() As Decimal
            Get
                Return CType(Me(Me.tableTVA_Detail.nTVAColumn),Decimal)
            End Get
            Set
                Me(Me.tableTVA_Detail.nTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTVA_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'TVA_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTaux() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTVA_Detail.TTauxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTaux' in table 'TVA_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA_Detail.TTauxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCoef() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTVA_Detail.TCoefColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TCoef' in table 'TVA_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA_Detail.TCoefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableTVA_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableTVA_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTauxNull() As Boolean
            Return Me.IsNull(Me.tableTVA_Detail.TTauxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTauxNull()
            Me(Me.tableTVA_Detail.TTauxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCoefNull() As Boolean
            Return Me.IsNull(Me.tableTVA_Detail.TCoefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCoefNull()
            Me(Me.tableTVA_Detail.TCoefColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AReglement_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableAReglement_Detail As AReglement_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAReglement_Detail = CType(Me.Table,AReglement_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailReglement() As Decimal
            Get
                Return CType(Me(Me.tableAReglement_Detail.nDetailReglementColumn),Decimal)
            End Get
            Set
                Me(Me.tableAReglement_Detail.nDetailReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAReglement_Detail.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFacture' in table 'AReglement_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement_Detail.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nReglement() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAReglement_Detail.nReglementColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nReglement' in table 'AReglement_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement_Detail.nReglementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAReglement_Detail.MontantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Montant' in table 'AReglement_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement_Detail.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Perte() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAReglement_Detail.PerteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Perte' in table 'AReglement_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement_Detail.PerteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Profit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAReglement_Detail.ProfitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Profit' in table 'AReglement_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAReglement_Detail.ProfitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableAReglement_Detail.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableAReglement_Detail.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnReglementNull() As Boolean
            Return Me.IsNull(Me.tableAReglement_Detail.nReglementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnReglementNull()
            Me(Me.tableAReglement_Detail.nReglementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableAReglement_Detail.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableAReglement_Detail.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPerteNull() As Boolean
            Return Me.IsNull(Me.tableAReglement_Detail.PerteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPerteNull()
            Me(Me.tableAReglement_Detail.PerteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProfitNull() As Boolean
            Return Me.IsNull(Me.tableAReglement_Detail.ProfitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProfitNull()
            Me(Me.tableAReglement_Detail.ProfitColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VFactureRow
        Inherits Global.System.Data.DataRow
        
        Private tableVFacture As VFactureDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVFacture = CType(Me.Table,VFactureDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tableVFacture.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVFacture.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Origine' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nOrigine' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nClient' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdresseFacture' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPrescripteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nPrescripteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPrescripteur' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPayeur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nPayeurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPayeur' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nPayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nContact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nContactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nContact' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nCommercial' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Secteur' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationPrescripteur() As Boolean
            Get
                Return CType(Me(Me.tableVFacture.FacturationPrescripteurColumn),Boolean)
            End Get
            Set
                Me(Me.tableVFacture.FacturationPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationClient() As Boolean
            Get
                Return CType(Me(Me.tableVFacture.FacturationClientColumn),Boolean)
            End Get
            Set
                Me(Me.tableVFacture.FacturationClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFacture' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFacture' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tableVFacture.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tableVFacture.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableVFacture.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableVFacture.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExportCompta' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEcheance' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observation' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateRelance1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance1' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateRelance1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateRelance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance2' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateRelance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remise' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.MontantHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantHT' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.MontantHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.MontantTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTVA' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.MontantTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontantTTC' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPreFacturation() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nPreFacturationColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nPreFacturation' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nPreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatePreFacturation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DatePreFacturationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatePreFacturation' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DatePreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FacturationTTC' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nRelance() As Integer
            Get
                Return CType(Me(Me.tableVFacture.nRelanceColumn),Integer)
            End Get
            Set
                Me(Me.tableVFacture.nRelanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateRelanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRelance' in table 'VFacture' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateRelanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tableVFacture.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tableVFacture.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tableVFacture.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tableVFacture.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nPrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPrescripteurNull()
            Me(Me.tableVFacture.nPrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPayeurNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nPayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPayeurNull()
            Me(Me.tableVFacture.nPayeurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnContactNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnContactNull()
            Me(Me.tableVFacture.nContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableVFacture.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tableVFacture.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableVFacture.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableVFacture.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableVFacture.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tableVFacture.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableVFacture.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance1Null() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateRelance1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance1Null()
            Me(Me.tableVFacture.DateRelance1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance2Null() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateRelance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance2Null()
            Me(Me.tableVFacture.DateRelance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVFacture.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantHTNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.MontantHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantHTNull()
            Me(Me.tableVFacture.MontantHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture.MontantTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTVANull()
            Me(Me.tableVFacture.MontantTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tableVFacture.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nPreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPreFacturationNull()
            Me(Me.tableVFacture.nPreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatePreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DatePreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatePreFacturationNull()
            Me(Me.tableVFacture.DatePreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableVFacture.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelanceNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateRelanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelanceNull()
            Me(Me.tableVFacture.DateRelanceColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TarifRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TarifRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TarifRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TarifRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VFacture_Detail_RedevanceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VFacture_Detail_RedevanceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VFacture_Detail_RedevanceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VFacture_Detail_RedevanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Entreprise1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Entreprise1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Entreprise1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Entreprise1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AReglementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AReglementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AReglementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AReglementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PersonneRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PersonneRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PersonneRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PersonneRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProduitRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProduitRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProduitRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProduitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TVARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TVARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TVARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TVARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VBonCommandeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VBonCommandeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VBonCommandeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VBonCommandeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VBonCommande_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VBonCommande_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VBonCommande_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VBonCommande_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VBonLivraisonRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VBonLivraisonRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VBonLivraisonRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VBonLivraisonRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VBonLivraison_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VBonLivraison_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VBonLivraison_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VBonLivraison_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VDevisRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VDevisRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VDevisRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VDevisRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VDevis_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VDevis_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VDevis_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VDevis_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VFacture_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VFacture_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VFacture_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VFacture_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TelephoneRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TelephoneRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TelephoneRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TelephoneRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TelephoneEntrepriseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TelephoneEntrepriseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TelephoneEntrepriseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TelephoneEntrepriseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ABonReceptionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ABonReceptionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ABonReceptionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ABonReceptionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ABonReception_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ABonReception_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ABonReception_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ABonReception_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AFactureRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AFactureRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AFactureRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AFactureRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AFacture_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AFacture_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AFacture_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AFacture_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FamilleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FamilleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FamilleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FamilleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReglementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReglementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReglementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReglementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Reglement_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Reglement_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Reglement_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Reglement_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Remise_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Remise_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Remise_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Remise_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RemiseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RemiseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RemiseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RemiseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BanqueRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BanqueRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BanqueRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BanqueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ParametresRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ParametresRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParametresRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParametresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EntrepriseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EntrepriseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EntrepriseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EntrepriseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TVA_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TVA_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TVA_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TVA_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AReglement_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AReglement_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AReglement_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AReglement_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VFactureRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VFactureRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VFactureRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VFactureRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DsImpressionFactureTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TarifTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Tarif"
            tableMapping.ColumnMappings.Add("nTarif", "nTarif")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("ZoneGeo", "ZoneGeo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Tarif] WHERE (([nTarif] = @Original_nTarif) AND ((@IsNull_Libe"& _ 
                "lle = 1 AND [Libelle] IS NULL) OR ([Libelle] = @Original_Libelle)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Libelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Tarif] ([nTarif], [Libelle], [ZoneGeo]) VALUES (@nTarif, @Libe"& _ 
                "lle, @ZoneGeo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nTarif, Libelle, ZoneGeo FROM Tarif WHERE (nTarif = @nTa"& _ 
                "rif)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ZoneGeo", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZoneGeo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Tarif] SET [nTarif] = @nTarif, [Libelle] = @Libelle, [ZoneGeo] = @Z"& _ 
                "oneGeo WHERE (([nTarif] = @Original_nTarif) AND ((@IsNull_Libelle = 1 AND [Libel"& _ 
                "le] IS NULL) OR ([Libelle] = @Original_Libelle)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nTarif, Libelle, Zone"& _ 
                "Geo FROM Tarif WHERE (nTarif = @nTarif)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ZoneGeo", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZoneGeo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Libelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nTarif, Libelle, ZoneGeo FROM dbo.Tarif"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsImpressionFacture.TarifDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DsImpressionFacture.TarifDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsImpressionFacture.TarifDataTable = New DsImpressionFacture.TarifDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DsImpressionFacture.TarifDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DsImpressionFacture) As Integer
            Return Me.Adapter.Update(dataSet, "Tarif")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nTarif As Decimal, ByVal Original_Libelle As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nTarif,Decimal)
            If (Original_Libelle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Libelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal nTarif As Decimal, ByVal Libelle As String, ByVal ZoneGeo As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nTarif,Decimal)
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Libelle,String)
            End If
            If (ZoneGeo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ZoneGeo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nTarif As Decimal, ByVal Libelle As String, ByVal ZoneGeo As String, ByVal Original_nTarif As Decimal, ByVal Original_Libelle As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nTarif,Decimal)
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Libelle,String)
            End If
            If (ZoneGeo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ZoneGeo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_nTarif,Decimal)
            If (Original_Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Libelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Libelle As String, ByVal ZoneGeo As String, ByVal Original_nTarif As Decimal, ByVal Original_Libelle As String) As Integer
            Return Me.Update(Original_nTarif, Libelle, ZoneGeo, Original_nTarif, Original_Libelle)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VFacture_Detail_RedevanceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VFacture_Detail_Redevance"
            tableMapping.ColumnMappings.Add("nDetailDevis", "nDetailDevis")
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("nLigne", "nLigne")
            tableMapping.ColumnMappings.Add("NLot", "NLot")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("NbParution", "NbParution")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("LibUnite1", "LibUnite1")
            tableMapping.ColumnMappings.Add("Unite2", "Unite2")
            tableMapping.ColumnMappings.Add("LibUnite2", "LibUnite2")
            tableMapping.ColumnMappings.Add("PrixUHT", "PrixUHT")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("TxTva", "TxTva")
            tableMapping.ColumnMappings.Add("PrixUTVA", "PrixUTVA")
            tableMapping.ColumnMappings.Add("PrixUTTC", "PrixUTTC")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("MontantLigneHT", "MontantLigneHT")
            tableMapping.ColumnMappings.Add("MontantLigneTVA", "MontantLigneTVA")
            tableMapping.ColumnMappings.Add("MontantLigneTTC", "MontantLigneTTC")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [VFacture_Detail] WHERE (([nDetailDevis] = @Original_nDetailDevis))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [VFacture_Detail] ([nDetailDevis], [nDevis], [nLigne], [NLot], [CodeP"& _ 
                "roduit], [Libelle], [NbParution], [Unite1], [LibUnite1], [Unite2], [LibUnite2], "& _ 
                "[PrixUHT], [TTVA], [TxTva], [PrixUTVA], [PrixUTTC], [Remise], [MontantLigneHT], "& _ 
                "[MontantLigneTVA], [MontantLigneTTC]) VALUES (@nDetailDevis, @nDevis, @nLigne, @"& _ 
                "NLot, @CodeProduit, @Libelle, @NbParution, @Unite1, @LibUnite1, @Unite2, @LibUni"& _ 
                "te2, @PrixUHT, @TTVA, @TxTva, @PrixUTVA, @PrixUTTC, @Remise, @MontantLigneHT, @M"& _ 
                "ontantLigneTVA, @MontantLigneTTC);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, NLot, C"& _ 
                "odeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, "& _ 
                "TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, Montan"& _ 
                "tLigneTTC FROM VFacture_Detail WHERE (nDetailDevis = @nDetailDevis)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [VFacture_Detail] SET [nDetailDevis] = @nDetailDevis, [nDevis] = @nDevis, "& _ 
                "[nLigne] = @nLigne, [NLot] = @NLot, [CodeProduit] = @CodeProduit, [Libelle] = @L"& _ 
                "ibelle, [NbParution] = @NbParution, [Unite1] = @Unite1, [LibUnite1] = @LibUnite1"& _ 
                ", [Unite2] = @Unite2, [LibUnite2] = @LibUnite2, [PrixUHT] = @PrixUHT, [TTVA] = @"& _ 
                "TTVA, [TxTva] = @TxTva, [PrixUTVA] = @PrixUTVA, [PrixUTTC] = @PrixUTTC, [Remise]"& _ 
                " = @Remise, [MontantLigneHT] = @MontantLigneHT, [MontantLigneTVA] = @MontantLign"& _ 
                "eTVA, [MontantLigneTTC] = @MontantLigneTTC WHERE (([nDetailDevis] = @Original_nD"& _ 
                "etailDevis));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, "& _ 
                "NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA"& _ 
                ", PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC FROM VFactu"& _ 
                "re_Detail WHERE (nDetailDevis = @nDetailDevis)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParutio"& _ 
                "n, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTT"& _ 
                "C, Remise, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         MontantLigneHT, MontantLigneTVA, MontantLi"& _ 
                "gneTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFacture_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CodeProduit LIKE 'RED-%')"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CodeProduit, LibUnite1, LibUnite2, Libelle, MontantLigneHT, MontantLigneTT"& _ 
                "C, MontantLigneTVA, NLot, NbParution, PrixUHT, PrixUTTC, PrixUTVA, Remise, TTVA,"& _ 
                " TxTva, Unite1, Unite2, nDetailDevis, nDevis, nLigne FROM VFacture_Detail WHERE "& _ 
                "(CodeProduit LIKE 'RED-%') AND (nDevis = @nDevis)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsImpressionFacture.VFacture_Detail_RedevanceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DsImpressionFacture.VFacture_Detail_RedevanceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsImpressionFacture.VFacture_Detail_RedevanceDataTable = New DsImpressionFacture.VFacture_Detail_RedevanceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynDevis(ByVal dataTable As DsImpressionFacture.VFacture_Detail_RedevanceDataTable, ByVal nDevis As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynDevis(ByVal nDevis As Global.System.Nullable(Of Decimal)) As DsImpressionFacture.VFacture_Detail_RedevanceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DsImpressionFacture.VFacture_Detail_RedevanceDataTable = New DsImpressionFacture.VFacture_Detail_RedevanceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DsImpressionFacture.VFacture_Detail_RedevanceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DsImpressionFacture) As Integer
            Return Me.Adapter.Update(dataSet, "VFacture_Detail_Redevance")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Entreprise1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Entreprise1"
            tableMapping.ColumnMappings.Add("nEntreprise", "nEntreprise")
            tableMapping.ColumnMappings.Add("DateCreation", "DateCreation")
            tableMapping.ColumnMappings.Add("DateModification", "DateModification")
            tableMapping.ColumnMappings.Add("InfoMAJ", "InfoMAJ")
            tableMapping.ColumnMappings.Add("TypeEntreprise", "TypeEntreprise")
            tableMapping.ColumnMappings.Add("nOrganisme", "nOrganisme")
            tableMapping.ColumnMappings.Add("nMaisonMere", "nMaisonMere")
            tableMapping.ColumnMappings.Add("Dep", "Dep")
            tableMapping.ColumnMappings.Add("Nom", "Nom")
            tableMapping.ColumnMappings.Add("Adresse", "Adresse")
            tableMapping.ColumnMappings.Add("CodePostal", "CodePostal")
            tableMapping.ColumnMappings.Add("Ville", "Ville")
            tableMapping.ColumnMappings.Add("Pays", "Pays")
            tableMapping.ColumnMappings.Add("FormeJuridique", "FormeJuridique")
            tableMapping.ColumnMappings.Add("TypeClient", "TypeClient")
            tableMapping.ColumnMappings.Add("CibleCommercial", "CibleCommercial")
            tableMapping.ColumnMappings.Add("ModePaiement", "ModePaiement")
            tableMapping.ColumnMappings.Add("Echeance", "Echeance")
            tableMapping.ColumnMappings.Add("Banque", "Banque")
            tableMapping.ColumnMappings.Add("RIB", "RIB")
            tableMapping.ColumnMappings.Add("CA", "CA")
            tableMapping.ColumnMappings.Add("EMail", "EMail")
            tableMapping.ColumnMappings.Add("SiteInternet", "SiteInternet")
            tableMapping.ColumnMappings.Add("Observations", "Observations")
            tableMapping.ColumnMappings.Add("FinMois", "FinMois")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("FacturationTTC", "FacturationTTC")
            tableMapping.ColumnMappings.Add("Fournisseur", "Fournisseur")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("SuffixePostal", "SuffixePostal")
            tableMapping.ColumnMappings.Add("AdresseLiv", "AdresseLiv")
            tableMapping.ColumnMappings.Add("CodePostalLiv", "CodePostalLiv")
            tableMapping.ColumnMappings.Add("VilleLiv", "VilleLiv")
            tableMapping.ColumnMappings.Add("PaysLiv", "PaysLiv")
            tableMapping.ColumnMappings.Add("Inactif", "Inactif")
            tableMapping.ColumnMappings.Add("LoginSite", "LoginSite")
            tableMapping.ColumnMappings.Add("PwdSite", "PwdSite")
            tableMapping.ColumnMappings.Add("IdSite", "IdSite")
            tableMapping.ColumnMappings.Add("NCompteF", "NCompteF")
            tableMapping.ColumnMappings.Add("NActiviteF", "NActiviteF")
            tableMapping.ColumnMappings.Add("NCompteC", "NCompteC")
            tableMapping.ColumnMappings.Add("NActiviteC", "NActiviteC")
            tableMapping.ColumnMappings.Add("nTarif", "nTarif")
            tableMapping.ColumnMappings.Add("Civilite", "Civilite")
            tableMapping.ColumnMappings.Add("Logo", "Logo")
            tableMapping.ColumnMappings.Add("Licence", "Licence")
            tableMapping.ColumnMappings.Add("Critere1", "Critere1")
            tableMapping.ColumnMappings.Add("Critere2", "Critere2")
            tableMapping.ColumnMappings.Add("Critere3", "Critere3")
            tableMapping.ColumnMappings.Add("Critere4", "Critere4")
            tableMapping.ColumnMappings.Add("NTVAIntraCom", "NTVAIntraCom")
            tableMapping.ColumnMappings.Add("IsExport", "IsExport")
            tableMapping.ColumnMappings.Add("NomFacturation", "NomFacturation")
            tableMapping.ColumnMappings.Add("NomLivraison", "NomLivraison")
            tableMapping.ColumnMappings.Add("EditionBLNonChiffre", "EditionBLNonChiffre")
            tableMapping.ColumnMappings.Add("ObservationLivraison", "ObservationLivraison")
            tableMapping.ColumnMappings.Add("IndEscompteSpecifique", "IndEscompteSpecifique")
            tableMapping.ColumnMappings.Add("TauxEscompteSpecifique", "TauxEscompteSpecifique")
            tableMapping.ColumnMappings.Add("DelaiValiditeEscompte", "DelaiValiditeEscompte")
            tableMapping.ColumnMappings.Add("nCommercial", "nCommercial")
            tableMapping.ColumnMappings.Add("LitigeEnCours", "LitigeEnCours")
            tableMapping.ColumnMappings.Add("EnCoursMax", "EnCoursMax")
            tableMapping.ColumnMappings.Add("RIBBanque", "RIBBanque")
            tableMapping.ColumnMappings.Add("RIBGichet", "RIBGichet")
            tableMapping.ColumnMappings.Add("RIBCompte", "RIBCompte")
            tableMapping.ColumnMappings.Add("RIBCle", "RIBCle")
            tableMapping.ColumnMappings.Add("siren", "siren")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Entreprise] WHERE (([nEntreprise] = @Original_nEntreprise) AND ((@Is"& _ 
                "Null_DateCreation = 1 AND [DateCreation] IS NULL) OR ([DateCreation] = @Original"& _ 
                "_DateCreation)) AND ((@IsNull_DateModification = 1 AND [DateModification] IS NUL"& _ 
                "L) OR ([DateModification] = @Original_DateModification)) AND ((@IsNull_InfoMAJ ="& _ 
                " 1 AND [InfoMAJ] IS NULL) OR ([InfoMAJ] = @Original_InfoMAJ)) AND ((@IsNull_Type"& _ 
                "Entreprise = 1 AND [TypeEntreprise] IS NULL) OR ([TypeEntreprise] = @Original_Ty"& _ 
                "peEntreprise)) AND ((@IsNull_nOrganisme = 1 AND [nOrganisme] IS NULL) OR ([nOrga"& _ 
                "nisme] = @Original_nOrganisme)) AND ((@IsNull_nMaisonMere = 1 AND [nMaisonMere] "& _ 
                "IS NULL) OR ([nMaisonMere] = @Original_nMaisonMere)) AND ((@IsNull_Dep = 1 AND ["& _ 
                "Dep] IS NULL) OR ([Dep] = @Original_Dep)) AND ((@IsNull_Nom = 1 AND [Nom] IS NUL"& _ 
                "L) OR ([Nom] = @Original_Nom)) AND ((@IsNull_CodePostal = 1 AND [CodePostal] IS "& _ 
                "NULL) OR ([CodePostal] = @Original_CodePostal)) AND ((@IsNull_Ville = 1 AND [Vil"& _ 
                "le] IS NULL) OR ([Ville] = @Original_Ville)) AND ((@IsNull_Pays = 1 AND [Pays] I"& _ 
                "S NULL) OR ([Pays] = @Original_Pays)) AND ((@IsNull_FormeJuridique = 1 AND [Form"& _ 
                "eJuridique] IS NULL) OR ([FormeJuridique] = @Original_FormeJuridique)) AND ((@Is"& _ 
                "Null_TypeClient = 1 AND [TypeClient] IS NULL) OR ([TypeClient] = @Original_TypeC"& _ 
                "lient)) AND ((@IsNull_ModePaiement = 1 AND [ModePaiement] IS NULL) OR ([ModePaie"& _ 
                "ment] = @Original_ModePaiement)) AND ((@IsNull_Echeance = 1 AND [Echeance] IS NU"& _ 
                "LL) OR ([Echeance] = @Original_Echeance)) AND ((@IsNull_Banque = 1 AND [Banque] "& _ 
                "IS NULL) OR ([Banque] = @Original_Banque)) AND ((@IsNull_RIB = 1 AND [RIB] IS NU"& _ 
                "LL) OR ([RIB] = @Original_RIB)) AND ((@IsNull_CA = 1 AND [CA] IS NULL) OR ([CA] "& _ 
                "= @Original_CA)) AND ((@IsNull_EMail = 1 AND [EMail] IS NULL) OR ([EMail] = @Ori"& _ 
                "ginal_EMail)) AND ((@IsNull_SiteInternet = 1 AND [SiteInternet] IS NULL) OR ([Si"& _ 
                "teInternet] = @Original_SiteInternet)) AND ((@IsNull_FinMois = 1 AND [FinMois] I"& _ 
                "S NULL) OR ([FinMois] = @Original_FinMois)) AND ((@IsNull_Remise = 1 AND [Remise"& _ 
                "] IS NULL) OR ([Remise] = @Original_Remise)) AND ((@IsNull_TTVA = 1 AND [TTVA] I"& _ 
                "S NULL) OR ([TTVA] = @Original_TTVA)) AND ((@IsNull_FacturationTTC = 1 AND [Fact"& _ 
                "urationTTC] IS NULL) OR ([FacturationTTC] = @Original_FacturationTTC)) AND ((@Is"& _ 
                "Null_Fournisseur = 1 AND [Fournisseur] IS NULL) OR ([Fournisseur] = @Original_Fo"& _ 
                "urnisseur)) AND ((@IsNull_Client = 1 AND [Client] IS NULL) OR ([Client] = @Origi"& _ 
                "nal_Client)) AND ((@IsNull_SuffixePostal = 1 AND [SuffixePostal] IS NULL) OR ([S"& _ 
                "uffixePostal] = @Original_SuffixePostal)) AND ((@IsNull_CodePostalLiv = 1 AND [C"& _ 
                "odePostalLiv] IS NULL) OR ([CodePostalLiv] = @Original_CodePostalLiv)) AND ((@Is"& _ 
                "Null_VilleLiv = 1 AND [VilleLiv] IS NULL) OR ([VilleLiv] = @Original_VilleLiv)) "& _ 
                "AND ((@IsNull_PaysLiv = 1 AND [PaysLiv] IS NULL) OR ([PaysLiv] = @Original_PaysL"& _ 
                "iv)) AND ((@IsNull_Inactif = 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_"& _ 
                "Inactif)) AND ((@IsNull_LoginSite = 1 AND [LoginSite] IS NULL) OR ([LoginSite] ="& _ 
                " @Original_LoginSite)) AND ((@IsNull_PwdSite = 1 AND [PwdSite] IS NULL) OR ([Pwd"& _ 
                "Site] = @Original_PwdSite)) AND ((@IsNull_IdSite = 1 AND [IdSite] IS NULL) OR (["& _ 
                "IdSite] = @Original_IdSite)) AND ((@IsNull_NCompteF = 1 AND [NCompteF] IS NULL) "& _ 
                "OR ([NCompteF] = @Original_NCompteF)) AND ((@IsNull_NActiviteF = 1 AND [NActivit"& _ 
                "eF] IS NULL) OR ([NActiviteF] = @Original_NActiviteF)) AND ((@IsNull_NCompteC = "& _ 
                "1 AND [NCompteC] IS NULL) OR ([NCompteC] = @Original_NCompteC)) AND ((@IsNull_NA"& _ 
                "ctiviteC = 1 AND [NActiviteC] IS NULL) OR ([NActiviteC] = @Original_NActiviteC))"& _ 
                " AND ((@IsNull_nTarif = 1 AND [nTarif] IS NULL) OR ([nTarif] = @Original_nTarif)"& _ 
                ") AND ((@IsNull_Civilite = 1 AND [Civilite] IS NULL) OR ([Civilite] = @Original_"& _ 
                "Civilite)) AND ((@IsNull_Licence = 1 AND [Licence] IS NULL) OR ([Licence] = @Ori"& _ 
                "ginal_Licence)) AND ((@IsNull_Critere1 = 1 AND [Critere1] IS NULL) OR ([Critere1"& _ 
                "] = @Original_Critere1)) AND ((@IsNull_Critere2 = 1 AND [Critere2] IS NULL) OR ("& _ 
                "[Critere2] = @Original_Critere2)) AND ((@IsNull_Critere3 = 1 AND [Critere3] IS N"& _ 
                "ULL) OR ([Critere3] = @Original_Critere3)) AND ((@IsNull_Critere4 = 1 AND [Crite"& _ 
                "re4] IS NULL) OR ([Critere4] = @Original_Critere4)) AND ((@IsNull_NTVAIntraCom ="& _ 
                " 1 AND [NTVAIntraCom] IS NULL) OR ([NTVAIntraCom] = @Original_NTVAIntraCom)) AND"& _ 
                " ((@IsNull_IsExport = 1 AND [IsExport] IS NULL) OR ([IsExport] = @Original_IsExp"& _ 
                "ort)) AND ((@IsNull_NomFacturation = 1 AND [NomFacturation] IS NULL) OR ([NomFac"& _ 
                "turation] = @Original_NomFacturation)) AND ((@IsNull_NomLivraison = 1 AND [NomLi"& _ 
                "vraison] IS NULL) OR ([NomLivraison] = @Original_NomLivraison)) AND ((@IsNull_Ed"& _ 
                "itionBLNonChiffre = 1 AND [EditionBLNonChiffre] IS NULL) OR ([EditionBLNonChiffr"& _ 
                "e] = @Original_EditionBLNonChiffre)) AND ((@IsNull_ObservationLivraison = 1 AND "& _ 
                "[ObservationLivraison] IS NULL) OR ([ObservationLivraison] = @Original_Observati"& _ 
                "onLivraison)) AND ([IndEscompteSpecifique] = @Original_IndEscompteSpecifique) AN"& _ 
                "D ((@IsNull_TauxEscompteSpecifique = 1 AND [TauxEscompteSpecifique] IS NULL) OR "& _ 
                "([TauxEscompteSpecifique] = @Original_TauxEscompteSpecifique)) AND ((@IsNull_Del"& _ 
                "aiValiditeEscompte = 1 AND [DelaiValiditeEscompte] IS NULL) OR ([DelaiValiditeEs"& _ 
                "compte] = @Original_DelaiValiditeEscompte)) AND ((@IsNull_nCommercial = 1 AND [n"& _ 
                "Commercial] IS NULL) OR ([nCommercial] = @Original_nCommercial)) AND ([LitigeEnC"& _ 
                "ours] = @Original_LitigeEnCours) AND ((@IsNull_EnCoursMax = 1 AND [EnCoursMax] I"& _ 
                "S NULL) OR ([EnCoursMax] = @Original_EnCoursMax)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateModification", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InfoMAJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeEntreprise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeEntreprise", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrganisme", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrganisme", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nMaisonMere", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nMaisonMere", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Dep", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodePostal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ville", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Pays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FormeJuridique", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormeJuridique", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ModePaiement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ModePaiement", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Echeance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Echeance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Echeance", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Echeance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Banque", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Banque", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RIB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RIB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CA", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EMail", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SiteInternet", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteInternet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FinMois", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinMois", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fournisseur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Client", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Client", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SuffixePostal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SuffixePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodePostalLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodePostalLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VilleLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VilleLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaysLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaysLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LoginSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LoginSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PwdSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PwdSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdSite", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "IdSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Civilite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Civilite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Licence", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Licence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NTVAIntraCom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NTVAIntraCom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsExport", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsExport", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NomFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NomFacturation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NomLivraison", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NomLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EditionBLNonChiffre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EditionBLNonChiffre", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ObservationLivraison", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ObservationLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IndEscompteSpecifique", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IndEscompteSpecifique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TauxEscompteSpecifique", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TauxEscompteSpecifique", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LitigeEnCours", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LitigeEnCours", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EnCoursMax", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EnCoursMax", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EnCoursMax", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EnCoursMax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Entreprise] ([nEntreprise], [DateCreation], [DateModification], [Inf"& _ 
                "oMAJ], [TypeEntreprise], [nOrganisme], [nMaisonMere], [Dep], [Nom], [Adresse], ["& _ 
                "CodePostal], [Ville], [Pays], [FormeJuridique], [TypeClient], [CibleCommercial],"& _ 
                " [ModePaiement], [Echeance], [Banque], [RIB], [CA], [EMail], [SiteInternet], [Ob"& _ 
                "servations], [FinMois], [Remise], [TTVA], [FacturationTTC], [Fournisseur], [Clie"& _ 
                "nt], [SuffixePostal], [AdresseLiv], [CodePostalLiv], [VilleLiv], [PaysLiv], [Ina"& _ 
                "ctif], [LoginSite], [PwdSite], [IdSite], [NCompteF], [NActiviteF], [NCompteC], ["& _ 
                "NActiviteC], [nTarif], [Civilite], [Logo], [Licence], [Critere1], [Critere2], [C"& _ 
                "ritere3], [Critere4], [NTVAIntraCom], [IsExport], [NomFacturation], [NomLivraiso"& _ 
                "n], [EditionBLNonChiffre], [ObservationLivraison], [IndEscompteSpecifique], [Tau"& _ 
                "xEscompteSpecifique], [DelaiValiditeEscompte], [nCommercial], [LitigeEnCours], ["& _ 
                "EnCoursMax]) VALUES (@nEntreprise, @DateCreation, @DateModification, @InfoMAJ, @"& _ 
                "TypeEntreprise, @nOrganisme, @nMaisonMere, @Dep, @Nom, @Adresse, @CodePostal, @V"& _ 
                "ille, @Pays, @FormeJuridique, @TypeClient, @CibleCommercial, @ModePaiement, @Ech"& _ 
                "eance, @Banque, @RIB, @CA, @EMail, @SiteInternet, @Observations, @FinMois, @Remi"& _ 
                "se, @TTVA, @FacturationTTC, @Fournisseur, @Client, @SuffixePostal, @AdresseLiv, "& _ 
                "@CodePostalLiv, @VilleLiv, @PaysLiv, @Inactif, @LoginSite, @PwdSite, @IdSite, @N"& _ 
                "CompteF, @NActiviteF, @NCompteC, @NActiviteC, @nTarif, @Civilite, @Logo, @Licenc"& _ 
                "e, @Critere1, @Critere2, @Critere3, @Critere4, @NTVAIntraCom, @IsExport, @NomFac"& _ 
                "turation, @NomLivraison, @EditionBLNonChiffre, @ObservationLivraison, @IndEscomp"& _ 
                "teSpecifique, @TauxEscompteSpecifique, @DelaiValiditeEscompte, @nCommercial, @Li"& _ 
                "tigeEnCours, @EnCoursMax);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nEntreprise, DateCreation, DateModification, "& _ 
                "InfoMAJ, TypeEntreprise, nOrganisme, nMaisonMere, Dep, Nom, Adresse, CodePostal,"& _ 
                " Ville, Pays, FormeJuridique, TypeClient, CibleCommercial, ModePaiement, Echeanc"& _ 
                "e, Banque, RIB, CA, EMail, SiteInternet, Observations, FinMois, Remise, TTVA, Fa"& _ 
                "cturationTTC, Fournisseur, Client, SuffixePostal, AdresseLiv, CodePostalLiv, Vil"& _ 
                "leLiv, PaysLiv, Inactif, LoginSite, PwdSite, IdSite, NCompteF, NActiviteF, NComp"& _ 
                "teC, NActiviteC, nTarif, Civilite, Logo, Licence, Critere1, Critere2, Critere3, "& _ 
                "Critere4, NTVAIntraCom, IsExport, NomFacturation, NomLivraison, EditionBLNonChif"& _ 
                "fre, ObservationLivraison, IndEscompteSpecifique, TauxEscompteSpecifique, DelaiV"& _ 
                "aliditeEscompte, nCommercial, LitigeEnCours, EnCoursMax, SUBSTRING(RIB, 1, 5) AS"& _ 
                " RIBBanque, SUBSTRING(RIB, 6, 5) AS RIBGichet, SUBSTRING(RIB, 11, 11) AS RIBComp"& _ 
                "te, SUBSTRING(RIB, 22, 2) AS RIBCle, SUBSTRING(CONVERT (varchar(20), nEntreprise"& _ 
                "), 1, 9) AS siren FROM Entreprise WHERE (nEntreprise = @nEntreprise)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeEntreprise", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrganisme", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nMaisonMere", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adresse", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adresse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormeJuridique", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CibleCommercial", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CibleCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModePaiement", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Echeance", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Echeance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Banque", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteInternet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observations", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observations", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinMois", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fournisseur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SuffixePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseLiv", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodePostalLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VilleLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaysLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoginSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PwdSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdSite", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "IdSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Civilite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Logo", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Logo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Licence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NTVAIntraCom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsExport", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomFacturation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EditionBLNonChiffre", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ObservationLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IndEscompteSpecifique", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IndEscompteSpecifique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TauxEscompteSpecifique", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LitigeEnCours", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LitigeEnCours", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EnCoursMax", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EnCoursMax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Entreprise] SET [nEntreprise] = @nEntreprise, [DateCreation] = @DateCreat"& _ 
                "ion, [DateModification] = @DateModification, [InfoMAJ] = @InfoMAJ, [TypeEntrepri"& _ 
                "se] = @TypeEntreprise, [nOrganisme] = @nOrganisme, [nMaisonMere] = @nMaisonMere,"& _ 
                " [Dep] = @Dep, [Nom] = @Nom, [Adresse] = @Adresse, [CodePostal] = @CodePostal, ["& _ 
                "Ville] = @Ville, [Pays] = @Pays, [FormeJuridique] = @FormeJuridique, [TypeClient"& _ 
                "] = @TypeClient, [CibleCommercial] = @CibleCommercial, [ModePaiement] = @ModePai"& _ 
                "ement, [Echeance] = @Echeance, [Banque] = @Banque, [RIB] = @RIB, [CA] = @CA, [EM"& _ 
                "ail] = @EMail, [SiteInternet] = @SiteInternet, [Observations] = @Observations, ["& _ 
                "FinMois] = @FinMois, [Remise] = @Remise, [TTVA] = @TTVA, [FacturationTTC] = @Fac"& _ 
                "turationTTC, [Fournisseur] = @Fournisseur, [Client] = @Client, [SuffixePostal] ="& _ 
                " @SuffixePostal, [AdresseLiv] = @AdresseLiv, [CodePostalLiv] = @CodePostalLiv, ["& _ 
                "VilleLiv] = @VilleLiv, [PaysLiv] = @PaysLiv, [Inactif] = @Inactif, [LoginSite] ="& _ 
                " @LoginSite, [PwdSite] = @PwdSite, [IdSite] = @IdSite, [NCompteF] = @NCompteF, ["& _ 
                "NActiviteF] = @NActiviteF, [NCompteC] = @NCompteC, [NActiviteC] = @NActiviteC, ["& _ 
                "nTarif] = @nTarif, [Civilite] = @Civilite, [Logo] = @Logo, [Licence] = @Licence,"& _ 
                " [Critere1] = @Critere1, [Critere2] = @Critere2, [Critere3] = @Critere3, [Criter"& _ 
                "e4] = @Critere4, [NTVAIntraCom] = @NTVAIntraCom, [IsExport] = @IsExport, [NomFac"& _ 
                "turation] = @NomFacturation, [NomLivraison] = @NomLivraison, [EditionBLNonChiffr"& _ 
                "e] = @EditionBLNonChiffre, [ObservationLivraison] = @ObservationLivraison, [IndE"& _ 
                "scompteSpecifique] = @IndEscompteSpecifique, [TauxEscompteSpecifique] = @TauxEsc"& _ 
                "ompteSpecifique, [DelaiValiditeEscompte] = @DelaiValiditeEscompte, [nCommercial]"& _ 
                " = @nCommercial, [LitigeEnCours] = @LitigeEnCours, [EnCoursMax] = @EnCoursMax WH"& _ 
                "ERE (([nEntreprise] = @Original_nEntreprise) AND ((@IsNull_DateCreation = 1 AND "& _ 
                "[DateCreation] IS NULL) OR ([DateCreation] = @Original_DateCreation)) AND ((@IsN"& _ 
                "ull_DateModification = 1 AND [DateModification] IS NULL) OR ([DateModification] "& _ 
                "= @Original_DateModification)) AND ((@IsNull_InfoMAJ = 1 AND [InfoMAJ] IS NULL) "& _ 
                "OR ([InfoMAJ] = @Original_InfoMAJ)) AND ((@IsNull_TypeEntreprise = 1 AND [TypeEn"& _ 
                "treprise] IS NULL) OR ([TypeEntreprise] = @Original_TypeEntreprise)) AND ((@IsNu"& _ 
                "ll_nOrganisme = 1 AND [nOrganisme] IS NULL) OR ([nOrganisme] = @Original_nOrgani"& _ 
                "sme)) AND ((@IsNull_nMaisonMere = 1 AND [nMaisonMere] IS NULL) OR ([nMaisonMere]"& _ 
                " = @Original_nMaisonMere)) AND ((@IsNull_Dep = 1 AND [Dep] IS NULL) OR ([Dep] = "& _ 
                "@Original_Dep)) AND ((@IsNull_Nom = 1 AND [Nom] IS NULL) OR ([Nom] = @Original_N"& _ 
                "om)) AND ((@IsNull_CodePostal = 1 AND [CodePostal] IS NULL) OR ([CodePostal] = @"& _ 
                "Original_CodePostal)) AND ((@IsNull_Ville = 1 AND [Ville] IS NULL) OR ([Ville] ="& _ 
                " @Original_Ville)) AND ((@IsNull_Pays = 1 AND [Pays] IS NULL) OR ([Pays] = @Orig"& _ 
                "inal_Pays)) AND ((@IsNull_FormeJuridique = 1 AND [FormeJuridique] IS NULL) OR (["& _ 
                "FormeJuridique] = @Original_FormeJuridique)) AND ((@IsNull_TypeClient = 1 AND [T"& _ 
                "ypeClient] IS NULL) OR ([TypeClient] = @Original_TypeClient)) AND ((@IsNull_Mode"& _ 
                "Paiement = 1 AND [ModePaiement] IS NULL) OR ([ModePaiement] = @Original_ModePaie"& _ 
                "ment)) AND ((@IsNull_Echeance = 1 AND [Echeance] IS NULL) OR ([Echeance] = @Orig"& _ 
                "inal_Echeance)) AND ((@IsNull_Banque = 1 AND [Banque] IS NULL) OR ([Banque] = @O"& _ 
                "riginal_Banque)) AND ((@IsNull_RIB = 1 AND [RIB] IS NULL) OR ([RIB] = @Original_"& _ 
                "RIB)) AND ((@IsNull_CA = 1 AND [CA] IS NULL) OR ([CA] = @Original_CA)) AND ((@Is"& _ 
                "Null_EMail = 1 AND [EMail] IS NULL) OR ([EMail] = @Original_EMail)) AND ((@IsNul"& _ 
                "l_SiteInternet = 1 AND [SiteInternet] IS NULL) OR ([SiteInternet] = @Original_Si"& _ 
                "teInternet)) AND ((@IsNull_FinMois = 1 AND [FinMois] IS NULL) OR ([FinMois] = @O"& _ 
                "riginal_FinMois)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = "& _ 
                "@Original_Remise)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Orig"& _ 
                "inal_TTVA)) AND ((@IsNull_FacturationTTC = 1 AND [FacturationTTC] IS NULL) OR (["& _ 
                "FacturationTTC] = @Original_FacturationTTC)) AND ((@IsNull_Fournisseur = 1 AND ["& _ 
                "Fournisseur] IS NULL) OR ([Fournisseur] = @Original_Fournisseur)) AND ((@IsNull_"& _ 
                "Client = 1 AND [Client] IS NULL) OR ([Client] = @Original_Client)) AND ((@IsNull"& _ 
                "_SuffixePostal = 1 AND [SuffixePostal] IS NULL) OR ([SuffixePostal] = @Original_"& _ 
                "SuffixePostal)) AND ((@IsNull_CodePostalLiv = 1 AND [CodePostalLiv] IS NULL) OR "& _ 
                "([CodePostalLiv] = @Original_CodePostalLiv)) AND ((@IsNull_VilleLiv = 1 AND [Vil"& _ 
                "leLiv] IS NULL) OR ([VilleLiv] = @Original_VilleLiv)) AND ((@IsNull_PaysLiv = 1 "& _ 
                "AND [PaysLiv] IS NULL) OR ([PaysLiv] = @Original_PaysLiv)) AND ((@IsNull_Inactif"& _ 
                " = 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_Inactif)) AND ((@IsNull_Lo"& _ 
                "ginSite = 1 AND [LoginSite] IS NULL) OR ([LoginSite] = @Original_LoginSite)) AND"& _ 
                " ((@IsNull_PwdSite = 1 AND [PwdSite] IS NULL) OR ([PwdSite] = @Original_PwdSite)"& _ 
                ") AND ((@IsNull_IdSite = 1 AND [IdSite] IS NULL) OR ([IdSite] = @Original_IdSite"& _ 
                ")) AND ((@IsNull_NCompteF = 1 AND [NCompteF] IS NULL) OR ([NCompteF] = @Original"& _ 
                "_NCompteF)) AND ((@IsNull_NActiviteF = 1 AND [NActiviteF] IS NULL) OR ([NActivit"& _ 
                "eF] = @Original_NActiviteF)) AND ((@IsNull_NCompteC = 1 AND [NCompteC] IS NULL) "& _ 
                "OR ([NCompteC] = @Original_NCompteC)) AND ((@IsNull_NActiviteC = 1 AND [NActivit"& _ 
                "eC] IS NULL) OR ([NActiviteC] = @Original_NActiviteC)) AND ((@IsNull_nTarif = 1 "& _ 
                "AND [nTarif] IS NULL) OR ([nTarif] = @Original_nTarif)) AND ((@IsNull_Civilite ="& _ 
                " 1 AND [Civilite] IS NULL) OR ([Civilite] = @Original_Civilite)) AND ((@IsNull_L"& _ 
                "icence = 1 AND [Licence] IS NULL) OR ([Licence] = @Original_Licence)) AND ((@IsN"& _ 
                "ull_Critere1 = 1 AND [Critere1] IS NULL) OR ([Critere1] = @Original_Critere1)) A"& _ 
                "ND ((@IsNull_Critere2 = 1 AND [Critere2] IS NULL) OR ([Critere2] = @Original_Cri"& _ 
                "tere2)) AND ((@IsNull_Critere3 = 1 AND [Critere3] IS NULL) OR ([Critere3] = @Ori"& _ 
                "ginal_Critere3)) AND ((@IsNull_Critere4 = 1 AND [Critere4] IS NULL) OR ([Critere"& _ 
                "4] = @Original_Critere4)) AND ((@IsNull_NTVAIntraCom = 1 AND [NTVAIntraCom] IS N"& _ 
                "ULL) OR ([NTVAIntraCom] = @Original_NTVAIntraCom)) AND ((@IsNull_IsExport = 1 AN"& _ 
                "D [IsExport] IS NULL) OR ([IsExport] = @Original_IsExport)) AND ((@IsNull_NomFac"& _ 
                "turation = 1 AND [NomFacturation] IS NULL) OR ([NomFacturation] = @Original_NomF"& _ 
                "acturation)) AND ((@IsNull_NomLivraison = 1 AND [NomLivraison] IS NULL) OR ([Nom"& _ 
                "Livraison] = @Original_NomLivraison)) AND ((@IsNull_EditionBLNonChiffre = 1 AND "& _ 
                "[EditionBLNonChiffre] IS NULL) OR ([EditionBLNonChiffre] = @Original_EditionBLNo"& _ 
                "nChiffre)) AND ((@IsNull_ObservationLivraison = 1 AND [ObservationLivraison] IS "& _ 
                "NULL) OR ([ObservationLivraison] = @Original_ObservationLivraison)) AND ([IndEsc"& _ 
                "ompteSpecifique] = @Original_IndEscompteSpecifique) AND ((@IsNull_TauxEscompteSp"& _ 
                "ecifique = 1 AND [TauxEscompteSpecifique] IS NULL) OR ([TauxEscompteSpecifique] "& _ 
                "= @Original_TauxEscompteSpecifique)) AND ((@IsNull_DelaiValiditeEscompte = 1 AND"& _ 
                " [DelaiValiditeEscompte] IS NULL) OR ([DelaiValiditeEscompte] = @Original_DelaiV"& _ 
                "aliditeEscompte)) AND ((@IsNull_nCommercial = 1 AND [nCommercial] IS NULL) OR (["& _ 
                "nCommercial] = @Original_nCommercial)) AND ([LitigeEnCours] = @Original_LitigeEn"& _ 
                "Cours) AND ((@IsNull_EnCoursMax = 1 AND [EnCoursMax] IS NULL) OR ([EnCoursMax] ="& _ 
                " @Original_EnCoursMax)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nEntreprise, DateCreation, DateModification, I"& _ 
                "nfoMAJ, TypeEntreprise, nOrganisme, nMaisonMere, Dep, Nom, Adresse, CodePostal, "& _ 
                "Ville, Pays, FormeJuridique, TypeClient, CibleCommercial, ModePaiement, Echeance"& _ 
                ", Banque, RIB, CA, EMail, SiteInternet, Observations, FinMois, Remise, TTVA, Fac"& _ 
                "turationTTC, Fournisseur, Client, SuffixePostal, AdresseLiv, CodePostalLiv, Vill"& _ 
                "eLiv, PaysLiv, Inactif, LoginSite, PwdSite, IdSite, NCompteF, NActiviteF, NCompt"& _ 
                "eC, NActiviteC, nTarif, Civilite, Logo, Licence, Critere1, Critere2, Critere3, C"& _ 
                "ritere4, NTVAIntraCom, IsExport, NomFacturation, NomLivraison, EditionBLNonChiff"& _ 
                "re, ObservationLivraison, IndEscompteSpecifique, TauxEscompteSpecifique, DelaiVa"& _ 
                "liditeEscompte, nCommercial, LitigeEnCours, EnCoursMax, SUBSTRING(RIB, 1, 5) AS "& _ 
                "RIBBanque, SUBSTRING(RIB, 6, 5) AS RIBGichet, SUBSTRING(RIB, 11, 11) AS RIBCompt"& _ 
                "e, SUBSTRING(RIB, 22, 2) AS RIBCle, SUBSTRING(CONVERT (varchar(20), nEntreprise)"& _ 
                ", 1, 9) AS siren FROM Entreprise WHERE (nEntreprise = @nEntreprise)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeEntreprise", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrganisme", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nMaisonMere", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adresse", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adresse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormeJuridique", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CibleCommercial", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CibleCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModePaiement", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Echeance", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Echeance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Banque", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteInternet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observations", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observations", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinMois", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fournisseur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SuffixePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseLiv", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodePostalLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VilleLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaysLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoginSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PwdSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdSite", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "IdSite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Civilite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Logo", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Logo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Licence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critere4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NTVAIntraCom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsExport", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomFacturation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EditionBLNonChiffre", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ObservationLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IndEscompteSpecifique", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IndEscompteSpecifique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TauxEscompteSpecifique", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LitigeEnCours", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LitigeEnCours", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EnCoursMax", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EnCoursMax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nEntreprise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreation", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateModification", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateModification", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateModification", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InfoMAJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InfoMAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InfoMAJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeEntreprise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeEntreprise", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeEntreprise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrganisme", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrganisme", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrganisme", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nMaisonMere", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nMaisonMere", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nMaisonMere", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Dep", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dep", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodePostal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ville", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ville", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ville", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Pays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pays", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pays", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FormeJuridique", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormeJuridique", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormeJuridique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeClient", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ModePaiement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ModePaiement", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModePaiement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Echeance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Echeance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Echeance", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Echeance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Banque", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Banque", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banque", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RIB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RIB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CA", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EMail", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SiteInternet", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteInternet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteInternet", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FinMois", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinMois", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinMois", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fournisseur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Client", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Client", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SuffixePostal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SuffixePostal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SuffixePostal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodePostalLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodePostalLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodePostalLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VilleLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VilleLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VilleLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaysLiv", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaysLiv", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaysLiv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LoginSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LoginSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoginSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PwdSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PwdSite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PwdSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdSite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdSite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdSite", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "IdSite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Civilite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Civilite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Civilite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Licence", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Licence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licence", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Critere4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Critere4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critere4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NTVAIntraCom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NTVAIntraCom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTVAIntraCom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsExport", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsExport", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExport", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NomFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NomFacturation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NomLivraison", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NomLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomLivraison", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EditionBLNonChiffre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EditionBLNonChiffre", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditionBLNonChiffre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ObservationLivraison", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ObservationLivraison", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservationLivraison", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IndEscompteSpecifique", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IndEscompteSpecifique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TauxEscompteSpecifique", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TauxEscompteSpecifique", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "TauxEscompteSpecifique", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DelaiValiditeEscompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DelaiValiditeEscompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LitigeEnCours", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LitigeEnCours", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EnCoursMax", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EnCoursMax", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EnCoursMax", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EnCoursMax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        *, SUBSTRING(RIB, 1, 5) AS RIBBanque, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         SU"& _ 
                "BSTRING(RIB, 6, 5) AS RIBGichet, SUBSTRING(RIB, 11, 11) AS RIBCompte, SUBSTRING("& _ 
                "RIB, 22, 2)AS RIBCle, SUBSTRING(convert(varchar(20),nEntreprise), 1, 9) AS siren"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Entreprise"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsImpressionFacture.Entreprise1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DsImpressionFacture.Entreprise1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsImpressionFacture.Entreprise1DataTable = New DsImpressionFacture.Entreprise1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DsImpressionFacture.Entreprise1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DsImpressionFacture) As Integer
            Return Me.Adapter.Update(dataSet, "Entreprise1")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nEntreprise As Decimal,  _
                    ByVal Original_DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateModification As Global.System.Nullable(Of Date),  _
                    ByVal Original_InfoMAJ As String,  _
                    ByVal Original_TypeEntreprise As String,  _
                    ByVal Original_nOrganisme As String,  _
                    ByVal Original_nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Dep As String,  _
                    ByVal Original_Nom As String,  _
                    ByVal Original_CodePostal As String,  _
                    ByVal Original_Ville As String,  _
                    ByVal Original_Pays As String,  _
                    ByVal Original_FormeJuridique As String,  _
                    ByVal Original_TypeClient As String,  _
                    ByVal Original_ModePaiement As String,  _
                    ByVal Original_Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Banque As String,  _
                    ByVal Original_RIB As String,  _
                    ByVal Original_CA As Global.System.Nullable(Of Single),  _
                    ByVal Original_EMail As String,  _
                    ByVal Original_SiteInternet As String,  _
                    ByVal Original_FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Client As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SuffixePostal As String,  _
                    ByVal Original_CodePostalLiv As String,  _
                    ByVal Original_VilleLiv As String,  _
                    ByVal Original_PaysLiv As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LoginSite As String,  _
                    ByVal Original_PwdSite As String,  _
                    ByVal Original_IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompteF As String,  _
                    ByVal Original_NActiviteF As String,  _
                    ByVal Original_NCompteC As String,  _
                    ByVal Original_NActiviteC As String,  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Civilite As String,  _
                    ByVal Original_Licence As String,  _
                    ByVal Original_Critere1 As String,  _
                    ByVal Original_Critere2 As String,  _
                    ByVal Original_Critere3 As String,  _
                    ByVal Original_Critere4 As String,  _
                    ByVal Original_NTVAIntraCom As String,  _
                    ByVal Original_IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NomFacturation As String,  _
                    ByVal Original_NomLivraison As String,  _
                    ByVal Original_EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ObservationLivraison As String,  _
                    ByVal Original_IndEscompteSpecifique As Boolean,  _
                    ByVal Original_TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LitigeEnCours As Boolean,  _
                    ByVal Original_EnCoursMax As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nEntreprise,Decimal)
            If (Original_DateCreation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DateCreation.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_DateModification.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DateModification.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_InfoMAJ Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_InfoMAJ,String)
            End If
            If (Original_TypeEntreprise Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TypeEntreprise,String)
            End If
            If (Original_nOrganisme Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_nOrganisme,String)
            End If
            If (Original_nMaisonMere.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_nMaisonMere.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Dep Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Dep,String)
            End If
            If (Original_Nom Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Nom,String)
            End If
            If (Original_CodePostal Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CodePostal,String)
            End If
            If (Original_Ville Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Ville,String)
            End If
            If (Original_Pays Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Pays,String)
            End If
            If (Original_FormeJuridique Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_FormeJuridique,String)
            End If
            If (Original_TypeClient Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_TypeClient,String)
            End If
            If (Original_ModePaiement Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_ModePaiement,String)
            End If
            If (Original_Echeance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Echeance.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Banque Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Banque,String)
            End If
            If (Original_RIB Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_RIB,String)
            End If
            If (Original_CA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_CA.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_EMail Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_EMail,String)
            End If
            If (Original_SiteInternet Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_SiteInternet,String)
            End If
            If (Original_FinMois.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_FinMois.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_TTVA,String)
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_Fournisseur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_Fournisseur.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_Client.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_Client.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_SuffixePostal Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_SuffixePostal,String)
            End If
            If (Original_CodePostalLiv Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_CodePostalLiv,String)
            End If
            If (Original_VilleLiv Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_VilleLiv,String)
            End If
            If (Original_PaysLiv Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_PaysLiv,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_LoginSite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_LoginSite,String)
            End If
            If (Original_PwdSite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_PwdSite,String)
            End If
            If (Original_IdSite.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_IdSite.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompteF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_NCompteF,String)
            End If
            If (Original_NActiviteF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_NActiviteF,String)
            End If
            If (Original_NCompteC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_NCompteC,String)
            End If
            If (Original_NActiviteC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_NActiviteC,String)
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (Original_Civilite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(Original_Civilite,String)
            End If
            If (Original_Licence Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(Original_Licence,String)
            End If
            If (Original_Critere1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(Original_Critere1,String)
            End If
            If (Original_Critere2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(Original_Critere2,String)
            End If
            If (Original_Critere3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(Original_Critere3,String)
            End If
            If (Original_Critere4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(Original_Critere4,String)
            End If
            If (Original_NTVAIntraCom Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(Original_NTVAIntraCom,String)
            End If
            If (Original_IsExport.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(Original_IsExport.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_NomFacturation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(Original_NomFacturation,String)
            End If
            If (Original_NomLivraison Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(Original_NomLivraison,String)
            End If
            If (Original_EditionBLNonChiffre.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(Original_EditionBLNonChiffre.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_ObservationLivraison Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(Original_ObservationLivraison,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(103).Value = CType(Original_IndEscompteSpecifique,Boolean)
            If (Original_TauxEscompteSpecifique.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(Original_TauxEscompteSpecifique.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_DelaiValiditeEscompte.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(Original_DelaiValiditeEscompte.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(107).Value = Global.System.DBNull.Value
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(Original_nCommercial.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(109).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(110).Value = CType(Original_LitigeEnCours,Boolean)
            If (Original_EnCoursMax.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = CType(Original_EnCoursMax.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nEntreprise As Decimal,  _
                    ByVal DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal DateModification As Global.System.Nullable(Of Date),  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypeEntreprise As String,  _
                    ByVal nOrganisme As String,  _
                    ByVal nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal FormeJuridique As String,  _
                    ByVal TypeClient As String,  _
                    ByVal CibleCommercial As String,  _
                    ByVal ModePaiement As String,  _
                    ByVal Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Banque As String,  _
                    ByVal RIB As String,  _
                    ByVal CA As Global.System.Nullable(Of Single),  _
                    ByVal EMail As String,  _
                    ByVal SiteInternet As String,  _
                    ByVal Observations As String,  _
                    ByVal FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Client As Global.System.Nullable(Of Boolean),  _
                    ByVal SuffixePostal As String,  _
                    ByVal AdresseLiv As String,  _
                    ByVal CodePostalLiv As String,  _
                    ByVal VilleLiv As String,  _
                    ByVal PaysLiv As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal LoginSite As String,  _
                    ByVal PwdSite As String,  _
                    ByVal IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompteF As String,  _
                    ByVal NActiviteF As String,  _
                    ByVal NCompteC As String,  _
                    ByVal NActiviteC As String,  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Civilite As String,  _
                    ByVal Logo() As Byte,  _
                    ByVal Licence As String,  _
                    ByVal Critere1 As String,  _
                    ByVal Critere2 As String,  _
                    ByVal Critere3 As String,  _
                    ByVal Critere4 As String,  _
                    ByVal NTVAIntraCom As String,  _
                    ByVal IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal NomFacturation As String,  _
                    ByVal NomLivraison As String,  _
                    ByVal EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal ObservationLivraison As String,  _
                    ByVal IndEscompteSpecifique As Boolean,  _
                    ByVal TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal LitigeEnCours As Boolean,  _
                    ByVal EnCoursMax As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nEntreprise,Decimal)
            If (DateCreation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateCreation.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateModification.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateModification.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (InfoMAJ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(InfoMAJ,String)
            End If
            If (TypeEntreprise Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TypeEntreprise,String)
            End If
            If (nOrganisme Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(nOrganisme,String)
            End If
            If (nMaisonMere.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(nMaisonMere.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Dep Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Dep,String)
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Nom,String)
            End If
            If (Adresse Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Adresse,String)
            End If
            If (CodePostal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CodePostal,String)
            End If
            If (Ville Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Ville,String)
            End If
            If (Pays Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Pays,String)
            End If
            If (FormeJuridique Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(FormeJuridique,String)
            End If
            If (TypeClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(TypeClient,String)
            End If
            If (CibleCommercial Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CibleCommercial,String)
            End If
            If (ModePaiement Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(ModePaiement,String)
            End If
            If (Echeance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Echeance.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Banque Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Banque,String)
            End If
            If (RIB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(RIB,String)
            End If
            If (CA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CA.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (EMail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(EMail,String)
            End If
            If (SiteInternet Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(SiteInternet,String)
            End If
            If (Observations Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Observations,String)
            End If
            If (FinMois.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(FinMois.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(TTVA,String)
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Fournisseur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Fournisseur.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Client.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Client.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (SuffixePostal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(SuffixePostal,String)
            End If
            If (AdresseLiv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(AdresseLiv,String)
            End If
            If (CodePostalLiv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(CodePostalLiv,String)
            End If
            If (VilleLiv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(VilleLiv,String)
            End If
            If (PaysLiv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(PaysLiv,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (LoginSite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(LoginSite,String)
            End If
            If (PwdSite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(PwdSite,String)
            End If
            If (IdSite.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(IdSite.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (NCompteF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(NCompteF,String)
            End If
            If (NActiviteF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(NActiviteF,String)
            End If
            If (NCompteC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(NCompteC,String)
            End If
            If (NActiviteC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(NActiviteC,String)
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Civilite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(Civilite,String)
            End If
            If (Logo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Logo,Byte())
            End If
            If (Licence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Licence,String)
            End If
            If (Critere1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(Critere1,String)
            End If
            If (Critere2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Critere2,String)
            End If
            If (Critere3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(Critere3,String)
            End If
            If (Critere4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(Critere4,String)
            End If
            If (NTVAIntraCom Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(NTVAIntraCom,String)
            End If
            If (IsExport.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(IsExport.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (NomFacturation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(NomFacturation,String)
            End If
            If (NomLivraison Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(NomLivraison,String)
            End If
            If (EditionBLNonChiffre.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(EditionBLNonChiffre.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (ObservationLivraison Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(ObservationLivraison,String)
            End If
            Me.Adapter.InsertCommand.Parameters(57).Value = CType(IndEscompteSpecifique,Boolean)
            If (TauxEscompteSpecifique.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(TauxEscompteSpecifique.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (DelaiValiditeEscompte.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(DelaiValiditeEscompte.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(nCommercial.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(61).Value = CType(LitigeEnCours,Boolean)
            If (EnCoursMax.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(EnCoursMax.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nEntreprise As Decimal,  _
                    ByVal DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal DateModification As Global.System.Nullable(Of Date),  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypeEntreprise As String,  _
                    ByVal nOrganisme As String,  _
                    ByVal nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal FormeJuridique As String,  _
                    ByVal TypeClient As String,  _
                    ByVal CibleCommercial As String,  _
                    ByVal ModePaiement As String,  _
                    ByVal Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Banque As String,  _
                    ByVal RIB As String,  _
                    ByVal CA As Global.System.Nullable(Of Single),  _
                    ByVal EMail As String,  _
                    ByVal SiteInternet As String,  _
                    ByVal Observations As String,  _
                    ByVal FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Client As Global.System.Nullable(Of Boolean),  _
                    ByVal SuffixePostal As String,  _
                    ByVal AdresseLiv As String,  _
                    ByVal CodePostalLiv As String,  _
                    ByVal VilleLiv As String,  _
                    ByVal PaysLiv As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal LoginSite As String,  _
                    ByVal PwdSite As String,  _
                    ByVal IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompteF As String,  _
                    ByVal NActiviteF As String,  _
                    ByVal NCompteC As String,  _
                    ByVal NActiviteC As String,  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Civilite As String,  _
                    ByVal Logo() As Byte,  _
                    ByVal Licence As String,  _
                    ByVal Critere1 As String,  _
                    ByVal Critere2 As String,  _
                    ByVal Critere3 As String,  _
                    ByVal Critere4 As String,  _
                    ByVal NTVAIntraCom As String,  _
                    ByVal IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal NomFacturation As String,  _
                    ByVal NomLivraison As String,  _
                    ByVal EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal ObservationLivraison As String,  _
                    ByVal IndEscompteSpecifique As Boolean,  _
                    ByVal TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal LitigeEnCours As Boolean,  _
                    ByVal EnCoursMax As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nEntreprise As Decimal,  _
                    ByVal Original_DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateModification As Global.System.Nullable(Of Date),  _
                    ByVal Original_InfoMAJ As String,  _
                    ByVal Original_TypeEntreprise As String,  _
                    ByVal Original_nOrganisme As String,  _
                    ByVal Original_nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Dep As String,  _
                    ByVal Original_Nom As String,  _
                    ByVal Original_CodePostal As String,  _
                    ByVal Original_Ville As String,  _
                    ByVal Original_Pays As String,  _
                    ByVal Original_FormeJuridique As String,  _
                    ByVal Original_TypeClient As String,  _
                    ByVal Original_ModePaiement As String,  _
                    ByVal Original_Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Banque As String,  _
                    ByVal Original_RIB As String,  _
                    ByVal Original_CA As Global.System.Nullable(Of Single),  _
                    ByVal Original_EMail As String,  _
                    ByVal Original_SiteInternet As String,  _
                    ByVal Original_FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Client As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SuffixePostal As String,  _
                    ByVal Original_CodePostalLiv As String,  _
                    ByVal Original_VilleLiv As String,  _
                    ByVal Original_PaysLiv As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LoginSite As String,  _
                    ByVal Original_PwdSite As String,  _
                    ByVal Original_IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompteF As String,  _
                    ByVal Original_NActiviteF As String,  _
                    ByVal Original_NCompteC As String,  _
                    ByVal Original_NActiviteC As String,  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Civilite As String,  _
                    ByVal Original_Licence As String,  _
                    ByVal Original_Critere1 As String,  _
                    ByVal Original_Critere2 As String,  _
                    ByVal Original_Critere3 As String,  _
                    ByVal Original_Critere4 As String,  _
                    ByVal Original_NTVAIntraCom As String,  _
                    ByVal Original_IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NomFacturation As String,  _
                    ByVal Original_NomLivraison As String,  _
                    ByVal Original_EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ObservationLivraison As String,  _
                    ByVal Original_IndEscompteSpecifique As Boolean,  _
                    ByVal Original_TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LitigeEnCours As Boolean,  _
                    ByVal Original_EnCoursMax As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nEntreprise,Decimal)
            If (DateCreation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DateCreation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateModification.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DateModification.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (InfoMAJ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(InfoMAJ,String)
            End If
            If (TypeEntreprise Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TypeEntreprise,String)
            End If
            If (nOrganisme Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(nOrganisme,String)
            End If
            If (nMaisonMere.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(nMaisonMere.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Dep Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Dep,String)
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Nom,String)
            End If
            If (Adresse Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Adresse,String)
            End If
            If (CodePostal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CodePostal,String)
            End If
            If (Ville Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Ville,String)
            End If
            If (Pays Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Pays,String)
            End If
            If (FormeJuridique Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(FormeJuridique,String)
            End If
            If (TypeClient Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(TypeClient,String)
            End If
            If (CibleCommercial Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(CibleCommercial,String)
            End If
            If (ModePaiement Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ModePaiement,String)
            End If
            If (Echeance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Echeance.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Banque Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Banque,String)
            End If
            If (RIB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RIB,String)
            End If
            If (CA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(CA.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (EMail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(EMail,String)
            End If
            If (SiteInternet Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(SiteInternet,String)
            End If
            If (Observations Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Observations,String)
            End If
            If (FinMois.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(FinMois.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(TTVA,String)
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Fournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Fournisseur.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Client.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Client.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (SuffixePostal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(SuffixePostal,String)
            End If
            If (AdresseLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(AdresseLiv,String)
            End If
            If (CodePostalLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(CodePostalLiv,String)
            End If
            If (VilleLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(VilleLiv,String)
            End If
            If (PaysLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(PaysLiv,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (LoginSite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(LoginSite,String)
            End If
            If (PwdSite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(PwdSite,String)
            End If
            If (IdSite.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(IdSite.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (NCompteF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(NCompteF,String)
            End If
            If (NActiviteF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(NActiviteF,String)
            End If
            If (NCompteC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(NCompteC,String)
            End If
            If (NActiviteC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(NActiviteC,String)
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Civilite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Civilite,String)
            End If
            If (Logo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Logo,Byte())
            End If
            If (Licence Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Licence,String)
            End If
            If (Critere1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Critere1,String)
            End If
            If (Critere2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Critere2,String)
            End If
            If (Critere3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Critere3,String)
            End If
            If (Critere4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Critere4,String)
            End If
            If (NTVAIntraCom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(NTVAIntraCom,String)
            End If
            If (IsExport.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(IsExport.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (NomFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(NomFacturation,String)
            End If
            If (NomLivraison Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(NomLivraison,String)
            End If
            If (EditionBLNonChiffre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(EditionBLNonChiffre.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (ObservationLivraison Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(ObservationLivraison,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(IndEscompteSpecifique,Boolean)
            If (TauxEscompteSpecifique.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(TauxEscompteSpecifique.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (DelaiValiditeEscompte.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(DelaiValiditeEscompte.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(nCommercial.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(LitigeEnCours,Boolean)
            If (EnCoursMax.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(EnCoursMax.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_nEntreprise,Decimal)
            If (Original_DateCreation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_DateCreation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_DateModification.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_DateModification.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_InfoMAJ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_InfoMAJ,String)
            End If
            If (Original_TypeEntreprise Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_TypeEntreprise,String)
            End If
            If (Original_nOrganisme Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_nOrganisme,String)
            End If
            If (Original_nMaisonMere.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_nMaisonMere.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_Dep Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_Dep,String)
            End If
            If (Original_Nom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_Nom,String)
            End If
            If (Original_CodePostal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_CodePostal,String)
            End If
            If (Original_Ville Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_Ville,String)
            End If
            If (Original_Pays Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_Pays,String)
            End If
            If (Original_FormeJuridique Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_FormeJuridique,String)
            End If
            If (Original_TypeClient Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_TypeClient,String)
            End If
            If (Original_ModePaiement Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_ModePaiement,String)
            End If
            If (Original_Echeance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_Echeance.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (Original_Banque Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_Banque,String)
            End If
            If (Original_RIB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_RIB,String)
            End If
            If (Original_CA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_CA.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            End If
            If (Original_EMail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_EMail,String)
            End If
            If (Original_SiteInternet Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_SiteInternet,String)
            End If
            If (Original_FinMois.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_FinMois.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_TTVA,String)
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            End If
            If (Original_Fournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_Fournisseur.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            If (Original_Client.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_Client.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (Original_SuffixePostal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_SuffixePostal,String)
            End If
            If (Original_CodePostalLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(119).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(Original_CodePostalLiv,String)
            End If
            If (Original_VilleLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(121).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(Original_VilleLiv,String)
            End If
            If (Original_PaysLiv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(Original_PaysLiv,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = Global.System.DBNull.Value
            End If
            If (Original_LoginSite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(Original_LoginSite,String)
            End If
            If (Original_PwdSite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(Original_PwdSite,String)
            End If
            If (Original_IdSite.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(Original_IdSite.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompteF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(Original_NCompteF,String)
            End If
            If (Original_NActiviteF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(Original_NActiviteF,String)
            End If
            If (Original_NCompteC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(Original_NCompteC,String)
            End If
            If (Original_NActiviteC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(Original_NActiviteC,String)
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = Global.System.DBNull.Value
            End If
            If (Original_Civilite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(Original_Civilite,String)
            End If
            If (Original_Licence Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(Original_Licence,String)
            End If
            If (Original_Critere1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(Original_Critere1,String)
            End If
            If (Original_Critere2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(Original_Critere2,String)
            End If
            If (Original_Critere3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(Original_Critere3,String)
            End If
            If (Original_Critere4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(153).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(Original_Critere4,String)
            End If
            If (Original_NTVAIntraCom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(Original_NTVAIntraCom,String)
            End If
            If (Original_IsExport.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(Original_IsExport.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = Global.System.DBNull.Value
            End If
            If (Original_NomFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(159).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(Original_NomFacturation,String)
            End If
            If (Original_NomLivraison Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(161).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(Original_NomLivraison,String)
            End If
            If (Original_EditionBLNonChiffre.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(Original_EditionBLNonChiffre.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(163).Value = Global.System.DBNull.Value
            End If
            If (Original_ObservationLivraison Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(165).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(Original_ObservationLivraison,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(166).Value = CType(Original_IndEscompteSpecifique,Boolean)
            If (Original_TauxEscompteSpecifique.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(Original_TauxEscompteSpecifique.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(168).Value = Global.System.DBNull.Value
            End If
            If (Original_DelaiValiditeEscompte.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(Original_DelaiValiditeEscompte.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(170).Value = Global.System.DBNull.Value
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(Original_nCommercial.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(172).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(173).Value = CType(Original_LitigeEnCours,Boolean)
            If (Original_EnCoursMax.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(Original_EnCoursMax.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(175).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal DateModification As Global.System.Nullable(Of Date),  _
                    ByVal InfoMAJ As String,  _
                    ByVal TypeEntreprise As String,  _
                    ByVal nOrganisme As String,  _
                    ByVal nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Dep As String,  _
                    ByVal Nom As String,  _
                    ByVal Adresse As String,  _
                    ByVal CodePostal As String,  _
                    ByVal Ville As String,  _
                    ByVal Pays As String,  _
                    ByVal FormeJuridique As String,  _
                    ByVal TypeClient As String,  _
                    ByVal CibleCommercial As String,  _
                    ByVal ModePaiement As String,  _
                    ByVal Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Banque As String,  _
                    ByVal RIB As String,  _
                    ByVal CA As Global.System.Nullable(Of Single),  _
                    ByVal EMail As String,  _
                    ByVal SiteInternet As String,  _
                    ByVal Observations As String,  _
                    ByVal FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Client As Global.System.Nullable(Of Boolean),  _
                    ByVal SuffixePostal As String,  _
                    ByVal AdresseLiv As String,  _
                    ByVal CodePostalLiv As String,  _
                    ByVal VilleLiv As String,  _
                    ByVal PaysLiv As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal LoginSite As String,  _
                    ByVal PwdSite As String,  _
                    ByVal IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompteF As String,  _
                    ByVal NActiviteF As String,  _
                    ByVal NCompteC As String,  _
                    ByVal NActiviteC As String,  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Civilite As String,  _
                    ByVal Logo() As Byte,  _
                    ByVal Licence As String,  _
                    ByVal Critere1 As String,  _
                    ByVal Critere2 As String,  _
                    ByVal Critere3 As String,  _
                    ByVal Critere4 As String,  _
                    ByVal NTVAIntraCom As String,  _
                    ByVal IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal NomFacturation As String,  _
                    ByVal NomLivraison As String,  _
                    ByVal EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal ObservationLivraison As String,  _
                    ByVal IndEscompteSpecifique As Boolean,  _
                    ByVal TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal LitigeEnCours As Boolean,  _
                    ByVal EnCoursMax As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nEntreprise As Decimal,  _
                    ByVal Original_DateCreation As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateModification As Global.System.Nullable(Of Date),  _
                    ByVal Original_InfoMAJ As String,  _
                    ByVal Original_TypeEntreprise As String,  _
                    ByVal Original_nOrganisme As String,  _
                    ByVal Original_nMaisonMere As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Dep As String,  _
                    ByVal Original_Nom As String,  _
                    ByVal Original_CodePostal As String,  _
                    ByVal Original_Ville As String,  _
                    ByVal Original_Pays As String,  _
                    ByVal Original_FormeJuridique As String,  _
                    ByVal Original_TypeClient As String,  _
                    ByVal Original_ModePaiement As String,  _
                    ByVal Original_Echeance As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Banque As String,  _
                    ByVal Original_RIB As String,  _
                    ByVal Original_CA As Global.System.Nullable(Of Single),  _
                    ByVal Original_EMail As String,  _
                    ByVal Original_SiteInternet As String,  _
                    ByVal Original_FinMois As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Fournisseur As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Client As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SuffixePostal As String,  _
                    ByVal Original_CodePostalLiv As String,  _
                    ByVal Original_VilleLiv As String,  _
                    ByVal Original_PaysLiv As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LoginSite As String,  _
                    ByVal Original_PwdSite As String,  _
                    ByVal Original_IdSite As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompteF As String,  _
                    ByVal Original_NActiviteF As String,  _
                    ByVal Original_NCompteC As String,  _
                    ByVal Original_NActiviteC As String,  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Civilite As String,  _
                    ByVal Original_Licence As String,  _
                    ByVal Original_Critere1 As String,  _
                    ByVal Original_Critere2 As String,  _
                    ByVal Original_Critere3 As String,  _
                    ByVal Original_Critere4 As String,  _
                    ByVal Original_NTVAIntraCom As String,  _
                    ByVal Original_IsExport As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NomFacturation As String,  _
                    ByVal Original_NomLivraison As String,  _
                    ByVal Original_EditionBLNonChiffre As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ObservationLivraison As String,  _
                    ByVal Original_IndEscompteSpecifique As Boolean,  _
                    ByVal Original_TauxEscompteSpecifique As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DelaiValiditeEscompte As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LitigeEnCours As Boolean,  _
                    ByVal Original_EnCoursMax As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_nEntreprise, DateCreation, DateModification, InfoMAJ, TypeEntreprise, nOrganisme, nMaisonMere, Dep, Nom, Adresse, CodePostal, Ville, Pays, FormeJuridique, TypeClient, CibleCommercial, ModePaiement, Echeance, Banque, RIB, CA, EMail, SiteInternet, Observations, FinMois, Remise, TTVA, FacturationTTC, Fournisseur, Client, SuffixePostal, AdresseLiv, CodePostalLiv, VilleLiv, PaysLiv, Inactif, LoginSite, PwdSite, IdSite, NCompteF, NActiviteF, NCompteC, NActiviteC, nTarif, Civilite, Logo, Licence, Critere1, Critere2, Critere3, Critere4, NTVAIntraCom, IsExport, NomFacturation, NomLivraison, EditionBLNonChiffre, ObservationLivraison, IndEscompteSpecifique, TauxEscompteSpecifique, DelaiValiditeEscompte, nCommercial, LitigeEnCours, EnCoursMax, Original_nEntreprise, Original_DateCreation, Original_DateModification, Original_InfoMAJ, Original_TypeEntreprise, Original_nOrganisme, Original_nMaisonMere, Original_Dep, Original_Nom, Original_CodePostal, Original_Ville, Original_Pays, Original_FormeJuridique, Original_TypeClient, Original_ModePaiement, Original_Echeance, Original_Banque, Original_RIB, Original_CA, Original_EMail, Original_SiteInternet, Original_FinMois, Original_Remise, Original_TTVA, Original_FacturationTTC, Original_Fournisseur, Original_Client, Original_SuffixePostal, Original_CodePostalLiv, Original_VilleLiv, Original_PaysLiv, Original_Inactif, Original_LoginSite, Original_PwdSite, Original_IdSite, Original_NCompteF, Original_NActiviteF, Original_NCompteC, Original_NActiviteC, Original_nTarif, Original_Civilite, Original_Licence, Original_Critere1, Original_Critere2, Original_Critere3, Original_Critere4, Original_NTVAIntraCom, Original_IsExport, Original_NomFacturation, Original_NomLivraison, Original_EditionBLNonChiffre, Original_ObservationLivraison, Original_IndEscompteSpecifique, Original_TauxEscompteSpecifique, Original_DelaiValiditeEscompte, Original_nCommercial, Original_LitigeEnCours, Original_EnCoursMax)
        End Function
    End Class
End Namespace
