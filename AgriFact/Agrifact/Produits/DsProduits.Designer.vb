'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5472
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DsProduits"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DsProduits
    Inherits Global.System.Data.DataSet
    
    Private tableProduitChildren As ProduitChildrenDataTable
    
    Private tableSaisieTarifs As SaisieTarifsDataTable
    
    Private tableProduit As ProduitDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ProduitChildren")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitChildrenDataTable(ds.Tables("ProduitChildren")))
            End If
            If (Not (ds.Tables("SaisieTarifs")) Is Nothing) Then
                MyBase.Tables.Add(New SaisieTarifsDataTable(ds.Tables("SaisieTarifs")))
            End If
            If (Not (ds.Tables("Produit")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitDataTable(ds.Tables("Produit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProduitChildren() As ProduitChildrenDataTable
        Get
            Return Me.tableProduitChildren
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SaisieTarifs() As SaisieTarifsDataTable
        Get
            Return Me.tableSaisieTarifs
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Produit() As ProduitDataTable
        Get
            Return Me.tableProduit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DsProduits = CType(MyBase.Clone,DsProduits)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ProduitChildren")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitChildrenDataTable(ds.Tables("ProduitChildren")))
            End If
            If (Not (ds.Tables("SaisieTarifs")) Is Nothing) Then
                MyBase.Tables.Add(New SaisieTarifsDataTable(ds.Tables("SaisieTarifs")))
            End If
            If (Not (ds.Tables("Produit")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitDataTable(ds.Tables("Produit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProduitChildren = CType(MyBase.Tables("ProduitChildren"),ProduitChildrenDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduitChildren) Is Nothing) Then
                Me.tableProduitChildren.InitVars
            End If
        End If
        Me.tableSaisieTarifs = CType(MyBase.Tables("SaisieTarifs"),SaisieTarifsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSaisieTarifs) Is Nothing) Then
                Me.tableSaisieTarifs.InitVars
            End If
        End If
        Me.tableProduit = CType(MyBase.Tables("Produit"),ProduitDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduit) Is Nothing) Then
                Me.tableProduit.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DsProduits"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsProduits.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableProduitChildren = New ProduitChildrenDataTable
        MyBase.Tables.Add(Me.tableProduitChildren)
        Me.tableSaisieTarifs = New SaisieTarifsDataTable
        MyBase.Tables.Add(Me.tableSaisieTarifs)
        Me.tableProduit = New ProduitDataTable
        MyBase.Tables.Add(Me.tableProduit)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduitChildren() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSaisieTarifs() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsProduits = New DsProduits
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ProduitChildrenRowChangeEventHandler(ByVal sender As Object, ByVal e As ProduitChildrenRowChangeEvent)
    
    Public Delegate Sub SaisieTarifsRowChangeEventHandler(ByVal sender As Object, ByVal e As SaisieTarifsRowChangeEvent)
    
    Public Delegate Sub ProduitRowChangeEventHandler(ByVal sender As Object, ByVal e As ProduitRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProduitChildrenDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columntablename As Global.System.Data.DataColumn
        
        Private columnlib As Global.System.Data.DataColumn
        
        Private columnnb As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProduitChildren"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tablenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntablename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property libColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProduitChildrenRow
            Get
                Return CType(Me.Rows(index),ProduitChildrenRow)
            End Get
        End Property
        
        Public Event ProduitChildrenRowChanging As ProduitChildrenRowChangeEventHandler
        
        Public Event ProduitChildrenRowChanged As ProduitChildrenRowChangeEventHandler
        
        Public Event ProduitChildrenRowDeleting As ProduitChildrenRowChangeEventHandler
        
        Public Event ProduitChildrenRowDeleted As ProduitChildrenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduitChildrenRow(ByVal row As ProduitChildrenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduitChildrenRow(ByVal CodeProduit As String, ByVal tablename As String, ByVal _lib As String, ByVal nb As Integer) As ProduitChildrenRow
            Dim rowProduitChildrenRow As ProduitChildrenRow = CType(Me.NewRow,ProduitChildrenRow)
            Dim columnValuesArray() As Object = New Object() {CodeProduit, tablename, _lib, nb}
            rowProduitChildrenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduitChildrenRow)
            Return rowProduitChildrenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProduitChildrenDataTable = CType(MyBase.Clone,ProduitChildrenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProduitChildrenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columntablename = MyBase.Columns("tablename")
            Me.columnlib = MyBase.Columns("lib")
            Me.columnnb = MyBase.Columns("nb")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columntablename = New Global.System.Data.DataColumn("tablename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntablename)
            Me.columnlib = New Global.System.Data.DataColumn("lib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnlib.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "libColumn")
            Me.columnlib.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnlib")
            Me.columnlib.ExtendedProperties.Add("Generator_UserColumnName", "lib")
            MyBase.Columns.Add(Me.columnlib)
            Me.columnnb = New Global.System.Data.DataColumn("nb", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnb)
            Me.columnCodeProduit.ReadOnly = true
            Me.columnCodeProduit.MaxLength = 255
            Me.columntablename.ReadOnly = true
            Me.columntablename.MaxLength = 50
            Me.columnlib.ReadOnly = true
            Me.columnlib.MaxLength = 50
            Me.columnnb.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduitChildrenRow() As ProduitChildrenRow
            Return CType(Me.NewRow,ProduitChildrenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProduitChildrenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProduitChildrenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProduitChildrenRowChangedEvent) Is Nothing) Then
                RaiseEvent ProduitChildrenRowChanged(Me, New ProduitChildrenRowChangeEvent(CType(e.Row,ProduitChildrenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProduitChildrenRowChangingEvent) Is Nothing) Then
                RaiseEvent ProduitChildrenRowChanging(Me, New ProduitChildrenRowChangeEvent(CType(e.Row,ProduitChildrenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProduitChildrenRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProduitChildrenRowDeleted(Me, New ProduitChildrenRowChangeEvent(CType(e.Row,ProduitChildrenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProduitChildrenRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProduitChildrenRowDeleting(Me, New ProduitChildrenRowChangeEvent(CType(e.Row,ProduitChildrenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduitChildrenRow(ByVal row As ProduitChildrenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsProduits = New DsProduits
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProduitChildrenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SaisieTarifsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnTarif As Global.System.Data.DataColumn
        
        Private columnTLib As Global.System.Data.DataColumn
        
        Private columnnTarifDetail As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnPrixVHT As Global.System.Data.DataColumn
        
        Private columnPrixVTTC As Global.System.Data.DataColumn
        
        Private columnPLib As Global.System.Data.DataColumn
        
        Private columnFamille As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SaisieTarifs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTarifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTarif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTarifDetailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTarifDetail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FamilleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SaisieTarifsRow
            Get
                Return CType(Me.Rows(index),SaisieTarifsRow)
            End Get
        End Property
        
        Public Event SaisieTarifsRowChanging As SaisieTarifsRowChangeEventHandler
        
        Public Event SaisieTarifsRowChanged As SaisieTarifsRowChangeEventHandler
        
        Public Event SaisieTarifsRowDeleting As SaisieTarifsRowChangeEventHandler
        
        Public Event SaisieTarifsRowDeleted As SaisieTarifsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSaisieTarifsRow(ByVal row As SaisieTarifsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSaisieTarifsRow(ByVal nTarif As Decimal, ByVal TLib As String, ByVal nTarifDetail As Decimal, ByVal CodeProduit As String, ByVal PrixVHT As Decimal, ByVal PrixVTTC As Decimal, ByVal PLib As String, ByVal Famille As String) As SaisieTarifsRow
            Dim rowSaisieTarifsRow As SaisieTarifsRow = CType(Me.NewRow,SaisieTarifsRow)
            Dim columnValuesArray() As Object = New Object() {nTarif, TLib, nTarifDetail, CodeProduit, PrixVHT, PrixVTTC, PLib, Famille}
            rowSaisieTarifsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSaisieTarifsRow)
            Return rowSaisieTarifsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SaisieTarifsDataTable = CType(MyBase.Clone,SaisieTarifsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SaisieTarifsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnTarif = MyBase.Columns("nTarif")
            Me.columnTLib = MyBase.Columns("TLib")
            Me.columnnTarifDetail = MyBase.Columns("nTarifDetail")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnPrixVHT = MyBase.Columns("PrixVHT")
            Me.columnPrixVTTC = MyBase.Columns("PrixVTTC")
            Me.columnPLib = MyBase.Columns("PLib")
            Me.columnFamille = MyBase.Columns("Famille")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnTarif = New Global.System.Data.DataColumn("nTarif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTarif)
            Me.columnTLib = New Global.System.Data.DataColumn("TLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTLib)
            Me.columnnTarifDetail = New Global.System.Data.DataColumn("nTarifDetail", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTarifDetail)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnPrixVHT = New Global.System.Data.DataColumn("PrixVHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVHT)
            Me.columnPrixVTTC = New Global.System.Data.DataColumn("PrixVTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVTTC)
            Me.columnPLib = New Global.System.Data.DataColumn("PLib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLib)
            Me.columnFamille = New Global.System.Data.DataColumn("Famille", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille)
            Me.columnTLib.MaxLength = 50
            Me.columnCodeProduit.MaxLength = 255
            Me.columnPLib.MaxLength = 255
            Me.columnFamille.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSaisieTarifsRow() As SaisieTarifsRow
            Return CType(Me.NewRow,SaisieTarifsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SaisieTarifsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SaisieTarifsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SaisieTarifsRowChangedEvent) Is Nothing) Then
                RaiseEvent SaisieTarifsRowChanged(Me, New SaisieTarifsRowChangeEvent(CType(e.Row,SaisieTarifsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SaisieTarifsRowChangingEvent) Is Nothing) Then
                RaiseEvent SaisieTarifsRowChanging(Me, New SaisieTarifsRowChangeEvent(CType(e.Row,SaisieTarifsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SaisieTarifsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SaisieTarifsRowDeleted(Me, New SaisieTarifsRowChangeEvent(CType(e.Row,SaisieTarifsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SaisieTarifsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SaisieTarifsRowDeleting(Me, New SaisieTarifsRowChangeEvent(CType(e.Row,SaisieTarifsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSaisieTarifsRow(ByVal row As SaisieTarifsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsProduits = New DsProduits
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SaisieTarifsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProduitDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnProduit As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnLibelleLong As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnPrixAHT As Global.System.Data.DataColumn
        
        Private columnPrixATTC As Global.System.Data.DataColumn
        
        Private columnPrixVHT As Global.System.Data.DataColumn
        
        Private columnPrixVTTC As Global.System.Data.DataColumn
        
        Private columnIsPrixHT As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnProduitAchat As Global.System.Data.DataColumn
        
        Private columnProduitVente As Global.System.Data.DataColumn
        
        Private columnNCompteA As Global.System.Data.DataColumn
        
        Private columnNActiviteA As Global.System.Data.DataColumn
        
        Private columnNCompteV As Global.System.Data.DataColumn
        
        Private columnNActiviteV As Global.System.Data.DataColumn
        
        Private columnFamille1 As Global.System.Data.DataColumn
        
        Private columnFamille2 As Global.System.Data.DataColumn
        
        Private columnFamille3 As Global.System.Data.DataColumn
        
        Private columnU1U2Independant As Global.System.Data.DataColumn
        
        Private columnU1xU2 As Global.System.Data.DataColumn
        
        Private columnCodeBarre As Global.System.Data.DataColumn
        
        Private columnInactif As Global.System.Data.DataColumn
        
        Private columnCoefU2 As Global.System.Data.DataColumn
        
        Private columnTypeFacturation As Global.System.Data.DataColumn
        
        Private columnCoefAV As Global.System.Data.DataColumn
        
        Private columnProduitCompose As Global.System.Data.DataColumn
        
        Private columnImage As Global.System.Data.DataColumn
        
        Private columnGestionStock As Global.System.Data.DataColumn
        
        Private columnDecompteAuto As Global.System.Data.DataColumn
        
        Private columnRefFournisseur As Global.System.Data.DataColumn
        
        Private columnnFournisseur As Global.System.Data.DataColumn
        
        Private columnIsSortieImpr As Global.System.Data.DataColumn
        
        Private columnIsEnVente As Global.System.Data.DataColumn
        
        Private columnAMM As Global.System.Data.DataColumn
        
        Private columnTAXSM As Global.System.Data.DataColumn
        
        Private columnIsAMM As Global.System.Data.DataColumn
        
        Private columnDateMaj As Global.System.Data.DataColumn
        
        Private columnisComm As Global.System.Data.DataColumn
        
        Private columnConditionnement As Global.System.Data.DataColumn
        
        Private columnSeuilStock As Global.System.Data.DataColumn
        
        Private columnNCompteX As Global.System.Data.DataColumn
        
        Private columnNActiviteX As Global.System.Data.DataColumn
        
        Private columnIngredients As Global.System.Data.DataColumn
        
        Private columnTTaux As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Produit"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleLongColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelleLong
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixAHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixAHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixATTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixATTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPrixHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPrixHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitAchatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitAchat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1U2IndependantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1U2Independant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1xU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1xU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeBarreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeBarre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InactifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefAVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefAV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitComposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitCompose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GestionStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGestionStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DecompteAutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDecompteAuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefFournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSortieImprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSortieImpr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsEnVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsEnVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXSMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXSM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsAMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsAMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateMajColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateMaj
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isCommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConditionnementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConditionnement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeuilStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeuilStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngredientsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngredients
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTauxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTaux
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProduitRow
            Get
                Return CType(Me.Rows(index),ProduitRow)
            End Get
        End Property
        
        Public Event ProduitRowChanging As ProduitRowChangeEventHandler
        
        Public Event ProduitRowChanged As ProduitRowChangeEventHandler
        
        Public Event ProduitRowDeleting As ProduitRowChangeEventHandler
        
        Public Event ProduitRowDeleted As ProduitRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduitRow(ByVal row As ProduitRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduitRow( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Decimal,  _
                    ByVal PrixATTC As Decimal,  _
                    ByVal PrixVHT As Decimal,  _
                    ByVal PrixVTTC As Decimal,  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Short,  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Boolean,  _
                    ByVal U1xU2 As Decimal,  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Boolean,  _
                    ByVal CoefU2 As Decimal,  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Decimal,  _
                    ByVal ProduitCompose As Boolean,  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Boolean,  _
                    ByVal DecompteAuto As Boolean,  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Decimal,  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Decimal,  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Date,  _
                    ByVal isComm As Boolean,  _
                    ByVal Conditionnement As Integer,  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String,  _
                    ByVal TTaux As Decimal) As ProduitRow
            Dim rowProduitRow As ProduitRow = CType(Me.NewRow,ProduitRow)
            Dim columnValuesArray() As Object = New Object() {nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredients, TTaux}
            rowProduitRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduitRow)
            Return rowProduitRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynProduit(ByVal nProduit As Decimal) As ProduitRow
            Return CType(Me.Rows.Find(New Object() {nProduit}),ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProduitDataTable = CType(MyBase.Clone,ProduitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProduitDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnProduit = MyBase.Columns("nProduit")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnLibelleLong = MyBase.Columns("LibelleLong")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnPrixAHT = MyBase.Columns("PrixAHT")
            Me.columnPrixATTC = MyBase.Columns("PrixATTC")
            Me.columnPrixVHT = MyBase.Columns("PrixVHT")
            Me.columnPrixVTTC = MyBase.Columns("PrixVTTC")
            Me.columnIsPrixHT = MyBase.Columns("IsPrixHT")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnProduitAchat = MyBase.Columns("ProduitAchat")
            Me.columnProduitVente = MyBase.Columns("ProduitVente")
            Me.columnNCompteA = MyBase.Columns("NCompteA")
            Me.columnNActiviteA = MyBase.Columns("NActiviteA")
            Me.columnNCompteV = MyBase.Columns("NCompteV")
            Me.columnNActiviteV = MyBase.Columns("NActiviteV")
            Me.columnFamille1 = MyBase.Columns("Famille1")
            Me.columnFamille2 = MyBase.Columns("Famille2")
            Me.columnFamille3 = MyBase.Columns("Famille3")
            Me.columnU1U2Independant = MyBase.Columns("U1U2Independant")
            Me.columnU1xU2 = MyBase.Columns("U1xU2")
            Me.columnCodeBarre = MyBase.Columns("CodeBarre")
            Me.columnInactif = MyBase.Columns("Inactif")
            Me.columnCoefU2 = MyBase.Columns("CoefU2")
            Me.columnTypeFacturation = MyBase.Columns("TypeFacturation")
            Me.columnCoefAV = MyBase.Columns("CoefAV")
            Me.columnProduitCompose = MyBase.Columns("ProduitCompose")
            Me.columnImage = MyBase.Columns("Image")
            Me.columnGestionStock = MyBase.Columns("GestionStock")
            Me.columnDecompteAuto = MyBase.Columns("DecompteAuto")
            Me.columnRefFournisseur = MyBase.Columns("RefFournisseur")
            Me.columnnFournisseur = MyBase.Columns("nFournisseur")
            Me.columnIsSortieImpr = MyBase.Columns("IsSortieImpr")
            Me.columnIsEnVente = MyBase.Columns("IsEnVente")
            Me.columnAMM = MyBase.Columns("AMM")
            Me.columnTAXSM = MyBase.Columns("TAXSM")
            Me.columnIsAMM = MyBase.Columns("IsAMM")
            Me.columnDateMaj = MyBase.Columns("DateMaj")
            Me.columnisComm = MyBase.Columns("isComm")
            Me.columnConditionnement = MyBase.Columns("Conditionnement")
            Me.columnSeuilStock = MyBase.Columns("SeuilStock")
            Me.columnNCompteX = MyBase.Columns("NCompteX")
            Me.columnNActiviteX = MyBase.Columns("NActiviteX")
            Me.columnIngredients = MyBase.Columns("Ingredients")
            Me.columnTTaux = MyBase.Columns("TTaux")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnProduit = New Global.System.Data.DataColumn("nProduit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnProduit)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnLibelleLong = New Global.System.Data.DataColumn("LibelleLong", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelleLong)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnPrixAHT = New Global.System.Data.DataColumn("PrixAHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixAHT)
            Me.columnPrixATTC = New Global.System.Data.DataColumn("PrixATTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixATTC)
            Me.columnPrixVHT = New Global.System.Data.DataColumn("PrixVHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVHT)
            Me.columnPrixVTTC = New Global.System.Data.DataColumn("PrixVTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVTTC)
            Me.columnIsPrixHT = New Global.System.Data.DataColumn("IsPrixHT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPrixHT)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnProduitAchat = New Global.System.Data.DataColumn("ProduitAchat", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitAchat)
            Me.columnProduitVente = New Global.System.Data.DataColumn("ProduitVente", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitVente)
            Me.columnNCompteA = New Global.System.Data.DataColumn("NCompteA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteA)
            Me.columnNActiviteA = New Global.System.Data.DataColumn("NActiviteA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteA)
            Me.columnNCompteV = New Global.System.Data.DataColumn("NCompteV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteV)
            Me.columnNActiviteV = New Global.System.Data.DataColumn("NActiviteV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteV)
            Me.columnFamille1 = New Global.System.Data.DataColumn("Famille1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille1)
            Me.columnFamille2 = New Global.System.Data.DataColumn("Famille2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille2)
            Me.columnFamille3 = New Global.System.Data.DataColumn("Famille3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille3)
            Me.columnU1U2Independant = New Global.System.Data.DataColumn("U1U2Independant", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1U2Independant)
            Me.columnU1xU2 = New Global.System.Data.DataColumn("U1xU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1xU2)
            Me.columnCodeBarre = New Global.System.Data.DataColumn("CodeBarre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeBarre)
            Me.columnInactif = New Global.System.Data.DataColumn("Inactif", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactif)
            Me.columnCoefU2 = New Global.System.Data.DataColumn("CoefU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefU2)
            Me.columnTypeFacturation = New Global.System.Data.DataColumn("TypeFacturation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeFacturation)
            Me.columnCoefAV = New Global.System.Data.DataColumn("CoefAV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefAV)
            Me.columnProduitCompose = New Global.System.Data.DataColumn("ProduitCompose", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitCompose)
            Me.columnImage = New Global.System.Data.DataColumn("Image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImage)
            Me.columnGestionStock = New Global.System.Data.DataColumn("GestionStock", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGestionStock)
            Me.columnDecompteAuto = New Global.System.Data.DataColumn("DecompteAuto", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDecompteAuto)
            Me.columnRefFournisseur = New Global.System.Data.DataColumn("RefFournisseur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefFournisseur)
            Me.columnnFournisseur = New Global.System.Data.DataColumn("nFournisseur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFournisseur)
            Me.columnIsSortieImpr = New Global.System.Data.DataColumn("IsSortieImpr", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSortieImpr)
            Me.columnIsEnVente = New Global.System.Data.DataColumn("IsEnVente", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsEnVente)
            Me.columnAMM = New Global.System.Data.DataColumn("AMM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMM)
            Me.columnTAXSM = New Global.System.Data.DataColumn("TAXSM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXSM)
            Me.columnIsAMM = New Global.System.Data.DataColumn("IsAMM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAMM)
            Me.columnDateMaj = New Global.System.Data.DataColumn("DateMaj", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateMaj)
            Me.columnisComm = New Global.System.Data.DataColumn("isComm", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisComm)
            Me.columnConditionnement = New Global.System.Data.DataColumn("Conditionnement", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConditionnement)
            Me.columnSeuilStock = New Global.System.Data.DataColumn("SeuilStock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeuilStock)
            Me.columnNCompteX = New Global.System.Data.DataColumn("NCompteX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteX)
            Me.columnNActiviteX = New Global.System.Data.DataColumn("NActiviteX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteX)
            Me.columnIngredients = New Global.System.Data.DataColumn("Ingredients", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngredients)
            Me.columnTTaux = New Global.System.Data.DataColumn("TTaux", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTaux)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnProduit}, true))
            Me.columnnProduit.AllowDBNull = false
            Me.columnnProduit.Unique = true
            Me.columnCodeProduit.AllowDBNull = false
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 255
            Me.columnLibelleLong.MaxLength = 1073741823
            Me.columnTTVA.MaxLength = 50
            Me.columnIsPrixHT.AllowDBNull = false
            Me.columnUnite1.MaxLength = 2
            Me.columnUnite2.MaxLength = 2
            Me.columnProduitAchat.AllowDBNull = false
            Me.columnProduitVente.AllowDBNull = false
            Me.columnNCompteA.MaxLength = 8
            Me.columnNActiviteA.MaxLength = 4
            Me.columnNCompteV.MaxLength = 8
            Me.columnNActiviteV.MaxLength = 8
            Me.columnFamille2.MaxLength = 50
            Me.columnFamille3.MaxLength = 50
            Me.columnCodeBarre.MaxLength = 13
            Me.columnTypeFacturation.MaxLength = 50
            Me.columnImage.MaxLength = 1073741823
            Me.columnRefFournisseur.MaxLength = 255
            Me.columnIsSortieImpr.AllowDBNull = false
            Me.columnIsEnVente.AllowDBNull = false
            Me.columnAMM.MaxLength = 10
            Me.columnIsAMM.AllowDBNull = false
            Me.columnSeuilStock.AllowDBNull = false
            Me.columnNCompteX.MaxLength = 8
            Me.columnNActiviteX.MaxLength = 4
            Me.columnIngredients.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduitRow() As ProduitRow
            Return CType(Me.NewRow,ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProduitRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProduitRowChangedEvent) Is Nothing) Then
                RaiseEvent ProduitRowChanged(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProduitRowChangingEvent) Is Nothing) Then
                RaiseEvent ProduitRowChanging(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProduitRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProduitRowDeleted(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProduitRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProduitRowDeleting(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduitRow(ByVal row As ProduitRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsProduits = New DsProduits
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProduitDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProduitChildrenRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduitChildren As ProduitChildrenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduitChildren = CType(Me.Table,ProduitChildrenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduitChildren.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'ProduitChildren' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduitChildren.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tablename() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduitChildren.tablenameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tablename' in table 'ProduitChildren' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduitChildren.tablenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _lib() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduitChildren.libColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lib' in table 'ProduitChildren' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduitChildren.libColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nb() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProduitChildren.nbColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nb' in table 'ProduitChildren' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduitChildren.nbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableProduitChildren.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableProduitChildren.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstablenameNull() As Boolean
            Return Me.IsNull(Me.tableProduitChildren.tablenameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettablenameNull()
            Me(Me.tableProduitChildren.tablenameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_libNull() As Boolean
            Return Me.IsNull(Me.tableProduitChildren.libColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_libNull()
            Me(Me.tableProduitChildren.libColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnbNull() As Boolean
            Return Me.IsNull(Me.tableProduitChildren.nbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnbNull()
            Me(Me.tableProduitChildren.nbColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SaisieTarifsRow
        Inherits Global.System.Data.DataRow
        
        Private tableSaisieTarifs As SaisieTarifsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSaisieTarifs = CType(Me.Table,SaisieTarifsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTarif() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaisieTarifs.nTarifColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nTarif' in table 'SaisieTarifs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaisieTarifs.nTarifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaisieTarifs.TLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TLib' in table 'SaisieTarifs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaisieTarifs.TLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTarifDetail() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaisieTarifs.nTarifDetailColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nTarifDetail' in table 'SaisieTarifs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaisieTarifs.nTarifDetailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaisieTarifs.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeProduit' in table 'SaisieTarifs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaisieTarifs.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaisieTarifs.PrixVHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVHT' in table 'SaisieTarifs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaisieTarifs.PrixVHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaisieTarifs.PrixVTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVTTC' in table 'SaisieTarifs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaisieTarifs.PrixVTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLib() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaisieTarifs.PLibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLib' in table 'SaisieTarifs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaisieTarifs.PLibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaisieTarifs.FamilleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille' in table 'SaisieTarifs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaisieTarifs.FamilleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnTarifNull() As Boolean
            Return Me.IsNull(Me.tableSaisieTarifs.nTarifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnTarifNull()
            Me(Me.tableSaisieTarifs.nTarifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTLibNull() As Boolean
            Return Me.IsNull(Me.tableSaisieTarifs.TLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTLibNull()
            Me(Me.tableSaisieTarifs.TLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnTarifDetailNull() As Boolean
            Return Me.IsNull(Me.tableSaisieTarifs.nTarifDetailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnTarifDetailNull()
            Me(Me.tableSaisieTarifs.nTarifDetailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableSaisieTarifs.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableSaisieTarifs.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVHTNull() As Boolean
            Return Me.IsNull(Me.tableSaisieTarifs.PrixVHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVHTNull()
            Me(Me.tableSaisieTarifs.PrixVHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVTTCNull() As Boolean
            Return Me.IsNull(Me.tableSaisieTarifs.PrixVTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVTTCNull()
            Me(Me.tableSaisieTarifs.PrixVTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLibNull() As Boolean
            Return Me.IsNull(Me.tableSaisieTarifs.PLibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLibNull()
            Me(Me.tableSaisieTarifs.PLibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamilleNull() As Boolean
            Return Me.IsNull(Me.tableSaisieTarifs.FamilleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamilleNull()
            Me(Me.tableSaisieTarifs.FamilleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProduitRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduit As ProduitDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduit = CType(Me.Table,ProduitDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nProduit() As Decimal
            Get
                Return CType(Me(Me.tableProduit.nProduitColumn),Decimal)
            End Get
            Set
                Me(Me.tableProduit.nProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Return CType(Me(Me.tableProduit.CodeProduitColumn),String)
            End Get
            Set
                Me(Me.tableProduit.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Libelle' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibelleLong() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.LibelleLongColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LibelleLong' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.LibelleLongColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTVA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixAHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixAHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixAHT' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixAHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixATTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixATTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixATTC' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixATTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixVHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVHT' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixVHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixVTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrixVTTC' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixVTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPrixHT() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsPrixHTColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsPrixHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Unite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite1' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Unite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unite2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitAchat() As Boolean
            Get
                Return CType(Me(Me.tableProduit.ProduitAchatColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.ProduitAchatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitVente() As Boolean
            Get
                Return CType(Me(Me.tableProduit.ProduitVenteColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.ProduitVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteA' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteV() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteV() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille1' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille3() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Famille3' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1U2Independant() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.U1U2IndependantColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U1U2Independant' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.U1U2IndependantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1xU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.U1xU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U1xU2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.U1xU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeBarre() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CodeBarreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeBarre' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CodeBarreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactif() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.InactifColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactif' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.InactifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CoefU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefU2' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CoefU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeFacturation() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TypeFacturationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeFacturation' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TypeFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefAV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CoefAVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoefAV' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CoefAVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitCompose() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ProduitComposeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProduitCompose' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ProduitComposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Image() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ImageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Image' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GestionStock() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.GestionStockColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GestionStock' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.GestionStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DecompteAuto() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.DecompteAutoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DecompteAuto' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.DecompteAutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefFournisseur() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.RefFournisseurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefFournisseur' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.RefFournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFournisseur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.nFournisseurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nFournisseur' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.nFournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSortieImpr() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsSortieImprColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsSortieImprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsEnVente() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsEnVenteColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsEnVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMM() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.AMMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMM' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.AMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXSM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TAXSMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXSM' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TAXSMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsAMM() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsAMMColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsAMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateMaj() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProduit.DateMajColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateMaj' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.DateMajColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isComm() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.isCommColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isComm' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.isCommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Conditionnement() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ConditionnementColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Conditionnement' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ConditionnementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeuilStock() As Decimal
            Get
                Return CType(Me(Me.tableProduit.SeuilStockColumn),Decimal)
            End Get
            Set
                Me(Me.tableProduit.SeuilStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteX() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCompteX' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteX() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NActiviteX' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ingredients() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.IngredientsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ingredients' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.IngredientsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTaux() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TTauxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTaux' in table 'Produit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TTauxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableProduit.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableProduit.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleLongNull() As Boolean
            Return Me.IsNull(Me.tableProduit.LibelleLongColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleLongNull()
            Me(Me.tableProduit.LibelleLongColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableProduit.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableProduit.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixAHTNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixAHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixAHTNull()
            Me(Me.tableProduit.PrixAHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixATTCNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixATTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixATTCNull()
            Me(Me.tableProduit.PrixATTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVHTNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixVHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVHTNull()
            Me(Me.tableProduit.PrixVHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVTTCNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixVTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVTTCNull()
            Me(Me.tableProduit.PrixVTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableProduit.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableProduit.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteANull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteANull()
            Me(Me.tableProduit.NCompteAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteANull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteANull()
            Me(Me.tableProduit.NActiviteAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteVNull()
            Me(Me.tableProduit.NCompteVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteVNull()
            Me(Me.tableProduit.NActiviteVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille1Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille1Null()
            Me(Me.tableProduit.Famille1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille2Null()
            Me(Me.tableProduit.Famille2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille3Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille3Null()
            Me(Me.tableProduit.Famille3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1U2IndependantNull() As Boolean
            Return Me.IsNull(Me.tableProduit.U1U2IndependantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1U2IndependantNull()
            Me(Me.tableProduit.U1U2IndependantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1xU2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.U1xU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1xU2Null()
            Me(Me.tableProduit.U1xU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeBarreNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CodeBarreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeBarreNull()
            Me(Me.tableProduit.CodeBarreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactifNull() As Boolean
            Return Me.IsNull(Me.tableProduit.InactifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactifNull()
            Me(Me.tableProduit.InactifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefU2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.CoefU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefU2Null()
            Me(Me.tableProduit.CoefU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeFacturationNull() As Boolean
            Return Me.IsNull(Me.tableProduit.TypeFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeFacturationNull()
            Me(Me.tableProduit.TypeFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefAVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CoefAVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefAVNull()
            Me(Me.tableProduit.CoefAVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProduitComposeNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ProduitComposeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProduitComposeNull()
            Me(Me.tableProduit.ProduitComposeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImageNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImageNull()
            Me(Me.tableProduit.ImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGestionStockNull() As Boolean
            Return Me.IsNull(Me.tableProduit.GestionStockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGestionStockNull()
            Me(Me.tableProduit.GestionStockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDecompteAutoNull() As Boolean
            Return Me.IsNull(Me.tableProduit.DecompteAutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDecompteAutoNull()
            Me(Me.tableProduit.DecompteAutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableProduit.RefFournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefFournisseurNull()
            Me(Me.tableProduit.RefFournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableProduit.nFournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFournisseurNull()
            Me(Me.tableProduit.nFournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMMNull() As Boolean
            Return Me.IsNull(Me.tableProduit.AMMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMMNull()
            Me(Me.tableProduit.AMMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXSMNull() As Boolean
            Return Me.IsNull(Me.tableProduit.TAXSMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXSMNull()
            Me(Me.tableProduit.TAXSMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateMajNull() As Boolean
            Return Me.IsNull(Me.tableProduit.DateMajColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateMajNull()
            Me(Me.tableProduit.DateMajColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisCommNull() As Boolean
            Return Me.IsNull(Me.tableProduit.isCommColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisCommNull()
            Me(Me.tableProduit.isCommColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConditionnementNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ConditionnementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConditionnementNull()
            Me(Me.tableProduit.ConditionnementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteXNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteXNull()
            Me(Me.tableProduit.NCompteXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteXNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteXNull()
            Me(Me.tableProduit.NActiviteXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngredientsNull() As Boolean
            Return Me.IsNull(Me.tableProduit.IngredientsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngredientsNull()
            Me(Me.tableProduit.IngredientsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTauxNull() As Boolean
            Return Me.IsNull(Me.tableProduit.TTauxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTauxNull()
            Me(Me.tableProduit.TTauxColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProduitChildrenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProduitChildrenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProduitChildrenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProduitChildrenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SaisieTarifsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SaisieTarifsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SaisieTarifsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SaisieTarifsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProduitRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProduitRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProduitRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProduitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DsProduitsTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProduitChildrenTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ProduitChildren"
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("tablename", "tablename")
            tableMapping.ColumnMappings.Add("lib", "lib")
            tableMapping.ColumnMappings.Add("nb", "nb")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        @codeProduit AS CodeProduit, 'CompositionProduit' AS tablename, 'Co"& _ 
                "mpositions' AS lib, COUNT(*) AS nb"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CompositionProduit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   "& _ 
                "     (CodeProduitComposition = @codeProduit)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"HAVING        (COUNT(*) > 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNIO"& _ 
                "N"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        @codeProduit AS CodeProduit, 'ABonReception_Detail' AS tablenam"& _ 
                "e, 'Bons de réception' AS lib, COUNT(*) AS nb"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ABonReception_Det"& _ 
                "ail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CodeProduit = @codeProduit)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"HAVING        (COUNT(*) > 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UN"& _ 
                "ION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        @codeProduit AS CodeProduit, 'AFacture_Detail' AS tablename, "& _ 
                "'Factures fournisseur' AS lib, COUNT(*) AS nb"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AFacture_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "WHERE        (CodeProduit = @codeProduit)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"HAVING        (COUNT(*) > 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT        @codeProduit AS CodeProduit, 'VDevis_Detail' AS tablename, 'Devis'"& _ 
                " AS lib, COUNT(*) AS nb"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VDevis_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CodeProdui"& _ 
                "t = @codeProduit)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"HAVING        (COUNT(*) > 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        @codeProdu"& _ 
                "it AS CodeProduit, 'VBonCommande_Detail' AS tablename, 'Bons de commande' AS lib"& _ 
                ", COUNT(*) AS nb"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VBonCommande_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CodeProduit"& _ 
                " = @codeProduit)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"HAVING        (COUNT(*) > 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        @codeProdui"& _ 
                "t AS CodeProduit, 'VBonLivraison_Detail' AS tablename, 'Bons de livraison' AS li"& _ 
                "b, COUNT(*) AS nb"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VBonLivraison_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CodeProdu"& _ 
                "it = @codeProduit)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"HAVING        (COUNT(*) > 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        @codeProd"& _ 
                "uit AS CodeProduit, 'VFacture_Detail' AS tablename, 'Factures' AS lib, COUNT(*) "& _ 
                "AS nb"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFacture_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CodeProduit = @codeProduit"& _ 
                ")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"HAVING        (COUNT(*) > 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codeProduit", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByCodeProduit(ByVal dataTable As DsProduits.ProduitChildrenDataTable, ByVal codeProduit As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("codeProduit")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(codeProduit,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataByCodeProduit(ByVal codeProduit As String) As DsProduits.ProduitChildrenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("codeProduit")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(codeProduit,String)
            End If
            Dim dataTable As DsProduits.ProduitChildrenDataTable = New DsProduits.ProduitChildrenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SaisieTarifsTA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SaisieTarifs"
            tableMapping.ColumnMappings.Add("nTarif", "nTarif")
            tableMapping.ColumnMappings.Add("TLib", "TLib")
            tableMapping.ColumnMappings.Add("nTarifDetail", "nTarifDetail")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("PrixVHT", "PrixVHT")
            tableMapping.ColumnMappings.Add("PrixVTTC", "PrixVTTC")
            tableMapping.ColumnMappings.Add("PLib", "PLib")
            tableMapping.ColumnMappings.Add("Famille", "Famille")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Tarif.nTarif, Tarif.Libelle AS TLib, Tarif_Detail.nTarifDetail, Tar"& _ 
                "if_Detail.CodeProduit, Tarif_Detail.PrixVHT, Tarif_Detail.PrixVTTC, Produit.Libe"& _ 
                "lle AS PLib, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Famille.Famille"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Tarif I"& _ 
                "NNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Tarif_Detail ON Tarif.nTarif = Tarif_Detail."& _ 
                "nTarif RIGHT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Produit ON Tarif_Detail.CodePr"& _ 
                "oduit = Produit.CodeProduit LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Famille ON"& _ 
                " Produit.Famille1 = Famille.nFamille"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Tarif.nTarif, Tarif.Libelle AS TLib, t.nTarifDetail, @CodeProduit A"& _ 
                "S CodeProduit, t.PrixVHT, t.PrixVTTC, t.PLib, t.Famille"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Tarif L"& _ 
                "EFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             (SELECT        Tarif_Detail.nTarif,"& _ 
                " Tarif_Detail.nTarifDetail, Tarif_Detail.CodeProduit, Tarif_Detail.PrixVHT, Tari"& _ 
                "f_Detail.PrixVTTC, Produit.Libelle AS PLib, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                  "& _ 
                "                       Famille.Famille"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               FROM     "& _ 
                "       Tarif_Detail LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                           "& _ 
                "              Produit ON Tarif_Detail.CodeProduit = Produit.CodeProduit LEFT OUT"& _ 
                "ER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                         Famille ON Pro"& _ 
                "duit.Famille1 = Famille.nFamille LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              "& _ 
                "                           Tarif AS Tarif_1 ON Tarif_1.nTarif = Tarif_Detail.nTa"& _ 
                "rif"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               WHERE        (Produit.CodeProduit = @CodePro"& _ 
                "duit)) AS t ON t.nTarif = Tarif.nTarif"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        @nTarif AS nTarif, t.TLib, t.nTarifDetail, Produit.CodeProduit, t.P"& _ 
                "rixVHT, t.PrixVTTC, Produit.Libelle AS PLib, Famille.Famille"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pr"& _ 
                "oduit LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Famille ON Produit.Famille1 = Fa"& _ 
                "mille.nFamille LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             (SELECT        Tari"& _ 
                "f.nTarif, Tarif.Libelle AS TLib, Tarif_Detail.nTarifDetail, Tarif_Detail.CodePro"& _ 
                "duit, Tarif_Detail.PrixVHT, Tarif_Detail.PrixVTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             "& _ 
                "  FROM            Tarif_Detail LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                "& _ 
                "                         Tarif ON Tarif.nTarif = Tarif_Detail.nTarif"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "                     WHERE        (Tarif.nTarif = @nTarif)) AS t ON t.CodeProdui"& _ 
                "t = Produit.CodeProduit"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.Int, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        -1 as nTarif, '<standard>' AS TLib, -1 as nTarifDetail, CodeProduit"& _ 
                ", PrixVHT, PrixVTTC, Libelle AS PLib, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Famille.Famille"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Produit "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT  JOIN Famille ON Produit.Famille1 = Famille.nFa"& _ 
                "mille"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "UPDATE Produit SET PrixVHT=@PrixVHT,PrixVTTC=@PrixVTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE CodeProduit=@CodePr"& _ 
                "oduit"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVHT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "If (@nTarifDetail is not NULL) begin"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UPDATE       Tarif_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET             "& _ 
                "   PrixVHT = @PrixVHT, PrixVTTC = @PrixVTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (nTarifDetail = @nTari"& _ 
                "fDetail)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"end else begin"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"if (@PrixVHT is not null and @PrixVTTC is not null) be"& _ 
                "gin"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INSERT INTO  Tarif_Detail(nTarifDetail,nTarif,CodeProduit,PrixVHT,PrixVTTC)"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MAX(nTarifDetail)+1,@nTarif,@CodeProduit,@PrixVHT,@PrixVTTC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Tarif"& _ 
                "_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"end"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"end"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarifDetail", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarifDetail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVHT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsProduits.SaisieTarifsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DsProduits.SaisieTarifsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsProduits.SaisieTarifsDataTable = New DsProduits.SaisieTarifsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProduit(ByVal dataTable As DsProduits.SaisieTarifsDataTable, ByVal CodeProduit As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodeProduit,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProduit(ByVal CodeProduit As String) As DsProduits.SaisieTarifsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodeProduit,String)
            End If
            Dim dataTable As DsProduits.SaisieTarifsDataTable = New DsProduits.SaisieTarifsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByTarif(ByVal dataTable As DsProduits.SaisieTarifsDataTable, ByVal nTarif As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nTarif,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByTarif(ByVal nTarif As Integer) As DsProduits.SaisieTarifsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nTarif,Integer)
            Dim dataTable As DsProduits.SaisieTarifsDataTable = New DsProduits.SaisieTarifsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillPrixStandard(ByVal dataTable As DsProduits.SaisieTarifsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPrixStandardData() As DsProduits.SaisieTarifsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Dim dataTable As DsProduits.SaisieTarifsDataTable = New DsProduits.SaisieTarifsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdatePrixStandard(ByVal PrixVHT As Global.System.Nullable(Of Decimal), ByVal PrixVTTC As Global.System.Nullable(Of Decimal), ByVal CodeProduit As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            If (PrixVHT.HasValue = true) Then
                command.Parameters(0).Value = CType(PrixVHT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PrixVTTC.HasValue = true) Then
                command.Parameters(1).Value = CType(PrixVTTC.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                command.Parameters(2).Value = CType(CodeProduit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function UpdateTarifs(ByVal nTarifDetail As Decimal, ByVal PrixVHT As Decimal, ByVal PrixVTTC As Decimal, ByVal nTarif As Decimal, ByVal CodeProduit As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            command.Parameters(0).Value = CType(nTarifDetail,Decimal)
            command.Parameters(1).Value = CType(PrixVHT,Decimal)
            command.Parameters(2).Value = CType(PrixVTTC,Decimal)
            command.Parameters(3).Value = CType(nTarif,Decimal)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                command.Parameters(4).Value = CType(CodeProduit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProduitTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Produit"
            tableMapping.ColumnMappings.Add("nProduit", "nProduit")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("LibelleLong", "LibelleLong")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("PrixAHT", "PrixAHT")
            tableMapping.ColumnMappings.Add("PrixATTC", "PrixATTC")
            tableMapping.ColumnMappings.Add("PrixVHT", "PrixVHT")
            tableMapping.ColumnMappings.Add("PrixVTTC", "PrixVTTC")
            tableMapping.ColumnMappings.Add("IsPrixHT", "IsPrixHT")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("Unite2", "Unite2")
            tableMapping.ColumnMappings.Add("ProduitAchat", "ProduitAchat")
            tableMapping.ColumnMappings.Add("ProduitVente", "ProduitVente")
            tableMapping.ColumnMappings.Add("NCompteA", "NCompteA")
            tableMapping.ColumnMappings.Add("NActiviteA", "NActiviteA")
            tableMapping.ColumnMappings.Add("NCompteV", "NCompteV")
            tableMapping.ColumnMappings.Add("NActiviteV", "NActiviteV")
            tableMapping.ColumnMappings.Add("Famille1", "Famille1")
            tableMapping.ColumnMappings.Add("Famille2", "Famille2")
            tableMapping.ColumnMappings.Add("Famille3", "Famille3")
            tableMapping.ColumnMappings.Add("U1U2Independant", "U1U2Independant")
            tableMapping.ColumnMappings.Add("U1xU2", "U1xU2")
            tableMapping.ColumnMappings.Add("CodeBarre", "CodeBarre")
            tableMapping.ColumnMappings.Add("Inactif", "Inactif")
            tableMapping.ColumnMappings.Add("CoefU2", "CoefU2")
            tableMapping.ColumnMappings.Add("TypeFacturation", "TypeFacturation")
            tableMapping.ColumnMappings.Add("CoefAV", "CoefAV")
            tableMapping.ColumnMappings.Add("ProduitCompose", "ProduitCompose")
            tableMapping.ColumnMappings.Add("Image", "Image")
            tableMapping.ColumnMappings.Add("GestionStock", "GestionStock")
            tableMapping.ColumnMappings.Add("DecompteAuto", "DecompteAuto")
            tableMapping.ColumnMappings.Add("RefFournisseur", "RefFournisseur")
            tableMapping.ColumnMappings.Add("nFournisseur", "nFournisseur")
            tableMapping.ColumnMappings.Add("IsSortieImpr", "IsSortieImpr")
            tableMapping.ColumnMappings.Add("IsEnVente", "IsEnVente")
            tableMapping.ColumnMappings.Add("AMM", "AMM")
            tableMapping.ColumnMappings.Add("TAXSM", "TAXSM")
            tableMapping.ColumnMappings.Add("IsAMM", "IsAMM")
            tableMapping.ColumnMappings.Add("DateMaj", "DateMaj")
            tableMapping.ColumnMappings.Add("isComm", "isComm")
            tableMapping.ColumnMappings.Add("Conditionnement", "Conditionnement")
            tableMapping.ColumnMappings.Add("SeuilStock", "SeuilStock")
            tableMapping.ColumnMappings.Add("NCompteX", "NCompteX")
            tableMapping.ColumnMappings.Add("NActiviteX", "NActiviteX")
            tableMapping.ColumnMappings.Add("Ingredients", "Ingredients")
            tableMapping.ColumnMappings.Add("TTaux", "TTaux")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Produit] WHERE (([nProduit] = @Original_nProduit) AND ([CodePr"& _ 
                "oduit] = @Original_CodeProduit) AND ((@IsNull_Libelle = 1 AND [Libelle] IS NULL)"& _ 
                " OR ([Libelle] = @Original_Libelle)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) "& _ 
                "OR ([TTVA] = @Original_TTVA)) AND ((@IsNull_PrixAHT = 1 AND [PrixAHT] IS NULL) O"& _ 
                "R ([PrixAHT] = @Original_PrixAHT)) AND ((@IsNull_PrixATTC = 1 AND [PrixATTC] IS "& _ 
                "NULL) OR ([PrixATTC] = @Original_PrixATTC)) AND ((@IsNull_PrixVHT = 1 AND [PrixV"& _ 
                "HT] IS NULL) OR ([PrixVHT] = @Original_PrixVHT)) AND ((@IsNull_PrixVTTC = 1 AND "& _ 
                "[PrixVTTC] IS NULL) OR ([PrixVTTC] = @Original_PrixVTTC)) AND ([IsPrixHT] = @Ori"& _ 
                "ginal_IsPrixHT) AND ((@IsNull_Unite1 = 1 AND [Unite1] IS NULL) OR ([Unite1] = @O"& _ 
                "riginal_Unite1)) AND ((@IsNull_Unite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @"& _ 
                "Original_Unite2)) AND ([ProduitAchat] = @Original_ProduitAchat) AND ([ProduitVen"& _ 
                "te] = @Original_ProduitVente) AND ((@IsNull_NCompteA = 1 AND [NCompteA] IS NULL)"& _ 
                " OR ([NCompteA] = @Original_NCompteA)) AND ((@IsNull_NActiviteA = 1 AND [NActivi"& _ 
                "teA] IS NULL) OR ([NActiviteA] = @Original_NActiviteA)) AND ((@IsNull_NCompteV ="& _ 
                " 1 AND [NCompteV] IS NULL) OR ([NCompteV] = @Original_NCompteV)) AND ((@IsNull_N"& _ 
                "ActiviteV = 1 AND [NActiviteV] IS NULL) OR ([NActiviteV] = @Original_NActiviteV)"& _ 
                ") AND ((@IsNull_Famille1 = 1 AND [Famille1] IS NULL) OR ([Famille1] = @Original_"& _ 
                "Famille1)) AND ((@IsNull_Famille2 = 1 AND [Famille2] IS NULL) OR ([Famille2] = @"& _ 
                "Original_Famille2)) AND ((@IsNull_Famille3 = 1 AND [Famille3] IS NULL) OR ([Fami"& _ 
                "lle3] = @Original_Famille3)) AND ((@IsNull_U1U2Independant = 1 AND [U1U2Independ"& _ 
                "ant] IS NULL) OR ([U1U2Independant] = @Original_U1U2Independant)) AND ((@IsNull_"& _ 
                "U1xU2 = 1 AND [U1xU2] IS NULL) OR ([U1xU2] = @Original_U1xU2)) AND ((@IsNull_Cod"& _ 
                "eBarre = 1 AND [CodeBarre] IS NULL) OR ([CodeBarre] = @Original_CodeBarre)) AND "& _ 
                "((@IsNull_Inactif = 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_Inactif))"& _ 
                " AND ((@IsNull_CoefU2 = 1 AND [CoefU2] IS NULL) OR ([CoefU2] = @Original_CoefU2)"& _ 
                ") AND ((@IsNull_TypeFacturation = 1 AND [TypeFacturation] IS NULL) OR ([TypeFact"& _ 
                "uration] = @Original_TypeFacturation)) AND ((@IsNull_CoefAV = 1 AND [CoefAV] IS "& _ 
                "NULL) OR ([CoefAV] = @Original_CoefAV)) AND ((@IsNull_ProduitCompose = 1 AND [Pr"& _ 
                "oduitCompose] IS NULL) OR ([ProduitCompose] = @Original_ProduitCompose)) AND ((@"& _ 
                "IsNull_GestionStock = 1 AND [GestionStock] IS NULL) OR ([GestionStock] = @Origin"& _ 
                "al_GestionStock)) AND ((@IsNull_DecompteAuto = 1 AND [DecompteAuto] IS NULL) OR "& _ 
                "([DecompteAuto] = @Original_DecompteAuto)) AND ((@IsNull_RefFournisseur = 1 AND "& _ 
                "[RefFournisseur] IS NULL) OR ([RefFournisseur] = @Original_RefFournisseur)) AND "& _ 
                "((@IsNull_nFournisseur = 1 AND [nFournisseur] IS NULL) OR ([nFournisseur] = @Ori"& _ 
                "ginal_nFournisseur)) AND ([IsSortieImpr] = @Original_IsSortieImpr) AND ([IsEnVen"& _ 
                "te] = @Original_IsEnVente) AND ((@IsNull_AMM = 1 AND [AMM] IS NULL) OR ([AMM] = "& _ 
                "@Original_AMM)) AND ((@IsNull_TAXSM = 1 AND [TAXSM] IS NULL) OR ([TAXSM] = @Orig"& _ 
                "inal_TAXSM)) AND ([IsAMM] = @Original_IsAMM) AND ((@IsNull_DateMaj = 1 AND [Date"& _ 
                "Maj] IS NULL) OR ([DateMaj] = @Original_DateMaj)) AND ((@IsNull_isComm = 1 AND ["& _ 
                "isComm] IS NULL) OR ([isComm] = @Original_isComm)) AND ((@IsNull_Conditionnement"& _ 
                " = 1 AND [Conditionnement] IS NULL) OR ([Conditionnement] = @Original_Conditionn"& _ 
                "ement)) AND ([SeuilStock] = @Original_SeuilStock) AND ((@IsNull_NCompteX = 1 AND"& _ 
                " [NCompteX] IS NULL) OR ([NCompteX] = @Original_NCompteX)) AND ((@IsNull_NActivi"& _ 
                "teX = 1 AND [NActiviteX] IS NULL) OR ([NActiviteX] = @Original_NActiviteX)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Libelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixAHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixAHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixATTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixATTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1U2Independant", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1xU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1xU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeBarre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefAV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefAV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProduitCompose", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GestionStock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DecompteAuto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RefFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXSM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateMaj", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isComm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Produit] ([nProduit], [CodeProduit], [Libelle], [LibelleLong],"& _ 
                " [TTVA], [PrixAHT], [PrixATTC], [PrixVHT], [PrixVTTC], [IsPrixHT], [Unite1], [Un"& _ 
                "ite2], [ProduitAchat], [ProduitVente], [NCompteA], [NActiviteA], [NCompteV], [NA"& _ 
                "ctiviteV], [Famille1], [Famille2], [Famille3], [U1U2Independant], [U1xU2], [Code"& _ 
                "Barre], [Inactif], [CoefU2], [TypeFacturation], [CoefAV], [ProduitCompose], [Ima"& _ 
                "ge], [GestionStock], [DecompteAuto], [RefFournisseur], [nFournisseur], [IsSortie"& _ 
                "Impr], [IsEnVente], [AMM], [TAXSM], [IsAMM], [DateMaj], [isComm], [Conditionneme"& _ 
                "nt], [SeuilStock], [NCompteX], [NActiviteX], [Ingredients]) VALUES (@nProduit, @"& _ 
                "CodeProduit, @Libelle, @LibelleLong, @TTVA, @PrixAHT, @PrixATTC, @PrixVHT, @Prix"& _ 
                "VTTC, @IsPrixHT, @Unite1, @Unite2, @ProduitAchat, @ProduitVente, @NCompteA, @NAc"& _ 
                "tiviteA, @NCompteV, @NActiviteV, @Famille1, @Famille2, @Famille3, @U1U2Independa"& _ 
                "nt, @U1xU2, @CodeBarre, @Inactif, @CoefU2, @TypeFacturation, @CoefAV, @ProduitCo"& _ 
                "mpose, @Image, @GestionStock, @DecompteAuto, @RefFournisseur, @nFournisseur, @Is"& _ 
                "SortieImpr, @IsEnVente, @AMM, @TAXSM, @IsAMM, @DateMaj, @isComm, @Conditionnemen"& _ 
                "t, @SeuilStock, @NCompteX, @NActiviteX, @Ingredients);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nProduit, CodePro"& _ 
                "duit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT"& _ 
                ", Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NA"& _ 
                "ctiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inact"& _ 
                "if, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, Decomp"& _ 
                "teAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM"& _ 
                ", DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredient"& _ 
                "s FROM Produit WHERE (nProduit = @nProduit)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibelleLong", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibelleLong", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Image", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Image", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ingredients", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ingredients", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Produit] SET [nProduit] = @nProduit, [CodeProduit] = @CodeProduit, "& _ 
                "[Libelle] = @Libelle, [LibelleLong] = @LibelleLong, [TTVA] = @TTVA, [PrixAHT] = "& _ 
                "@PrixAHT, [PrixATTC] = @PrixATTC, [PrixVHT] = @PrixVHT, [PrixVTTC] = @PrixVTTC, "& _ 
                "[IsPrixHT] = @IsPrixHT, [Unite1] = @Unite1, [Unite2] = @Unite2, [ProduitAchat] ="& _ 
                " @ProduitAchat, [ProduitVente] = @ProduitVente, [NCompteA] = @NCompteA, [NActivi"& _ 
                "teA] = @NActiviteA, [NCompteV] = @NCompteV, [NActiviteV] = @NActiviteV, [Famille"& _ 
                "1] = @Famille1, [Famille2] = @Famille2, [Famille3] = @Famille3, [U1U2Independant"& _ 
                "] = @U1U2Independant, [U1xU2] = @U1xU2, [CodeBarre] = @CodeBarre, [Inactif] = @I"& _ 
                "nactif, [CoefU2] = @CoefU2, [TypeFacturation] = @TypeFacturation, [CoefAV] = @Co"& _ 
                "efAV, [ProduitCompose] = @ProduitCompose, [Image] = @Image, [GestionStock] = @Ge"& _ 
                "stionStock, [DecompteAuto] = @DecompteAuto, [RefFournisseur] = @RefFournisseur, "& _ 
                "[nFournisseur] = @nFournisseur, [IsSortieImpr] = @IsSortieImpr, [IsEnVente] = @I"& _ 
                "sEnVente, [AMM] = @AMM, [TAXSM] = @TAXSM, [IsAMM] = @IsAMM, [DateMaj] = @DateMaj"& _ 
                ", [isComm] = @isComm, [Conditionnement] = @Conditionnement, [SeuilStock] = @Seui"& _ 
                "lStock, [NCompteX] = @NCompteX, [NActiviteX] = @NActiviteX, [Ingredients] = @Ing"& _ 
                "redients WHERE (([nProduit] = @Original_nProduit) AND ([CodeProduit] = @Original"& _ 
                "_CodeProduit) AND ((@IsNull_Libelle = 1 AND [Libelle] IS NULL) OR ([Libelle] = @"& _ 
                "Original_Libelle)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Orig"& _ 
                "inal_TTVA)) AND ((@IsNull_PrixAHT = 1 AND [PrixAHT] IS NULL) OR ([PrixAHT] = @Or"& _ 
                "iginal_PrixAHT)) AND ((@IsNull_PrixATTC = 1 AND [PrixATTC] IS NULL) OR ([PrixATT"& _ 
                "C] = @Original_PrixATTC)) AND ((@IsNull_PrixVHT = 1 AND [PrixVHT] IS NULL) OR (["& _ 
                "PrixVHT] = @Original_PrixVHT)) AND ((@IsNull_PrixVTTC = 1 AND [PrixVTTC] IS NULL"& _ 
                ") OR ([PrixVTTC] = @Original_PrixVTTC)) AND ([IsPrixHT] = @Original_IsPrixHT) AN"& _ 
                "D ((@IsNull_Unite1 = 1 AND [Unite1] IS NULL) OR ([Unite1] = @Original_Unite1)) A"& _ 
                "ND ((@IsNull_Unite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) "& _ 
                "AND ([ProduitAchat] = @Original_ProduitAchat) AND ([ProduitVente] = @Original_Pr"& _ 
                "oduitVente) AND ((@IsNull_NCompteA = 1 AND [NCompteA] IS NULL) OR ([NCompteA] = "& _ 
                "@Original_NCompteA)) AND ((@IsNull_NActiviteA = 1 AND [NActiviteA] IS NULL) OR ("& _ 
                "[NActiviteA] = @Original_NActiviteA)) AND ((@IsNull_NCompteV = 1 AND [NCompteV] "& _ 
                "IS NULL) OR ([NCompteV] = @Original_NCompteV)) AND ((@IsNull_NActiviteV = 1 AND "& _ 
                "[NActiviteV] IS NULL) OR ([NActiviteV] = @Original_NActiviteV)) AND ((@IsNull_Fa"& _ 
                "mille1 = 1 AND [Famille1] IS NULL) OR ([Famille1] = @Original_Famille1)) AND ((@"& _ 
                "IsNull_Famille2 = 1 AND [Famille2] IS NULL) OR ([Famille2] = @Original_Famille2)"& _ 
                ") AND ((@IsNull_Famille3 = 1 AND [Famille3] IS NULL) OR ([Famille3] = @Original_"& _ 
                "Famille3)) AND ((@IsNull_U1U2Independant = 1 AND [U1U2Independant] IS NULL) OR ("& _ 
                "[U1U2Independant] = @Original_U1U2Independant)) AND ((@IsNull_U1xU2 = 1 AND [U1x"& _ 
                "U2] IS NULL) OR ([U1xU2] = @Original_U1xU2)) AND ((@IsNull_CodeBarre = 1 AND [Co"& _ 
                "deBarre] IS NULL) OR ([CodeBarre] = @Original_CodeBarre)) AND ((@IsNull_Inactif "& _ 
                "= 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_Inactif)) AND ((@IsNull_Coe"& _ 
                "fU2 = 1 AND [CoefU2] IS NULL) OR ([CoefU2] = @Original_CoefU2)) AND ((@IsNull_Ty"& _ 
                "peFacturation = 1 AND [TypeFacturation] IS NULL) OR ([TypeFacturation] = @Origin"& _ 
                "al_TypeFacturation)) AND ((@IsNull_CoefAV = 1 AND [CoefAV] IS NULL) OR ([CoefAV]"& _ 
                " = @Original_CoefAV)) AND ((@IsNull_ProduitCompose = 1 AND [ProduitCompose] IS N"& _ 
                "ULL) OR ([ProduitCompose] = @Original_ProduitCompose)) AND ((@IsNull_GestionStoc"& _ 
                "k = 1 AND [GestionStock] IS NULL) OR ([GestionStock] = @Original_GestionStock)) "& _ 
                "AND ((@IsNull_DecompteAuto = 1 AND [DecompteAuto] IS NULL) OR ([DecompteAuto] = "& _ 
                "@Original_DecompteAuto)) AND ((@IsNull_RefFournisseur = 1 AND [RefFournisseur] I"& _ 
                "S NULL) OR ([RefFournisseur] = @Original_RefFournisseur)) AND ((@IsNull_nFournis"& _ 
                "seur = 1 AND [nFournisseur] IS NULL) OR ([nFournisseur] = @Original_nFournisseur"& _ 
                ")) AND ([IsSortieImpr] = @Original_IsSortieImpr) AND ([IsEnVente] = @Original_Is"& _ 
                "EnVente) AND ((@IsNull_AMM = 1 AND [AMM] IS NULL) OR ([AMM] = @Original_AMM)) AN"& _ 
                "D ((@IsNull_TAXSM = 1 AND [TAXSM] IS NULL) OR ([TAXSM] = @Original_TAXSM)) AND ("& _ 
                "[IsAMM] = @Original_IsAMM) AND ((@IsNull_DateMaj = 1 AND [DateMaj] IS NULL) OR ("& _ 
                "[DateMaj] = @Original_DateMaj)) AND ((@IsNull_isComm = 1 AND [isComm] IS NULL) O"& _ 
                "R ([isComm] = @Original_isComm)) AND ((@IsNull_Conditionnement = 1 AND [Conditio"& _ 
                "nnement] IS NULL) OR ([Conditionnement] = @Original_Conditionnement)) AND ([Seui"& _ 
                "lStock] = @Original_SeuilStock) AND ((@IsNull_NCompteX = 1 AND [NCompteX] IS NUL"& _ 
                "L) OR ([NCompteX] = @Original_NCompteX)) AND ((@IsNull_NActiviteX = 1 AND [NActi"& _ 
                "viteX] IS NULL) OR ([NActiviteX] = @Original_NActiviteX)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nProduit, Co"& _ 
                "deProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsP"& _ 
                "rixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompte"& _ 
                "V, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, "& _ 
                "Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, D"& _ 
                "ecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, "& _ 
                "IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingre"& _ 
                "dients FROM Produit WHERE (nProduit = @nProduit)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibelleLong", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibelleLong", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Image", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Image", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ingredients", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ingredients", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Libelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixAHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixAHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixATTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixATTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1U2Independant", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1xU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1xU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeBarre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefAV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefAV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProduitCompose", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GestionStock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DecompteAuto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RefFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXSM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateMaj", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isComm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AgriFact.My.MySettings.Default.AgrifactConnString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Produit.nProduit, Produit.CodeProduit, Produit.Libelle, Produit.Lib"& _ 
                "elleLong, Produit.TTVA, Produit.PrixAHT, Produit.PrixATTC, Produit.PrixVHT, Prod"& _ 
                "uit.PrixVTTC, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Produit.IsPrixHT, Produit.Unite1, Produ"& _ 
                "it.Unite2, Produit.ProduitAchat, Produit.ProduitVente, Produit.NCompteA, Produit"& _ 
                ".NActiviteA, Produit.NCompteV, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Produit.NActiviteV, Pr"& _ 
                "oduit.Famille1, Produit.Famille2, Produit.Famille3, Produit.U1U2Independant, Pro"& _ 
                "duit.U1xU2, Produit.CodeBarre, Produit.Inactif, Produit.CoefU2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "           Produit.TypeFacturation, Produit.CoefAV, Produit.ProduitCompose, Prod"& _ 
                "uit.Image, Produit.GestionStock, Produit.DecompteAuto, Produit.RefFournisseur, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Produit.nFournisseur, Produit.IsSortieImpr, Produit.Is"& _ 
                "EnVente, Produit.AMM, Produit.TAXSM, Produit.IsAMM, Produit.DateMaj, Produit.isC"& _ 
                "omm, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Produit.Conditionnement, Produit.SeuilStock, Pro"& _ 
                "duit.NCompteX, Produit.NActiviteX, Produit.Ingredients, TVA.TTaux"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         "& _ 
                "   Produit LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TVA ON Produit.TTVA = TVA.T"& _ 
                "TVA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COUNT(CodeProduit) FROM Produit WHERE CodeProduit=@CodeProduit"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, Prix"& _ 
                "VHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, N"& _ 
                "ActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, "& _ 
                "U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Imag"& _ 
                "e, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnV"& _ 
                "ente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX,"& _ 
                " NActiviteX, Ingredients FROM dbo.Produit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE nProduit=@nProduit"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nProduit", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATT"& _ 
                "C, PrixVHT, PrixVTTC, IsPrixHT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Produit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CodeProdu"& _ 
                "it = @CodeProduit)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsProduits.ProduitDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DsProduits.ProduitDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DsProduits.ProduitDataTable = New DsProduits.ProduitDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynProduit(ByVal dataTable As DsProduits.ProduitDataTable, ByVal nProduit As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nProduit,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynProduit(ByVal nProduit As Decimal) As DsProduits.ProduitDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nProduit,Decimal)
            Dim dataTable As DsProduits.ProduitDataTable = New DsProduits.ProduitDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodeProduit(ByVal CodeProduit As String) As DsProduits.ProduitDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodeProduit,String)
            End If
            Dim dataTable As DsProduits.ProduitDataTable = New DsProduits.ProduitDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DsProduits.ProduitDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DsProduits) As Integer
            Return Me.Adapter.Update(dataSet, "Produit")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nProduit,Decimal)
            If (Original_CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CodeProduit")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_Libelle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Libelle,String)
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TTVA,String)
            End If
            If (Original_PrixAHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PrixAHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixATTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PrixATTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_PrixVHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_IsPrixHT,Boolean)
            If (Original_Unite1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Unite1,String)
            End If
            If (Original_Unite2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Unite2,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ProduitAchat,Boolean)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_ProduitVente,Boolean)
            If (Original_NCompteA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_NCompteA,String)
            End If
            If (Original_NActiviteA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_NActiviteA,String)
            End If
            If (Original_NCompteV Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_NCompteV,String)
            End If
            If (Original_NActiviteV Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_NActiviteV,String)
            End If
            If (Original_Famille1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Famille1.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Famille2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Famille2,String)
            End If
            If (Original_Famille3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Famille3,String)
            End If
            If (Original_U1U2Independant.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_U1xU2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_U1xU2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_CodeBarre Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_CodeBarre,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_CoefU2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_CoefU2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_TypeFacturation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_TypeFacturation,String)
            End If
            If (Original_CoefAV.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_CoefAV.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_ProduitCompose.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_GestionStock.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_GestionStock.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_DecompteAuto.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_RefFournisseur Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_RefFournisseur,String)
            End If
            If (Original_nFournisseur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_nFournisseur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_IsSortieImpr,Boolean)
            Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_IsEnVente,Boolean)
            If (Original_AMM Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_AMM,String)
            End If
            If (Original_TAXSM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_TAXSM.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_IsAMM,Boolean)
            If (Original_DateMaj.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_DateMaj.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_isComm.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(Original_isComm.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_Conditionnement.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(Original_Conditionnement.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_SeuilStock,Decimal)
            If (Original_NCompteX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_NCompteX,String)
            End If
            If (Original_NActiviteX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_NActiviteX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nProduit,Decimal)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Libelle,String)
            End If
            If (LibelleLong Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LibelleLong,String)
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TTVA,String)
            End If
            If (PrixAHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PrixAHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PrixATTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PrixATTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PrixVHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PrixVHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PrixVTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(IsPrixHT,Boolean)
            If (Unite1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Unite1,String)
            End If
            If (Unite2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Unite2,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(ProduitAchat,Boolean)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(ProduitVente,Boolean)
            If (NCompteA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NCompteA,String)
            End If
            If (NActiviteA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NActiviteA,String)
            End If
            If (NCompteV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NCompteV,String)
            End If
            If (NActiviteV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(NActiviteV,String)
            End If
            If (Famille1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Famille1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Famille2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Famille2,String)
            End If
            If (Famille3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Famille3,String)
            End If
            If (U1U2Independant.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (U1xU2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(U1xU2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CodeBarre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CodeBarre,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (CoefU2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(CoefU2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TypeFacturation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(TypeFacturation,String)
            End If
            If (CoefAV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(CoefAV.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (ProduitCompose.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Image Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Image,String)
            End If
            If (GestionStock.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(GestionStock.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DecompteAuto.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (RefFournisseur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(RefFournisseur,String)
            End If
            If (nFournisseur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(nFournisseur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(IsSortieImpr,Boolean)
            Me.Adapter.InsertCommand.Parameters(35).Value = CType(IsEnVente,Boolean)
            If (AMM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(AMM,String)
            End If
            If (TAXSM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(TAXSM.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(38).Value = CType(IsAMM,Boolean)
            If (DateMaj.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(DateMaj.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (isComm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(isComm.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Conditionnement.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(Conditionnement.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(42).Value = CType(SeuilStock,Decimal)
            If (NCompteX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(NCompteX,String)
            End If
            If (NActiviteX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(NActiviteX,String)
            End If
            If (Ingredients Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Ingredients,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String,  _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nProduit,Decimal)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Libelle,String)
            End If
            If (LibelleLong Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LibelleLong,String)
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TTVA,String)
            End If
            If (PrixAHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PrixAHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PrixATTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PrixATTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PrixVHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PrixVHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PrixVTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IsPrixHT,Boolean)
            If (Unite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Unite1,String)
            End If
            If (Unite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Unite2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ProduitAchat,Boolean)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ProduitVente,Boolean)
            If (NCompteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(NCompteA,String)
            End If
            If (NActiviteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(NActiviteA,String)
            End If
            If (NCompteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(NCompteV,String)
            End If
            If (NActiviteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(NActiviteV,String)
            End If
            If (Famille1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Famille1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Famille2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Famille2,String)
            End If
            If (Famille3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Famille3,String)
            End If
            If (U1U2Independant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (U1xU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(U1xU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CodeBarre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(CodeBarre,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (CoefU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(CoefU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TypeFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(TypeFacturation,String)
            End If
            If (CoefAV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(CoefAV.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (ProduitCompose.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Image Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Image,String)
            End If
            If (GestionStock.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(GestionStock.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DecompteAuto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (RefFournisseur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(RefFournisseur,String)
            End If
            If (nFournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(nFournisseur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(IsSortieImpr,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(IsEnVente,Boolean)
            If (AMM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(AMM,String)
            End If
            If (TAXSM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(TAXSM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(IsAMM,Boolean)
            If (DateMaj.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(DateMaj.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (isComm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(isComm.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Conditionnement.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Conditionnement.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(SeuilStock,Decimal)
            If (NCompteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(NCompteX,String)
            End If
            If (NActiviteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(NActiviteX,String)
            End If
            If (Ingredients Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Ingredients,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_nProduit,Decimal)
            If (Original_CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CodeProduit")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Libelle,String)
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_TTVA,String)
            End If
            If (Original_PrixAHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_PrixAHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixATTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_PrixATTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_PrixVHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_IsPrixHT,Boolean)
            If (Original_Unite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_Unite1,String)
            End If
            If (Original_Unite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_Unite2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_ProduitAchat,Boolean)
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_ProduitVente,Boolean)
            If (Original_NCompteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_NCompteA,String)
            End If
            If (Original_NActiviteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_NActiviteA,String)
            End If
            If (Original_NCompteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_NCompteV,String)
            End If
            If (Original_NActiviteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_NActiviteV,String)
            End If
            If (Original_Famille1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_Famille1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_Famille2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_Famille2,String)
            End If
            If (Original_Famille3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_Famille3,String)
            End If
            If (Original_U1U2Independant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_U1xU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_U1xU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_CodeBarre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_CodeBarre,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_CoefU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_CoefU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_TypeFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_TypeFacturation,String)
            End If
            If (Original_CoefAV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_CoefAV.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_ProduitCompose.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_GestionStock.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_GestionStock.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_DecompteAuto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_RefFournisseur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_RefFournisseur,String)
            End If
            If (Original_nFournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_nFournisseur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_IsSortieImpr,Boolean)
            Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_IsEnVente,Boolean)
            If (Original_AMM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_AMM,String)
            End If
            If (Original_TAXSM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_TAXSM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_IsAMM,Boolean)
            If (Original_DateMaj.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_DateMaj.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            If (Original_isComm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_isComm.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (Original_Conditionnement.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_Conditionnement.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_SeuilStock,Decimal)
            If (Original_NCompteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_NCompteX,String)
            End If
            If (Original_NActiviteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_NActiviteX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String,  _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Return Me.Update(Original_nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredients, Original_nProduit, Original_CodeProduit, Original_Libelle, Original_TTVA, Original_PrixAHT, Original_PrixATTC, Original_PrixVHT, Original_PrixVTTC, Original_IsPrixHT, Original_Unite1, Original_Unite2, Original_ProduitAchat, Original_ProduitVente, Original_NCompteA, Original_NActiviteA, Original_NCompteV, Original_NActiviteV, Original_Famille1, Original_Famille2, Original_Famille3, Original_U1U2Independant, Original_U1xU2, Original_CodeBarre, Original_Inactif, Original_CoefU2, Original_TypeFacturation, Original_CoefAV, Original_ProduitCompose, Original_GestionStock, Original_DecompteAuto, Original_RefFournisseur, Original_nFournisseur, Original_IsSortieImpr, Original_IsEnVente, Original_AMM, Original_TAXSM, Original_IsAMM, Original_DateMaj, Original_isComm, Original_Conditionnement, Original_SeuilStock, Original_NCompteX, Original_NActiviteX)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CountCodeProduit(ByVal CodeProduit As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                command.Parameters(0).Value = CType(CodeProduit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
End Namespace
