'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.4016
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Ce code source a été automatiquement généré par Microsoft.VSDesigner, Version 2.0.50727.4016.
'
Namespace ActiUpdates
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="UpdatesSoap", [Namespace]:="http://actiupdates.actigram.com/")>  _
    Partial Public Class Updates
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetUpdatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.AgriFact.My.MySettings.Default.AgriFact_ActiUpdates_Updates
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetUpdatesCompleted As GetUpdatesCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://actiupdates.actigram.com/GetUpdates", RequestNamespace:="http://actiupdates.actigram.com/", ResponseNamespace:="http://actiupdates.actigram.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUpdates(ByVal appli As String, ByVal version As String, ByVal niveau As Integer) As dsUpdates.UpdatesDataTable
            Dim results() As Object = Me.Invoke("GetUpdates", New Object() {appli, version, niveau})
            Return CType(results(0),dsUpdates.UpdatesDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUpdates(ByVal appli As String, ByVal version As String, ByVal niveau As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUpdates", New Object() {appli, version, niveau}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUpdates(ByVal asyncResult As System.IAsyncResult) As dsUpdates.UpdatesDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),dsUpdates.UpdatesDataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUpdatesAsync(ByVal appli As String, ByVal version As String, ByVal niveau As Integer)
            Me.GetUpdatesAsync(appli, version, niveau, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUpdatesAsync(ByVal appli As String, ByVal version As String, ByVal niveau As Integer, ByVal userState As Object)
            If (Me.GetUpdatesOperationCompleted Is Nothing) Then
                Me.GetUpdatesOperationCompleted = AddressOf Me.OnGetUpdatesOperationCompleted
            End If
            Me.InvokeAsync("GetUpdates", New Object() {appli, version, niveau}, Me.GetUpdatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUpdatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUpdatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUpdatesCompleted(Me, New GetUpdatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    'Cette définition de type a été générée par l'extension d'importation de schéma System.Data.Design.TypedDataSetSchemaImporterExtension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("dsUpdates"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class dsUpdates
        Inherits Global.System.Data.DataSet
        
        Private tableApplications As ApplicationsDataTable
        
        Private tableUpdates As UpdatesDataTable
        
        Private tableDownloads As DownloadsDataTable
        
        Private relationFK_Updates_Updates As Global.System.Data.DataRelation
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
            Me.InitExpressions
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.ExcludeSchema) Then
                    Me.InitExpressions
                End If
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("Applications")) Is Nothing) Then
                    MyBase.Tables.Add(New ApplicationsDataTable(ds.Tables("Applications")))
                End If
                If (Not (ds.Tables("Updates")) Is Nothing) Then
                    MyBase.Tables.Add(New UpdatesDataTable(ds.Tables("Updates")))
                End If
                If (Not (ds.Tables("Downloads")) Is Nothing) Then
                    MyBase.Tables.Add(New DownloadsDataTable(ds.Tables("Downloads")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                Me.InitExpressions
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Applications() As ApplicationsDataTable
            Get
                Return Me.tableApplications
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Updates() As UpdatesDataTable
            Get
                Return Me.tableUpdates
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Downloads() As DownloadsDataTable
            Get
                Return Me.tableDownloads
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.BrowsableAttribute(true),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As dsUpdates = CType(MyBase.Clone,dsUpdates)
            cln.InitVars
            cln.InitExpressions
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("Applications")) Is Nothing) Then
                    MyBase.Tables.Add(New ApplicationsDataTable(ds.Tables("Applications")))
                End If
                If (Not (ds.Tables("Updates")) Is Nothing) Then
                    MyBase.Tables.Add(New UpdatesDataTable(ds.Tables("Updates")))
                End If
                If (Not (ds.Tables("Downloads")) Is Nothing) Then
                    MyBase.Tables.Add(New DownloadsDataTable(ds.Tables("Downloads")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableApplications = CType(MyBase.Tables("Applications"),ApplicationsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableApplications) Is Nothing) Then
                    Me.tableApplications.InitVars
                End If
            End If
            Me.tableUpdates = CType(MyBase.Tables("Updates"),UpdatesDataTable)
            If (initTable = true) Then
                If (Not (Me.tableUpdates) Is Nothing) Then
                    Me.tableUpdates.InitVars
                End If
            End If
            Me.tableDownloads = CType(MyBase.Tables("Downloads"),DownloadsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableDownloads) Is Nothing) Then
                    Me.tableDownloads.InitVars
                End If
            End If
            Me.relationFK_Updates_Updates = Me.Relations("FK_Updates_Updates")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "dsUpdates"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/dsUpdates.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableApplications = New ApplicationsDataTable
            MyBase.Tables.Add(Me.tableApplications)
            Me.tableUpdates = New UpdatesDataTable(false)
            MyBase.Tables.Add(Me.tableUpdates)
            Me.tableDownloads = New DownloadsDataTable
            MyBase.Tables.Add(Me.tableDownloads)
            Me.relationFK_Updates_Updates = New Global.System.Data.DataRelation("FK_Updates_Updates", New Global.System.Data.DataColumn() {Me.tableApplications.NomColumn}, New Global.System.Data.DataColumn() {Me.tableUpdates.NomAppliColumn}, false)
            Me.Relations.Add(Me.relationFK_Updates_Updates)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeApplications() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeUpdates() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeDownloads() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As dsUpdates = New dsUpdates
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.Updates.NiveauDisplayColumn.Expression = "iif(niveau=0,'Stable',iif(niveau=1,'Beta','Alpha'))"
        End Sub
        
        Public Delegate Sub ApplicationsRowChangeEventHandler(ByVal sender As Object, ByVal e As ApplicationsRowChangeEvent)
        
        Public Delegate Sub UpdatesRowChangeEventHandler(ByVal sender As Object, ByVal e As UpdatesRowChangeEvent)
        
        Public Delegate Sub DownloadsRowChangeEventHandler(ByVal sender As Object, ByVal e As DownloadsRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
         Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ApplicationsDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnNom As Global.System.Data.DataColumn
            
            Private columnDescription As Global.System.Data.DataColumn
            
            Private columnGUID As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Applications"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NomColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNom
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property GUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnGUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ApplicationsRow
                Get
                    Return CType(Me.Rows(index),ApplicationsRow)
                End Get
            End Property
            
            Public Event ApplicationsRowChanging As ApplicationsRowChangeEventHandler
            
            Public Event ApplicationsRowChanged As ApplicationsRowChangeEventHandler
            
            Public Event ApplicationsRowDeleting As ApplicationsRowChangeEventHandler
            
            Public Event ApplicationsRowDeleted As ApplicationsRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddApplicationsRow(ByVal row As ApplicationsRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddApplicationsRow(ByVal Nom As String, ByVal Description As String, ByVal GUID As String) As ApplicationsRow
                Dim rowApplicationsRow As ApplicationsRow = CType(Me.NewRow,ApplicationsRow)
                Dim columnValuesArray() As Object = New Object() {Nom, Description, GUID}
                rowApplicationsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowApplicationsRow)
                Return rowApplicationsRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByNom(ByVal Nom As String) As ApplicationsRow
                Return CType(Me.Rows.Find(New Object() {Nom}),ApplicationsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ApplicationsDataTable = CType(MyBase.Clone,ApplicationsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ApplicationsDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnNom = MyBase.Columns("Nom")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnGUID = MyBase.Columns("GUID")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnNom = New Global.System.Data.DataColumn("Nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNom)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnGUID = New Global.System.Data.DataColumn("GUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnGUID)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNom}, true))
                Me.columnNom.AllowDBNull = false
                Me.columnNom.Unique = true
                Me.columnNom.MaxLength = 50
                Me.columnDescription.MaxLength = 1073741823
                Me.columnGUID.MaxLength = 50
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewApplicationsRow() As ApplicationsRow
                Return CType(Me.NewRow,ApplicationsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ApplicationsRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ApplicationsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ApplicationsRowChangedEvent) Is Nothing) Then
                    RaiseEvent ApplicationsRowChanged(Me, New ApplicationsRowChangeEvent(CType(e.Row,ApplicationsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ApplicationsRowChangingEvent) Is Nothing) Then
                    RaiseEvent ApplicationsRowChanging(Me, New ApplicationsRowChangeEvent(CType(e.Row,ApplicationsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ApplicationsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ApplicationsRowDeleted(Me, New ApplicationsRowChangeEvent(CType(e.Row,ApplicationsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ApplicationsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ApplicationsRowDeleting(Me, New ApplicationsRowChangeEvent(CType(e.Row,ApplicationsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveApplicationsRow(ByVal row As ApplicationsRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As dsUpdates = New dsUpdates
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ApplicationsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
         Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class UpdatesDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnIdUpdate As Global.System.Data.DataColumn
            
            Private columnNomAppli As Global.System.Data.DataColumn
            
            Private columnVersion As Global.System.Data.DataColumn
            
            Private columnNiveau As Global.System.Data.DataColumn
            
            Private columnActif As Global.System.Data.DataColumn
            
            Private columnDownloadPath As Global.System.Data.DataColumn
            
            Private columnDescription As Global.System.Data.DataColumn
            
            Private columnTailleFichier As Global.System.Data.DataColumn
            
            Private columnDateFichier As Global.System.Data.DataColumn
            
            Private columnNiveauDisplay As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                Me.New(false)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal initExpressions As Boolean)
                MyBase.New
                Me.TableName = "Updates"
                Me.BeginInit
                Me.InitClass
                If (initExpressions = true) Then
                    Me.InitExpressions
                End If
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IdUpdateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIdUpdate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NomAppliColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNomAppli
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property VersionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnVersion
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NiveauColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNiveau
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ActifColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnActif
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DownloadPathColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDownloadPath
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TailleFichierColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTailleFichier
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DateFichierColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDateFichier
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NiveauDisplayColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNiveauDisplay
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As UpdatesRow
                Get
                    Return CType(Me.Rows(index),UpdatesRow)
                End Get
            End Property
            
            Public Event UpdatesRowChanging As UpdatesRowChangeEventHandler
            
            Public Event UpdatesRowChanged As UpdatesRowChangeEventHandler
            
            Public Event UpdatesRowDeleting As UpdatesRowChangeEventHandler
            
            Public Event UpdatesRowDeleted As UpdatesRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddUpdatesRow(ByVal row As UpdatesRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddUpdatesRow(ByVal parentApplicationsRowByFK_Updates_Updates As ApplicationsRow, ByVal Version As String, ByVal Niveau As Integer, ByVal Actif As Boolean, ByVal DownloadPath As String, ByVal Description As String, ByVal TailleFichier As Integer, ByVal DateFichier As Date, ByVal NiveauDisplay As String) As UpdatesRow
                Dim rowUpdatesRow As UpdatesRow = CType(Me.NewRow,UpdatesRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Version, Niveau, Actif, DownloadPath, Description, TailleFichier, DateFichier, NiveauDisplay}
                If (Not (parentApplicationsRowByFK_Updates_Updates) Is Nothing) Then
                    columnValuesArray(1) = parentApplicationsRowByFK_Updates_Updates(0)
                End If
                rowUpdatesRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowUpdatesRow)
                Return rowUpdatesRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddUpdatesRow(ByVal parentApplicationsRowByFK_Updates_Updates As ApplicationsRow, ByVal Version As String, ByVal Niveau As Integer, ByVal Actif As Boolean, ByVal DownloadPath As String, ByVal Description As String, ByVal TailleFichier As Integer, ByVal DateFichier As Date) As UpdatesRow
                Dim rowUpdatesRow As UpdatesRow = CType(Me.NewRow,UpdatesRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Version, Niveau, Actif, DownloadPath, Description, TailleFichier, DateFichier, Nothing}
                If (Not (parentApplicationsRowByFK_Updates_Updates) Is Nothing) Then
                    columnValuesArray(1) = parentApplicationsRowByFK_Updates_Updates(0)
                End If
                rowUpdatesRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowUpdatesRow)
                Return rowUpdatesRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByIdUpdate(ByVal IdUpdate As Integer) As UpdatesRow
                Return CType(Me.Rows.Find(New Object() {IdUpdate}),UpdatesRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As UpdatesDataTable = CType(MyBase.Clone,UpdatesDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New UpdatesDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnIdUpdate = MyBase.Columns("IdUpdate")
                Me.columnNomAppli = MyBase.Columns("NomAppli")
                Me.columnVersion = MyBase.Columns("Version")
                Me.columnNiveau = MyBase.Columns("Niveau")
                Me.columnActif = MyBase.Columns("Actif")
                Me.columnDownloadPath = MyBase.Columns("DownloadPath")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnTailleFichier = MyBase.Columns("TailleFichier")
                Me.columnDateFichier = MyBase.Columns("DateFichier")
                Me.columnNiveauDisplay = MyBase.Columns("NiveauDisplay")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnIdUpdate = New Global.System.Data.DataColumn("IdUpdate", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIdUpdate)
                Me.columnNomAppli = New Global.System.Data.DataColumn("NomAppli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNomAppli)
                Me.columnVersion = New Global.System.Data.DataColumn("Version", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnVersion)
                Me.columnNiveau = New Global.System.Data.DataColumn("Niveau", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNiveau)
                Me.columnActif = New Global.System.Data.DataColumn("Actif", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnActif)
                Me.columnDownloadPath = New Global.System.Data.DataColumn("DownloadPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDownloadPath)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnTailleFichier = New Global.System.Data.DataColumn("TailleFichier", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTailleFichier)
                Me.columnDateFichier = New Global.System.Data.DataColumn("DateFichier", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDateFichier)
                Me.columnNiveauDisplay = New Global.System.Data.DataColumn("NiveauDisplay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNiveauDisplay)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdUpdate}, true))
                Me.columnIdUpdate.AutoIncrement = true
                Me.columnIdUpdate.AllowDBNull = false
                Me.columnIdUpdate.ReadOnly = true
                Me.columnIdUpdate.Unique = true
                Me.columnNomAppli.AllowDBNull = false
                Me.columnNomAppli.MaxLength = 50
                Me.columnVersion.AllowDBNull = false
                Me.columnVersion.MaxLength = 50
                Me.columnNiveau.AllowDBNull = false
                Me.columnActif.AllowDBNull = false
                Me.columnDownloadPath.MaxLength = 255
                Me.columnDescription.MaxLength = 1073741823
                Me.columnNiveauDisplay.ReadOnly = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewUpdatesRow() As UpdatesRow
                Return CType(Me.NewRow,UpdatesRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New UpdatesRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(UpdatesRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitExpressions()
                Me.NiveauDisplayColumn.Expression = "iif(niveau=0,'Stable',iif(niveau=1,'Beta','Alpha'))"
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.UpdatesRowChangedEvent) Is Nothing) Then
                    RaiseEvent UpdatesRowChanged(Me, New UpdatesRowChangeEvent(CType(e.Row,UpdatesRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.UpdatesRowChangingEvent) Is Nothing) Then
                    RaiseEvent UpdatesRowChanging(Me, New UpdatesRowChangeEvent(CType(e.Row,UpdatesRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.UpdatesRowDeletedEvent) Is Nothing) Then
                    RaiseEvent UpdatesRowDeleted(Me, New UpdatesRowChangeEvent(CType(e.Row,UpdatesRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.UpdatesRowDeletingEvent) Is Nothing) Then
                    RaiseEvent UpdatesRowDeleting(Me, New UpdatesRowChangeEvent(CType(e.Row,UpdatesRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveUpdatesRow(ByVal row As UpdatesRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As dsUpdates = New dsUpdates
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "UpdatesDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
         Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class DownloadsDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnIdDownload As Global.System.Data.DataColumn
            
            Private columnIdUpdate As Global.System.Data.DataColumn
            
            Private columnNomApp As Global.System.Data.DataColumn
            
            Private columnClientIP As Global.System.Data.DataColumn
            
            Private columnDateDl As Global.System.Data.DataColumn
            
            Private columnCodeClient As Global.System.Data.DataColumn
            
            Private columnCleClient As Global.System.Data.DataColumn
            
            Private columnNomPoste As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Downloads"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IdDownloadColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIdDownload
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IdUpdateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIdUpdate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NomAppColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNomApp
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientIPColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientIP
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DateDlColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDateDl
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CodeClientColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCodeClient
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CleClientColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCleClient
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NomPosteColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNomPoste
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As DownloadsRow
                Get
                    Return CType(Me.Rows(index),DownloadsRow)
                End Get
            End Property
            
            Public Event DownloadsRowChanging As DownloadsRowChangeEventHandler
            
            Public Event DownloadsRowChanged As DownloadsRowChangeEventHandler
            
            Public Event DownloadsRowDeleting As DownloadsRowChangeEventHandler
            
            Public Event DownloadsRowDeleted As DownloadsRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddDownloadsRow(ByVal row As DownloadsRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddDownloadsRow(ByVal IdUpdate As Integer, ByVal NomApp As String, ByVal ClientIP As String, ByVal DateDl As Date, ByVal CodeClient As String, ByVal CleClient As String, ByVal NomPoste As String) As DownloadsRow
                Dim rowDownloadsRow As DownloadsRow = CType(Me.NewRow,DownloadsRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, IdUpdate, NomApp, ClientIP, DateDl, CodeClient, CleClient, NomPoste}
                rowDownloadsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowDownloadsRow)
                Return rowDownloadsRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByIdDownload(ByVal IdDownload As Integer) As DownloadsRow
                Return CType(Me.Rows.Find(New Object() {IdDownload}),DownloadsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As DownloadsDataTable = CType(MyBase.Clone,DownloadsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New DownloadsDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnIdDownload = MyBase.Columns("IdDownload")
                Me.columnIdUpdate = MyBase.Columns("IdUpdate")
                Me.columnNomApp = MyBase.Columns("NomApp")
                Me.columnClientIP = MyBase.Columns("ClientIP")
                Me.columnDateDl = MyBase.Columns("DateDl")
                Me.columnCodeClient = MyBase.Columns("CodeClient")
                Me.columnCleClient = MyBase.Columns("CleClient")
                Me.columnNomPoste = MyBase.Columns("NomPoste")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnIdDownload = New Global.System.Data.DataColumn("IdDownload", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIdDownload)
                Me.columnIdUpdate = New Global.System.Data.DataColumn("IdUpdate", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIdUpdate)
                Me.columnNomApp = New Global.System.Data.DataColumn("NomApp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNomApp)
                Me.columnClientIP = New Global.System.Data.DataColumn("ClientIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientIP)
                Me.columnDateDl = New Global.System.Data.DataColumn("DateDl", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDateDl)
                Me.columnCodeClient = New Global.System.Data.DataColumn("CodeClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCodeClient)
                Me.columnCleClient = New Global.System.Data.DataColumn("CleClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCleClient)
                Me.columnNomPoste = New Global.System.Data.DataColumn("NomPoste", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNomPoste)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdDownload}, true))
                Me.columnIdDownload.AutoIncrement = true
                Me.columnIdDownload.AllowDBNull = false
                Me.columnIdDownload.ReadOnly = true
                Me.columnIdDownload.Unique = true
                Me.columnIdUpdate.AllowDBNull = false
                Me.columnNomApp.MaxLength = 50
                Me.columnClientIP.MaxLength = 20
                Me.columnCodeClient.MaxLength = 16
                Me.columnCleClient.MaxLength = 30
                Me.columnNomPoste.MaxLength = 50
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewDownloadsRow() As DownloadsRow
                Return CType(Me.NewRow,DownloadsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New DownloadsRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(DownloadsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.DownloadsRowChangedEvent) Is Nothing) Then
                    RaiseEvent DownloadsRowChanged(Me, New DownloadsRowChangeEvent(CType(e.Row,DownloadsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.DownloadsRowChangingEvent) Is Nothing) Then
                    RaiseEvent DownloadsRowChanging(Me, New DownloadsRowChangeEvent(CType(e.Row,DownloadsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.DownloadsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent DownloadsRowDeleted(Me, New DownloadsRowChangeEvent(CType(e.Row,DownloadsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.DownloadsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent DownloadsRowDeleting(Me, New DownloadsRowChangeEvent(CType(e.Row,DownloadsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveDownloadsRow(ByVal row As DownloadsRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As dsUpdates = New dsUpdates
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "DownloadsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Partial Public Class ApplicationsRow
            Inherits Global.System.Data.DataRow
            
            Private tableApplications As ApplicationsDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableApplications = CType(Me.Table,ApplicationsDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Nom() As String
                Get
                    Return CType(Me(Me.tableApplications.NomColumn),String)
                End Get
                Set
                    Me(Me.tableApplications.NomColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Description() As String
                Get
                    Try 
                        Return CType(Me(Me.tableApplications.DescriptionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Description' dans la table 'Applications' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableApplications.DescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property GUID() As String
                Get
                    Try 
                        Return CType(Me(Me.tableApplications.GUIDColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GUID' dans la table 'Applications' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableApplications.GUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableApplications.DescriptionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDescriptionNull()
                Me(Me.tableApplications.DescriptionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsGUIDNull() As Boolean
                Return Me.IsNull(Me.tableApplications.GUIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetGUIDNull()
                Me(Me.tableApplications.GUIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetUpdatesRows() As UpdatesRow()
                If (Me.Table.ChildRelations("FK_Updates_Updates") Is Nothing) Then
                    Return New UpdatesRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Updates_Updates")),UpdatesRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Partial Public Class UpdatesRow
            Inherits Global.System.Data.DataRow
            
            Private tableUpdates As UpdatesDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableUpdates = CType(Me.Table,UpdatesDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IdUpdate() As Integer
                Get
                    Return CType(Me(Me.tableUpdates.IdUpdateColumn),Integer)
                End Get
                Set
                    Me(Me.tableUpdates.IdUpdateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NomAppli() As String
                Get
                    Return CType(Me(Me.tableUpdates.NomAppliColumn),String)
                End Get
                Set
                    Me(Me.tableUpdates.NomAppliColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Version() As String
                Get
                    Return CType(Me(Me.tableUpdates.VersionColumn),String)
                End Get
                Set
                    Me(Me.tableUpdates.VersionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Niveau() As Integer
                Get
                    Return CType(Me(Me.tableUpdates.NiveauColumn),Integer)
                End Get
                Set
                    Me(Me.tableUpdates.NiveauColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Actif() As Boolean
                Get
                    Return CType(Me(Me.tableUpdates.ActifColumn),Boolean)
                End Get
                Set
                    Me(Me.tableUpdates.ActifColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DownloadPath() As String
                Get
                    Try 
                        Return CType(Me(Me.tableUpdates.DownloadPathColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DownloadPath' dans la table 'Updates' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUpdates.DownloadPathColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Description() As String
                Get
                    Try 
                        Return CType(Me(Me.tableUpdates.DescriptionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Description' dans la table 'Updates' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUpdates.DescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TailleFichier() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableUpdates.TailleFichierColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TailleFichier' dans la table 'Updates' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUpdates.TailleFichierColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DateFichier() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableUpdates.DateFichierColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateFichier' dans la table 'Updates' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUpdates.DateFichierColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NiveauDisplay() As String
                Get
                    Try 
                        Return CType(Me(Me.tableUpdates.NiveauDisplayColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NiveauDisplay' dans la table 'Updates' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUpdates.NiveauDisplayColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ApplicationsRow() As ApplicationsRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Updates_Updates")),ApplicationsRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_Updates_Updates"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDownloadPathNull() As Boolean
                Return Me.IsNull(Me.tableUpdates.DownloadPathColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDownloadPathNull()
                Me(Me.tableUpdates.DownloadPathColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableUpdates.DescriptionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDescriptionNull()
                Me(Me.tableUpdates.DescriptionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTailleFichierNull() As Boolean
                Return Me.IsNull(Me.tableUpdates.TailleFichierColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTailleFichierNull()
                Me(Me.tableUpdates.TailleFichierColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDateFichierNull() As Boolean
                Return Me.IsNull(Me.tableUpdates.DateFichierColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDateFichierNull()
                Me(Me.tableUpdates.DateFichierColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNiveauDisplayNull() As Boolean
                Return Me.IsNull(Me.tableUpdates.NiveauDisplayColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNiveauDisplayNull()
                Me(Me.tableUpdates.NiveauDisplayColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Partial Public Class DownloadsRow
            Inherits Global.System.Data.DataRow
            
            Private tableDownloads As DownloadsDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableDownloads = CType(Me.Table,DownloadsDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IdDownload() As Integer
                Get
                    Return CType(Me(Me.tableDownloads.IdDownloadColumn),Integer)
                End Get
                Set
                    Me(Me.tableDownloads.IdDownloadColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IdUpdate() As Integer
                Get
                    Return CType(Me(Me.tableDownloads.IdUpdateColumn),Integer)
                End Get
                Set
                    Me(Me.tableDownloads.IdUpdateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NomApp() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDownloads.NomAppColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NomApp' dans la table 'Downloads' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDownloads.NomAppColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientIP() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDownloads.ClientIPColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ClientIP' dans la table 'Downloads' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDownloads.ClientIPColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DateDl() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableDownloads.DateDlColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateDl' dans la table 'Downloads' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDownloads.DateDlColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CodeClient() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDownloads.CodeClientColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CodeClient' dans la table 'Downloads' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDownloads.CodeClientColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CleClient() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDownloads.CleClientColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CleClient' dans la table 'Downloads' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDownloads.CleClientColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NomPoste() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDownloads.NomPosteColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NomPoste' dans la table 'Downloads' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDownloads.NomPosteColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNomAppNull() As Boolean
                Return Me.IsNull(Me.tableDownloads.NomAppColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNomAppNull()
                Me(Me.tableDownloads.NomAppColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsClientIPNull() As Boolean
                Return Me.IsNull(Me.tableDownloads.ClientIPColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetClientIPNull()
                Me(Me.tableDownloads.ClientIPColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDateDlNull() As Boolean
                Return Me.IsNull(Me.tableDownloads.DateDlColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDateDlNull()
                Me(Me.tableDownloads.DateDlColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCodeClientNull() As Boolean
                Return Me.IsNull(Me.tableDownloads.CodeClientColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCodeClientNull()
                Me(Me.tableDownloads.CodeClientColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCleClientNull() As Boolean
                Return Me.IsNull(Me.tableDownloads.CleClientColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCleClientNull()
                Me(Me.tableDownloads.CleClientColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNomPosteNull() As Boolean
                Return Me.IsNull(Me.tableDownloads.NomPosteColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNomPosteNull()
                Me(Me.tableDownloads.NomPosteColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Class ApplicationsRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ApplicationsRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ApplicationsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ApplicationsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Class UpdatesRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As UpdatesRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As UpdatesRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As UpdatesRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Class DownloadsRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As DownloadsRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As DownloadsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As DownloadsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub GetUpdatesCompletedEventHandler(ByVal sender As Object, ByVal e As GetUpdatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUpdatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As dsUpdates.UpdatesDataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),dsUpdates.UpdatesDataTable)
            End Get
        End Property
    End Class
End Namespace
