'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.5456
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Ce code source a été automatiquement généré par Microsoft.CompactFramework.Design.Data, version 2.0.50727.5456.
'
Namespace SvcAgrifact
    
    '''<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceAgrifactSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ServiceAgrifact
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost:50950/PreparationCommandeWS/ServiceAgrifact.asmx"
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ToString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ToString() As String
            Dim results() As Object = Me.Invoke("ToString", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginToString(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ToString", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndToString(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TestEcriture", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub TestEcriture()
            Me.Invoke("TestEcriture", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Function BeginTestEcriture(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TestEcriture", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndTestEcriture(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Version", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Version() As String
            Dim results() As Object = Me.Invoke("Version", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginVersion(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Version", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndVersion(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListeBC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListeBC() As DsPrepaCommande.BCDataTable
            Dim results() As Object = Me.Invoke("GetListeBC", New Object(-1) {})
            Return CType(results(0),DsPrepaCommande.BCDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetListeBC(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetListeBC", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetListeBC(ByVal asyncResult As System.IAsyncResult) As DsPrepaCommande.BCDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),DsPrepaCommande.BCDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBL(ByVal nbc As Integer, ByVal dateBc As Date) As DsPrepaCommande
            Dim results() As Object = Me.Invoke("GetBL", New Object() {nbc, dateBc})
            Return CType(results(0),DsPrepaCommande)
        End Function
        
        '''<remarks/>
        Public Function BeginGetBL(ByVal nbc As Integer, ByVal dateBc As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetBL", New Object() {nbc, dateBc}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetBL(ByVal asyncResult As System.IAsyncResult) As DsPrepaCommande
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),DsPrepaCommande)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBLByNDevisBL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBLByNDevisBL(ByVal nDevisBL As Integer) As DsPrepaCommande
            Dim results() As Object = Me.Invoke("GetBLByNDevisBL", New Object() {nDevisBL})
            Return CType(results(0),DsPrepaCommande)
        End Function
        
        '''<remarks/>
        Public Function BeginGetBLByNDevisBL(ByVal nDevisBL As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetBLByNDevisBL", New Object() {nDevisBL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetBLByNDevisBL(ByVal asyncResult As System.IAsyncResult) As DsPrepaCommande
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),DsPrepaCommande)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateBL(ByVal ds As DsPrepaCommande)
            Me.Invoke("UpdateBL", New Object() {ds})
        End Sub
        
        '''<remarks/>
        Public Function BeginUpdateBL(ByVal ds As DsPrepaCommande, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateBL", New Object() {ds}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndUpdateBL(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
    End Class
    
    'Cette définition de type a été générée par l'extension d'importation de schéma System.Data.Design.TypedDataSetSchemaImporterExtension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("DsPrepaCommande")>  _
    Partial Public Class DsPrepaCommande
        Inherits Global.System.Data.DataSet
        
        Private tableBL As BLDataTable
        
        Private tableBL_Detail As BL_DetailDataTable
        
        Private tableBC As BCDataTable
        
        Private relationBL_BL_Detail As Global.System.Data.DataRelation
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BL() As BLDataTable
            Get
                Return Me.tableBL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BL_Detail() As BL_DetailDataTable
            Get
                Return Me.tableBL_Detail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BC() As BCDataTable
            Get
                Return Me.tableBC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As DsPrepaCommande = CType(MyBase.Clone,DsPrepaCommande)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("BL")) Is Nothing) Then
                    MyBase.Tables.Add(New BLDataTable(ds.Tables("BL")))
                End If
                If (Not (ds.Tables("BL_Detail")) Is Nothing) Then
                    MyBase.Tables.Add(New BL_DetailDataTable(ds.Tables("BL_Detail")))
                End If
                If (Not (ds.Tables("BC")) Is Nothing) Then
                    MyBase.Tables.Add(New BCDataTable(ds.Tables("BC")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableBL = CType(MyBase.Tables("BL"),BLDataTable)
            If (initTable = true) Then
                If (Not (Me.tableBL) Is Nothing) Then
                    Me.tableBL.InitVars
                End If
            End If
            Me.tableBL_Detail = CType(MyBase.Tables("BL_Detail"),BL_DetailDataTable)
            If (initTable = true) Then
                If (Not (Me.tableBL_Detail) Is Nothing) Then
                    Me.tableBL_Detail.InitVars
                End If
            End If
            Me.tableBC = CType(MyBase.Tables("BC"),BCDataTable)
            If (initTable = true) Then
                If (Not (Me.tableBC) Is Nothing) Then
                    Me.tableBC.InitVars
                End If
            End If
            Me.relationBL_BL_Detail = Me.Relations("BL_BL_Detail")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "DsPrepaCommande"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/DsPrepaCommande.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableBL = New BLDataTable
            MyBase.Tables.Add(Me.tableBL)
            Me.tableBL_Detail = New BL_DetailDataTable
            MyBase.Tables.Add(Me.tableBL_Detail)
            Me.tableBC = New BCDataTable
            MyBase.Tables.Add(Me.tableBC)
            Me.relationBL_BL_Detail = New Global.System.Data.DataRelation("BL_BL_Detail", New Global.System.Data.DataColumn() {Me.tableBL.nDevisColumn}, New Global.System.Data.DataColumn() {Me.tableBL_Detail.nDevisColumn}, false)
            Me.Relations.Add(Me.relationBL_BL_Detail)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeBL() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeBL_Detail() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeBC() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As DsPrepaCommande = New DsPrepaCommande
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub BLRowChangeEventHandler(ByVal sender As Object, ByVal e As BLRowChangeEvent)
        
        Public Delegate Sub BL_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As BL_DetailRowChangeEvent)
        
        Public Delegate Sub BCRowChangeEventHandler(ByVal sender As Object, ByVal e As BCRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class BLDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnnDevis As Global.System.Data.DataColumn
            
            Private columnOrigine As Global.System.Data.DataColumn
            
            Private columnnOrigine As Global.System.Data.DataColumn
            
            Private columnnClient As Global.System.Data.DataColumn
            
            Private columnNom As Global.System.Data.DataColumn
            
            Private columnnFacture As Global.System.Data.DataColumn
            
            Private columnDateFacture As Global.System.Data.DataColumn
            
            Private columnPaye As Global.System.Data.DataColumn
            
            Private columnObservation As Global.System.Data.DataColumn
            
            Private columnDepot As Global.System.Data.DataColumn
            
            Private columnnbCartons As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "BL"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnDevis
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOrigine
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnOrigine
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnClient
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NomColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNom
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnFacture
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDateFacture
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPaye
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnObservation
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DepotColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDepot
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nbCartonsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnbCartons
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As BLRow
                Get
                    Return CType(Me.Rows(index),BLRow)
                End Get
            End Property
            
            Public Event BLRowChanging As BLRowChangeEventHandler
            
            Public Event BLRowChanged As BLRowChangeEventHandler
            
            Public Event BLRowDeleting As BLRowChangeEventHandler
            
            Public Event BLRowDeleted As BLRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddBLRow(ByVal row As BLRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddBLRow(ByVal nDevis As Decimal, ByVal Origine As String, ByVal nOrigine As Decimal, ByVal nClient As Decimal, ByVal Nom As String, ByVal nFacture As Decimal, ByVal DateFacture As Date, ByVal Paye As Boolean, ByVal Observation As String, ByVal Depot As String, ByVal nbCartons As Integer) As BLRow
                Dim rowBLRow As BLRow = CType(Me.NewRow,BLRow)
                Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, Nom, nFacture, DateFacture, Paye, Observation, Depot, nbCartons}
                rowBLRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowBLRow)
                Return rowBLRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindBynDevis(ByVal nDevis As Decimal) As BLRow
                Return CType(Me.Rows.Find(New Object() {nDevis}),BLRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As BLDataTable = CType(MyBase.Clone,BLDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New BLDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnnDevis = MyBase.Columns("nDevis")
                Me.columnOrigine = MyBase.Columns("Origine")
                Me.columnnOrigine = MyBase.Columns("nOrigine")
                Me.columnnClient = MyBase.Columns("nClient")
                Me.columnNom = MyBase.Columns("Nom")
                Me.columnnFacture = MyBase.Columns("nFacture")
                Me.columnDateFacture = MyBase.Columns("DateFacture")
                Me.columnPaye = MyBase.Columns("Paye")
                Me.columnObservation = MyBase.Columns("Observation")
                Me.columnDepot = MyBase.Columns("Depot")
                Me.columnnbCartons = MyBase.Columns("nbCartons")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnDevis)
                Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOrigine)
                Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnOrigine)
                Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnClient)
                Me.columnNom = New Global.System.Data.DataColumn("Nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNom)
                Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnFacture)
                Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDateFacture)
                Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPaye)
                Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnObservation)
                Me.columnDepot = New Global.System.Data.DataColumn("Depot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDepot)
                Me.columnnbCartons = New Global.System.Data.DataColumn("nbCartons", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnbCartons)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
                Me.columnnDevis.AllowDBNull = false
                Me.columnnDevis.Unique = true
                Me.columnOrigine.MaxLength = 1073741823
                Me.columnNom.MaxLength = 255
                Me.columnPaye.AllowDBNull = false
                Me.columnObservation.MaxLength = 1073741823
                Me.columnDepot.MaxLength = 50
                Me.columnnbCartons.AllowDBNull = false
                Me.columnnbCartons.DefaultValue = CType(0,Integer)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewBLRow() As BLRow
                Return CType(Me.NewRow,BLRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New BLRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(BLRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.BLRowChangedEvent) Is Nothing) Then
                    RaiseEvent BLRowChanged(Me, New BLRowChangeEvent(CType(e.Row,BLRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.BLRowChangingEvent) Is Nothing) Then
                    RaiseEvent BLRowChanging(Me, New BLRowChangeEvent(CType(e.Row,BLRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.BLRowDeletedEvent) Is Nothing) Then
                    RaiseEvent BLRowDeleted(Me, New BLRowChangeEvent(CType(e.Row,BLRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.BLRowDeletingEvent) Is Nothing) Then
                    RaiseEvent BLRowDeleting(Me, New BLRowChangeEvent(CType(e.Row,BLRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveBLRow(ByVal row As BLRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As DsPrepaCommande = New DsPrepaCommande
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "BLDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class BL_DetailDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnnDetailDevis As Global.System.Data.DataColumn
            
            Private columnnDevis As Global.System.Data.DataColumn
            
            Private columnnLigne As Global.System.Data.DataColumn
            
            Private columnNLot As Global.System.Data.DataColumn
            
            Private columnCodeProduit As Global.System.Data.DataColumn
            
            Private columnLibelle As Global.System.Data.DataColumn
            
            Private columnUnite1 As Global.System.Data.DataColumn
            
            Private columnLibUnite1 As Global.System.Data.DataColumn
            
            Private columnUnite2 As Global.System.Data.DataColumn
            
            Private columnLibUnite2 As Global.System.Data.DataColumn
            
            Private columnCodeBarre As Global.System.Data.DataColumn
            
            Private columnPrixUHT As Global.System.Data.DataColumn
            
            Private columnTTVA As Global.System.Data.DataColumn
            
            Private columnPrixUTTC As Global.System.Data.DataColumn
            
            Private columnRemise As Global.System.Data.DataColumn
            
            Private columnNCompte As Global.System.Data.DataColumn
            
            Private columnNActivite As Global.System.Data.DataColumn
            
            Private columnMontantLigneHT As Global.System.Data.DataColumn
            
            Private columnMontantLigneTVA As Global.System.Data.DataColumn
            
            Private columnMontantLigneTTC As Global.System.Data.DataColumn
            
            Private columnU1U2Independant As Global.System.Data.DataColumn
            
            Private columnCoefU2 As Global.System.Data.DataColumn
            
            Private columnTypeFacturation As Global.System.Data.DataColumn
            
            Private columnNbParution As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "BL_Detail"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnDetailDevis
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnDevis
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnLigne
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNLot
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCodeProduit
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLibelle
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnite1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLibUnite1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnite2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLibUnite2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CodeBarreColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCodeBarre
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPrixUHT
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTTVA
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPrixUTTC
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRemise
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NCompteColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNCompte
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NActiviteColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNActivite
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMontantLigneHT
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMontantLigneTVA
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMontantLigneTTC
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property U1U2IndependantColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnU1U2Independant
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CoefU2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCoefU2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TypeFacturationColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTypeFacturation
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNbParution
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As BL_DetailRow
                Get
                    Return CType(Me.Rows(index),BL_DetailRow)
                End Get
            End Property
            
            Public Event BL_DetailRowChanging As BL_DetailRowChangeEventHandler
            
            Public Event BL_DetailRowChanged As BL_DetailRowChangeEventHandler
            
            Public Event BL_DetailRowDeleting As BL_DetailRowChangeEventHandler
            
            Public Event BL_DetailRowDeleted As BL_DetailRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddBL_DetailRow(ByVal row As BL_DetailRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddBL_DetailRow( _
                        ByVal parentBLRowByBL_BL_Detail As BLRow,  _
                        ByVal nLigne As Integer,  _
                        ByVal NLot As String,  _
                        ByVal CodeProduit As String,  _
                        ByVal Libelle As String,  _
                        ByVal Unite1 As Decimal,  _
                        ByVal LibUnite1 As String,  _
                        ByVal Unite2 As Decimal,  _
                        ByVal LibUnite2 As String,  _
                        ByVal CodeBarre As String,  _
                        ByVal PrixUHT As Decimal,  _
                        ByVal TTVA As String,  _
                        ByVal PrixUTTC As Decimal,  _
                        ByVal Remise As Decimal,  _
                        ByVal NCompte As String,  _
                        ByVal NActivite As String,  _
                        ByVal MontantLigneHT As Decimal,  _
                        ByVal MontantLigneTVA As Decimal,  _
                        ByVal MontantLigneTTC As Decimal,  _
                        ByVal U1U2Independant As Boolean,  _
                        ByVal CoefU2 As Decimal,  _
                        ByVal TypeFacturation As String,  _
                        ByVal NbParution As Decimal) As BL_DetailRow
                Dim rowBL_DetailRow As BL_DetailRow = CType(Me.NewRow,BL_DetailRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, nLigne, NLot, CodeProduit, Libelle, Unite1, LibUnite1, Unite2, LibUnite2, CodeBarre, PrixUHT, TTVA, PrixUTTC, Remise, NCompte, NActivite, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, U1U2Independant, CoefU2, TypeFacturation, NbParution}
                If (Not (parentBLRowByBL_BL_Detail) Is Nothing) Then
                    columnValuesArray(1) = parentBLRowByBL_BL_Detail(0)
                End If
                rowBL_DetailRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowBL_DetailRow)
                Return rowBL_DetailRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As BL_DetailRow
                Return CType(Me.Rows.Find(New Object() {nDetailDevis}),BL_DetailRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As BL_DetailDataTable = CType(MyBase.Clone,BL_DetailDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New BL_DetailDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
                Me.columnnDevis = MyBase.Columns("nDevis")
                Me.columnnLigne = MyBase.Columns("nLigne")
                Me.columnNLot = MyBase.Columns("NLot")
                Me.columnCodeProduit = MyBase.Columns("CodeProduit")
                Me.columnLibelle = MyBase.Columns("Libelle")
                Me.columnUnite1 = MyBase.Columns("Unite1")
                Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
                Me.columnUnite2 = MyBase.Columns("Unite2")
                Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
                Me.columnCodeBarre = MyBase.Columns("CodeBarre")
                Me.columnPrixUHT = MyBase.Columns("PrixUHT")
                Me.columnTTVA = MyBase.Columns("TTVA")
                Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
                Me.columnRemise = MyBase.Columns("Remise")
                Me.columnNCompte = MyBase.Columns("NCompte")
                Me.columnNActivite = MyBase.Columns("NActivite")
                Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
                Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
                Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
                Me.columnU1U2Independant = MyBase.Columns("U1U2Independant")
                Me.columnCoefU2 = MyBase.Columns("CoefU2")
                Me.columnTypeFacturation = MyBase.Columns("TypeFacturation")
                Me.columnNbParution = MyBase.Columns("NbParution")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnDetailDevis)
                Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnDevis)
                Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnLigne)
                Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNLot)
                Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCodeProduit)
                Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLibelle)
                Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUnite1)
                Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLibUnite1)
                Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUnite2)
                Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLibUnite2)
                Me.columnCodeBarre = New Global.System.Data.DataColumn("CodeBarre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCodeBarre)
                Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPrixUHT)
                Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTTVA)
                Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPrixUTTC)
                Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRemise)
                Me.columnNCompte = New Global.System.Data.DataColumn("NCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNCompte)
                Me.columnNActivite = New Global.System.Data.DataColumn("NActivite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNActivite)
                Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMontantLigneHT)
                Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMontantLigneTVA)
                Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMontantLigneTTC)
                Me.columnU1U2Independant = New Global.System.Data.DataColumn("U1U2Independant", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnU1U2Independant)
                Me.columnCoefU2 = New Global.System.Data.DataColumn("CoefU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCoefU2)
                Me.columnTypeFacturation = New Global.System.Data.DataColumn("TypeFacturation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTypeFacturation)
                Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNbParution)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
                Me.columnnDetailDevis.AutoIncrement = true
                Me.columnnDetailDevis.AutoIncrementSeed = -1
                Me.columnnDetailDevis.AutoIncrementStep = -1
                Me.columnnDetailDevis.AllowDBNull = false
                Me.columnnDetailDevis.Unique = true
                Me.columnNLot.MaxLength = 50
                Me.columnCodeProduit.MaxLength = 255
                Me.columnLibelle.MaxLength = 1073741823
                Me.columnLibUnite1.MaxLength = 5
                Me.columnLibUnite2.MaxLength = 5
                Me.columnCodeBarre.MaxLength = 20
                Me.columnTTVA.MaxLength = 50
                Me.columnNCompte.MaxLength = 8
                Me.columnNActivite.MaxLength = 4
                Me.columnTypeFacturation.MaxLength = 50
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewBL_DetailRow() As BL_DetailRow
                Return CType(Me.NewRow,BL_DetailRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New BL_DetailRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(BL_DetailRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.BL_DetailRowChangedEvent) Is Nothing) Then
                    RaiseEvent BL_DetailRowChanged(Me, New BL_DetailRowChangeEvent(CType(e.Row,BL_DetailRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.BL_DetailRowChangingEvent) Is Nothing) Then
                    RaiseEvent BL_DetailRowChanging(Me, New BL_DetailRowChangeEvent(CType(e.Row,BL_DetailRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.BL_DetailRowDeletedEvent) Is Nothing) Then
                    RaiseEvent BL_DetailRowDeleted(Me, New BL_DetailRowChangeEvent(CType(e.Row,BL_DetailRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.BL_DetailRowDeletingEvent) Is Nothing) Then
                    RaiseEvent BL_DetailRowDeleting(Me, New BL_DetailRowChangeEvent(CType(e.Row,BL_DetailRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveBL_DetailRow(ByVal row As BL_DetailRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As DsPrepaCommande = New DsPrepaCommande
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "BL_DetailDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class BCDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnnDevis As Global.System.Data.DataColumn
            
            Private columnnClient As Global.System.Data.DataColumn
            
            Private columnNom As Global.System.Data.DataColumn
            
            Private columnnFacture As Global.System.Data.DataColumn
            
            Private columnDateFacture As Global.System.Data.DataColumn
            
            Private columnPaye As Global.System.Data.DataColumn
            
            Private columnDepot As Global.System.Data.DataColumn
            
            Private columnObservation As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "BC"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnDevis
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnClient
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NomColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNom
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnFacture
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDateFacture
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPaye
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DepotColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDepot
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnObservation
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As BCRow
                Get
                    Return CType(Me.Rows(index),BCRow)
                End Get
            End Property
            
            Public Event BCRowChanging As BCRowChangeEventHandler
            
            Public Event BCRowChanged As BCRowChangeEventHandler
            
            Public Event BCRowDeleting As BCRowChangeEventHandler
            
            Public Event BCRowDeleted As BCRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddBCRow(ByVal row As BCRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddBCRow(ByVal nDevis As Decimal, ByVal nClient As Decimal, ByVal Nom As String, ByVal nFacture As Decimal, ByVal DateFacture As Date, ByVal Paye As Boolean, ByVal Depot As String, ByVal Observation As String) As BCRow
                Dim rowBCRow As BCRow = CType(Me.NewRow,BCRow)
                Dim columnValuesArray() As Object = New Object() {nDevis, nClient, Nom, nFacture, DateFacture, Paye, Depot, Observation}
                rowBCRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowBCRow)
                Return rowBCRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindBynDevis(ByVal nDevis As Decimal) As BCRow
                Return CType(Me.Rows.Find(New Object() {nDevis}),BCRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As BCDataTable = CType(MyBase.Clone,BCDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New BCDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnnDevis = MyBase.Columns("nDevis")
                Me.columnnClient = MyBase.Columns("nClient")
                Me.columnNom = MyBase.Columns("Nom")
                Me.columnnFacture = MyBase.Columns("nFacture")
                Me.columnDateFacture = MyBase.Columns("DateFacture")
                Me.columnPaye = MyBase.Columns("Paye")
                Me.columnDepot = MyBase.Columns("Depot")
                Me.columnObservation = MyBase.Columns("Observation")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnDevis)
                Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnClient)
                Me.columnNom = New Global.System.Data.DataColumn("Nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNom)
                Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnFacture)
                Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDateFacture)
                Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPaye)
                Me.columnDepot = New Global.System.Data.DataColumn("Depot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDepot)
                Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnObservation)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
                Me.columnnDevis.AllowDBNull = false
                Me.columnnDevis.Unique = true
                Me.columnNom.MaxLength = 255
                Me.columnPaye.AllowDBNull = false
                Me.columnDepot.MaxLength = 50
                Me.columnObservation.MaxLength = 1073741823
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewBCRow() As BCRow
                Return CType(Me.NewRow,BCRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New BCRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(BCRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.BCRowChangedEvent) Is Nothing) Then
                    RaiseEvent BCRowChanged(Me, New BCRowChangeEvent(CType(e.Row,BCRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.BCRowChangingEvent) Is Nothing) Then
                    RaiseEvent BCRowChanging(Me, New BCRowChangeEvent(CType(e.Row,BCRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.BCRowDeletedEvent) Is Nothing) Then
                    RaiseEvent BCRowDeleted(Me, New BCRowChangeEvent(CType(e.Row,BCRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.BCRowDeletingEvent) Is Nothing) Then
                    RaiseEvent BCRowDeleting(Me, New BCRowChangeEvent(CType(e.Row,BCRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveBCRow(ByVal row As BCRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As DsPrepaCommande = New DsPrepaCommande
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "BCDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class BLRow
            Inherits Global.System.Data.DataRow
            
            Private tableBL As BLDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableBL = CType(Me.Table,BLDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nDevis() As Decimal
                Get
                    Return CType(Me(Me.tableBL.nDevisColumn),Decimal)
                End Get
                Set
                    Me(Me.tableBL.nDevisColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Origine() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL.OrigineColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Origine' dans la table 'BL' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL.OrigineColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nOrigine() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL.nOrigineColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nOrigine' dans la table 'BL' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL.nOrigineColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nClient() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL.nClientColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nClient' dans la table 'BL' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL.nClientColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Nom() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL.NomColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Nom' dans la table 'BL' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL.NomColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nFacture() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL.nFactureColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nFacture' dans la table 'BL' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL.nFactureColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DateFacture() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableBL.DateFactureColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateFacture' dans la table 'BL' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL.DateFactureColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Paye() As Boolean
                Get
                    Return CType(Me(Me.tableBL.PayeColumn),Boolean)
                End Get
                Set
                    Me(Me.tableBL.PayeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Observation() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL.ObservationColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Observation' dans la table 'BL' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL.ObservationColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Depot() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL.DepotColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Depot' dans la table 'BL' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL.DepotColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nbCartons() As Integer
                Get
                    Return CType(Me(Me.tableBL.nbCartonsColumn),Integer)
                End Get
                Set
                    Me(Me.tableBL.nbCartonsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsOrigineNull() As Boolean
                Return Me.IsNull(Me.tableBL.OrigineColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetOrigineNull()
                Me(Me.tableBL.OrigineColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsnOrigineNull() As Boolean
                Return Me.IsNull(Me.tableBL.nOrigineColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetnOrigineNull()
                Me(Me.tableBL.nOrigineColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsnClientNull() As Boolean
                Return Me.IsNull(Me.tableBL.nClientColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetnClientNull()
                Me(Me.tableBL.nClientColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNomNull() As Boolean
                Return Me.IsNull(Me.tableBL.NomColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNomNull()
                Me(Me.tableBL.NomColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsnFactureNull() As Boolean
                Return Me.IsNull(Me.tableBL.nFactureColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetnFactureNull()
                Me(Me.tableBL.nFactureColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDateFactureNull() As Boolean
                Return Me.IsNull(Me.tableBL.DateFactureColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDateFactureNull()
                Me(Me.tableBL.DateFactureColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsObservationNull() As Boolean
                Return Me.IsNull(Me.tableBL.ObservationColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetObservationNull()
                Me(Me.tableBL.ObservationColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDepotNull() As Boolean
                Return Me.IsNull(Me.tableBL.DepotColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDepotNull()
                Me(Me.tableBL.DepotColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetBL_DetailRows() As BL_DetailRow()
                If (Me.Table.ChildRelations("BL_BL_Detail") Is Nothing) Then
                    Return New BL_DetailRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("BL_BL_Detail")),BL_DetailRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class BL_DetailRow
            Inherits Global.System.Data.DataRow
            
            Private tableBL_Detail As BL_DetailDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableBL_Detail = CType(Me.Table,BL_DetailDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nDetailDevis() As Decimal
                Get
                    Return CType(Me(Me.tableBL_Detail.nDetailDevisColumn),Decimal)
                End Get
                Set
                    Me(Me.tableBL_Detail.nDetailDevisColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nDevis() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.nDevisColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nDevis' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.nDevisColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nLigne() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.nLigneColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nLigne' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.nLigneColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NLot() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.NLotColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NLot' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.NLotColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CodeProduit() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.CodeProduitColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CodeProduit' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.CodeProduitColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Libelle() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.LibelleColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Libelle' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.LibelleColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Unite1() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.Unite1Column),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite1' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.Unite1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LibUnite1() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.LibUnite1Column),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibUnite1' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.LibUnite1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Unite2() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.Unite2Column),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite2' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.Unite2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LibUnite2() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.LibUnite2Column),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibUnite2' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.LibUnite2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CodeBarre() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.CodeBarreColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CodeBarre' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.CodeBarreColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property PrixUHT() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.PrixUHTColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUHT' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.PrixUHTColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TTVA() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.TTVAColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TTVA' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.TTVAColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property PrixUTTC() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.PrixUTTCColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUTTC' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.PrixUTTCColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Remise() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.RemiseColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Remise' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.RemiseColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NCompte() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.NCompteColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NCompte' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.NCompteColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NActivite() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.NActiviteColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NActivite' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.NActiviteColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property MontantLigneHT() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.MontantLigneHTColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneHT' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.MontantLigneHTColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property MontantLigneTVA() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.MontantLigneTVAColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneTVA' dans la table 'BL_Detail' est DBNull."& _ 
                                "", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.MontantLigneTVAColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property MontantLigneTTC() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.MontantLigneTTCColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneTTC' dans la table 'BL_Detail' est DBNull."& _ 
                                "", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.MontantLigneTTCColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property U1U2Independant() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.U1U2IndependantColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'U1U2Independant' dans la table 'BL_Detail' est DBNull."& _ 
                                "", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.U1U2IndependantColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CoefU2() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.CoefU2Column),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CoefU2' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.CoefU2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TypeFacturation() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.TypeFacturationColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TypeFacturation' dans la table 'BL_Detail' est DBNull."& _ 
                                "", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.TypeFacturationColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NbParution() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBL_Detail.NbParutionColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NbParution' dans la table 'BL_Detail' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBL_Detail.NbParutionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property BLRow() As BLRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("BL_BL_Detail")),BLRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("BL_BL_Detail"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsnDevisNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.nDevisColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetnDevisNull()
                Me(Me.tableBL_Detail.nDevisColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsnLigneNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.nLigneColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetnLigneNull()
                Me(Me.tableBL_Detail.nLigneColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNLotNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.NLotColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNLotNull()
                Me(Me.tableBL_Detail.NLotColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCodeProduitNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.CodeProduitColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCodeProduitNull()
                Me(Me.tableBL_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsLibelleNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.LibelleColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetLibelleNull()
                Me(Me.tableBL_Detail.LibelleColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUnite1Null() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.Unite1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUnite1Null()
                Me(Me.tableBL_Detail.Unite1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsLibUnite1Null() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.LibUnite1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetLibUnite1Null()
                Me(Me.tableBL_Detail.LibUnite1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUnite2Null() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.Unite2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUnite2Null()
                Me(Me.tableBL_Detail.Unite2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsLibUnite2Null() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.LibUnite2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetLibUnite2Null()
                Me(Me.tableBL_Detail.LibUnite2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCodeBarreNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.CodeBarreColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCodeBarreNull()
                Me(Me.tableBL_Detail.CodeBarreColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsPrixUHTNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.PrixUHTColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetPrixUHTNull()
                Me(Me.tableBL_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTTVANull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.TTVAColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTTVANull()
                Me(Me.tableBL_Detail.TTVAColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsPrixUTTCNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.PrixUTTCColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetPrixUTTCNull()
                Me(Me.tableBL_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRemiseNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.RemiseColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRemiseNull()
                Me(Me.tableBL_Detail.RemiseColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNCompteNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.NCompteColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNCompteNull()
                Me(Me.tableBL_Detail.NCompteColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNActiviteNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.NActiviteColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNActiviteNull()
                Me(Me.tableBL_Detail.NActiviteColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsMontantLigneHTNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.MontantLigneHTColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetMontantLigneHTNull()
                Me(Me.tableBL_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsMontantLigneTVANull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.MontantLigneTVAColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetMontantLigneTVANull()
                Me(Me.tableBL_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsMontantLigneTTCNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.MontantLigneTTCColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetMontantLigneTTCNull()
                Me(Me.tableBL_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsU1U2IndependantNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.U1U2IndependantColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetU1U2IndependantNull()
                Me(Me.tableBL_Detail.U1U2IndependantColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCoefU2Null() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.CoefU2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCoefU2Null()
                Me(Me.tableBL_Detail.CoefU2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTypeFacturationNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.TypeFacturationColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTypeFacturationNull()
                Me(Me.tableBL_Detail.TypeFacturationColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNbParutionNull() As Boolean
                Return Me.IsNull(Me.tableBL_Detail.NbParutionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNbParutionNull()
                Me(Me.tableBL_Detail.NbParutionColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class BCRow
            Inherits Global.System.Data.DataRow
            
            Private tableBC As BCDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableBC = CType(Me.Table,BCDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nDevis() As Decimal
                Get
                    Return CType(Me(Me.tableBC.nDevisColumn),Decimal)
                End Get
                Set
                    Me(Me.tableBC.nDevisColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nClient() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBC.nClientColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nClient' dans la table 'BC' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBC.nClientColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Nom() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBC.NomColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Nom' dans la table 'BC' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBC.NomColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nFacture() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableBC.nFactureColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nFacture' dans la table 'BC' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBC.nFactureColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DateFacture() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableBC.DateFactureColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateFacture' dans la table 'BC' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBC.DateFactureColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Paye() As Boolean
                Get
                    Return CType(Me(Me.tableBC.PayeColumn),Boolean)
                End Get
                Set
                    Me(Me.tableBC.PayeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Depot() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBC.DepotColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Depot' dans la table 'BC' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBC.DepotColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Observation() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBC.ObservationColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Observation' dans la table 'BC' est DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBC.ObservationColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsnClientNull() As Boolean
                Return Me.IsNull(Me.tableBC.nClientColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetnClientNull()
                Me(Me.tableBC.nClientColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNomNull() As Boolean
                Return Me.IsNull(Me.tableBC.NomColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNomNull()
                Me(Me.tableBC.NomColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsnFactureNull() As Boolean
                Return Me.IsNull(Me.tableBC.nFactureColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetnFactureNull()
                Me(Me.tableBC.nFactureColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDateFactureNull() As Boolean
                Return Me.IsNull(Me.tableBC.DateFactureColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDateFactureNull()
                Me(Me.tableBC.DateFactureColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDepotNull() As Boolean
                Return Me.IsNull(Me.tableBC.DepotColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDepotNull()
                Me(Me.tableBC.DepotColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsObservationNull() As Boolean
                Return Me.IsNull(Me.tableBC.ObservationColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetObservationNull()
                Me(Me.tableBC.ObservationColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class BLRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As BLRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As BLRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As BLRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class BL_DetailRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As BL_DetailRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As BL_DetailRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As BL_DetailRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class BCRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As BCRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As BCRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As BCRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
