'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.1433
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Ce code source a été automatiquement généré par Microsoft.VSDesigner, Version 2.0.50727.1433.
'
Namespace dell
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Service1Soap", [Namespace]:="http://tempuri.org/ActigramGRC/Service1")>  _
    Partial Public Class Service1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetAdherentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpDateNbAnnonceAdherentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UtilisateurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSchemaDonneesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSchemaDonneesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecupBaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SynchroPartielOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecupModifOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SynchroDonneesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreerDeclancheurBaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerifNouvelleVersionFichierOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpLoadNouvelleVersionFichierOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://dell/actigramgrc/service1.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetAdherentCompleted As GetAdherentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpDateNbAnnonceAdherentCompleted As UpDateNbAnnonceAdherentCompletedEventHandler
        
        '''<remarks/>
        Public Event UtilisateurCompleted As UtilisateurCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSchemaDonneesCompleted As CreateSchemaDonneesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSchemaDonneesCompleted As GetSchemaDonneesCompletedEventHandler
        
        '''<remarks/>
        Public Event RecupBaseCompleted As RecupBaseCompletedEventHandler
        
        '''<remarks/>
        Public Event SynchroPartielCompleted As SynchroPartielCompletedEventHandler
        
        '''<remarks/>
        Public Event RecupModifCompleted As RecupModifCompletedEventHandler
        
        '''<remarks/>
        Public Event SynchroDonneesCompleted As SynchroDonneesCompletedEventHandler
        
        '''<remarks/>
        Public Event CreerDeclancheurBaseCompleted As CreerDeclancheurBaseCompletedEventHandler
        
        '''<remarks/>
        Public Event VerifNouvelleVersionFichierCompleted As VerifNouvelleVersionFichierCompletedEventHandler
        
        '''<remarks/>
        Public Event UpLoadNouvelleVersionFichierCompleted As UpLoadNouvelleVersionFichierCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/GetAdherent", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdherent(ByVal Nom As String, ByVal prenom As String, ByRef strErreur As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAdherent", New Object() {Nom, prenom, strErreur})
            strErreur = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAdherent(ByVal Nom As String, ByVal prenom As String, ByVal strErreur As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAdherent", New Object() {Nom, prenom, strErreur}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAdherent(ByVal asyncResult As System.IAsyncResult, ByRef strErreur As String) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            strErreur = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdherentAsync(ByVal Nom As String, ByVal prenom As String, ByVal strErreur As String)
            Me.GetAdherentAsync(Nom, prenom, strErreur, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdherentAsync(ByVal Nom As String, ByVal prenom As String, ByVal strErreur As String, ByVal userState As Object)
            If (Me.GetAdherentOperationCompleted Is Nothing) Then
                Me.GetAdherentOperationCompleted = AddressOf Me.OnGetAdherentOperationCompleted
            End If
            Me.InvokeAsync("GetAdherent", New Object() {Nom, prenom, strErreur}, Me.GetAdherentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdherentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdherentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdherentCompleted(Me, New GetAdherentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/UpDateNbAnnonceAdherent", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpDateNbAnnonceAdherent(ByVal nRef As String, ByVal nbAnnonce As Integer, ByRef strErreur As String) As Integer
            Dim results() As Object = Me.Invoke("UpDateNbAnnonceAdherent", New Object() {nRef, nbAnnonce, strErreur})
            strErreur = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginUpDateNbAnnonceAdherent(ByVal nRef As String, ByVal nbAnnonce As Integer, ByVal strErreur As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpDateNbAnnonceAdherent", New Object() {nRef, nbAnnonce, strErreur}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpDateNbAnnonceAdherent(ByVal asyncResult As System.IAsyncResult, ByRef strErreur As String) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            strErreur = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpDateNbAnnonceAdherentAsync(ByVal nRef As String, ByVal nbAnnonce As Integer, ByVal strErreur As String)
            Me.UpDateNbAnnonceAdherentAsync(nRef, nbAnnonce, strErreur, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpDateNbAnnonceAdherentAsync(ByVal nRef As String, ByVal nbAnnonce As Integer, ByVal strErreur As String, ByVal userState As Object)
            If (Me.UpDateNbAnnonceAdherentOperationCompleted Is Nothing) Then
                Me.UpDateNbAnnonceAdherentOperationCompleted = AddressOf Me.OnUpDateNbAnnonceAdherentOperationCompleted
            End If
            Me.InvokeAsync("UpDateNbAnnonceAdherent", New Object() {nRef, nbAnnonce, strErreur}, Me.UpDateNbAnnonceAdherentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpDateNbAnnonceAdherentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpDateNbAnnonceAdherentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpDateNbAnnonceAdherentCompleted(Me, New UpDateNbAnnonceAdherentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/Utilisateur", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Utilisateur() As String
            Dim results() As Object = Me.Invoke("Utilisateur", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUtilisateur(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Utilisateur", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUtilisateur(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UtilisateurAsync()
            Me.UtilisateurAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UtilisateurAsync(ByVal userState As Object)
            If (Me.UtilisateurOperationCompleted Is Nothing) Then
                Me.UtilisateurOperationCompleted = AddressOf Me.OnUtilisateurOperationCompleted
            End If
            Me.InvokeAsync("Utilisateur", New Object(-1) {}, Me.UtilisateurOperationCompleted, userState)
        End Sub
        
        Private Sub OnUtilisateurOperationCompleted(ByVal arg As Object)
            If (Not (Me.UtilisateurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UtilisateurCompleted(Me, New UtilisateurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/CreateSchemaDonnees", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSchemaDonnees(ByVal strSchema As String, <System.Xml.Serialization.XmlElementAttribute("Utilisateur")> ByVal Utilisateur1 As String, ByVal MotPasse As String) As String
            Dim results() As Object = Me.Invoke("CreateSchemaDonnees", New Object() {strSchema, Utilisateur1, MotPasse})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateSchemaDonnees(ByVal strSchema As String, ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateSchemaDonnees", New Object() {strSchema, Utilisateur1, MotPasse}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateSchemaDonnees(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSchemaDonneesAsync(ByVal strSchema As String, ByVal Utilisateur1 As String, ByVal MotPasse As String)
            Me.CreateSchemaDonneesAsync(strSchema, Utilisateur1, MotPasse, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSchemaDonneesAsync(ByVal strSchema As String, ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal userState As Object)
            If (Me.CreateSchemaDonneesOperationCompleted Is Nothing) Then
                Me.CreateSchemaDonneesOperationCompleted = AddressOf Me.OnCreateSchemaDonneesOperationCompleted
            End If
            Me.InvokeAsync("CreateSchemaDonnees", New Object() {strSchema, Utilisateur1, MotPasse}, Me.CreateSchemaDonneesOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSchemaDonneesOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSchemaDonneesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSchemaDonneesCompleted(Me, New CreateSchemaDonneesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/GetSchemaDonnees", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSchemaDonnees(<System.Xml.Serialization.XmlElementAttribute("Utilisateur")> ByVal Utilisateur1 As String, ByVal MotPasse As String, ByRef nVersion As Long) As String
            Dim results() As Object = Me.Invoke("GetSchemaDonnees", New Object() {Utilisateur1, MotPasse, nVersion})
            nVersion = CType(results(1),Long)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSchemaDonnees(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As Long, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSchemaDonnees", New Object() {Utilisateur1, MotPasse, nVersion}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSchemaDonnees(ByVal asyncResult As System.IAsyncResult, ByRef nVersion As Long) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            nVersion = CType(results(1),Long)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSchemaDonneesAsync(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As Long)
            Me.GetSchemaDonneesAsync(Utilisateur1, MotPasse, nVersion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSchemaDonneesAsync(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As Long, ByVal userState As Object)
            If (Me.GetSchemaDonneesOperationCompleted Is Nothing) Then
                Me.GetSchemaDonneesOperationCompleted = AddressOf Me.OnGetSchemaDonneesOperationCompleted
            End If
            Me.InvokeAsync("GetSchemaDonnees", New Object() {Utilisateur1, MotPasse, nVersion}, Me.GetSchemaDonneesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSchemaDonneesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSchemaDonneesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSchemaDonneesCompleted(Me, New GetSchemaDonneesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/RecupBase", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecupBase(ByRef nbLastConnection As Long, <System.Xml.Serialization.XmlElementAttribute("Utilisateur")> ByVal Utilisateur1 As String, ByVal MotPasse As String) As String
            Dim results() As Object = Me.Invoke("RecupBase", New Object() {nbLastConnection, Utilisateur1, MotPasse})
            nbLastConnection = CType(results(1),Long)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRecupBase(ByVal nbLastConnection As Long, ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RecupBase", New Object() {nbLastConnection, Utilisateur1, MotPasse}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRecupBase(ByVal asyncResult As System.IAsyncResult, ByRef nbLastConnection As Long) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            nbLastConnection = CType(results(1),Long)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecupBaseAsync(ByVal nbLastConnection As Long, ByVal Utilisateur1 As String, ByVal MotPasse As String)
            Me.RecupBaseAsync(nbLastConnection, Utilisateur1, MotPasse, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecupBaseAsync(ByVal nbLastConnection As Long, ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal userState As Object)
            If (Me.RecupBaseOperationCompleted Is Nothing) Then
                Me.RecupBaseOperationCompleted = AddressOf Me.OnRecupBaseOperationCompleted
            End If
            Me.InvokeAsync("RecupBase", New Object() {nbLastConnection, Utilisateur1, MotPasse}, Me.RecupBaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecupBaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecupBaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecupBaseCompleted(Me, New RecupBaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/SynchroPartiel", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SynchroPartiel(ByVal strDonneesPartiel As String, <System.Xml.Serialization.XmlElementAttribute("Utilisateur")> ByVal Utilisateur1 As String, ByVal MotPasse As String) As String
            Dim results() As Object = Me.Invoke("SynchroPartiel", New Object() {strDonneesPartiel, Utilisateur1, MotPasse})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginSynchroPartiel(ByVal strDonneesPartiel As String, ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SynchroPartiel", New Object() {strDonneesPartiel, Utilisateur1, MotPasse}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSynchroPartiel(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SynchroPartielAsync(ByVal strDonneesPartiel As String, ByVal Utilisateur1 As String, ByVal MotPasse As String)
            Me.SynchroPartielAsync(strDonneesPartiel, Utilisateur1, MotPasse, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SynchroPartielAsync(ByVal strDonneesPartiel As String, ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal userState As Object)
            If (Me.SynchroPartielOperationCompleted Is Nothing) Then
                Me.SynchroPartielOperationCompleted = AddressOf Me.OnSynchroPartielOperationCompleted
            End If
            Me.InvokeAsync("SynchroPartiel", New Object() {strDonneesPartiel, Utilisateur1, MotPasse}, Me.SynchroPartielOperationCompleted, userState)
        End Sub
        
        Private Sub OnSynchroPartielOperationCompleted(ByVal arg As Object)
            If (Not (Me.SynchroPartielCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SynchroPartielCompleted(Me, New SynchroPartielCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/RecupModif", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecupModif(ByRef nbLastConnection As Long, <System.Xml.Serialization.XmlElementAttribute("Utilisateur")> ByVal Utilisateur1 As String, ByVal MotPasse As String, ByRef XmlSchema As String) As String
            Dim results() As Object = Me.Invoke("RecupModif", New Object() {nbLastConnection, Utilisateur1, MotPasse, XmlSchema})
            nbLastConnection = CType(results(1),Long)
            XmlSchema = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRecupModif(ByVal nbLastConnection As Long, ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal XmlSchema As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RecupModif", New Object() {nbLastConnection, Utilisateur1, MotPasse, XmlSchema}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRecupModif(ByVal asyncResult As System.IAsyncResult, ByRef nbLastConnection As Long, ByRef XmlSchema As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            nbLastConnection = CType(results(1),Long)
            XmlSchema = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecupModifAsync(ByVal nbLastConnection As Long, ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal XmlSchema As String)
            Me.RecupModifAsync(nbLastConnection, Utilisateur1, MotPasse, XmlSchema, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecupModifAsync(ByVal nbLastConnection As Long, ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal XmlSchema As String, ByVal userState As Object)
            If (Me.RecupModifOperationCompleted Is Nothing) Then
                Me.RecupModifOperationCompleted = AddressOf Me.OnRecupModifOperationCompleted
            End If
            Me.InvokeAsync("RecupModif", New Object() {nbLastConnection, Utilisateur1, MotPasse, XmlSchema}, Me.RecupModifOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecupModifOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecupModifCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecupModifCompleted(Me, New RecupModifCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/SynchroDonnees", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SynchroDonnees(<System.Xml.Serialization.XmlElementAttribute("Utilisateur")> ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal strDonnees As String, ByRef strLstErreur As String) As String
            Dim results() As Object = Me.Invoke("SynchroDonnees", New Object() {Utilisateur1, MotPasse, strDonnees, strLstErreur})
            strLstErreur = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginSynchroDonnees(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal strDonnees As String, ByVal strLstErreur As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SynchroDonnees", New Object() {Utilisateur1, MotPasse, strDonnees, strLstErreur}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSynchroDonnees(ByVal asyncResult As System.IAsyncResult, ByRef strLstErreur As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            strLstErreur = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SynchroDonneesAsync(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal strDonnees As String, ByVal strLstErreur As String)
            Me.SynchroDonneesAsync(Utilisateur1, MotPasse, strDonnees, strLstErreur, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SynchroDonneesAsync(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal strDonnees As String, ByVal strLstErreur As String, ByVal userState As Object)
            If (Me.SynchroDonneesOperationCompleted Is Nothing) Then
                Me.SynchroDonneesOperationCompleted = AddressOf Me.OnSynchroDonneesOperationCompleted
            End If
            Me.InvokeAsync("SynchroDonnees", New Object() {Utilisateur1, MotPasse, strDonnees, strLstErreur}, Me.SynchroDonneesOperationCompleted, userState)
        End Sub
        
        Private Sub OnSynchroDonneesOperationCompleted(ByVal arg As Object)
            If (Not (Me.SynchroDonneesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SynchroDonneesCompleted(Me, New SynchroDonneesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/CreerDeclancheurBase", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreerDeclancheurBase(<System.Xml.Serialization.XmlElementAttribute("Utilisateur")> ByVal Utilisateur1 As String, ByVal MotPasse As String) As String
            Dim results() As Object = Me.Invoke("CreerDeclancheurBase", New Object() {Utilisateur1, MotPasse})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCreerDeclancheurBase(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreerDeclancheurBase", New Object() {Utilisateur1, MotPasse}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreerDeclancheurBase(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreerDeclancheurBaseAsync(ByVal Utilisateur1 As String, ByVal MotPasse As String)
            Me.CreerDeclancheurBaseAsync(Utilisateur1, MotPasse, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreerDeclancheurBaseAsync(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal userState As Object)
            If (Me.CreerDeclancheurBaseOperationCompleted Is Nothing) Then
                Me.CreerDeclancheurBaseOperationCompleted = AddressOf Me.OnCreerDeclancheurBaseOperationCompleted
            End If
            Me.InvokeAsync("CreerDeclancheurBase", New Object() {Utilisateur1, MotPasse}, Me.CreerDeclancheurBaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreerDeclancheurBaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreerDeclancheurBaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreerDeclancheurBaseCompleted(Me, New CreerDeclancheurBaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/VerifNouvelleVersionFichier", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function VerifNouvelleVersionFichier(<System.Xml.Serialization.XmlElementAttribute("Utilisateur")> ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As String, ByVal NomFichier As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("VerifNouvelleVersionFichier", New Object() {Utilisateur1, MotPasse, nVersion, NomFichier})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginVerifNouvelleVersionFichier(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As String, ByVal NomFichier As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("VerifNouvelleVersionFichier", New Object() {Utilisateur1, MotPasse, nVersion, NomFichier}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndVerifNouvelleVersionFichier(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerifNouvelleVersionFichierAsync(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As String, ByVal NomFichier As String)
            Me.VerifNouvelleVersionFichierAsync(Utilisateur1, MotPasse, nVersion, NomFichier, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerifNouvelleVersionFichierAsync(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As String, ByVal NomFichier As String, ByVal userState As Object)
            If (Me.VerifNouvelleVersionFichierOperationCompleted Is Nothing) Then
                Me.VerifNouvelleVersionFichierOperationCompleted = AddressOf Me.OnVerifNouvelleVersionFichierOperationCompleted
            End If
            Me.InvokeAsync("VerifNouvelleVersionFichier", New Object() {Utilisateur1, MotPasse, nVersion, NomFichier}, Me.VerifNouvelleVersionFichierOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerifNouvelleVersionFichierOperationCompleted(ByVal arg As Object)
            If (Not (Me.VerifNouvelleVersionFichierCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerifNouvelleVersionFichierCompleted(Me, New VerifNouvelleVersionFichierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActigramGRC/Service1/UpLoadNouvelleVersionFichier", RequestNamespace:="http://tempuri.org/ActigramGRC/Service1", ResponseNamespace:="http://tempuri.org/ActigramGRC/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpLoadNouvelleVersionFichier(<System.Xml.Serialization.XmlElementAttribute("Utilisateur")> ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As String, ByVal NomFichier As String, ByVal Fichier As String) As String
            Dim results() As Object = Me.Invoke("UpLoadNouvelleVersionFichier", New Object() {Utilisateur1, MotPasse, nVersion, NomFichier, Fichier})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpLoadNouvelleVersionFichier(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As String, ByVal NomFichier As String, ByVal Fichier As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpLoadNouvelleVersionFichier", New Object() {Utilisateur1, MotPasse, nVersion, NomFichier, Fichier}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpLoadNouvelleVersionFichier(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpLoadNouvelleVersionFichierAsync(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As String, ByVal NomFichier As String, ByVal Fichier As String)
            Me.UpLoadNouvelleVersionFichierAsync(Utilisateur1, MotPasse, nVersion, NomFichier, Fichier, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpLoadNouvelleVersionFichierAsync(ByVal Utilisateur1 As String, ByVal MotPasse As String, ByVal nVersion As String, ByVal NomFichier As String, ByVal Fichier As String, ByVal userState As Object)
            If (Me.UpLoadNouvelleVersionFichierOperationCompleted Is Nothing) Then
                Me.UpLoadNouvelleVersionFichierOperationCompleted = AddressOf Me.OnUpLoadNouvelleVersionFichierOperationCompleted
            End If
            Me.InvokeAsync("UpLoadNouvelleVersionFichier", New Object() {Utilisateur1, MotPasse, nVersion, NomFichier, Fichier}, Me.UpLoadNouvelleVersionFichierOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpLoadNouvelleVersionFichierOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpLoadNouvelleVersionFichierCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpLoadNouvelleVersionFichierCompleted(Me, New UpLoadNouvelleVersionFichierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub GetAdherentCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdherentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdherentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErreur() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub UpDateNbAnnonceAdherentCompletedEventHandler(ByVal sender As Object, ByVal e As UpDateNbAnnonceAdherentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpDateNbAnnonceAdherentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErreur() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub UtilisateurCompletedEventHandler(ByVal sender As Object, ByVal e As UtilisateurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UtilisateurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub CreateSchemaDonneesCompletedEventHandler(ByVal sender As Object, ByVal e As CreateSchemaDonneesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSchemaDonneesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub GetSchemaDonneesCompletedEventHandler(ByVal sender As Object, ByVal e As GetSchemaDonneesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSchemaDonneesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property nVersion() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub RecupBaseCompletedEventHandler(ByVal sender As Object, ByVal e As RecupBaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecupBaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property nbLastConnection() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub SynchroPartielCompletedEventHandler(ByVal sender As Object, ByVal e As SynchroPartielCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SynchroPartielCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub RecupModifCompletedEventHandler(ByVal sender As Object, ByVal e As RecupModifCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecupModifCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property nbLastConnection() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XmlSchema() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub SynchroDonneesCompletedEventHandler(ByVal sender As Object, ByVal e As SynchroDonneesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SynchroDonneesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strLstErreur() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub CreerDeclancheurBaseCompletedEventHandler(ByVal sender As Object, ByVal e As CreerDeclancheurBaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreerDeclancheurBaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub VerifNouvelleVersionFichierCompletedEventHandler(ByVal sender As Object, ByVal e As VerifNouvelleVersionFichierCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VerifNouvelleVersionFichierCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub UpLoadNouvelleVersionFichierCompletedEventHandler(ByVal sender As Object, ByVal e As UpLoadNouvelleVersionFichierCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpLoadNouvelleVersionFichierCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
