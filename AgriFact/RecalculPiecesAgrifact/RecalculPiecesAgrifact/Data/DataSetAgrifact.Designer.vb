'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.4952
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetAgrifact"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetAgrifact
    Inherits Global.System.Data.DataSet
    
    Private tableVFacture As VFactureDataTable
    
    Private tableVFacture_Detail As VFacture_DetailDataTable
    
    Private tableProduit As ProduitDataTable
    
    Private tableTVA As TVADataTable
    
    Private tableVBonCommande As VBonCommandeDataTable
    
    Private tableVBonCommande_Detail As VBonCommande_DetailDataTable
    
    Private tableVBonLivraison As VBonLivraisonDataTable
    
    Private tableVBonLivraison_Detail As VBonLivraison_DetailDataTable
    
    Private tableVDevis As VDevisDataTable
    
    Private tableVDevis_Detail As VDevis_DetailDataTable
    
    Private relationFK_VFacture_Detail_VFacture As Global.System.Data.DataRelation
    
    Private relationFK_VBonCommande_Detail_VBonCommande As Global.System.Data.DataRelation
    
    Private relationFK_VBonLivraison_Detail_VBonLivraison As Global.System.Data.DataRelation
    
    Private relationFK_VDevis_Detail_VDevis As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VFacture")) Is Nothing) Then
                MyBase.Tables.Add(New VFactureDataTable(ds.Tables("VFacture")))
            End If
            If (Not (ds.Tables("VFacture_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VFacture_DetailDataTable(ds.Tables("VFacture_Detail")))
            End If
            If (Not (ds.Tables("Produit")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitDataTable(ds.Tables("Produit")))
            End If
            If (Not (ds.Tables("TVA")) Is Nothing) Then
                MyBase.Tables.Add(New TVADataTable(ds.Tables("TVA")))
            End If
            If (Not (ds.Tables("VBonCommande")) Is Nothing) Then
                MyBase.Tables.Add(New VBonCommandeDataTable(ds.Tables("VBonCommande")))
            End If
            If (Not (ds.Tables("VBonCommande_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VBonCommande_DetailDataTable(ds.Tables("VBonCommande_Detail")))
            End If
            If (Not (ds.Tables("VBonLivraison")) Is Nothing) Then
                MyBase.Tables.Add(New VBonLivraisonDataTable(ds.Tables("VBonLivraison")))
            End If
            If (Not (ds.Tables("VBonLivraison_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VBonLivraison_DetailDataTable(ds.Tables("VBonLivraison_Detail")))
            End If
            If (Not (ds.Tables("VDevis")) Is Nothing) Then
                MyBase.Tables.Add(New VDevisDataTable(ds.Tables("VDevis")))
            End If
            If (Not (ds.Tables("VDevis_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VDevis_DetailDataTable(ds.Tables("VDevis_Detail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VFacture() As VFactureDataTable
        Get
            Return Me.tableVFacture
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VFacture_Detail() As VFacture_DetailDataTable
        Get
            Return Me.tableVFacture_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Produit() As ProduitDataTable
        Get
            Return Me.tableProduit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TVA() As TVADataTable
        Get
            Return Me.tableTVA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VBonCommande() As VBonCommandeDataTable
        Get
            Return Me.tableVBonCommande
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VBonCommande_Detail() As VBonCommande_DetailDataTable
        Get
            Return Me.tableVBonCommande_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VBonLivraison() As VBonLivraisonDataTable
        Get
            Return Me.tableVBonLivraison
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VBonLivraison_Detail() As VBonLivraison_DetailDataTable
        Get
            Return Me.tableVBonLivraison_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VDevis() As VDevisDataTable
        Get
            Return Me.tableVDevis
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VDevis_Detail() As VDevis_DetailDataTable
        Get
            Return Me.tableVDevis_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetAgrifact = CType(MyBase.Clone,DataSetAgrifact)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VFacture")) Is Nothing) Then
                MyBase.Tables.Add(New VFactureDataTable(ds.Tables("VFacture")))
            End If
            If (Not (ds.Tables("VFacture_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VFacture_DetailDataTable(ds.Tables("VFacture_Detail")))
            End If
            If (Not (ds.Tables("Produit")) Is Nothing) Then
                MyBase.Tables.Add(New ProduitDataTable(ds.Tables("Produit")))
            End If
            If (Not (ds.Tables("TVA")) Is Nothing) Then
                MyBase.Tables.Add(New TVADataTable(ds.Tables("TVA")))
            End If
            If (Not (ds.Tables("VBonCommande")) Is Nothing) Then
                MyBase.Tables.Add(New VBonCommandeDataTable(ds.Tables("VBonCommande")))
            End If
            If (Not (ds.Tables("VBonCommande_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VBonCommande_DetailDataTable(ds.Tables("VBonCommande_Detail")))
            End If
            If (Not (ds.Tables("VBonLivraison")) Is Nothing) Then
                MyBase.Tables.Add(New VBonLivraisonDataTable(ds.Tables("VBonLivraison")))
            End If
            If (Not (ds.Tables("VBonLivraison_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VBonLivraison_DetailDataTable(ds.Tables("VBonLivraison_Detail")))
            End If
            If (Not (ds.Tables("VDevis")) Is Nothing) Then
                MyBase.Tables.Add(New VDevisDataTable(ds.Tables("VDevis")))
            End If
            If (Not (ds.Tables("VDevis_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New VDevis_DetailDataTable(ds.Tables("VDevis_Detail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVFacture = CType(MyBase.Tables("VFacture"),VFactureDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVFacture) Is Nothing) Then
                Me.tableVFacture.InitVars
            End If
        End If
        Me.tableVFacture_Detail = CType(MyBase.Tables("VFacture_Detail"),VFacture_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVFacture_Detail) Is Nothing) Then
                Me.tableVFacture_Detail.InitVars
            End If
        End If
        Me.tableProduit = CType(MyBase.Tables("Produit"),ProduitDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduit) Is Nothing) Then
                Me.tableProduit.InitVars
            End If
        End If
        Me.tableTVA = CType(MyBase.Tables("TVA"),TVADataTable)
        If (initTable = true) Then
            If (Not (Me.tableTVA) Is Nothing) Then
                Me.tableTVA.InitVars
            End If
        End If
        Me.tableVBonCommande = CType(MyBase.Tables("VBonCommande"),VBonCommandeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVBonCommande) Is Nothing) Then
                Me.tableVBonCommande.InitVars
            End If
        End If
        Me.tableVBonCommande_Detail = CType(MyBase.Tables("VBonCommande_Detail"),VBonCommande_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVBonCommande_Detail) Is Nothing) Then
                Me.tableVBonCommande_Detail.InitVars
            End If
        End If
        Me.tableVBonLivraison = CType(MyBase.Tables("VBonLivraison"),VBonLivraisonDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVBonLivraison) Is Nothing) Then
                Me.tableVBonLivraison.InitVars
            End If
        End If
        Me.tableVBonLivraison_Detail = CType(MyBase.Tables("VBonLivraison_Detail"),VBonLivraison_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVBonLivraison_Detail) Is Nothing) Then
                Me.tableVBonLivraison_Detail.InitVars
            End If
        End If
        Me.tableVDevis = CType(MyBase.Tables("VDevis"),VDevisDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVDevis) Is Nothing) Then
                Me.tableVDevis.InitVars
            End If
        End If
        Me.tableVDevis_Detail = CType(MyBase.Tables("VDevis_Detail"),VDevis_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVDevis_Detail) Is Nothing) Then
                Me.tableVDevis_Detail.InitVars
            End If
        End If
        Me.relationFK_VFacture_Detail_VFacture = Me.Relations("FK_VFacture_Detail_VFacture")
        Me.relationFK_VBonCommande_Detail_VBonCommande = Me.Relations("FK_VBonCommande_Detail_VBonCommande")
        Me.relationFK_VBonLivraison_Detail_VBonLivraison = Me.Relations("FK_VBonLivraison_Detail_VBonLivraison")
        Me.relationFK_VDevis_Detail_VDevis = Me.Relations("FK_VDevis_Detail_VDevis")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetAgrifact"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetAgrifact.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVFacture = New VFactureDataTable
        MyBase.Tables.Add(Me.tableVFacture)
        Me.tableVFacture_Detail = New VFacture_DetailDataTable
        MyBase.Tables.Add(Me.tableVFacture_Detail)
        Me.tableProduit = New ProduitDataTable
        MyBase.Tables.Add(Me.tableProduit)
        Me.tableTVA = New TVADataTable
        MyBase.Tables.Add(Me.tableTVA)
        Me.tableVBonCommande = New VBonCommandeDataTable
        MyBase.Tables.Add(Me.tableVBonCommande)
        Me.tableVBonCommande_Detail = New VBonCommande_DetailDataTable
        MyBase.Tables.Add(Me.tableVBonCommande_Detail)
        Me.tableVBonLivraison = New VBonLivraisonDataTable
        MyBase.Tables.Add(Me.tableVBonLivraison)
        Me.tableVBonLivraison_Detail = New VBonLivraison_DetailDataTable
        MyBase.Tables.Add(Me.tableVBonLivraison_Detail)
        Me.tableVDevis = New VDevisDataTable
        MyBase.Tables.Add(Me.tableVDevis)
        Me.tableVDevis_Detail = New VDevis_DetailDataTable
        MyBase.Tables.Add(Me.tableVDevis_Detail)
        Me.relationFK_VFacture_Detail_VFacture = New Global.System.Data.DataRelation("FK_VFacture_Detail_VFacture", New Global.System.Data.DataColumn() {Me.tableVFacture.nDevisColumn}, New Global.System.Data.DataColumn() {Me.tableVFacture_Detail.nDevisColumn}, false)
        Me.Relations.Add(Me.relationFK_VFacture_Detail_VFacture)
        Me.relationFK_VBonCommande_Detail_VBonCommande = New Global.System.Data.DataRelation("FK_VBonCommande_Detail_VBonCommande", New Global.System.Data.DataColumn() {Me.tableVBonCommande.nDevisColumn}, New Global.System.Data.DataColumn() {Me.tableVBonCommande_Detail.nDevisColumn}, false)
        Me.Relations.Add(Me.relationFK_VBonCommande_Detail_VBonCommande)
        Me.relationFK_VBonLivraison_Detail_VBonLivraison = New Global.System.Data.DataRelation("FK_VBonLivraison_Detail_VBonLivraison", New Global.System.Data.DataColumn() {Me.tableVBonLivraison.nDevisColumn}, New Global.System.Data.DataColumn() {Me.tableVBonLivraison_Detail.nDevisColumn}, false)
        Me.Relations.Add(Me.relationFK_VBonLivraison_Detail_VBonLivraison)
        Me.relationFK_VDevis_Detail_VDevis = New Global.System.Data.DataRelation("FK_VDevis_Detail_VDevis", New Global.System.Data.DataColumn() {Me.tableVDevis.nDevisColumn}, New Global.System.Data.DataColumn() {Me.tableVDevis_Detail.nDevisColumn}, false)
        Me.Relations.Add(Me.relationFK_VDevis_Detail_VDevis)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVFacture() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVFacture_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTVA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVBonCommande() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVBonCommande_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVBonLivraison() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVBonLivraison_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVDevis() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVDevis_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetAgrifact = New DataSetAgrifact
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VFactureRowChangeEventHandler(ByVal sender As Object, ByVal e As VFactureRowChangeEvent)
    
    Public Delegate Sub VFacture_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VFacture_DetailRowChangeEvent)
    
    Public Delegate Sub ProduitRowChangeEventHandler(ByVal sender As Object, ByVal e As ProduitRowChangeEvent)
    
    Public Delegate Sub TVARowChangeEventHandler(ByVal sender As Object, ByVal e As TVARowChangeEvent)
    
    Public Delegate Sub VBonCommandeRowChangeEventHandler(ByVal sender As Object, ByVal e As VBonCommandeRowChangeEvent)
    
    Public Delegate Sub VBonCommande_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VBonCommande_DetailRowChangeEvent)
    
    Public Delegate Sub VBonLivraisonRowChangeEventHandler(ByVal sender As Object, ByVal e As VBonLivraisonRowChangeEvent)
    
    Public Delegate Sub VBonLivraison_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VBonLivraison_DetailRowChangeEvent)
    
    Public Delegate Sub VDevisRowChangeEventHandler(ByVal sender As Object, ByVal e As VDevisRowChangeEvent)
    
    Public Delegate Sub VDevis_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VDevis_DetailRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VFactureDataTable
        Inherits Global.System.Data.TypedTableBase(Of VFactureRow)
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnnPrescripteur As Global.System.Data.DataColumn
        
        Private columnnPayeur As Global.System.Data.DataColumn
        
        Private columnnContact As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnFacturationPrescripteur As Global.System.Data.DataColumn
        
        Private columnFacturationClient As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnDateRelance1 As Global.System.Data.DataColumn
        
        Private columnDateRelance2 As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantHT As Global.System.Data.DataColumn
        
        Private columnMontantTVA As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnnPreFacturation As Global.System.Data.DataColumn
        
        Private columnDatePreFacturation As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        Private columnnTarif As Global.System.Data.DataColumn
        
        Private columnnRelance As Global.System.Data.DataColumn
        
        Private columnDateRelance As Global.System.Data.DataColumn
        
        Private columnDateImpr As Global.System.Data.DataColumn
        
        Private columnTxCommission As Global.System.Data.DataColumn
        
        Private columnIsComPaye As Global.System.Data.DataColumn
        
        Private columnDepot As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VFacture"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatePreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTarifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTarif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nRelanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRelance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateImprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateImpr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxCommissionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxCommission
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsComPayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsComPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VFactureRow
            Get
                Return CType(Me.Rows(index),VFactureRow)
            End Get
        End Property
        
        Public Event VFactureRowChanging As VFactureRowChangeEventHandler
        
        Public Event VFactureRowChanged As VFactureRowChangeEventHandler
        
        Public Event VFactureRowDeleting As VFactureRowChangeEventHandler
        
        Public Event VFactureRowDeleted As VFactureRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVFactureRow(ByVal row As VFactureRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVFactureRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nClient As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Decimal,  _
                    ByVal nPayeur As Decimal,  _
                    ByVal nContact As Decimal,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Date,  _
                    ByVal DateRelance2 As Date,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantHT As Decimal,  _
                    ByVal MontantTVA As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal nPreFacturation As Decimal,  _
                    ByVal DatePreFacturation As Date,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal nTarif As Decimal,  _
                    ByVal nRelance As Integer,  _
                    ByVal DateRelance As Date,  _
                    ByVal DateImpr As Date,  _
                    ByVal TxCommission As Integer,  _
                    ByVal IsComPaye As Boolean,  _
                    ByVal Depot As String) As VFactureRow
            Dim rowVFactureRow As VFactureRow = CType(Me.NewRow,VFactureRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC, nTarif, nRelance, DateRelance, DateImpr, TxCommission, IsComPaye, Depot}
            rowVFactureRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVFactureRow)
            Return rowVFactureRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As VFactureRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),VFactureRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VFactureDataTable = CType(MyBase.Clone,VFactureDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VFactureDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnnPrescripteur = MyBase.Columns("nPrescripteur")
            Me.columnnPayeur = MyBase.Columns("nPayeur")
            Me.columnnContact = MyBase.Columns("nContact")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnFacturationPrescripteur = MyBase.Columns("FacturationPrescripteur")
            Me.columnFacturationClient = MyBase.Columns("FacturationClient")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnDateRelance1 = MyBase.Columns("DateRelance1")
            Me.columnDateRelance2 = MyBase.Columns("DateRelance2")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantHT = MyBase.Columns("MontantHT")
            Me.columnMontantTVA = MyBase.Columns("MontantTVA")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnnPreFacturation = MyBase.Columns("nPreFacturation")
            Me.columnDatePreFacturation = MyBase.Columns("DatePreFacturation")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
            Me.columnnTarif = MyBase.Columns("nTarif")
            Me.columnnRelance = MyBase.Columns("nRelance")
            Me.columnDateRelance = MyBase.Columns("DateRelance")
            Me.columnDateImpr = MyBase.Columns("DateImpr")
            Me.columnTxCommission = MyBase.Columns("TxCommission")
            Me.columnIsComPaye = MyBase.Columns("IsComPaye")
            Me.columnDepot = MyBase.Columns("Depot")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnnPrescripteur = New Global.System.Data.DataColumn("nPrescripteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPrescripteur)
            Me.columnnPayeur = New Global.System.Data.DataColumn("nPayeur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPayeur)
            Me.columnnContact = New Global.System.Data.DataColumn("nContact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnContact)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnFacturationPrescripteur = New Global.System.Data.DataColumn("FacturationPrescripteur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationPrescripteur)
            Me.columnFacturationClient = New Global.System.Data.DataColumn("FacturationClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationClient)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnDateRelance1 = New Global.System.Data.DataColumn("DateRelance1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance1)
            Me.columnDateRelance2 = New Global.System.Data.DataColumn("DateRelance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance2)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantHT = New Global.System.Data.DataColumn("MontantHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantHT)
            Me.columnMontantTVA = New Global.System.Data.DataColumn("MontantTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTVA)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnnPreFacturation = New Global.System.Data.DataColumn("nPreFacturation", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPreFacturation)
            Me.columnDatePreFacturation = New Global.System.Data.DataColumn("DatePreFacturation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePreFacturation)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.columnnTarif = New Global.System.Data.DataColumn("nTarif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTarif)
            Me.columnnRelance = New Global.System.Data.DataColumn("nRelance", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRelance)
            Me.columnDateRelance = New Global.System.Data.DataColumn("DateRelance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance)
            Me.columnDateImpr = New Global.System.Data.DataColumn("DateImpr", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateImpr)
            Me.columnTxCommission = New Global.System.Data.DataColumn("TxCommission", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxCommission)
            Me.columnIsComPaye = New Global.System.Data.DataColumn("IsComPaye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsComPaye)
            Me.columnDepot = New Global.System.Data.DataColumn("Depot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepot)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnOrigine.MaxLength = 1073741823
            Me.columnAdresseFacture.MaxLength = 2147483647
            Me.columnSecteur.MaxLength = 50
            Me.columnFacturationPrescripteur.AllowDBNull = false
            Me.columnFacturationClient.AllowDBNull = false
            Me.columnPaye.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
            Me.columnObservation.MaxLength = 1073741823
            Me.columnDepot.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVFactureRow() As VFactureRow
            Return CType(Me.NewRow,VFactureRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VFactureRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VFactureRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VFactureRowChangedEvent) Is Nothing) Then
                RaiseEvent VFactureRowChanged(Me, New VFactureRowChangeEvent(CType(e.Row,VFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VFactureRowChangingEvent) Is Nothing) Then
                RaiseEvent VFactureRowChanging(Me, New VFactureRowChangeEvent(CType(e.Row,VFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VFactureRowDeletedEvent) Is Nothing) Then
                RaiseEvent VFactureRowDeleted(Me, New VFactureRowChangeEvent(CType(e.Row,VFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VFactureRowDeletingEvent) Is Nothing) Then
                RaiseEvent VFactureRowDeleting(Me, New VFactureRowChangeEvent(CType(e.Row,VFactureRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVFactureRow(ByVal row As VFactureRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAgrifact = New DataSetAgrifact
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VFactureDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VFacture_DetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of VFacture_DetailRow)
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        Private columnNCompte As Global.System.Data.DataColumn
        
        Private columnNActivite As Global.System.Data.DataColumn
        
        Private columnPrixUAchatHT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VFacture_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActivite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUAchatHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUAchatHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VFacture_DetailRow
            Get
                Return CType(Me.Rows(index),VFacture_DetailRow)
            End Get
        End Property
        
        Public Event VFacture_DetailRowChanging As VFacture_DetailRowChangeEventHandler
        
        Public Event VFacture_DetailRowChanged As VFacture_DetailRowChangeEventHandler
        
        Public Event VFacture_DetailRowDeleting As VFacture_DetailRowChangeEventHandler
        
        Public Event VFacture_DetailRowDeleted As VFacture_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVFacture_DetailRow(ByVal row As VFacture_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVFacture_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal parentVFactureRowByFK_VFacture_Detail_VFacture As VFactureRow,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal,  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Decimal) As VFacture_DetailRow
            Dim rowVFacture_DetailRow As VFacture_DetailRow = CType(Me.NewRow,VFacture_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, Nothing, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUAchatHT}
            If (Not (parentVFactureRowByFK_VFacture_Detail_VFacture) Is Nothing) Then
                columnValuesArray(1) = parentVFactureRowByFK_VFacture_Detail_VFacture(0)
            End If
            rowVFacture_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVFacture_DetailRow)
            Return rowVFacture_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As VFacture_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),VFacture_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VFacture_DetailDataTable = CType(MyBase.Clone,VFacture_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VFacture_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
            Me.columnNCompte = MyBase.Columns("NCompte")
            Me.columnNActivite = MyBase.Columns("NActivite")
            Me.columnPrixUAchatHT = MyBase.Columns("PrixUAchatHT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.columnNCompte = New Global.System.Data.DataColumn("NCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompte)
            Me.columnNActivite = New Global.System.Data.DataColumn("NActivite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActivite)
            Me.columnPrixUAchatHT = New Global.System.Data.DataColumn("PrixUAchatHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUAchatHT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
            Me.columnNLot.MaxLength = 50
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 1073741823
            Me.columnLibUnite1.MaxLength = 5
            Me.columnLibUnite2.MaxLength = 5
            Me.columnTTVA.MaxLength = 50
            Me.columnNCompte.MaxLength = 8
            Me.columnNActivite.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVFacture_DetailRow() As VFacture_DetailRow
            Return CType(Me.NewRow,VFacture_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VFacture_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VFacture_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VFacture_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VFacture_DetailRowChanged(Me, New VFacture_DetailRowChangeEvent(CType(e.Row,VFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VFacture_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VFacture_DetailRowChanging(Me, New VFacture_DetailRowChangeEvent(CType(e.Row,VFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VFacture_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VFacture_DetailRowDeleted(Me, New VFacture_DetailRowChangeEvent(CType(e.Row,VFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VFacture_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VFacture_DetailRowDeleting(Me, New VFacture_DetailRowChangeEvent(CType(e.Row,VFacture_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVFacture_DetailRow(ByVal row As VFacture_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAgrifact = New DataSetAgrifact
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VFacture_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProduitDataTable
        Inherits Global.System.Data.TypedTableBase(Of ProduitRow)
        
        Private columnnProduit As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnLibelleLong As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnPrixAHT As Global.System.Data.DataColumn
        
        Private columnPrixATTC As Global.System.Data.DataColumn
        
        Private columnPrixVHT As Global.System.Data.DataColumn
        
        Private columnPrixVTTC As Global.System.Data.DataColumn
        
        Private columnIsPrixHT As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnProduitAchat As Global.System.Data.DataColumn
        
        Private columnProduitVente As Global.System.Data.DataColumn
        
        Private columnNCompteA As Global.System.Data.DataColumn
        
        Private columnNActiviteA As Global.System.Data.DataColumn
        
        Private columnNCompteV As Global.System.Data.DataColumn
        
        Private columnNActiviteV As Global.System.Data.DataColumn
        
        Private columnFamille1 As Global.System.Data.DataColumn
        
        Private columnFamille2 As Global.System.Data.DataColumn
        
        Private columnFamille3 As Global.System.Data.DataColumn
        
        Private columnU1U2Independant As Global.System.Data.DataColumn
        
        Private columnU1xU2 As Global.System.Data.DataColumn
        
        Private columnCodeBarre As Global.System.Data.DataColumn
        
        Private columnInactif As Global.System.Data.DataColumn
        
        Private columnCoefU2 As Global.System.Data.DataColumn
        
        Private columnTypeFacturation As Global.System.Data.DataColumn
        
        Private columnCoefAV As Global.System.Data.DataColumn
        
        Private columnProduitCompose As Global.System.Data.DataColumn
        
        Private columnImage As Global.System.Data.DataColumn
        
        Private columnGestionStock As Global.System.Data.DataColumn
        
        Private columnDecompteAuto As Global.System.Data.DataColumn
        
        Private columnRefFournisseur As Global.System.Data.DataColumn
        
        Private columnnFournisseur As Global.System.Data.DataColumn
        
        Private columnIsSortieImpr As Global.System.Data.DataColumn
        
        Private columnIsEnVente As Global.System.Data.DataColumn
        
        Private columnAMM As Global.System.Data.DataColumn
        
        Private columnTAXSM As Global.System.Data.DataColumn
        
        Private columnIsAMM As Global.System.Data.DataColumn
        
        Private columnDateMaj As Global.System.Data.DataColumn
        
        Private columnisComm As Global.System.Data.DataColumn
        
        Private columnConditionnement As Global.System.Data.DataColumn
        
        Private columnSeuilStock As Global.System.Data.DataColumn
        
        Private columnNCompteX As Global.System.Data.DataColumn
        
        Private columnNActiviteX As Global.System.Data.DataColumn
        
        Private columnIngredients As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Produit"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleLongColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelleLong
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixAHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixAHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixATTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixATTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixVTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixVTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPrixHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPrixHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitAchatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitAchat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famille3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamille3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1U2IndependantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1U2Independant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U1xU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnU1xU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeBarreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeBarre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InactifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoefAVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoefAV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProduitComposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduitCompose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GestionStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGestionStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DecompteAutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDecompteAuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefFournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFournisseurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFournisseur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSortieImprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSortieImpr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsEnVenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsEnVente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXSMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXSM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsAMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsAMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateMajColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateMaj
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isCommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConditionnementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConditionnement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeuilStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeuilStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompteX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActiviteX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngredientsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngredients
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProduitRow
            Get
                Return CType(Me.Rows(index),ProduitRow)
            End Get
        End Property
        
        Public Event ProduitRowChanging As ProduitRowChangeEventHandler
        
        Public Event ProduitRowChanged As ProduitRowChangeEventHandler
        
        Public Event ProduitRowDeleting As ProduitRowChangeEventHandler
        
        Public Event ProduitRowDeleted As ProduitRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduitRow(ByVal row As ProduitRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduitRow( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Decimal,  _
                    ByVal PrixATTC As Decimal,  _
                    ByVal PrixVHT As Decimal,  _
                    ByVal PrixVTTC As Decimal,  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Short,  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Boolean,  _
                    ByVal U1xU2 As Decimal,  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Boolean,  _
                    ByVal CoefU2 As Decimal,  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Decimal,  _
                    ByVal ProduitCompose As Boolean,  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Boolean,  _
                    ByVal DecompteAuto As Boolean,  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Decimal,  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Decimal,  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Date,  _
                    ByVal isComm As Boolean,  _
                    ByVal Conditionnement As Integer,  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String) As ProduitRow
            Dim rowProduitRow As ProduitRow = CType(Me.NewRow,ProduitRow)
            Dim columnValuesArray() As Object = New Object() {nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredients}
            rowProduitRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduitRow)
            Return rowProduitRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynProduit(ByVal nProduit As Decimal) As ProduitRow
            Return CType(Me.Rows.Find(New Object() {nProduit}),ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProduitDataTable = CType(MyBase.Clone,ProduitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProduitDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnProduit = MyBase.Columns("nProduit")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnLibelleLong = MyBase.Columns("LibelleLong")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnPrixAHT = MyBase.Columns("PrixAHT")
            Me.columnPrixATTC = MyBase.Columns("PrixATTC")
            Me.columnPrixVHT = MyBase.Columns("PrixVHT")
            Me.columnPrixVTTC = MyBase.Columns("PrixVTTC")
            Me.columnIsPrixHT = MyBase.Columns("IsPrixHT")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnProduitAchat = MyBase.Columns("ProduitAchat")
            Me.columnProduitVente = MyBase.Columns("ProduitVente")
            Me.columnNCompteA = MyBase.Columns("NCompteA")
            Me.columnNActiviteA = MyBase.Columns("NActiviteA")
            Me.columnNCompteV = MyBase.Columns("NCompteV")
            Me.columnNActiviteV = MyBase.Columns("NActiviteV")
            Me.columnFamille1 = MyBase.Columns("Famille1")
            Me.columnFamille2 = MyBase.Columns("Famille2")
            Me.columnFamille3 = MyBase.Columns("Famille3")
            Me.columnU1U2Independant = MyBase.Columns("U1U2Independant")
            Me.columnU1xU2 = MyBase.Columns("U1xU2")
            Me.columnCodeBarre = MyBase.Columns("CodeBarre")
            Me.columnInactif = MyBase.Columns("Inactif")
            Me.columnCoefU2 = MyBase.Columns("CoefU2")
            Me.columnTypeFacturation = MyBase.Columns("TypeFacturation")
            Me.columnCoefAV = MyBase.Columns("CoefAV")
            Me.columnProduitCompose = MyBase.Columns("ProduitCompose")
            Me.columnImage = MyBase.Columns("Image")
            Me.columnGestionStock = MyBase.Columns("GestionStock")
            Me.columnDecompteAuto = MyBase.Columns("DecompteAuto")
            Me.columnRefFournisseur = MyBase.Columns("RefFournisseur")
            Me.columnnFournisseur = MyBase.Columns("nFournisseur")
            Me.columnIsSortieImpr = MyBase.Columns("IsSortieImpr")
            Me.columnIsEnVente = MyBase.Columns("IsEnVente")
            Me.columnAMM = MyBase.Columns("AMM")
            Me.columnTAXSM = MyBase.Columns("TAXSM")
            Me.columnIsAMM = MyBase.Columns("IsAMM")
            Me.columnDateMaj = MyBase.Columns("DateMaj")
            Me.columnisComm = MyBase.Columns("isComm")
            Me.columnConditionnement = MyBase.Columns("Conditionnement")
            Me.columnSeuilStock = MyBase.Columns("SeuilStock")
            Me.columnNCompteX = MyBase.Columns("NCompteX")
            Me.columnNActiviteX = MyBase.Columns("NActiviteX")
            Me.columnIngredients = MyBase.Columns("Ingredients")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnProduit = New Global.System.Data.DataColumn("nProduit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnProduit)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnLibelleLong = New Global.System.Data.DataColumn("LibelleLong", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelleLong)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnPrixAHT = New Global.System.Data.DataColumn("PrixAHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixAHT)
            Me.columnPrixATTC = New Global.System.Data.DataColumn("PrixATTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixATTC)
            Me.columnPrixVHT = New Global.System.Data.DataColumn("PrixVHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVHT)
            Me.columnPrixVTTC = New Global.System.Data.DataColumn("PrixVTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixVTTC)
            Me.columnIsPrixHT = New Global.System.Data.DataColumn("IsPrixHT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPrixHT)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnProduitAchat = New Global.System.Data.DataColumn("ProduitAchat", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitAchat)
            Me.columnProduitVente = New Global.System.Data.DataColumn("ProduitVente", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitVente)
            Me.columnNCompteA = New Global.System.Data.DataColumn("NCompteA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteA)
            Me.columnNActiviteA = New Global.System.Data.DataColumn("NActiviteA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteA)
            Me.columnNCompteV = New Global.System.Data.DataColumn("NCompteV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteV)
            Me.columnNActiviteV = New Global.System.Data.DataColumn("NActiviteV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteV)
            Me.columnFamille1 = New Global.System.Data.DataColumn("Famille1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille1)
            Me.columnFamille2 = New Global.System.Data.DataColumn("Famille2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille2)
            Me.columnFamille3 = New Global.System.Data.DataColumn("Famille3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamille3)
            Me.columnU1U2Independant = New Global.System.Data.DataColumn("U1U2Independant", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1U2Independant)
            Me.columnU1xU2 = New Global.System.Data.DataColumn("U1xU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU1xU2)
            Me.columnCodeBarre = New Global.System.Data.DataColumn("CodeBarre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeBarre)
            Me.columnInactif = New Global.System.Data.DataColumn("Inactif", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactif)
            Me.columnCoefU2 = New Global.System.Data.DataColumn("CoefU2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefU2)
            Me.columnTypeFacturation = New Global.System.Data.DataColumn("TypeFacturation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeFacturation)
            Me.columnCoefAV = New Global.System.Data.DataColumn("CoefAV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefAV)
            Me.columnProduitCompose = New Global.System.Data.DataColumn("ProduitCompose", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduitCompose)
            Me.columnImage = New Global.System.Data.DataColumn("Image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImage)
            Me.columnGestionStock = New Global.System.Data.DataColumn("GestionStock", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGestionStock)
            Me.columnDecompteAuto = New Global.System.Data.DataColumn("DecompteAuto", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDecompteAuto)
            Me.columnRefFournisseur = New Global.System.Data.DataColumn("RefFournisseur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefFournisseur)
            Me.columnnFournisseur = New Global.System.Data.DataColumn("nFournisseur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFournisseur)
            Me.columnIsSortieImpr = New Global.System.Data.DataColumn("IsSortieImpr", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSortieImpr)
            Me.columnIsEnVente = New Global.System.Data.DataColumn("IsEnVente", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsEnVente)
            Me.columnAMM = New Global.System.Data.DataColumn("AMM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMM)
            Me.columnTAXSM = New Global.System.Data.DataColumn("TAXSM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXSM)
            Me.columnIsAMM = New Global.System.Data.DataColumn("IsAMM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAMM)
            Me.columnDateMaj = New Global.System.Data.DataColumn("DateMaj", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateMaj)
            Me.columnisComm = New Global.System.Data.DataColumn("isComm", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisComm)
            Me.columnConditionnement = New Global.System.Data.DataColumn("Conditionnement", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConditionnement)
            Me.columnSeuilStock = New Global.System.Data.DataColumn("SeuilStock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeuilStock)
            Me.columnNCompteX = New Global.System.Data.DataColumn("NCompteX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompteX)
            Me.columnNActiviteX = New Global.System.Data.DataColumn("NActiviteX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActiviteX)
            Me.columnIngredients = New Global.System.Data.DataColumn("Ingredients", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngredients)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnProduit}, true))
            Me.columnnProduit.AllowDBNull = false
            Me.columnnProduit.Unique = true
            Me.columnCodeProduit.AllowDBNull = false
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 255
            Me.columnLibelleLong.MaxLength = 1073741823
            Me.columnTTVA.MaxLength = 50
            Me.columnIsPrixHT.AllowDBNull = false
            Me.columnUnite1.MaxLength = 2
            Me.columnUnite2.MaxLength = 2
            Me.columnProduitAchat.AllowDBNull = false
            Me.columnProduitVente.AllowDBNull = false
            Me.columnNCompteA.MaxLength = 8
            Me.columnNActiviteA.MaxLength = 4
            Me.columnNCompteV.MaxLength = 8
            Me.columnNActiviteV.MaxLength = 8
            Me.columnFamille2.MaxLength = 50
            Me.columnFamille3.MaxLength = 50
            Me.columnCodeBarre.MaxLength = 13
            Me.columnTypeFacturation.MaxLength = 50
            Me.columnImage.MaxLength = 1073741823
            Me.columnRefFournisseur.MaxLength = 255
            Me.columnIsSortieImpr.AllowDBNull = false
            Me.columnIsEnVente.AllowDBNull = false
            Me.columnAMM.MaxLength = 10
            Me.columnIsAMM.AllowDBNull = false
            Me.columnSeuilStock.AllowDBNull = false
            Me.columnNCompteX.MaxLength = 8
            Me.columnNActiviteX.MaxLength = 4
            Me.columnIngredients.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduitRow() As ProduitRow
            Return CType(Me.NewRow,ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProduitRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProduitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProduitRowChangedEvent) Is Nothing) Then
                RaiseEvent ProduitRowChanged(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProduitRowChangingEvent) Is Nothing) Then
                RaiseEvent ProduitRowChanging(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProduitRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProduitRowDeleted(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProduitRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProduitRowDeleting(Me, New ProduitRowChangeEvent(CType(e.Row,ProduitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduitRow(ByVal row As ProduitRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAgrifact = New DataSetAgrifact
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProduitDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TVADataTable
        Inherits Global.System.Data.TypedTableBase(Of TVARow)
        
        Private columnnTVA As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTLibelle As Global.System.Data.DataColumn
        
        Private columnTTaux As Global.System.Data.DataColumn
        
        Private columnTCpt As Global.System.Data.DataColumn
        
        Private columnTJournal As Global.System.Data.DataColumn
        
        Private columnTypTVA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TVA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TLibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTauxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTaux
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TJournalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTJournal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TVARow
            Get
                Return CType(Me.Rows(index),TVARow)
            End Get
        End Property
        
        Public Event TVARowChanging As TVARowChangeEventHandler
        
        Public Event TVARowChanged As TVARowChangeEventHandler
        
        Public Event TVARowDeleting As TVARowChangeEventHandler
        
        Public Event TVARowDeleted As TVARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTVARow(ByVal row As TVARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTVARow(ByVal nTVA As Decimal, ByVal TTVA As String, ByVal TLibelle As String, ByVal TTaux As Decimal, ByVal TCpt As String, ByVal TJournal As String, ByVal TypTVA As String) As TVARow
            Dim rowTVARow As TVARow = CType(Me.NewRow,TVARow)
            Dim columnValuesArray() As Object = New Object() {nTVA, TTVA, TLibelle, TTaux, TCpt, TJournal, TypTVA}
            rowTVARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTVARow)
            Return rowTVARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynTVA(ByVal nTVA As Decimal) As TVARow
            Return CType(Me.Rows.Find(New Object() {nTVA}),TVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TVADataTable = CType(MyBase.Clone,TVADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TVADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnTVA = MyBase.Columns("nTVA")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTLibelle = MyBase.Columns("TLibelle")
            Me.columnTTaux = MyBase.Columns("TTaux")
            Me.columnTCpt = MyBase.Columns("TCpt")
            Me.columnTJournal = MyBase.Columns("TJournal")
            Me.columnTypTVA = MyBase.Columns("TypTVA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnTVA = New Global.System.Data.DataColumn("nTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTVA)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTLibelle = New Global.System.Data.DataColumn("TLibelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTLibelle)
            Me.columnTTaux = New Global.System.Data.DataColumn("TTaux", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTaux)
            Me.columnTCpt = New Global.System.Data.DataColumn("TCpt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCpt)
            Me.columnTJournal = New Global.System.Data.DataColumn("TJournal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTJournal)
            Me.columnTypTVA = New Global.System.Data.DataColumn("TypTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypTVA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnTVA}, true))
            Me.columnnTVA.AllowDBNull = false
            Me.columnnTVA.Unique = true
            Me.columnTTVA.MaxLength = 50
            Me.columnTLibelle.MaxLength = 50
            Me.columnTCpt.MaxLength = 8
            Me.columnTJournal.MaxLength = 1
            Me.columnTypTVA.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTVARow() As TVARow
            Return CType(Me.NewRow,TVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TVARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TVARowChangedEvent) Is Nothing) Then
                RaiseEvent TVARowChanged(Me, New TVARowChangeEvent(CType(e.Row,TVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TVARowChangingEvent) Is Nothing) Then
                RaiseEvent TVARowChanging(Me, New TVARowChangeEvent(CType(e.Row,TVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TVARowDeletedEvent) Is Nothing) Then
                RaiseEvent TVARowDeleted(Me, New TVARowChangeEvent(CType(e.Row,TVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TVARowDeletingEvent) Is Nothing) Then
                RaiseEvent TVARowDeleting(Me, New TVARowChangeEvent(CType(e.Row,TVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTVARow(ByVal row As TVARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAgrifact = New DataSetAgrifact
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TVADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VBonCommandeDataTable
        Inherits Global.System.Data.TypedTableBase(Of VBonCommandeRow)
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnnPrescripteur As Global.System.Data.DataColumn
        
        Private columnnPayeur As Global.System.Data.DataColumn
        
        Private columnnContact As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnFacturationPrescripteur As Global.System.Data.DataColumn
        
        Private columnFacturationClient As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnDateRelance1 As Global.System.Data.DataColumn
        
        Private columnDateRelance2 As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantHT As Global.System.Data.DataColumn
        
        Private columnMontantTVA As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnnPreFacturation As Global.System.Data.DataColumn
        
        Private columnDatePreFacturation As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        Private columnnTarif As Global.System.Data.DataColumn
        
        Private columnDepot As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnTxCommission As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VBonCommande"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatePreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTarifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTarif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxCommissionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxCommission
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VBonCommandeRow
            Get
                Return CType(Me.Rows(index),VBonCommandeRow)
            End Get
        End Property
        
        Public Event VBonCommandeRowChanging As VBonCommandeRowChangeEventHandler
        
        Public Event VBonCommandeRowChanged As VBonCommandeRowChangeEventHandler
        
        Public Event VBonCommandeRowDeleting As VBonCommandeRowChangeEventHandler
        
        Public Event VBonCommandeRowDeleted As VBonCommandeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVBonCommandeRow(ByVal row As VBonCommandeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVBonCommandeRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nClient As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Decimal,  _
                    ByVal nPayeur As Decimal,  _
                    ByVal nContact As Decimal,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Date,  _
                    ByVal DateRelance2 As Date,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantHT As Decimal,  _
                    ByVal MontantTVA As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal nPreFacturation As Decimal,  _
                    ByVal DatePreFacturation As Date,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal nTarif As Decimal,  _
                    ByVal Depot As String,  _
                    ByVal Secteur As String,  _
                    ByVal TxCommission As Integer) As VBonCommandeRow
            Dim rowVBonCommandeRow As VBonCommandeRow = CType(Me.NewRow,VBonCommandeRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, Secteur, TxCommission}
            rowVBonCommandeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVBonCommandeRow)
            Return rowVBonCommandeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As VBonCommandeRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),VBonCommandeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VBonCommandeDataTable = CType(MyBase.Clone,VBonCommandeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VBonCommandeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnnPrescripteur = MyBase.Columns("nPrescripteur")
            Me.columnnPayeur = MyBase.Columns("nPayeur")
            Me.columnnContact = MyBase.Columns("nContact")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnFacturationPrescripteur = MyBase.Columns("FacturationPrescripteur")
            Me.columnFacturationClient = MyBase.Columns("FacturationClient")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnDateRelance1 = MyBase.Columns("DateRelance1")
            Me.columnDateRelance2 = MyBase.Columns("DateRelance2")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantHT = MyBase.Columns("MontantHT")
            Me.columnMontantTVA = MyBase.Columns("MontantTVA")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnnPreFacturation = MyBase.Columns("nPreFacturation")
            Me.columnDatePreFacturation = MyBase.Columns("DatePreFacturation")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
            Me.columnnTarif = MyBase.Columns("nTarif")
            Me.columnDepot = MyBase.Columns("Depot")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnTxCommission = MyBase.Columns("TxCommission")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnnPrescripteur = New Global.System.Data.DataColumn("nPrescripteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPrescripteur)
            Me.columnnPayeur = New Global.System.Data.DataColumn("nPayeur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPayeur)
            Me.columnnContact = New Global.System.Data.DataColumn("nContact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnContact)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnFacturationPrescripteur = New Global.System.Data.DataColumn("FacturationPrescripteur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationPrescripteur)
            Me.columnFacturationClient = New Global.System.Data.DataColumn("FacturationClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationClient)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnDateRelance1 = New Global.System.Data.DataColumn("DateRelance1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance1)
            Me.columnDateRelance2 = New Global.System.Data.DataColumn("DateRelance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance2)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantHT = New Global.System.Data.DataColumn("MontantHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantHT)
            Me.columnMontantTVA = New Global.System.Data.DataColumn("MontantTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTVA)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnnPreFacturation = New Global.System.Data.DataColumn("nPreFacturation", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPreFacturation)
            Me.columnDatePreFacturation = New Global.System.Data.DataColumn("DatePreFacturation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePreFacturation)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.columnnTarif = New Global.System.Data.DataColumn("nTarif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTarif)
            Me.columnDepot = New Global.System.Data.DataColumn("Depot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepot)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnTxCommission = New Global.System.Data.DataColumn("TxCommission", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxCommission)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnOrigine.MaxLength = 1073741823
            Me.columnAdresseFacture.MaxLength = 2147483647
            Me.columnFacturationPrescripteur.AllowDBNull = false
            Me.columnFacturationClient.AllowDBNull = false
            Me.columnPaye.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
            Me.columnObservation.MaxLength = 1073741823
            Me.columnDepot.MaxLength = 50
            Me.columnSecteur.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVBonCommandeRow() As VBonCommandeRow
            Return CType(Me.NewRow,VBonCommandeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VBonCommandeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VBonCommandeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VBonCommandeRowChangedEvent) Is Nothing) Then
                RaiseEvent VBonCommandeRowChanged(Me, New VBonCommandeRowChangeEvent(CType(e.Row,VBonCommandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VBonCommandeRowChangingEvent) Is Nothing) Then
                RaiseEvent VBonCommandeRowChanging(Me, New VBonCommandeRowChangeEvent(CType(e.Row,VBonCommandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VBonCommandeRowDeletedEvent) Is Nothing) Then
                RaiseEvent VBonCommandeRowDeleted(Me, New VBonCommandeRowChangeEvent(CType(e.Row,VBonCommandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VBonCommandeRowDeletingEvent) Is Nothing) Then
                RaiseEvent VBonCommandeRowDeleting(Me, New VBonCommandeRowChangeEvent(CType(e.Row,VBonCommandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVBonCommandeRow(ByVal row As VBonCommandeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAgrifact = New DataSetAgrifact
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VBonCommandeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VBonCommande_DetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of VBonCommande_DetailRow)
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        Private columnNCompte As Global.System.Data.DataColumn
        
        Private columnNActivite As Global.System.Data.DataColumn
        
        Private columnPrixUAchatHT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VBonCommande_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActivite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUAchatHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUAchatHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VBonCommande_DetailRow
            Get
                Return CType(Me.Rows(index),VBonCommande_DetailRow)
            End Get
        End Property
        
        Public Event VBonCommande_DetailRowChanging As VBonCommande_DetailRowChangeEventHandler
        
        Public Event VBonCommande_DetailRowChanged As VBonCommande_DetailRowChangeEventHandler
        
        Public Event VBonCommande_DetailRowDeleting As VBonCommande_DetailRowChangeEventHandler
        
        Public Event VBonCommande_DetailRowDeleted As VBonCommande_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVBonCommande_DetailRow(ByVal row As VBonCommande_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVBonCommande_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal parentVBonCommandeRowByFK_VBonCommande_Detail_VBonCommande As VBonCommandeRow,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal,  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Decimal) As VBonCommande_DetailRow
            Dim rowVBonCommande_DetailRow As VBonCommande_DetailRow = CType(Me.NewRow,VBonCommande_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, Nothing, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUAchatHT}
            If (Not (parentVBonCommandeRowByFK_VBonCommande_Detail_VBonCommande) Is Nothing) Then
                columnValuesArray(1) = parentVBonCommandeRowByFK_VBonCommande_Detail_VBonCommande(0)
            End If
            rowVBonCommande_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVBonCommande_DetailRow)
            Return rowVBonCommande_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As VBonCommande_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),VBonCommande_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VBonCommande_DetailDataTable = CType(MyBase.Clone,VBonCommande_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VBonCommande_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
            Me.columnNCompte = MyBase.Columns("NCompte")
            Me.columnNActivite = MyBase.Columns("NActivite")
            Me.columnPrixUAchatHT = MyBase.Columns("PrixUAchatHT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.columnNCompte = New Global.System.Data.DataColumn("NCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompte)
            Me.columnNActivite = New Global.System.Data.DataColumn("NActivite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActivite)
            Me.columnPrixUAchatHT = New Global.System.Data.DataColumn("PrixUAchatHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUAchatHT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
            Me.columnNLot.MaxLength = 50
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 1073741823
            Me.columnLibUnite1.MaxLength = 5
            Me.columnLibUnite2.MaxLength = 5
            Me.columnTTVA.MaxLength = 50
            Me.columnNCompte.MaxLength = 8
            Me.columnNActivite.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVBonCommande_DetailRow() As VBonCommande_DetailRow
            Return CType(Me.NewRow,VBonCommande_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VBonCommande_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VBonCommande_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VBonCommande_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VBonCommande_DetailRowChanged(Me, New VBonCommande_DetailRowChangeEvent(CType(e.Row,VBonCommande_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VBonCommande_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VBonCommande_DetailRowChanging(Me, New VBonCommande_DetailRowChangeEvent(CType(e.Row,VBonCommande_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VBonCommande_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VBonCommande_DetailRowDeleted(Me, New VBonCommande_DetailRowChangeEvent(CType(e.Row,VBonCommande_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VBonCommande_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VBonCommande_DetailRowDeleting(Me, New VBonCommande_DetailRowChangeEvent(CType(e.Row,VBonCommande_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVBonCommande_DetailRow(ByVal row As VBonCommande_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAgrifact = New DataSetAgrifact
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VBonCommande_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VBonLivraisonDataTable
        Inherits Global.System.Data.TypedTableBase(Of VBonLivraisonRow)
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnnPrescripteur As Global.System.Data.DataColumn
        
        Private columnnPayeur As Global.System.Data.DataColumn
        
        Private columnnContact As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnFacturationPrescripteur As Global.System.Data.DataColumn
        
        Private columnFacturationClient As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnDateRelance1 As Global.System.Data.DataColumn
        
        Private columnDateRelance2 As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantHT As Global.System.Data.DataColumn
        
        Private columnMontantTVA As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnnPreFacturation As Global.System.Data.DataColumn
        
        Private columnDatePreFacturation As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        Private columnnTarif As Global.System.Data.DataColumn
        
        Private columnDepot As Global.System.Data.DataColumn
        
        Private columnTxCommission As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VBonLivraison"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatePreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTarifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTarif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxCommissionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxCommission
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VBonLivraisonRow
            Get
                Return CType(Me.Rows(index),VBonLivraisonRow)
            End Get
        End Property
        
        Public Event VBonLivraisonRowChanging As VBonLivraisonRowChangeEventHandler
        
        Public Event VBonLivraisonRowChanged As VBonLivraisonRowChangeEventHandler
        
        Public Event VBonLivraisonRowDeleting As VBonLivraisonRowChangeEventHandler
        
        Public Event VBonLivraisonRowDeleted As VBonLivraisonRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVBonLivraisonRow(ByVal row As VBonLivraisonRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVBonLivraisonRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nClient As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Decimal,  _
                    ByVal nPayeur As Decimal,  _
                    ByVal nContact As Decimal,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Date,  _
                    ByVal DateRelance2 As Date,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantHT As Decimal,  _
                    ByVal MontantTVA As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal nPreFacturation As Decimal,  _
                    ByVal DatePreFacturation As Date,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal nTarif As Decimal,  _
                    ByVal Depot As String,  _
                    ByVal TxCommission As Integer) As VBonLivraisonRow
            Dim rowVBonLivraisonRow As VBonLivraisonRow = CType(Me.NewRow,VBonLivraisonRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, TxCommission}
            rowVBonLivraisonRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVBonLivraisonRow)
            Return rowVBonLivraisonRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As VBonLivraisonRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),VBonLivraisonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VBonLivraisonDataTable = CType(MyBase.Clone,VBonLivraisonDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VBonLivraisonDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnnPrescripteur = MyBase.Columns("nPrescripteur")
            Me.columnnPayeur = MyBase.Columns("nPayeur")
            Me.columnnContact = MyBase.Columns("nContact")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnFacturationPrescripteur = MyBase.Columns("FacturationPrescripteur")
            Me.columnFacturationClient = MyBase.Columns("FacturationClient")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnDateRelance1 = MyBase.Columns("DateRelance1")
            Me.columnDateRelance2 = MyBase.Columns("DateRelance2")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantHT = MyBase.Columns("MontantHT")
            Me.columnMontantTVA = MyBase.Columns("MontantTVA")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnnPreFacturation = MyBase.Columns("nPreFacturation")
            Me.columnDatePreFacturation = MyBase.Columns("DatePreFacturation")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
            Me.columnnTarif = MyBase.Columns("nTarif")
            Me.columnDepot = MyBase.Columns("Depot")
            Me.columnTxCommission = MyBase.Columns("TxCommission")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnnPrescripteur = New Global.System.Data.DataColumn("nPrescripteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPrescripteur)
            Me.columnnPayeur = New Global.System.Data.DataColumn("nPayeur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPayeur)
            Me.columnnContact = New Global.System.Data.DataColumn("nContact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnContact)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnFacturationPrescripteur = New Global.System.Data.DataColumn("FacturationPrescripteur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationPrescripteur)
            Me.columnFacturationClient = New Global.System.Data.DataColumn("FacturationClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationClient)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnDateRelance1 = New Global.System.Data.DataColumn("DateRelance1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance1)
            Me.columnDateRelance2 = New Global.System.Data.DataColumn("DateRelance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance2)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantHT = New Global.System.Data.DataColumn("MontantHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantHT)
            Me.columnMontantTVA = New Global.System.Data.DataColumn("MontantTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTVA)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnnPreFacturation = New Global.System.Data.DataColumn("nPreFacturation", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPreFacturation)
            Me.columnDatePreFacturation = New Global.System.Data.DataColumn("DatePreFacturation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePreFacturation)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.columnnTarif = New Global.System.Data.DataColumn("nTarif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTarif)
            Me.columnDepot = New Global.System.Data.DataColumn("Depot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepot)
            Me.columnTxCommission = New Global.System.Data.DataColumn("TxCommission", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxCommission)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnOrigine.MaxLength = 1073741823
            Me.columnAdresseFacture.MaxLength = 2147483647
            Me.columnSecteur.MaxLength = 50
            Me.columnFacturationPrescripteur.AllowDBNull = false
            Me.columnFacturationClient.AllowDBNull = false
            Me.columnPaye.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
            Me.columnObservation.MaxLength = 1073741823
            Me.columnDepot.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVBonLivraisonRow() As VBonLivraisonRow
            Return CType(Me.NewRow,VBonLivraisonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VBonLivraisonRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VBonLivraisonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VBonLivraisonRowChangedEvent) Is Nothing) Then
                RaiseEvent VBonLivraisonRowChanged(Me, New VBonLivraisonRowChangeEvent(CType(e.Row,VBonLivraisonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VBonLivraisonRowChangingEvent) Is Nothing) Then
                RaiseEvent VBonLivraisonRowChanging(Me, New VBonLivraisonRowChangeEvent(CType(e.Row,VBonLivraisonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VBonLivraisonRowDeletedEvent) Is Nothing) Then
                RaiseEvent VBonLivraisonRowDeleted(Me, New VBonLivraisonRowChangeEvent(CType(e.Row,VBonLivraisonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VBonLivraisonRowDeletingEvent) Is Nothing) Then
                RaiseEvent VBonLivraisonRowDeleting(Me, New VBonLivraisonRowChangeEvent(CType(e.Row,VBonLivraisonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVBonLivraisonRow(ByVal row As VBonLivraisonRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAgrifact = New DataSetAgrifact
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VBonLivraisonDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VBonLivraison_DetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of VBonLivraison_DetailRow)
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        Private columnNCompte As Global.System.Data.DataColumn
        
        Private columnNActivite As Global.System.Data.DataColumn
        
        Private columnPrixUAchatHT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VBonLivraison_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActivite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUAchatHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUAchatHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VBonLivraison_DetailRow
            Get
                Return CType(Me.Rows(index),VBonLivraison_DetailRow)
            End Get
        End Property
        
        Public Event VBonLivraison_DetailRowChanging As VBonLivraison_DetailRowChangeEventHandler
        
        Public Event VBonLivraison_DetailRowChanged As VBonLivraison_DetailRowChangeEventHandler
        
        Public Event VBonLivraison_DetailRowDeleting As VBonLivraison_DetailRowChangeEventHandler
        
        Public Event VBonLivraison_DetailRowDeleted As VBonLivraison_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVBonLivraison_DetailRow(ByVal row As VBonLivraison_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVBonLivraison_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal parentVBonLivraisonRowByFK_VBonLivraison_Detail_VBonLivraison As VBonLivraisonRow,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal,  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Decimal) As VBonLivraison_DetailRow
            Dim rowVBonLivraison_DetailRow As VBonLivraison_DetailRow = CType(Me.NewRow,VBonLivraison_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, Nothing, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUAchatHT}
            If (Not (parentVBonLivraisonRowByFK_VBonLivraison_Detail_VBonLivraison) Is Nothing) Then
                columnValuesArray(1) = parentVBonLivraisonRowByFK_VBonLivraison_Detail_VBonLivraison(0)
            End If
            rowVBonLivraison_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVBonLivraison_DetailRow)
            Return rowVBonLivraison_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As VBonLivraison_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),VBonLivraison_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VBonLivraison_DetailDataTable = CType(MyBase.Clone,VBonLivraison_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VBonLivraison_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
            Me.columnNCompte = MyBase.Columns("NCompte")
            Me.columnNActivite = MyBase.Columns("NActivite")
            Me.columnPrixUAchatHT = MyBase.Columns("PrixUAchatHT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.columnNCompte = New Global.System.Data.DataColumn("NCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompte)
            Me.columnNActivite = New Global.System.Data.DataColumn("NActivite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActivite)
            Me.columnPrixUAchatHT = New Global.System.Data.DataColumn("PrixUAchatHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUAchatHT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
            Me.columnNLot.MaxLength = 50
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 1073741823
            Me.columnLibUnite1.MaxLength = 5
            Me.columnLibUnite2.MaxLength = 5
            Me.columnTTVA.MaxLength = 50
            Me.columnNCompte.MaxLength = 8
            Me.columnNActivite.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVBonLivraison_DetailRow() As VBonLivraison_DetailRow
            Return CType(Me.NewRow,VBonLivraison_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VBonLivraison_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VBonLivraison_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VBonLivraison_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VBonLivraison_DetailRowChanged(Me, New VBonLivraison_DetailRowChangeEvent(CType(e.Row,VBonLivraison_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VBonLivraison_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VBonLivraison_DetailRowChanging(Me, New VBonLivraison_DetailRowChangeEvent(CType(e.Row,VBonLivraison_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VBonLivraison_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VBonLivraison_DetailRowDeleted(Me, New VBonLivraison_DetailRowChangeEvent(CType(e.Row,VBonLivraison_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VBonLivraison_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VBonLivraison_DetailRowDeleting(Me, New VBonLivraison_DetailRowChangeEvent(CType(e.Row,VBonLivraison_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVBonLivraison_DetailRow(ByVal row As VBonLivraison_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAgrifact = New DataSetAgrifact
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VBonLivraison_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VDevisDataTable
        Inherits Global.System.Data.TypedTableBase(Of VDevisRow)
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnOrigine As Global.System.Data.DataColumn
        
        Private columnnOrigine As Global.System.Data.DataColumn
        
        Private columnnClient As Global.System.Data.DataColumn
        
        Private columnAdresseFacture As Global.System.Data.DataColumn
        
        Private columnnPrescripteur As Global.System.Data.DataColumn
        
        Private columnnPayeur As Global.System.Data.DataColumn
        
        Private columnnContact As Global.System.Data.DataColumn
        
        Private columnnCommercial As Global.System.Data.DataColumn
        
        Private columnSecteur As Global.System.Data.DataColumn
        
        Private columnFacturationPrescripteur As Global.System.Data.DataColumn
        
        Private columnFacturationClient As Global.System.Data.DataColumn
        
        Private columnnFacture As Global.System.Data.DataColumn
        
        Private columnDateFacture As Global.System.Data.DataColumn
        
        Private columnPaye As Global.System.Data.DataColumn
        
        Private columnExportCompta As Global.System.Data.DataColumn
        
        Private columnDateExportCompta As Global.System.Data.DataColumn
        
        Private columnDateEcheance As Global.System.Data.DataColumn
        
        Private columnObservation As Global.System.Data.DataColumn
        
        Private columnDateRelance1 As Global.System.Data.DataColumn
        
        Private columnDateRelance2 As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantHT As Global.System.Data.DataColumn
        
        Private columnMontantTVA As Global.System.Data.DataColumn
        
        Private columnMontantTTC As Global.System.Data.DataColumn
        
        Private columnnPreFacturation As Global.System.Data.DataColumn
        
        Private columnDatePreFacturation As Global.System.Data.DataColumn
        
        Private columnFacturationTTC As Global.System.Data.DataColumn
        
        Private columnnTarif As Global.System.Data.DataColumn
        
        Private columnDepot As Global.System.Data.DataColumn
        
        Private columnTxCommission As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VDevis"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOrigineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnOrigine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdresseFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdresseFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPayeurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPayeur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCommercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCommercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationPrescripteurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationPrescripteur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFactureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFacture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExportComptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExportCompta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEcheanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEcheance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRelance2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRelance2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnPreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatePreFacturationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePreFacturation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturationTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturationTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nTarifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnTarif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxCommissionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxCommission
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VDevisRow
            Get
                Return CType(Me.Rows(index),VDevisRow)
            End Get
        End Property
        
        Public Event VDevisRowChanging As VDevisRowChangeEventHandler
        
        Public Event VDevisRowChanged As VDevisRowChangeEventHandler
        
        Public Event VDevisRowDeleting As VDevisRowChangeEventHandler
        
        Public Event VDevisRowDeleted As VDevisRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVDevisRow(ByVal row As VDevisRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVDevisRow( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Decimal,  _
                    ByVal nClient As Decimal,  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Decimal,  _
                    ByVal nPayeur As Decimal,  _
                    ByVal nContact As Decimal,  _
                    ByVal nCommercial As Decimal,  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Decimal,  _
                    ByVal DateFacture As Date,  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Date,  _
                    ByVal DateEcheance As Date,  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Date,  _
                    ByVal DateRelance2 As Date,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantHT As Decimal,  _
                    ByVal MontantTVA As Decimal,  _
                    ByVal MontantTTC As Decimal,  _
                    ByVal nPreFacturation As Decimal,  _
                    ByVal DatePreFacturation As Date,  _
                    ByVal FacturationTTC As Boolean,  _
                    ByVal nTarif As Decimal,  _
                    ByVal Depot As String,  _
                    ByVal TxCommission As Integer) As VDevisRow
            Dim rowVDevisRow As VDevisRow = CType(Me.NewRow,VDevisRow)
            Dim columnValuesArray() As Object = New Object() {nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, TxCommission}
            rowVDevisRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVDevisRow)
            Return rowVDevisRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDevis(ByVal nDevis As Decimal) As VDevisRow
            Return CType(Me.Rows.Find(New Object() {nDevis}),VDevisRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VDevisDataTable = CType(MyBase.Clone,VDevisDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VDevisDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnOrigine = MyBase.Columns("Origine")
            Me.columnnOrigine = MyBase.Columns("nOrigine")
            Me.columnnClient = MyBase.Columns("nClient")
            Me.columnAdresseFacture = MyBase.Columns("AdresseFacture")
            Me.columnnPrescripteur = MyBase.Columns("nPrescripteur")
            Me.columnnPayeur = MyBase.Columns("nPayeur")
            Me.columnnContact = MyBase.Columns("nContact")
            Me.columnnCommercial = MyBase.Columns("nCommercial")
            Me.columnSecteur = MyBase.Columns("Secteur")
            Me.columnFacturationPrescripteur = MyBase.Columns("FacturationPrescripteur")
            Me.columnFacturationClient = MyBase.Columns("FacturationClient")
            Me.columnnFacture = MyBase.Columns("nFacture")
            Me.columnDateFacture = MyBase.Columns("DateFacture")
            Me.columnPaye = MyBase.Columns("Paye")
            Me.columnExportCompta = MyBase.Columns("ExportCompta")
            Me.columnDateExportCompta = MyBase.Columns("DateExportCompta")
            Me.columnDateEcheance = MyBase.Columns("DateEcheance")
            Me.columnObservation = MyBase.Columns("Observation")
            Me.columnDateRelance1 = MyBase.Columns("DateRelance1")
            Me.columnDateRelance2 = MyBase.Columns("DateRelance2")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantHT = MyBase.Columns("MontantHT")
            Me.columnMontantTVA = MyBase.Columns("MontantTVA")
            Me.columnMontantTTC = MyBase.Columns("MontantTTC")
            Me.columnnPreFacturation = MyBase.Columns("nPreFacturation")
            Me.columnDatePreFacturation = MyBase.Columns("DatePreFacturation")
            Me.columnFacturationTTC = MyBase.Columns("FacturationTTC")
            Me.columnnTarif = MyBase.Columns("nTarif")
            Me.columnDepot = MyBase.Columns("Depot")
            Me.columnTxCommission = MyBase.Columns("TxCommission")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnOrigine = New Global.System.Data.DataColumn("Origine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigine)
            Me.columnnOrigine = New Global.System.Data.DataColumn("nOrigine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOrigine)
            Me.columnnClient = New Global.System.Data.DataColumn("nClient", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnClient)
            Me.columnAdresseFacture = New Global.System.Data.DataColumn("AdresseFacture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdresseFacture)
            Me.columnnPrescripteur = New Global.System.Data.DataColumn("nPrescripteur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPrescripteur)
            Me.columnnPayeur = New Global.System.Data.DataColumn("nPayeur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPayeur)
            Me.columnnContact = New Global.System.Data.DataColumn("nContact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnContact)
            Me.columnnCommercial = New Global.System.Data.DataColumn("nCommercial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCommercial)
            Me.columnSecteur = New Global.System.Data.DataColumn("Secteur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecteur)
            Me.columnFacturationPrescripteur = New Global.System.Data.DataColumn("FacturationPrescripteur", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationPrescripteur)
            Me.columnFacturationClient = New Global.System.Data.DataColumn("FacturationClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationClient)
            Me.columnnFacture = New Global.System.Data.DataColumn("nFacture", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnFacture)
            Me.columnDateFacture = New Global.System.Data.DataColumn("DateFacture", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFacture)
            Me.columnPaye = New Global.System.Data.DataColumn("Paye", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaye)
            Me.columnExportCompta = New Global.System.Data.DataColumn("ExportCompta", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExportCompta)
            Me.columnDateExportCompta = New Global.System.Data.DataColumn("DateExportCompta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExportCompta)
            Me.columnDateEcheance = New Global.System.Data.DataColumn("DateEcheance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEcheance)
            Me.columnObservation = New Global.System.Data.DataColumn("Observation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservation)
            Me.columnDateRelance1 = New Global.System.Data.DataColumn("DateRelance1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance1)
            Me.columnDateRelance2 = New Global.System.Data.DataColumn("DateRelance2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRelance2)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantHT = New Global.System.Data.DataColumn("MontantHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantHT)
            Me.columnMontantTVA = New Global.System.Data.DataColumn("MontantTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTVA)
            Me.columnMontantTTC = New Global.System.Data.DataColumn("MontantTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantTTC)
            Me.columnnPreFacturation = New Global.System.Data.DataColumn("nPreFacturation", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPreFacturation)
            Me.columnDatePreFacturation = New Global.System.Data.DataColumn("DatePreFacturation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePreFacturation)
            Me.columnFacturationTTC = New Global.System.Data.DataColumn("FacturationTTC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturationTTC)
            Me.columnnTarif = New Global.System.Data.DataColumn("nTarif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnTarif)
            Me.columnDepot = New Global.System.Data.DataColumn("Depot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepot)
            Me.columnTxCommission = New Global.System.Data.DataColumn("TxCommission", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxCommission)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDevis}, true))
            Me.columnnDevis.AllowDBNull = false
            Me.columnnDevis.Unique = true
            Me.columnOrigine.MaxLength = 1073741823
            Me.columnAdresseFacture.MaxLength = 2147483647
            Me.columnSecteur.MaxLength = 50
            Me.columnFacturationPrescripteur.AllowDBNull = false
            Me.columnFacturationClient.AllowDBNull = false
            Me.columnPaye.AllowDBNull = false
            Me.columnExportCompta.AllowDBNull = false
            Me.columnObservation.MaxLength = 1073741823
            Me.columnDepot.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVDevisRow() As VDevisRow
            Return CType(Me.NewRow,VDevisRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VDevisRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VDevisRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VDevisRowChangedEvent) Is Nothing) Then
                RaiseEvent VDevisRowChanged(Me, New VDevisRowChangeEvent(CType(e.Row,VDevisRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VDevisRowChangingEvent) Is Nothing) Then
                RaiseEvent VDevisRowChanging(Me, New VDevisRowChangeEvent(CType(e.Row,VDevisRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VDevisRowDeletedEvent) Is Nothing) Then
                RaiseEvent VDevisRowDeleted(Me, New VDevisRowChangeEvent(CType(e.Row,VDevisRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VDevisRowDeletingEvent) Is Nothing) Then
                RaiseEvent VDevisRowDeleting(Me, New VDevisRowChangeEvent(CType(e.Row,VDevisRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVDevisRow(ByVal row As VDevisRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAgrifact = New DataSetAgrifact
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VDevisDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VDevis_DetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of VDevis_DetailRow)
        
        Private columnnDetailDevis As Global.System.Data.DataColumn
        
        Private columnnDevis As Global.System.Data.DataColumn
        
        Private columnnLigne As Global.System.Data.DataColumn
        
        Private columnNLot As Global.System.Data.DataColumn
        
        Private columnCodeProduit As Global.System.Data.DataColumn
        
        Private columnLibelle As Global.System.Data.DataColumn
        
        Private columnNbParution As Global.System.Data.DataColumn
        
        Private columnUnite1 As Global.System.Data.DataColumn
        
        Private columnLibUnite1 As Global.System.Data.DataColumn
        
        Private columnUnite2 As Global.System.Data.DataColumn
        
        Private columnLibUnite2 As Global.System.Data.DataColumn
        
        Private columnPrixUHT As Global.System.Data.DataColumn
        
        Private columnTTVA As Global.System.Data.DataColumn
        
        Private columnTxTva As Global.System.Data.DataColumn
        
        Private columnPrixUTVA As Global.System.Data.DataColumn
        
        Private columnPrixUTTC As Global.System.Data.DataColumn
        
        Private columnRemise As Global.System.Data.DataColumn
        
        Private columnMontantLigneHT As Global.System.Data.DataColumn
        
        Private columnMontantLigneTVA As Global.System.Data.DataColumn
        
        Private columnMontantLigneTTC As Global.System.Data.DataColumn
        
        Private columnNCompte As Global.System.Data.DataColumn
        
        Private columnNActivite As Global.System.Data.DataColumn
        
        Private columnPrixUAchatHT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VDevis_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDetailDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDetailDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nDevisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDevis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nLigneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnLigne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeProduitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeProduit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbParutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNbParution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LibUnite2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLibUnite2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemiseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemise
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantLigneTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontantLigneTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCompteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCompte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NActiviteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNActivite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrixUAchatHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrixUAchatHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VDevis_DetailRow
            Get
                Return CType(Me.Rows(index),VDevis_DetailRow)
            End Get
        End Property
        
        Public Event VDevis_DetailRowChanging As VDevis_DetailRowChangeEventHandler
        
        Public Event VDevis_DetailRowChanged As VDevis_DetailRowChangeEventHandler
        
        Public Event VDevis_DetailRowDeleting As VDevis_DetailRowChangeEventHandler
        
        Public Event VDevis_DetailRowDeleted As VDevis_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVDevis_DetailRow(ByVal row As VDevis_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVDevis_DetailRow( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal parentVDevisRowByFK_VDevis_Detail_VDevis As VDevisRow,  _
                    ByVal nLigne As Integer,  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Decimal,  _
                    ByVal Unite1 As Decimal,  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Decimal,  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Decimal,  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Decimal,  _
                    ByVal PrixUTVA As Decimal,  _
                    ByVal PrixUTTC As Decimal,  _
                    ByVal Remise As Decimal,  _
                    ByVal MontantLigneHT As Decimal,  _
                    ByVal MontantLigneTVA As Decimal,  _
                    ByVal MontantLigneTTC As Decimal,  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Decimal) As VDevis_DetailRow
            Dim rowVDevis_DetailRow As VDevis_DetailRow = CType(Me.NewRow,VDevis_DetailRow)
            Dim columnValuesArray() As Object = New Object() {nDetailDevis, Nothing, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUAchatHT}
            If (Not (parentVDevisRowByFK_VDevis_Detail_VDevis) Is Nothing) Then
                columnValuesArray(1) = parentVDevisRowByFK_VDevis_Detail_VDevis(0)
            End If
            rowVDevis_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVDevis_DetailRow)
            Return rowVDevis_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynDetailDevis(ByVal nDetailDevis As Decimal) As VDevis_DetailRow
            Return CType(Me.Rows.Find(New Object() {nDetailDevis}),VDevis_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VDevis_DetailDataTable = CType(MyBase.Clone,VDevis_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VDevis_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnDetailDevis = MyBase.Columns("nDetailDevis")
            Me.columnnDevis = MyBase.Columns("nDevis")
            Me.columnnLigne = MyBase.Columns("nLigne")
            Me.columnNLot = MyBase.Columns("NLot")
            Me.columnCodeProduit = MyBase.Columns("CodeProduit")
            Me.columnLibelle = MyBase.Columns("Libelle")
            Me.columnNbParution = MyBase.Columns("NbParution")
            Me.columnUnite1 = MyBase.Columns("Unite1")
            Me.columnLibUnite1 = MyBase.Columns("LibUnite1")
            Me.columnUnite2 = MyBase.Columns("Unite2")
            Me.columnLibUnite2 = MyBase.Columns("LibUnite2")
            Me.columnPrixUHT = MyBase.Columns("PrixUHT")
            Me.columnTTVA = MyBase.Columns("TTVA")
            Me.columnTxTva = MyBase.Columns("TxTva")
            Me.columnPrixUTVA = MyBase.Columns("PrixUTVA")
            Me.columnPrixUTTC = MyBase.Columns("PrixUTTC")
            Me.columnRemise = MyBase.Columns("Remise")
            Me.columnMontantLigneHT = MyBase.Columns("MontantLigneHT")
            Me.columnMontantLigneTVA = MyBase.Columns("MontantLigneTVA")
            Me.columnMontantLigneTTC = MyBase.Columns("MontantLigneTTC")
            Me.columnNCompte = MyBase.Columns("NCompte")
            Me.columnNActivite = MyBase.Columns("NActivite")
            Me.columnPrixUAchatHT = MyBase.Columns("PrixUAchatHT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnDetailDevis = New Global.System.Data.DataColumn("nDetailDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDetailDevis)
            Me.columnnDevis = New Global.System.Data.DataColumn("nDevis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDevis)
            Me.columnnLigne = New Global.System.Data.DataColumn("nLigne", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnLigne)
            Me.columnNLot = New Global.System.Data.DataColumn("NLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLot)
            Me.columnCodeProduit = New Global.System.Data.DataColumn("CodeProduit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeProduit)
            Me.columnLibelle = New Global.System.Data.DataColumn("Libelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibelle)
            Me.columnNbParution = New Global.System.Data.DataColumn("NbParution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbParution)
            Me.columnUnite1 = New Global.System.Data.DataColumn("Unite1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite1)
            Me.columnLibUnite1 = New Global.System.Data.DataColumn("LibUnite1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite1)
            Me.columnUnite2 = New Global.System.Data.DataColumn("Unite2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnite2)
            Me.columnLibUnite2 = New Global.System.Data.DataColumn("LibUnite2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLibUnite2)
            Me.columnPrixUHT = New Global.System.Data.DataColumn("PrixUHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUHT)
            Me.columnTTVA = New Global.System.Data.DataColumn("TTVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTVA)
            Me.columnTxTva = New Global.System.Data.DataColumn("TxTva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTva)
            Me.columnPrixUTVA = New Global.System.Data.DataColumn("PrixUTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTVA)
            Me.columnPrixUTTC = New Global.System.Data.DataColumn("PrixUTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUTTC)
            Me.columnRemise = New Global.System.Data.DataColumn("Remise", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemise)
            Me.columnMontantLigneHT = New Global.System.Data.DataColumn("MontantLigneHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneHT)
            Me.columnMontantLigneTVA = New Global.System.Data.DataColumn("MontantLigneTVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTVA)
            Me.columnMontantLigneTTC = New Global.System.Data.DataColumn("MontantLigneTTC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontantLigneTTC)
            Me.columnNCompte = New Global.System.Data.DataColumn("NCompte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCompte)
            Me.columnNActivite = New Global.System.Data.DataColumn("NActivite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNActivite)
            Me.columnPrixUAchatHT = New Global.System.Data.DataColumn("PrixUAchatHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrixUAchatHT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDetailDevis}, true))
            Me.columnnDetailDevis.AllowDBNull = false
            Me.columnnDetailDevis.Unique = true
            Me.columnNLot.MaxLength = 50
            Me.columnCodeProduit.MaxLength = 255
            Me.columnLibelle.MaxLength = 1073741823
            Me.columnLibUnite1.MaxLength = 5
            Me.columnLibUnite2.MaxLength = 5
            Me.columnTTVA.MaxLength = 50
            Me.columnNCompte.MaxLength = 8
            Me.columnNActivite.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVDevis_DetailRow() As VDevis_DetailRow
            Return CType(Me.NewRow,VDevis_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VDevis_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VDevis_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VDevis_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VDevis_DetailRowChanged(Me, New VDevis_DetailRowChangeEvent(CType(e.Row,VDevis_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VDevis_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VDevis_DetailRowChanging(Me, New VDevis_DetailRowChangeEvent(CType(e.Row,VDevis_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VDevis_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VDevis_DetailRowDeleted(Me, New VDevis_DetailRowChangeEvent(CType(e.Row,VDevis_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VDevis_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VDevis_DetailRowDeleting(Me, New VDevis_DetailRowChangeEvent(CType(e.Row,VDevis_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVDevis_DetailRow(ByVal row As VDevis_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAgrifact = New DataSetAgrifact
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VDevis_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VFactureRow
        Inherits Global.System.Data.DataRow
        
        Private tableVFacture As VFactureDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVFacture = CType(Me.Table,VFactureDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tableVFacture.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVFacture.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Origine' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nOrigine' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nClient' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AdresseFacture' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPrescripteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nPrescripteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPrescripteur' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPayeur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nPayeurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPayeur' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nPayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nContact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nContactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nContact' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nCommercial' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Secteur' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationPrescripteur() As Boolean
            Get
                Return CType(Me(Me.tableVFacture.FacturationPrescripteurColumn),Boolean)
            End Get
            Set
                Me(Me.tableVFacture.FacturationPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationClient() As Boolean
            Get
                Return CType(Me(Me.tableVFacture.FacturationClientColumn),Boolean)
            End Get
            Set
                Me(Me.tableVFacture.FacturationClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nFacture' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateFacture' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tableVFacture.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tableVFacture.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableVFacture.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableVFacture.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateExportCompta' dans la table 'VFacture' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateEcheance' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Observation' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateRelance1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateRelance1' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateRelance1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateRelance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateRelance2' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateRelance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Remise' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.MontantHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantHT' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.MontantHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.MontantTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantTVA' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.MontantTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantTTC' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPreFacturation() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nPreFacturationColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPreFacturation' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nPreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatePreFacturation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DatePreFacturationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DatePreFacturation' dans la table 'VFacture' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DatePreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FacturationTTC' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTarif() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nTarifColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nTarif' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nTarifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nRelance() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.nRelanceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nRelance' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.nRelanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateRelanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateRelance' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateRelanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateImpr() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DateImprColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateImpr' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DateImprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxCommission() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.TxCommissionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TxCommission' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.TxCommissionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsComPaye() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.IsComPayeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IsComPaye' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.IsComPayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture.DepotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Depot' dans la table 'VFacture' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture.DepotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tableVFacture.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tableVFacture.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tableVFacture.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tableVFacture.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nPrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPrescripteurNull()
            Me(Me.tableVFacture.nPrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPayeurNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nPayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPayeurNull()
            Me(Me.tableVFacture.nPayeurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnContactNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnContactNull()
            Me(Me.tableVFacture.nContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableVFacture.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tableVFacture.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableVFacture.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableVFacture.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableVFacture.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tableVFacture.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableVFacture.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance1Null() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateRelance1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance1Null()
            Me(Me.tableVFacture.DateRelance1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance2Null() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateRelance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance2Null()
            Me(Me.tableVFacture.DateRelance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVFacture.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantHTNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.MontantHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantHTNull()
            Me(Me.tableVFacture.MontantHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture.MontantTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTVANull()
            Me(Me.tableVFacture.MontantTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tableVFacture.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nPreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPreFacturationNull()
            Me(Me.tableVFacture.nPreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatePreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DatePreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatePreFacturationNull()
            Me(Me.tableVFacture.DatePreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableVFacture.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnTarifNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nTarifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnTarifNull()
            Me(Me.tableVFacture.nTarifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnRelanceNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.nRelanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnRelanceNull()
            Me(Me.tableVFacture.nRelanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelanceNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateRelanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelanceNull()
            Me(Me.tableVFacture.DateRelanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateImprNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DateImprColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateImprNull()
            Me(Me.tableVFacture.DateImprColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxCommissionNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.TxCommissionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxCommissionNull()
            Me(Me.tableVFacture.TxCommissionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsComPayeNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.IsComPayeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsComPayeNull()
            Me(Me.tableVFacture.IsComPayeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepotNull() As Boolean
            Return Me.IsNull(Me.tableVFacture.DepotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepotNull()
            Me(Me.tableVFacture.DepotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVFacture_DetailRows() As VFacture_DetailRow()
            If (Me.Table.ChildRelations("FK_VFacture_Detail_VFacture") Is Nothing) Then
                Return New VFacture_DetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_VFacture_Detail_VFacture")),VFacture_DetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VFacture_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVFacture_Detail As VFacture_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVFacture_Detail = CType(Me.Table,VFacture_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableVFacture_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVFacture_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nDevis' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nLigne' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NLot' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CodeProduit' dans la table 'VFacture_Detail' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Libelle' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NbParution' dans la table 'VFacture_Detail' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite1' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibUnite1' dans la table 'VFacture_Detail' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite2' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibUnite2' dans la table 'VFacture_Detail' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUHT' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TTVA' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TxTva' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUTVA' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUTTC' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Remise' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneHT' dans la table 'VFacture_Detail' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneTVA' dans la table 'VFacture_Detail' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneTTC' dans la table 'VFacture_Detail' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompte() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.NCompteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NCompte' dans la table 'VFacture_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.NCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActivite() As String
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.NActiviteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NActivite' dans la table 'VFacture_Detail' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.NActiviteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUAchatHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVFacture_Detail.PrixUAchatHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUAchatHT' dans la table 'VFacture_Detail' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFacture_Detail.PrixUAchatHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VFactureRow() As VFactureRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_VFacture_Detail_VFacture")),VFactureRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_VFacture_Detail_VFacture"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableVFacture_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableVFacture_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableVFacture_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableVFacture_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableVFacture_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableVFacture_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableVFacture_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableVFacture_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableVFacture_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableVFacture_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableVFacture_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableVFacture_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableVFacture_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableVFacture_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableVFacture_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVFacture_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableVFacture_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableVFacture_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableVFacture_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.NCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteNull()
            Me(Me.tableVFacture_Detail.NCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.NActiviteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteNull()
            Me(Me.tableVFacture_Detail.NActiviteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUAchatHTNull() As Boolean
            Return Me.IsNull(Me.tableVFacture_Detail.PrixUAchatHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUAchatHTNull()
            Me(Me.tableVFacture_Detail.PrixUAchatHTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProduitRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduit As ProduitDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduit = CType(Me.Table,ProduitDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nProduit() As Decimal
            Get
                Return CType(Me(Me.tableProduit.nProduitColumn),Decimal)
            End Get
            Set
                Me(Me.tableProduit.nProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Return CType(Me(Me.tableProduit.CodeProduitColumn),String)
            End Get
            Set
                Me(Me.tableProduit.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Libelle' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibelleLong() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.LibelleLongColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibelleLong' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.LibelleLongColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TTVA' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixAHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixAHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixAHT' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixAHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixATTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixATTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixATTC' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixATTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixVHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixVHT' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixVHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixVTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.PrixVTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixVTTC' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.PrixVTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPrixHT() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsPrixHTColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsPrixHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Unite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite1' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Unite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite2' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitAchat() As Boolean
            Get
                Return CType(Me(Me.tableProduit.ProduitAchatColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.ProduitAchatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitVente() As Boolean
            Get
                Return CType(Me(Me.tableProduit.ProduitVenteColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.ProduitVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NCompteA' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteA() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NActiviteA' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteV() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NCompteV' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteV() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NActiviteV' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Famille1' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Famille2' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famille3() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.Famille3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Famille3' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.Famille3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1U2Independant() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.U1U2IndependantColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'U1U2Independant' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.U1U2IndependantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U1xU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.U1xU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'U1xU2' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.U1xU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeBarre() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CodeBarreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CodeBarre' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CodeBarreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactif() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.InactifColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Inactif' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.InactifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefU2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CoefU2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CoefU2' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CoefU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeFacturation() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TypeFacturationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TypeFacturation' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TypeFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefAV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.CoefAVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CoefAV' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.CoefAVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProduitCompose() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ProduitComposeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ProduitCompose' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ProduitComposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Image() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ImageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Image' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GestionStock() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.GestionStockColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GestionStock' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.GestionStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DecompteAuto() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.DecompteAutoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DecompteAuto' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.DecompteAutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefFournisseur() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.RefFournisseurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'RefFournisseur' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.RefFournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFournisseur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.nFournisseurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nFournisseur' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.nFournisseurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSortieImpr() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsSortieImprColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsSortieImprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsEnVente() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsEnVenteColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsEnVenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMM() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.AMMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AMM' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.AMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXSM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduit.TAXSMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TAXSM' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.TAXSMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsAMM() As Boolean
            Get
                Return CType(Me(Me.tableProduit.IsAMMColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduit.IsAMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateMaj() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProduit.DateMajColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateMaj' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.DateMajColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isComm() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProduit.isCommColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'isComm' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.isCommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Conditionnement() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProduit.ConditionnementColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Conditionnement' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.ConditionnementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeuilStock() As Decimal
            Get
                Return CType(Me(Me.tableProduit.SeuilStockColumn),Decimal)
            End Get
            Set
                Me(Me.tableProduit.SeuilStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompteX() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NCompteXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NCompteX' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NCompteXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActiviteX() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.NActiviteXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NActiviteX' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.NActiviteXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ingredients() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduit.IngredientsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Ingredients' dans la table 'Produit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduit.IngredientsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableProduit.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableProduit.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleLongNull() As Boolean
            Return Me.IsNull(Me.tableProduit.LibelleLongColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleLongNull()
            Me(Me.tableProduit.LibelleLongColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableProduit.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableProduit.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixAHTNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixAHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixAHTNull()
            Me(Me.tableProduit.PrixAHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixATTCNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixATTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixATTCNull()
            Me(Me.tableProduit.PrixATTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVHTNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixVHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVHTNull()
            Me(Me.tableProduit.PrixVHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixVTTCNull() As Boolean
            Return Me.IsNull(Me.tableProduit.PrixVTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixVTTCNull()
            Me(Me.tableProduit.PrixVTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableProduit.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableProduit.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteANull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteANull()
            Me(Me.tableProduit.NCompteAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteANull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteANull()
            Me(Me.tableProduit.NActiviteAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteVNull()
            Me(Me.tableProduit.NCompteVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteVNull()
            Me(Me.tableProduit.NActiviteVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille1Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille1Null()
            Me(Me.tableProduit.Famille1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille2Null()
            Me(Me.tableProduit.Famille2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamille3Null() As Boolean
            Return Me.IsNull(Me.tableProduit.Famille3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamille3Null()
            Me(Me.tableProduit.Famille3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1U2IndependantNull() As Boolean
            Return Me.IsNull(Me.tableProduit.U1U2IndependantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1U2IndependantNull()
            Me(Me.tableProduit.U1U2IndependantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU1xU2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.U1xU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU1xU2Null()
            Me(Me.tableProduit.U1xU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeBarreNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CodeBarreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeBarreNull()
            Me(Me.tableProduit.CodeBarreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactifNull() As Boolean
            Return Me.IsNull(Me.tableProduit.InactifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactifNull()
            Me(Me.tableProduit.InactifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefU2Null() As Boolean
            Return Me.IsNull(Me.tableProduit.CoefU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefU2Null()
            Me(Me.tableProduit.CoefU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeFacturationNull() As Boolean
            Return Me.IsNull(Me.tableProduit.TypeFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeFacturationNull()
            Me(Me.tableProduit.TypeFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoefAVNull() As Boolean
            Return Me.IsNull(Me.tableProduit.CoefAVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoefAVNull()
            Me(Me.tableProduit.CoefAVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProduitComposeNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ProduitComposeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProduitComposeNull()
            Me(Me.tableProduit.ProduitComposeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImageNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImageNull()
            Me(Me.tableProduit.ImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGestionStockNull() As Boolean
            Return Me.IsNull(Me.tableProduit.GestionStockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGestionStockNull()
            Me(Me.tableProduit.GestionStockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDecompteAutoNull() As Boolean
            Return Me.IsNull(Me.tableProduit.DecompteAutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDecompteAutoNull()
            Me(Me.tableProduit.DecompteAutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableProduit.RefFournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefFournisseurNull()
            Me(Me.tableProduit.RefFournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFournisseurNull() As Boolean
            Return Me.IsNull(Me.tableProduit.nFournisseurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFournisseurNull()
            Me(Me.tableProduit.nFournisseurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMMNull() As Boolean
            Return Me.IsNull(Me.tableProduit.AMMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMMNull()
            Me(Me.tableProduit.AMMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXSMNull() As Boolean
            Return Me.IsNull(Me.tableProduit.TAXSMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXSMNull()
            Me(Me.tableProduit.TAXSMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateMajNull() As Boolean
            Return Me.IsNull(Me.tableProduit.DateMajColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateMajNull()
            Me(Me.tableProduit.DateMajColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisCommNull() As Boolean
            Return Me.IsNull(Me.tableProduit.isCommColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisCommNull()
            Me(Me.tableProduit.isCommColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConditionnementNull() As Boolean
            Return Me.IsNull(Me.tableProduit.ConditionnementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConditionnementNull()
            Me(Me.tableProduit.ConditionnementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteXNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NCompteXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteXNull()
            Me(Me.tableProduit.NCompteXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteXNull() As Boolean
            Return Me.IsNull(Me.tableProduit.NActiviteXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteXNull()
            Me(Me.tableProduit.NActiviteXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngredientsNull() As Boolean
            Return Me.IsNull(Me.tableProduit.IngredientsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngredientsNull()
            Me(Me.tableProduit.IngredientsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TVARow
        Inherits Global.System.Data.DataRow
        
        Private tableTVA As TVADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTVA = CType(Me.Table,TVADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTVA() As Decimal
            Get
                Return CType(Me(Me.tableTVA.nTVAColumn),Decimal)
            End Get
            Set
                Me(Me.tableTVA.nTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TTVA' dans la table 'TVA' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TLibelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TLibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TLibelle' dans la table 'TVA' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TLibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTaux() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TTauxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TTaux' dans la table 'TVA' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TTauxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCpt() As String
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TCptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TCpt' dans la table 'TVA' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TCptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TJournal() As String
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TJournalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TJournal' dans la table 'TVA' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TJournalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTVA.TypTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TypTVA' dans la table 'TVA' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTVA.TypTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableTVA.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableTVA.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTLibelleNull() As Boolean
            Return Me.IsNull(Me.tableTVA.TLibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTLibelleNull()
            Me(Me.tableTVA.TLibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTauxNull() As Boolean
            Return Me.IsNull(Me.tableTVA.TTauxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTauxNull()
            Me(Me.tableTVA.TTauxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCptNull() As Boolean
            Return Me.IsNull(Me.tableTVA.TCptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCptNull()
            Me(Me.tableTVA.TCptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTJournalNull() As Boolean
            Return Me.IsNull(Me.tableTVA.TJournalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTJournalNull()
            Me(Me.tableTVA.TJournalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypTVANull() As Boolean
            Return Me.IsNull(Me.tableTVA.TypTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypTVANull()
            Me(Me.tableTVA.TypTVAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VBonCommandeRow
        Inherits Global.System.Data.DataRow
        
        Private tableVBonCommande As VBonCommandeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVBonCommande = CType(Me.Table,VBonCommandeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tableVBonCommande.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVBonCommande.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Origine' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nOrigine' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nClient' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AdresseFacture' dans la table 'VBonCommande' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPrescripteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nPrescripteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPrescripteur' dans la table 'VBonCommande' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPayeur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nPayeurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPayeur' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nPayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nContact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nContactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nContact' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nCommercial' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationPrescripteur() As Boolean
            Get
                Return CType(Me(Me.tableVBonCommande.FacturationPrescripteurColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonCommande.FacturationPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationClient() As Boolean
            Get
                Return CType(Me(Me.tableVBonCommande.FacturationClientColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonCommande.FacturationClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nFacture' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateFacture' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tableVBonCommande.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonCommande.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableVBonCommande.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonCommande.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateExportCompta' dans la table 'VBonCommande' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateEcheance' dans la table 'VBonCommande' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Observation' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DateRelance1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateRelance1' dans la table 'VBonCommande' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DateRelance1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DateRelance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateRelance2' dans la table 'VBonCommande' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DateRelance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Remise' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.MontantHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantHT' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.MontantHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.MontantTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantTVA' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.MontantTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantTTC' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPreFacturation() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nPreFacturationColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPreFacturation' dans la table 'VBonCommande' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nPreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatePreFacturation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DatePreFacturationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DatePreFacturation' dans la table 'VBonCommande' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DatePreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FacturationTTC' dans la table 'VBonCommande' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTarif() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.nTarifColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nTarif' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.nTarifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.DepotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Depot' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.DepotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Secteur' dans la table 'VBonCommande' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxCommission() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande.TxCommissionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TxCommission' dans la table 'VBonCommande' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande.TxCommissionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tableVBonCommande.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tableVBonCommande.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tableVBonCommande.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tableVBonCommande.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nPrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPrescripteurNull()
            Me(Me.tableVBonCommande.nPrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPayeurNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nPayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPayeurNull()
            Me(Me.tableVBonCommande.nPayeurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnContactNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnContactNull()
            Me(Me.tableVBonCommande.nContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableVBonCommande.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableVBonCommande.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableVBonCommande.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableVBonCommande.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tableVBonCommande.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableVBonCommande.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance1Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DateRelance1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance1Null()
            Me(Me.tableVBonCommande.DateRelance1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance2Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DateRelance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance2Null()
            Me(Me.tableVBonCommande.DateRelance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVBonCommande.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.MontantHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantHTNull()
            Me(Me.tableVBonCommande.MontantHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.MontantTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTVANull()
            Me(Me.tableVBonCommande.MontantTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tableVBonCommande.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nPreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPreFacturationNull()
            Me(Me.tableVBonCommande.nPreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatePreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DatePreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatePreFacturationNull()
            Me(Me.tableVBonCommande.DatePreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableVBonCommande.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnTarifNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.nTarifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnTarifNull()
            Me(Me.tableVBonCommande.nTarifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepotNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.DepotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepotNull()
            Me(Me.tableVBonCommande.DepotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tableVBonCommande.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxCommissionNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande.TxCommissionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxCommissionNull()
            Me(Me.tableVBonCommande.TxCommissionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVBonCommande_DetailRows() As VBonCommande_DetailRow()
            If (Me.Table.ChildRelations("FK_VBonCommande_Detail_VBonCommande") Is Nothing) Then
                Return New VBonCommande_DetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_VBonCommande_Detail_VBonCommande")),VBonCommande_DetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VBonCommande_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVBonCommande_Detail As VBonCommande_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVBonCommande_Detail = CType(Me.Table,VBonCommande_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableVBonCommande_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nDevis' dans la table 'VBonCommande_Detail' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nLigne' dans la table 'VBonCommande_Detail' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NLot' dans la table 'VBonCommande_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CodeProduit' dans la table 'VBonCommande_Detail' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Libelle' dans la table 'VBonCommande_Detail' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NbParution' dans la table 'VBonCommande_Detail' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite1' dans la table 'VBonCommande_Detail' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibUnite1' dans la table 'VBonCommande_Detail' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite2' dans la table 'VBonCommande_Detail' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibUnite2' dans la table 'VBonCommande_Detail' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUHT' dans la table 'VBonCommande_Detail' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TTVA' dans la table 'VBonCommande_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TxTva' dans la table 'VBonCommande_Detail' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUTVA' dans la table 'VBonCommande_Detail' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUTTC' dans la table 'VBonCommande_Detail' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Remise' dans la table 'VBonCommande_Detail' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneHT' dans la table 'VBonCommande_Detail' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneTVA' dans la table 'VBonCommande_Detail' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneTTC' dans la table 'VBonCommande_Detail' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompte() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.NCompteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NCompte' dans la table 'VBonCommande_Detail' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.NCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActivite() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.NActiviteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NActivite' dans la table 'VBonCommande_Detail' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.NActiviteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUAchatHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonCommande_Detail.PrixUAchatHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUAchatHT' dans la table 'VBonCommande_Detail' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonCommande_Detail.PrixUAchatHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VBonCommandeRow() As VBonCommandeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_VBonCommande_Detail_VBonCommande")),VBonCommandeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_VBonCommande_Detail_VBonCommande"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableVBonCommande_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableVBonCommande_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableVBonCommande_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableVBonCommande_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableVBonCommande_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableVBonCommande_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableVBonCommande_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableVBonCommande_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableVBonCommande_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableVBonCommande_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableVBonCommande_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableVBonCommande_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableVBonCommande_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableVBonCommande_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableVBonCommande_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVBonCommande_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableVBonCommande_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableVBonCommande_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableVBonCommande_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.NCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteNull()
            Me(Me.tableVBonCommande_Detail.NCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.NActiviteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteNull()
            Me(Me.tableVBonCommande_Detail.NActiviteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUAchatHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonCommande_Detail.PrixUAchatHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUAchatHTNull()
            Me(Me.tableVBonCommande_Detail.PrixUAchatHTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VBonLivraisonRow
        Inherits Global.System.Data.DataRow
        
        Private tableVBonLivraison As VBonLivraisonDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVBonLivraison = CType(Me.Table,VBonLivraisonDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tableVBonLivraison.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVBonLivraison.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Origine' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nOrigine' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nClient' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AdresseFacture' dans la table 'VBonLivraison' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPrescripteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nPrescripteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPrescripteur' dans la table 'VBonLivraison' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPayeur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nPayeurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPayeur' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nPayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nContact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nContactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nContact' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nCommercial' dans la table 'VBonLivraison' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Secteur' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationPrescripteur() As Boolean
            Get
                Return CType(Me(Me.tableVBonLivraison.FacturationPrescripteurColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonLivraison.FacturationPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationClient() As Boolean
            Get
                Return CType(Me(Me.tableVBonLivraison.FacturationClientColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonLivraison.FacturationClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nFacture' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateFacture' dans la table 'VBonLivraison' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tableVBonLivraison.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonLivraison.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableVBonLivraison.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBonLivraison.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateExportCompta' dans la table 'VBonLivraison' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateEcheance' dans la table 'VBonLivraison' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Observation' dans la table 'VBonLivraison' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DateRelance1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateRelance1' dans la table 'VBonLivraison' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DateRelance1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DateRelance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateRelance2' dans la table 'VBonLivraison' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DateRelance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Remise' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.MontantHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantHT' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.MontantHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.MontantTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantTVA' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.MontantTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantTTC' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPreFacturation() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nPreFacturationColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPreFacturation' dans la table 'VBonLivraison' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nPreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatePreFacturation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DatePreFacturationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DatePreFacturation' dans la table 'VBonLivraison' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DatePreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FacturationTTC' dans la table 'VBonLivraison' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTarif() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.nTarifColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nTarif' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.nTarifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.DepotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Depot' dans la table 'VBonLivraison' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.DepotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxCommission() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison.TxCommissionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TxCommission' dans la table 'VBonLivraison' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison.TxCommissionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tableVBonLivraison.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tableVBonLivraison.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tableVBonLivraison.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tableVBonLivraison.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nPrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPrescripteurNull()
            Me(Me.tableVBonLivraison.nPrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPayeurNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nPayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPayeurNull()
            Me(Me.tableVBonLivraison.nPayeurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnContactNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnContactNull()
            Me(Me.tableVBonLivraison.nContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableVBonLivraison.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tableVBonLivraison.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableVBonLivraison.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableVBonLivraison.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableVBonLivraison.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tableVBonLivraison.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableVBonLivraison.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance1Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DateRelance1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance1Null()
            Me(Me.tableVBonLivraison.DateRelance1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance2Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DateRelance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance2Null()
            Me(Me.tableVBonLivraison.DateRelance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVBonLivraison.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.MontantHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantHTNull()
            Me(Me.tableVBonLivraison.MontantHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.MontantTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTVANull()
            Me(Me.tableVBonLivraison.MontantTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tableVBonLivraison.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nPreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPreFacturationNull()
            Me(Me.tableVBonLivraison.nPreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatePreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DatePreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatePreFacturationNull()
            Me(Me.tableVBonLivraison.DatePreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableVBonLivraison.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnTarifNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.nTarifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnTarifNull()
            Me(Me.tableVBonLivraison.nTarifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepotNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.DepotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepotNull()
            Me(Me.tableVBonLivraison.DepotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxCommissionNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison.TxCommissionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxCommissionNull()
            Me(Me.tableVBonLivraison.TxCommissionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVBonLivraison_DetailRows() As VBonLivraison_DetailRow()
            If (Me.Table.ChildRelations("FK_VBonLivraison_Detail_VBonLivraison") Is Nothing) Then
                Return New VBonLivraison_DetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_VBonLivraison_Detail_VBonLivraison")),VBonLivraison_DetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VBonLivraison_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVBonLivraison_Detail As VBonLivraison_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVBonLivraison_Detail = CType(Me.Table,VBonLivraison_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableVBonLivraison_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nDevis' dans la table 'VBonLivraison_Detail' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nLigne' dans la table 'VBonLivraison_Detail' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NLot' dans la table 'VBonLivraison_Detail' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CodeProduit' dans la table 'VBonLivraison_Detail' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Libelle' dans la table 'VBonLivraison_Detail' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NbParution' dans la table 'VBonLivraison_Detail' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite1' dans la table 'VBonLivraison_Detail' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibUnite1' dans la table 'VBonLivraison_Detail' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite2' dans la table 'VBonLivraison_Detail' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibUnite2' dans la table 'VBonLivraison_Detail' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUHT' dans la table 'VBonLivraison_Detail' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TTVA' dans la table 'VBonLivraison_Detail' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TxTva' dans la table 'VBonLivraison_Detail' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUTVA' dans la table 'VBonLivraison_Detail' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUTTC' dans la table 'VBonLivraison_Detail' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Remise' dans la table 'VBonLivraison_Detail' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneHT' dans la table 'VBonLivraison_Detail' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneTVA' dans la table 'VBonLivraison_Detail' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneTTC' dans la table 'VBonLivraison_Detail' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompte() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.NCompteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NCompte' dans la table 'VBonLivraison_Detail' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.NCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActivite() As String
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.NActiviteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NActivite' dans la table 'VBonLivraison_Detail' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.NActiviteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUAchatHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVBonLivraison_Detail.PrixUAchatHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUAchatHT' dans la table 'VBonLivraison_Detail' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBonLivraison_Detail.PrixUAchatHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VBonLivraisonRow() As VBonLivraisonRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_VBonLivraison_Detail_VBonLivraison")),VBonLivraisonRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_VBonLivraison_Detail_VBonLivraison"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableVBonLivraison_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableVBonLivraison_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableVBonLivraison_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableVBonLivraison_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableVBonLivraison_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableVBonLivraison_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableVBonLivraison_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableVBonLivraison_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableVBonLivraison_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableVBonLivraison_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableVBonLivraison_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableVBonLivraison_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableVBonLivraison_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableVBonLivraison_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableVBonLivraison_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVBonLivraison_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableVBonLivraison_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableVBonLivraison_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableVBonLivraison_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.NCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteNull()
            Me(Me.tableVBonLivraison_Detail.NCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.NActiviteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteNull()
            Me(Me.tableVBonLivraison_Detail.NActiviteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUAchatHTNull() As Boolean
            Return Me.IsNull(Me.tableVBonLivraison_Detail.PrixUAchatHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUAchatHTNull()
            Me(Me.tableVBonLivraison_Detail.PrixUAchatHTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VDevisRow
        Inherits Global.System.Data.DataRow
        
        Private tableVDevis As VDevisDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVDevis = CType(Me.Table,VDevisDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Return CType(Me(Me.tableVDevis.nDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVDevis.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Origine() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.OrigineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Origine' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.OrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOrigine() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nOrigineColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nOrigine' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nOrigineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nClient() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nClientColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nClient' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdresseFacture() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.AdresseFactureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'AdresseFacture' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.AdresseFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPrescripteur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nPrescripteurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPrescripteur' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPayeur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nPayeurColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPayeur' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nPayeurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nContact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nContactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nContact' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCommercial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nCommercialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nCommercial' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nCommercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secteur() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.SecteurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Secteur' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.SecteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationPrescripteur() As Boolean
            Get
                Return CType(Me(Me.tableVDevis.FacturationPrescripteurColumn),Boolean)
            End Get
            Set
                Me(Me.tableVDevis.FacturationPrescripteurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationClient() As Boolean
            Get
                Return CType(Me(Me.tableVDevis.FacturationClientColumn),Boolean)
            End Get
            Set
                Me(Me.tableVDevis.FacturationClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nFacture() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nFactureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nFacture' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFacture() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DateFactureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateFacture' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DateFactureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paye() As Boolean
            Get
                Return CType(Me(Me.tableVDevis.PayeColumn),Boolean)
            End Get
            Set
                Me(Me.tableVDevis.PayeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExportCompta() As Boolean
            Get
                Return CType(Me(Me.tableVDevis.ExportComptaColumn),Boolean)
            End Get
            Set
                Me(Me.tableVDevis.ExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExportCompta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DateExportComptaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateExportCompta' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DateExportComptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEcheance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DateEcheanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateEcheance' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DateEcheanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observation() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.ObservationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Observation' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.ObservationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DateRelance1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateRelance1' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DateRelance1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRelance2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DateRelance2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateRelance2' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DateRelance2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Remise' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.MontantHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantHT' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.MontantHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.MontantTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantTVA' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.MontantTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.MontantTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantTTC' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.MontantTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPreFacturation() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nPreFacturationColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nPreFacturation' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nPreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatePreFacturation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DatePreFacturationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DatePreFacturation' dans la table 'VDevis' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DatePreFacturationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturationTTC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.FacturationTTCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FacturationTTC' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.FacturationTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nTarif() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.nTarifColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nTarif' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.nTarifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.DepotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Depot' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.DepotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxCommission() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVDevis.TxCommissionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TxCommission' dans la table 'VDevis' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis.TxCommissionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.OrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineNull()
            Me(Me.tableVDevis.OrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnOrigineNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nOrigineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnOrigineNull()
            Me(Me.tableVDevis.nOrigineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnClientNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnClientNull()
            Me(Me.tableVDevis.nClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdresseFactureNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.AdresseFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdresseFactureNull()
            Me(Me.tableVDevis.AdresseFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPrescripteurNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nPrescripteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPrescripteurNull()
            Me(Me.tableVDevis.nPrescripteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPayeurNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nPayeurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPayeurNull()
            Me(Me.tableVDevis.nPayeurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnContactNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnContactNull()
            Me(Me.tableVDevis.nContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnCommercialNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nCommercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnCommercialNull()
            Me(Me.tableVDevis.nCommercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecteurNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.SecteurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecteurNull()
            Me(Me.tableVDevis.SecteurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnFactureNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnFactureNull()
            Me(Me.tableVDevis.nFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFactureNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.DateFactureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFactureNull()
            Me(Me.tableVDevis.DateFactureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExportComptaNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.DateExportComptaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExportComptaNull()
            Me(Me.tableVDevis.DateExportComptaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEcheanceNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.DateEcheanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEcheanceNull()
            Me(Me.tableVDevis.DateEcheanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservationNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.ObservationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservationNull()
            Me(Me.tableVDevis.ObservationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance1Null() As Boolean
            Return Me.IsNull(Me.tableVDevis.DateRelance1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance1Null()
            Me(Me.tableVDevis.DateRelance1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRelance2Null() As Boolean
            Return Me.IsNull(Me.tableVDevis.DateRelance2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRelance2Null()
            Me(Me.tableVDevis.DateRelance2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVDevis.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantHTNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.MontantHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantHTNull()
            Me(Me.tableVDevis.MontantHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTVANull() As Boolean
            Return Me.IsNull(Me.tableVDevis.MontantTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTVANull()
            Me(Me.tableVDevis.MontantTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantTTCNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.MontantTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantTTCNull()
            Me(Me.tableVDevis.MontantTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnPreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nPreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnPreFacturationNull()
            Me(Me.tableVDevis.nPreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatePreFacturationNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.DatePreFacturationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatePreFacturationNull()
            Me(Me.tableVDevis.DatePreFacturationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturationTTCNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.FacturationTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturationTTCNull()
            Me(Me.tableVDevis.FacturationTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnTarifNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.nTarifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnTarifNull()
            Me(Me.tableVDevis.nTarifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepotNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.DepotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepotNull()
            Me(Me.tableVDevis.DepotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxCommissionNull() As Boolean
            Return Me.IsNull(Me.tableVDevis.TxCommissionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxCommissionNull()
            Me(Me.tableVDevis.TxCommissionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVDevis_DetailRows() As VDevis_DetailRow()
            If (Me.Table.ChildRelations("FK_VDevis_Detail_VDevis") Is Nothing) Then
                Return New VDevis_DetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_VDevis_Detail_VDevis")),VDevis_DetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VDevis_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVDevis_Detail As VDevis_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVDevis_Detail = CType(Me.Table,VDevis_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDetailDevis() As Decimal
            Get
                Return CType(Me(Me.tableVDevis_Detail.nDetailDevisColumn),Decimal)
            End Get
            Set
                Me(Me.tableVDevis_Detail.nDetailDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nDevis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.nDevisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nDevis' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.nDevisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nLigne() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.nLigneColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'nLigne' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.nLigneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.NLotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NLot' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.NLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeProduit() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.CodeProduitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CodeProduit' dans la table 'VDevis_Detail' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.CodeProduitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Libelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.LibelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Libelle' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.LibelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbParution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.NbParutionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NbParution' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.NbParutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.Unite1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite1' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.Unite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.LibUnite1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibUnite1' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.LibUnite1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unite2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.Unite2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Unite2' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.Unite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LibUnite2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.LibUnite2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'LibUnite2' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.LibUnite2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.PrixUHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUHT' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.PrixUHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.TTVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TTVA' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.TTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.TxTvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'TxTva' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.TxTvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.PrixUTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUTVA' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.PrixUTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.PrixUTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUTTC' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.PrixUTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remise() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.RemiseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Remise' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.RemiseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.MontantLigneHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneHT' dans la table 'VDevis_Detail' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.MontantLigneHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.MontantLigneTVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneTVA' dans la table 'VDevis_Detail' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.MontantLigneTVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontantLigneTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.MontantLigneTTCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MontantLigneTTC' dans la table 'VDevis_Detail' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.MontantLigneTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCompte() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.NCompteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NCompte' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.NCompteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NActivite() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.NActiviteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NActivite' dans la table 'VDevis_Detail' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.NActiviteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrixUAchatHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDevis_Detail.PrixUAchatHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PrixUAchatHT' dans la table 'VDevis_Detail' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVDevis_Detail.PrixUAchatHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VDevisRow() As VDevisRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_VDevis_Detail_VDevis")),VDevisRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_VDevis_Detail_VDevis"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnDevisNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.nDevisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnDevisNull()
            Me(Me.tableVDevis_Detail.nDevisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnLigneNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.nLigneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnLigneNull()
            Me(Me.tableVDevis_Detail.nLigneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLotNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.NLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLotNull()
            Me(Me.tableVDevis_Detail.NLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeProduitNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.CodeProduitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeProduitNull()
            Me(Me.tableVDevis_Detail.CodeProduitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibelleNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.LibelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibelleNull()
            Me(Me.tableVDevis_Detail.LibelleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbParutionNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.NbParutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbParutionNull()
            Me(Me.tableVDevis_Detail.NbParutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.Unite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite1Null()
            Me(Me.tableVDevis_Detail.Unite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite1Null() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.LibUnite1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite1Null()
            Me(Me.tableVDevis_Detail.LibUnite1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.Unite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnite2Null()
            Me(Me.tableVDevis_Detail.Unite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLibUnite2Null() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.LibUnite2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLibUnite2Null()
            Me(Me.tableVDevis_Detail.LibUnite2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUHTNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.PrixUHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUHTNull()
            Me(Me.tableVDevis_Detail.PrixUHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTVANull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.TTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTVANull()
            Me(Me.tableVDevis_Detail.TTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTvaNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.TxTvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTvaNull()
            Me(Me.tableVDevis_Detail.TxTvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTVANull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.PrixUTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTVANull()
            Me(Me.tableVDevis_Detail.PrixUTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUTTCNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.PrixUTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUTTCNull()
            Me(Me.tableVDevis_Detail.PrixUTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemiseNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.RemiseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemiseNull()
            Me(Me.tableVDevis_Detail.RemiseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneHTNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.MontantLigneHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneHTNull()
            Me(Me.tableVDevis_Detail.MontantLigneHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTVANull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.MontantLigneTVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTVANull()
            Me(Me.tableVDevis_Detail.MontantLigneTVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantLigneTTCNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.MontantLigneTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantLigneTTCNull()
            Me(Me.tableVDevis_Detail.MontantLigneTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCompteNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.NCompteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCompteNull()
            Me(Me.tableVDevis_Detail.NCompteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNActiviteNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.NActiviteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNActiviteNull()
            Me(Me.tableVDevis_Detail.NActiviteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrixUAchatHTNull() As Boolean
            Return Me.IsNull(Me.tableVDevis_Detail.PrixUAchatHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrixUAchatHTNull()
            Me(Me.tableVDevis_Detail.PrixUAchatHTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VFactureRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VFactureRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VFactureRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VFactureRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VFacture_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VFacture_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VFacture_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VFacture_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProduitRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProduitRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProduitRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProduitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TVARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TVARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TVARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TVARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VBonCommandeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VBonCommandeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VBonCommandeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VBonCommandeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VBonCommande_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VBonCommande_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VBonCommande_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VBonCommande_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VBonLivraisonRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VBonLivraisonRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VBonLivraisonRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VBonLivraisonRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VBonLivraison_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VBonLivraison_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VBonLivraison_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VBonLivraison_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VDevisRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VDevisRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VDevisRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VDevisRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VDevis_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VDevis_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VDevis_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VDevis_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetAgrifactTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VFactureTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VFacture"
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("Origine", "Origine")
            tableMapping.ColumnMappings.Add("nOrigine", "nOrigine")
            tableMapping.ColumnMappings.Add("nClient", "nClient")
            tableMapping.ColumnMappings.Add("AdresseFacture", "AdresseFacture")
            tableMapping.ColumnMappings.Add("nPrescripteur", "nPrescripteur")
            tableMapping.ColumnMappings.Add("nPayeur", "nPayeur")
            tableMapping.ColumnMappings.Add("nContact", "nContact")
            tableMapping.ColumnMappings.Add("nCommercial", "nCommercial")
            tableMapping.ColumnMappings.Add("Secteur", "Secteur")
            tableMapping.ColumnMappings.Add("FacturationPrescripteur", "FacturationPrescripteur")
            tableMapping.ColumnMappings.Add("FacturationClient", "FacturationClient")
            tableMapping.ColumnMappings.Add("nFacture", "nFacture")
            tableMapping.ColumnMappings.Add("DateFacture", "DateFacture")
            tableMapping.ColumnMappings.Add("Paye", "Paye")
            tableMapping.ColumnMappings.Add("ExportCompta", "ExportCompta")
            tableMapping.ColumnMappings.Add("DateExportCompta", "DateExportCompta")
            tableMapping.ColumnMappings.Add("DateEcheance", "DateEcheance")
            tableMapping.ColumnMappings.Add("Observation", "Observation")
            tableMapping.ColumnMappings.Add("DateRelance1", "DateRelance1")
            tableMapping.ColumnMappings.Add("DateRelance2", "DateRelance2")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("MontantHT", "MontantHT")
            tableMapping.ColumnMappings.Add("MontantTVA", "MontantTVA")
            tableMapping.ColumnMappings.Add("MontantTTC", "MontantTTC")
            tableMapping.ColumnMappings.Add("nPreFacturation", "nPreFacturation")
            tableMapping.ColumnMappings.Add("DatePreFacturation", "DatePreFacturation")
            tableMapping.ColumnMappings.Add("FacturationTTC", "FacturationTTC")
            tableMapping.ColumnMappings.Add("nTarif", "nTarif")
            tableMapping.ColumnMappings.Add("nRelance", "nRelance")
            tableMapping.ColumnMappings.Add("DateRelance", "DateRelance")
            tableMapping.ColumnMappings.Add("DateImpr", "DateImpr")
            tableMapping.ColumnMappings.Add("TxCommission", "TxCommission")
            tableMapping.ColumnMappings.Add("IsComPaye", "IsComPaye")
            tableMapping.ColumnMappings.Add("Depot", "Depot")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VFacture] WHERE (([nDevis] = @Original_nDevis) AND ((@IsNull_n"& _ 
                "Origine = 1 AND [nOrigine] IS NULL) OR ([nOrigine] = @Original_nOrigine)) AND (("& _ 
                "@IsNull_nClient = 1 AND [nClient] IS NULL) OR ([nClient] = @Original_nClient)) A"& _ 
                "ND ((@IsNull_nPrescripteur = 1 AND [nPrescripteur] IS NULL) OR ([nPrescripteur] "& _ 
                "= @Original_nPrescripteur)) AND ((@IsNull_nPayeur = 1 AND [nPayeur] IS NULL) OR "& _ 
                "([nPayeur] = @Original_nPayeur)) AND ((@IsNull_nContact = 1 AND [nContact] IS NU"& _ 
                "LL) OR ([nContact] = @Original_nContact)) AND ((@IsNull_nCommercial = 1 AND [nCo"& _ 
                "mmercial] IS NULL) OR ([nCommercial] = @Original_nCommercial)) AND ((@IsNull_Sec"& _ 
                "teur = 1 AND [Secteur] IS NULL) OR ([Secteur] = @Original_Secteur)) AND ([Factur"& _ 
                "ationPrescripteur] = @Original_FacturationPrescripteur) AND ([FacturationClient]"& _ 
                " = @Original_FacturationClient) AND ((@IsNull_nFacture = 1 AND [nFacture] IS NUL"& _ 
                "L) OR ([nFacture] = @Original_nFacture)) AND ((@IsNull_DateFacture = 1 AND [Date"& _ 
                "Facture] IS NULL) OR ([DateFacture] = @Original_DateFacture)) AND ([Paye] = @Ori"& _ 
                "ginal_Paye) AND ([ExportCompta] = @Original_ExportCompta) AND ((@IsNull_DateExpo"& _ 
                "rtCompta = 1 AND [DateExportCompta] IS NULL) OR ([DateExportCompta] = @Original_"& _ 
                "DateExportCompta)) AND ((@IsNull_DateEcheance = 1 AND [DateEcheance] IS NULL) OR"& _ 
                " ([DateEcheance] = @Original_DateEcheance)) AND ((@IsNull_DateRelance1 = 1 AND ["& _ 
                "DateRelance1] IS NULL) OR ([DateRelance1] = @Original_DateRelance1)) AND ((@IsNu"& _ 
                "ll_DateRelance2 = 1 AND [DateRelance2] IS NULL) OR ([DateRelance2] = @Original_D"& _ 
                "ateRelance2)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Ori"& _ 
                "ginal_Remise)) AND ((@IsNull_MontantHT = 1 AND [MontantHT] IS NULL) OR ([Montant"& _ 
                "HT] = @Original_MontantHT)) AND ((@IsNull_MontantTVA = 1 AND [MontantTVA] IS NUL"& _ 
                "L) OR ([MontantTVA] = @Original_MontantTVA)) AND ((@IsNull_MontantTTC = 1 AND [M"& _ 
                "ontantTTC] IS NULL) OR ([MontantTTC] = @Original_MontantTTC)) AND ((@IsNull_nPre"& _ 
                "Facturation = 1 AND [nPreFacturation] IS NULL) OR ([nPreFacturation] = @Original"& _ 
                "_nPreFacturation)) AND ((@IsNull_DatePreFacturation = 1 AND [DatePreFacturation]"& _ 
                " IS NULL) OR ([DatePreFacturation] = @Original_DatePreFacturation)) AND ((@IsNul"& _ 
                "l_FacturationTTC = 1 AND [FacturationTTC] IS NULL) OR ([FacturationTTC] = @Origi"& _ 
                "nal_FacturationTTC)) AND ((@IsNull_nTarif = 1 AND [nTarif] IS NULL) OR ([nTarif]"& _ 
                " = @Original_nTarif)) AND ((@IsNull_nRelance = 1 AND [nRelance] IS NULL) OR ([nR"& _ 
                "elance] = @Original_nRelance)) AND ((@IsNull_DateRelance = 1 AND [DateRelance] I"& _ 
                "S NULL) OR ([DateRelance] = @Original_DateRelance)) AND ((@IsNull_DateImpr = 1 A"& _ 
                "ND [DateImpr] IS NULL) OR ([DateImpr] = @Original_DateImpr)) AND ((@IsNull_TxCom"& _ 
                "mission = 1 AND [TxCommission] IS NULL) OR ([TxCommission] = @Original_TxCommiss"& _ 
                "ion)) AND ((@IsNull_IsComPaye = 1 AND [IsComPaye] IS NULL) OR ([IsComPaye] = @Or"& _ 
                "iginal_IsComPaye)) AND ((@IsNull_Depot = 1 AND [Depot] IS NULL) OR ([Depot] = @O"& _ 
                "riginal_Depot)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrigine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPrescripteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPayeur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nContact", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nContact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Secteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExportCompta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEcheance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DatePreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nRelance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRelance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nRelance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRelance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateImpr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateImpr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateImpr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateImpr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsComPaye", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsComPaye", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsComPaye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsComPaye", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VFacture] ([nDevis], [Origine], [nOrigine], [nClient], [Adress"& _ 
                "eFacture], [nPrescripteur], [nPayeur], [nContact], [nCommercial], [Secteur], [Fa"& _ 
                "cturationPrescripteur], [FacturationClient], [nFacture], [DateFacture], [Paye], "& _ 
                "[ExportCompta], [DateExportCompta], [DateEcheance], [Observation], [DateRelance1"& _ 
                "], [DateRelance2], [Remise], [MontantHT], [MontantTVA], [MontantTTC], [nPreFactu"& _ 
                "ration], [DatePreFacturation], [FacturationTTC], [nTarif], [nRelance], [DateRela"& _ 
                "nce], [DateImpr], [TxCommission], [IsComPaye], [Depot]) VALUES (@nDevis, @Origin"& _ 
                "e, @nOrigine, @nClient, @AdresseFacture, @nPrescripteur, @nPayeur, @nContact, @n"& _ 
                "Commercial, @Secteur, @FacturationPrescripteur, @FacturationClient, @nFacture, @"& _ 
                "DateFacture, @Paye, @ExportCompta, @DateExportCompta, @DateEcheance, @Observatio"& _ 
                "n, @DateRelance1, @DateRelance2, @Remise, @MontantHT, @MontantTVA, @MontantTTC, "& _ 
                "@nPreFacturation, @DatePreFacturation, @FacturationTTC, @nTarif, @nRelance, @Dat"& _ 
                "eRelance, @DateImpr, @TxCommission, @IsComPaye, @Depot);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDevis, Origine"& _ 
                ", nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommerci"& _ 
                "al, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, "& _ 
                "Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, D"& _ 
                "ateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePre"& _ 
                "Facturation, FacturationTTC, nTarif, nRelance, DateRelance, DateImpr, TxCommissi"& _ 
                "on, IsComPaye, Depot FROM VFacture WHERE (nDevis = @nDevis)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Origine", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Origine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseFacture", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPayeur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observation", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRelance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRelance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateImpr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateImpr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsComPaye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsComPaye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VFacture] SET [nDevis] = @nDevis, [Origine] = @Origine, [nOrigine] "& _ 
                "= @nOrigine, [nClient] = @nClient, [AdresseFacture] = @AdresseFacture, [nPrescri"& _ 
                "pteur] = @nPrescripteur, [nPayeur] = @nPayeur, [nContact] = @nContact, [nCommerc"& _ 
                "ial] = @nCommercial, [Secteur] = @Secteur, [FacturationPrescripteur] = @Facturat"& _ 
                "ionPrescripteur, [FacturationClient] = @FacturationClient, [nFacture] = @nFactur"& _ 
                "e, [DateFacture] = @DateFacture, [Paye] = @Paye, [ExportCompta] = @ExportCompta,"& _ 
                " [DateExportCompta] = @DateExportCompta, [DateEcheance] = @DateEcheance, [Observ"& _ 
                "ation] = @Observation, [DateRelance1] = @DateRelance1, [DateRelance2] = @DateRel"& _ 
                "ance2, [Remise] = @Remise, [MontantHT] = @MontantHT, [MontantTVA] = @MontantTVA,"& _ 
                " [MontantTTC] = @MontantTTC, [nPreFacturation] = @nPreFacturation, [DatePreFactu"& _ 
                "ration] = @DatePreFacturation, [FacturationTTC] = @FacturationTTC, [nTarif] = @n"& _ 
                "Tarif, [nRelance] = @nRelance, [DateRelance] = @DateRelance, [DateImpr] = @DateI"& _ 
                "mpr, [TxCommission] = @TxCommission, [IsComPaye] = @IsComPaye, [Depot] = @Depot "& _ 
                "WHERE (([nDevis] = @Original_nDevis) AND ((@IsNull_nOrigine = 1 AND [nOrigine] I"& _ 
                "S NULL) OR ([nOrigine] = @Original_nOrigine)) AND ((@IsNull_nClient = 1 AND [nCl"& _ 
                "ient] IS NULL) OR ([nClient] = @Original_nClient)) AND ((@IsNull_nPrescripteur ="& _ 
                " 1 AND [nPrescripteur] IS NULL) OR ([nPrescripteur] = @Original_nPrescripteur)) "& _ 
                "AND ((@IsNull_nPayeur = 1 AND [nPayeur] IS NULL) OR ([nPayeur] = @Original_nPaye"& _ 
                "ur)) AND ((@IsNull_nContact = 1 AND [nContact] IS NULL) OR ([nContact] = @Origin"& _ 
                "al_nContact)) AND ((@IsNull_nCommercial = 1 AND [nCommercial] IS NULL) OR ([nCom"& _ 
                "mercial] = @Original_nCommercial)) AND ((@IsNull_Secteur = 1 AND [Secteur] IS NU"& _ 
                "LL) OR ([Secteur] = @Original_Secteur)) AND ([FacturationPrescripteur] = @Origin"& _ 
                "al_FacturationPrescripteur) AND ([FacturationClient] = @Original_FacturationClie"& _ 
                "nt) AND ((@IsNull_nFacture = 1 AND [nFacture] IS NULL) OR ([nFacture] = @Origina"& _ 
                "l_nFacture)) AND ((@IsNull_DateFacture = 1 AND [DateFacture] IS NULL) OR ([DateF"& _ 
                "acture] = @Original_DateFacture)) AND ([Paye] = @Original_Paye) AND ([ExportComp"& _ 
                "ta] = @Original_ExportCompta) AND ((@IsNull_DateExportCompta = 1 AND [DateExport"& _ 
                "Compta] IS NULL) OR ([DateExportCompta] = @Original_DateExportCompta)) AND ((@Is"& _ 
                "Null_DateEcheance = 1 AND [DateEcheance] IS NULL) OR ([DateEcheance] = @Original"& _ 
                "_DateEcheance)) AND ((@IsNull_DateRelance1 = 1 AND [DateRelance1] IS NULL) OR (["& _ 
                "DateRelance1] = @Original_DateRelance1)) AND ((@IsNull_DateRelance2 = 1 AND [Dat"& _ 
                "eRelance2] IS NULL) OR ([DateRelance2] = @Original_DateRelance2)) AND ((@IsNull_"& _ 
                "Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Original_Remise)) AND ((@IsNull"& _ 
                "_MontantHT = 1 AND [MontantHT] IS NULL) OR ([MontantHT] = @Original_MontantHT)) "& _ 
                "AND ((@IsNull_MontantTVA = 1 AND [MontantTVA] IS NULL) OR ([MontantTVA] = @Origi"& _ 
                "nal_MontantTVA)) AND ((@IsNull_MontantTTC = 1 AND [MontantTTC] IS NULL) OR ([Mon"& _ 
                "tantTTC] = @Original_MontantTTC)) AND ((@IsNull_nPreFacturation = 1 AND [nPreFac"& _ 
                "turation] IS NULL) OR ([nPreFacturation] = @Original_nPreFacturation)) AND ((@Is"& _ 
                "Null_DatePreFacturation = 1 AND [DatePreFacturation] IS NULL) OR ([DatePreFactur"& _ 
                "ation] = @Original_DatePreFacturation)) AND ((@IsNull_FacturationTTC = 1 AND [Fa"& _ 
                "cturationTTC] IS NULL) OR ([FacturationTTC] = @Original_FacturationTTC)) AND ((@"& _ 
                "IsNull_nTarif = 1 AND [nTarif] IS NULL) OR ([nTarif] = @Original_nTarif)) AND (("& _ 
                "@IsNull_nRelance = 1 AND [nRelance] IS NULL) OR ([nRelance] = @Original_nRelance"& _ 
                ")) AND ((@IsNull_DateRelance = 1 AND [DateRelance] IS NULL) OR ([DateRelance] = "& _ 
                "@Original_DateRelance)) AND ((@IsNull_DateImpr = 1 AND [DateImpr] IS NULL) OR (["& _ 
                "DateImpr] = @Original_DateImpr)) AND ((@IsNull_TxCommission = 1 AND [TxCommissio"& _ 
                "n] IS NULL) OR ([TxCommission] = @Original_TxCommission)) AND ((@IsNull_IsComPay"& _ 
                "e = 1 AND [IsComPaye] IS NULL) OR ([IsComPaye] = @Original_IsComPaye)) AND ((@Is"& _ 
                "Null_Depot = 1 AND [Depot] IS NULL) OR ([Depot] = @Original_Depot)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nD"& _ 
                "evis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nConta"& _ 
                "ct, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, "& _ 
                "DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, Da"& _ 
                "teRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFactura"& _ 
                "tion, DatePreFacturation, FacturationTTC, nTarif, nRelance, DateRelance, DateImp"& _ 
                "r, TxCommission, IsComPaye, Depot FROM VFacture WHERE (nDevis = @nDevis)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Origine", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Origine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseFacture", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPayeur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observation", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRelance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRelance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateImpr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateImpr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsComPaye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsComPaye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrigine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPrescripteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPayeur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nContact", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nContact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Secteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExportCompta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEcheance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DatePreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nRelance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRelance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nRelance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRelance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateImpr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateImpr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateImpr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateImpr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsComPaye", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsComPaye", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsComPaye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsComPaye", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.RecalculPiecesAgrifact.My.MySettings.Default.AgrifactConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur"& _ 
                ", nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nF"& _ 
                "acture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observa"& _ 
                "tion, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPr"& _ 
                "eFacturation, DatePreFacturation, FacturationTTC, nTarif, nRelance, DateRelance,"& _ 
                " DateImpr, TxCommission, IsComPaye, Depot FROM dbo.VFacture"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, "& _ 
                "nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationCli"& _ 
                "ent, nFacture, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         DateFacture, Paye, ExportCompta, DateE"& _ 
                "xportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, Mont"& _ 
                "antHT, MontantTVA, MontantTTC, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         nPreFacturation, DateP"& _ 
                "reFacturation, FacturationTTC, nTarif, nRelance, DateRelance, DateImpr, TxCommis"& _ 
                "sion, IsComPaye, Depot"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFacture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (FacturationTTC ="& _ 
                " @FacturationTTC)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY nDevis DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur"& _ 
                ", nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nF"& _ 
                "acture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observa"& _ 
                "tion, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPr"& _ 
                "eFacturation, DatePreFacturation, FacturationTTC, nTarif, nRelance, DateRelance,"& _ 
                " DateImpr, TxCommission, IsComPaye, Depot FROM dbo.VFacture WHERE nDevis=@nDevis"& _ 
                ""
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE [dbo].[VFacture] SET [MontantHT] = @MontantHT, [MontantTVA] = @MontantTVA,"& _ 
                " [MontantTTC] = @MontantTTC WHERE ([nDevis] = @nDevis)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAgrifact.VFactureDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAgrifact.VFactureDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAgrifact.VFactureDataTable = New DataSetAgrifact.VFactureDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFacturationTTC(ByVal dataTable As DataSetAgrifact.VFactureDataTable, ByVal FacturationTTC As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFacturationTTC(ByVal FacturationTTC As Global.System.Nullable(Of Boolean)) As DataSetAgrifact.VFactureDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetAgrifact.VFactureDataTable = New DataSetAgrifact.VFactureDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynDevis(ByVal dataTable As DataSetAgrifact.VFactureDataTable, ByVal nDevis As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynDevis(ByVal nDevis As Decimal) As DataSetAgrifact.VFactureDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            Dim dataTable As DataSetAgrifact.VFactureDataTable = New DataSetAgrifact.VFactureDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAgrifact.VFactureDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAgrifact) As Integer
            Return Me.Adapter.Update(dataSet, "VFacture")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nRelance As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DateRelance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateImpr As Global.System.Nullable(Of Date),  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IsComPaye As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Depot As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDevis,Decimal)
            If (Original_nOrigine.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nOrigine.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_nClient.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nClient.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_nPrescripteur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_nPayeur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_nPayeur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_nContact.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_nContact.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_nCommercial.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Secteur Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Secteur,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_FacturationPrescripteur,Boolean)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_FacturationClient,Boolean)
            If (Original_nFacture.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_nFacture.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_DateFacture.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_DateFacture.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_Paye,Boolean)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_ExportCompta,Boolean)
            If (Original_DateExportCompta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_DateExportCompta.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEcheance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_DateEcheance.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_DateRelance1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_DateRelance2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_MontantHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MontantTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_MontantTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_nPreFacturation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_DatePreFacturation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_DatePreFacturation.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_nRelance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_nRelance.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_DateRelance.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_DateImpr.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_DateImpr.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_TxCommission.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_TxCommission.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_IsComPaye.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_IsComPaye.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_Depot Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_Depot,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal nRelance As Global.System.Nullable(Of Integer),  _
                    ByVal DateRelance As Global.System.Nullable(Of Date),  _
                    ByVal DateImpr As Global.System.Nullable(Of Date),  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal IsComPaye As Global.System.Nullable(Of Boolean),  _
                    ByVal Depot As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Origine Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Origine,String)
            End If
            If (nOrigine.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nOrigine.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (nClient.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(nClient.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AdresseFacture Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AdresseFacture,String)
            End If
            If (nPrescripteur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (nPayeur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(nPayeur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (nContact.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(nContact.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(nCommercial.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Secteur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Secteur,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(FacturationPrescripteur,Boolean)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(FacturationClient,Boolean)
            If (nFacture.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(nFacture.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (DateFacture.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(DateFacture.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(Paye,Boolean)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(ExportCompta,Boolean)
            If (DateExportCompta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(DateExportCompta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (DateEcheance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(DateEcheance.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Observation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Observation,String)
            End If
            If (DateRelance1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(DateRelance1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (DateRelance2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(DateRelance2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MontantHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(MontantHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(MontantTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(MontantTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (nPreFacturation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (DatePreFacturation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(DatePreFacturation.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (nRelance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(nRelance.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (DateRelance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(DateRelance.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DateImpr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DateImpr.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (TxCommission.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(TxCommission.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (IsComPaye.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(IsComPaye.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Depot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Depot,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal nRelance As Global.System.Nullable(Of Integer),  _
                    ByVal DateRelance As Global.System.Nullable(Of Date),  _
                    ByVal DateImpr As Global.System.Nullable(Of Date),  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal IsComPaye As Global.System.Nullable(Of Boolean),  _
                    ByVal Depot As String,  _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nRelance As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DateRelance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateImpr As Global.System.Nullable(Of Date),  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IsComPaye As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Depot As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Origine Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Origine,String)
            End If
            If (nOrigine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nOrigine.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (nClient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(nClient.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AdresseFacture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AdresseFacture,String)
            End If
            If (nPrescripteur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (nPayeur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(nPayeur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (nContact.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(nContact.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(nCommercial.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Secteur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Secteur,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(FacturationPrescripteur,Boolean)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(FacturationClient,Boolean)
            If (nFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(nFacture.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (DateFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(DateFacture.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Paye,Boolean)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ExportCompta,Boolean)
            If (DateExportCompta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(DateExportCompta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (DateEcheance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(DateEcheance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Observation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Observation,String)
            End If
            If (DateRelance1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(DateRelance1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (DateRelance2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(DateRelance2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MontantHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(MontantHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(MontantTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(MontantTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (nPreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (DatePreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(DatePreFacturation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (nRelance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(nRelance.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (DateRelance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(DateRelance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DateImpr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(DateImpr.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (TxCommission.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(TxCommission.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (IsComPaye.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(IsComPaye.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Depot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Depot,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_nDevis,Decimal)
            If (Original_nOrigine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_nOrigine.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_nClient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_nClient.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_nPrescripteur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_nPayeur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_nPayeur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_nContact.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_nContact.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_nCommercial.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_Secteur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Secteur,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_FacturationPrescripteur,Boolean)
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_FacturationClient,Boolean)
            If (Original_nFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_nFacture.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_DateFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_DateFacture.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_Paye,Boolean)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_ExportCompta,Boolean)
            If (Original_DateExportCompta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_DateExportCompta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEcheance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_DateEcheance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_DateRelance1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_DateRelance2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_MontantHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_MontantTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_MontantTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_nPreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_DatePreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_DatePreFacturation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_nRelance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_nRelance.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_DateRelance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original_DateImpr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_DateImpr.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original_TxCommission.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_TxCommission.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (Original_IsComPaye.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_IsComPaye.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (Original_Depot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_Depot,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal nRelance As Global.System.Nullable(Of Integer),  _
                    ByVal DateRelance As Global.System.Nullable(Of Date),  _
                    ByVal DateImpr As Global.System.Nullable(Of Date),  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal IsComPaye As Global.System.Nullable(Of Boolean),  _
                    ByVal Depot As String,  _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nRelance As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DateRelance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateImpr As Global.System.Nullable(Of Date),  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IsComPaye As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Depot As String) As Integer
            Return Me.Update(Original_nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC, nTarif, nRelance, DateRelance, DateImpr, TxCommission, IsComPaye, Depot, Original_nDevis, Original_nOrigine, Original_nClient, Original_nPrescripteur, Original_nPayeur, Original_nContact, Original_nCommercial, Original_Secteur, Original_FacturationPrescripteur, Original_FacturationClient, Original_nFacture, Original_DateFacture, Original_Paye, Original_ExportCompta, Original_DateExportCompta, Original_DateEcheance, Original_DateRelance1, Original_DateRelance2, Original_Remise, Original_MontantHT, Original_MontantTVA, Original_MontantTTC, Original_nPreFacturation, Original_DatePreFacturation, Original_FacturationTTC, Original_nTarif, Original_nRelance, Original_DateRelance, Original_DateImpr, Original_TxCommission, Original_IsComPaye, Original_Depot)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMontants(ByVal MontantHT As Global.System.Nullable(Of Decimal), ByVal MontantTVA As Global.System.Nullable(Of Decimal), ByVal MontantTTC As Global.System.Nullable(Of Decimal), ByVal nDevis As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (MontantHT.HasValue = true) Then
                command.Parameters(0).Value = CType(MontantHT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                command.Parameters(1).Value = CType(MontantTVA.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                command.Parameters(2).Value = CType(MontantTTC.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            command.Parameters(3).Value = CType(nDevis,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VFacture_DetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VFacture_Detail"
            tableMapping.ColumnMappings.Add("nDetailDevis", "nDetailDevis")
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("nLigne", "nLigne")
            tableMapping.ColumnMappings.Add("NLot", "NLot")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("NbParution", "NbParution")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("LibUnite1", "LibUnite1")
            tableMapping.ColumnMappings.Add("Unite2", "Unite2")
            tableMapping.ColumnMappings.Add("LibUnite2", "LibUnite2")
            tableMapping.ColumnMappings.Add("PrixUHT", "PrixUHT")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("TxTva", "TxTva")
            tableMapping.ColumnMappings.Add("PrixUTVA", "PrixUTVA")
            tableMapping.ColumnMappings.Add("PrixUTTC", "PrixUTTC")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("MontantLigneHT", "MontantLigneHT")
            tableMapping.ColumnMappings.Add("MontantLigneTVA", "MontantLigneTVA")
            tableMapping.ColumnMappings.Add("MontantLigneTTC", "MontantLigneTTC")
            tableMapping.ColumnMappings.Add("NCompte", "NCompte")
            tableMapping.ColumnMappings.Add("NActivite", "NActivite")
            tableMapping.ColumnMappings.Add("PrixUAchatHT", "PrixUAchatHT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VFacture_Detail] WHERE (([nDetailDevis] = @Original_nDetailDev"& _ 
                "is) AND ((@IsNull_nDevis = 1 AND [nDevis] IS NULL) OR ([nDevis] = @Original_nDev"& _ 
                "is)) AND ((@IsNull_nLigne = 1 AND [nLigne] IS NULL) OR ([nLigne] = @Original_nLi"& _ 
                "gne)) AND ((@IsNull_NLot = 1 AND [NLot] IS NULL) OR ([NLot] = @Original_NLot)) A"& _ 
                "ND ((@IsNull_CodeProduit = 1 AND [CodeProduit] IS NULL) OR ([CodeProduit] = @Ori"& _ 
                "ginal_CodeProduit)) AND ((@IsNull_NbParution = 1 AND [NbParution] IS NULL) OR (["& _ 
                "NbParution] = @Original_NbParution)) AND ((@IsNull_Unite1 = 1 AND [Unite1] IS NU"& _ 
                "LL) OR ([Unite1] = @Original_Unite1)) AND ((@IsNull_LibUnite1 = 1 AND [LibUnite1"& _ 
                "] IS NULL) OR ([LibUnite1] = @Original_LibUnite1)) AND ((@IsNull_Unite2 = 1 AND "& _ 
                "[Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) AND ((@IsNull_LibUnite2 = 1 "& _ 
                "AND [LibUnite2] IS NULL) OR ([LibUnite2] = @Original_LibUnite2)) AND ((@IsNull_P"& _ 
                "rixUHT = 1 AND [PrixUHT] IS NULL) OR ([PrixUHT] = @Original_PrixUHT)) AND ((@IsN"& _ 
                "ull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA)) AND ((@IsNull_TxT"& _ 
                "va = 1 AND [TxTva] IS NULL) OR ([TxTva] = @Original_TxTva)) AND ((@IsNull_PrixUT"& _ 
                "VA = 1 AND [PrixUTVA] IS NULL) OR ([PrixUTVA] = @Original_PrixUTVA)) AND ((@IsNu"& _ 
                "ll_PrixUTTC = 1 AND [PrixUTTC] IS NULL) OR ([PrixUTTC] = @Original_PrixUTTC)) AN"& _ 
                "D ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Original_Remise)) A"& _ 
                "ND ((@IsNull_MontantLigneHT = 1 AND [MontantLigneHT] IS NULL) OR ([MontantLigneH"& _ 
                "T] = @Original_MontantLigneHT)) AND ((@IsNull_MontantLigneTVA = 1 AND [MontantLi"& _ 
                "gneTVA] IS NULL) OR ([MontantLigneTVA] = @Original_MontantLigneTVA)) AND ((@IsNu"& _ 
                "ll_MontantLigneTTC = 1 AND [MontantLigneTTC] IS NULL) OR ([MontantLigneTTC] = @O"& _ 
                "riginal_MontantLigneTTC)) AND ((@IsNull_NCompte = 1 AND [NCompte] IS NULL) OR (["& _ 
                "NCompte] = @Original_NCompte)) AND ((@IsNull_NActivite = 1 AND [NActivite] IS NU"& _ 
                "LL) OR ([NActivite] = @Original_NActivite)) AND ((@IsNull_PrixUAchatHT = 1 AND ["& _ 
                "PrixUAchatHT] IS NULL) OR ([PrixUAchatHT] = @Original_PrixUAchatHT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDevis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeProduit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NbParution", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NbParution", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxTva", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxTva", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActivite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUAchatHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VFacture_Detail] ([nDetailDevis], [nDevis], [nLigne], [NLot], "& _ 
                "[CodeProduit], [Libelle], [NbParution], [Unite1], [LibUnite1], [Unite2], [LibUni"& _ 
                "te2], [PrixUHT], [TTVA], [TxTva], [PrixUTVA], [PrixUTTC], [Remise], [MontantLign"& _ 
                "eHT], [MontantLigneTVA], [MontantLigneTTC], [NCompte], [NActivite], [PrixUAchatH"& _ 
                "T]) VALUES (@nDetailDevis, @nDevis, @nLigne, @NLot, @CodeProduit, @Libelle, @NbP"& _ 
                "arution, @Unite1, @LibUnite1, @Unite2, @LibUnite2, @PrixUHT, @TTVA, @TxTva, @Pri"& _ 
                "xUTVA, @PrixUTTC, @Remise, @MontantLigneHT, @MontantLigneTVA, @MontantLigneTTC, "& _ 
                "@NCompte, @NActivite, @PrixUAchatHT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, NLot"& _ 
                ", CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUH"& _ 
                "T, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, Mon"& _ 
                "tantLigneTTC, NCompte, NActivite, PrixUAchatHT FROM VFacture_Detail WHERE (nDeta"& _ 
                "ilDevis = @nDetailDevis)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VFacture_Detail] SET [nDetailDevis] = @nDetailDevis, [nDevis] = @nD"& _ 
                "evis, [nLigne] = @nLigne, [NLot] = @NLot, [CodeProduit] = @CodeProduit, [Libelle"& _ 
                "] = @Libelle, [NbParution] = @NbParution, [Unite1] = @Unite1, [LibUnite1] = @Lib"& _ 
                "Unite1, [Unite2] = @Unite2, [LibUnite2] = @LibUnite2, [PrixUHT] = @PrixUHT, [TTV"& _ 
                "A] = @TTVA, [TxTva] = @TxTva, [PrixUTVA] = @PrixUTVA, [PrixUTTC] = @PrixUTTC, [R"& _ 
                "emise] = @Remise, [MontantLigneHT] = @MontantLigneHT, [MontantLigneTVA] = @Monta"& _ 
                "ntLigneTVA, [MontantLigneTTC] = @MontantLigneTTC, [NCompte] = @NCompte, [NActivi"& _ 
                "te] = @NActivite, [PrixUAchatHT] = @PrixUAchatHT WHERE (([nDetailDevis] = @Origi"& _ 
                "nal_nDetailDevis) AND ((@IsNull_nDevis = 1 AND [nDevis] IS NULL) OR ([nDevis] = "& _ 
                "@Original_nDevis)) AND ((@IsNull_nLigne = 1 AND [nLigne] IS NULL) OR ([nLigne] ="& _ 
                " @Original_nLigne)) AND ((@IsNull_NLot = 1 AND [NLot] IS NULL) OR ([NLot] = @Ori"& _ 
                "ginal_NLot)) AND ((@IsNull_CodeProduit = 1 AND [CodeProduit] IS NULL) OR ([CodeP"& _ 
                "roduit] = @Original_CodeProduit)) AND ((@IsNull_NbParution = 1 AND [NbParution] "& _ 
                "IS NULL) OR ([NbParution] = @Original_NbParution)) AND ((@IsNull_Unite1 = 1 AND "& _ 
                "[Unite1] IS NULL) OR ([Unite1] = @Original_Unite1)) AND ((@IsNull_LibUnite1 = 1 "& _ 
                "AND [LibUnite1] IS NULL) OR ([LibUnite1] = @Original_LibUnite1)) AND ((@IsNull_U"& _ 
                "nite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) AND ((@IsNull_"& _ 
                "LibUnite2 = 1 AND [LibUnite2] IS NULL) OR ([LibUnite2] = @Original_LibUnite2)) A"& _ 
                "ND ((@IsNull_PrixUHT = 1 AND [PrixUHT] IS NULL) OR ([PrixUHT] = @Original_PrixUH"& _ 
                "T)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA)) AND"& _ 
                " ((@IsNull_TxTva = 1 AND [TxTva] IS NULL) OR ([TxTva] = @Original_TxTva)) AND (("& _ 
                "@IsNull_PrixUTVA = 1 AND [PrixUTVA] IS NULL) OR ([PrixUTVA] = @Original_PrixUTVA"& _ 
                ")) AND ((@IsNull_PrixUTTC = 1 AND [PrixUTTC] IS NULL) OR ([PrixUTTC] = @Original"& _ 
                "_PrixUTTC)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Origi"& _ 
                "nal_Remise)) AND ((@IsNull_MontantLigneHT = 1 AND [MontantLigneHT] IS NULL) OR ("& _ 
                "[MontantLigneHT] = @Original_MontantLigneHT)) AND ((@IsNull_MontantLigneTVA = 1 "& _ 
                "AND [MontantLigneTVA] IS NULL) OR ([MontantLigneTVA] = @Original_MontantLigneTVA"& _ 
                ")) AND ((@IsNull_MontantLigneTTC = 1 AND [MontantLigneTTC] IS NULL) OR ([Montant"& _ 
                "LigneTTC] = @Original_MontantLigneTTC)) AND ((@IsNull_NCompte = 1 AND [NCompte] "& _ 
                "IS NULL) OR ([NCompte] = @Original_NCompte)) AND ((@IsNull_NActivite = 1 AND [NA"& _ 
                "ctivite] IS NULL) OR ([NActivite] = @Original_NActivite)) AND ((@IsNull_PrixUAch"& _ 
                "atHT = 1 AND [PrixUAchatHT] IS NULL) OR ([PrixUAchatHT] = @Original_PrixUAchatHT"& _ 
                ")));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParutio"& _ 
                "n, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTT"& _ 
                "C, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite,"& _ 
                " PrixUAchatHT FROM VFacture_Detail WHERE (nDetailDevis = @nDetailDevis)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDevis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeProduit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NbParution", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NbParution", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxTva", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxTva", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActivite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUAchatHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.RecalculPiecesAgrifact.My.MySettings.Default.AgrifactConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unit"& _ 
                "e1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remi"& _ 
                "se, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUA"& _ 
                "chatHT FROM dbo.VFacture_Detail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParutio"& _ 
                "n, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTT"& _ 
                "C, Remise, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         MontantLigneHT, MontantLigneTVA, MontantLi"& _ 
                "gneTTC, NCompte, NActivite, PrixUAchatHT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VFacture_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                "        (nDevis = @nDevis) AND (CodeProduit IS NOT NULL)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE [dbo].[VFacture_Detail] SET [MontantLigneHT] = @MontantLigneHT, [MontantLi"& _ 
                "gneTVA] = @MontantLigneTVA, [MontantLigneTTC] = @MontantLigneTTC WHERE ([nDetail"& _ 
                "Devis] = @nDetailDevis)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAgrifact.VFacture_DetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAgrifact.VFacture_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAgrifact.VFacture_DetailDataTable = New DataSetAgrifact.VFacture_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynDevis(ByVal dataTable As DataSetAgrifact.VFacture_DetailDataTable, ByVal nDevis As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynDevis(ByVal nDevis As Global.System.Nullable(Of Decimal)) As DataSetAgrifact.VFacture_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetAgrifact.VFacture_DetailDataTable = New DataSetAgrifact.VFacture_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAgrifact.VFacture_DetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAgrifact) As Integer
            Return Me.Adapter.Update(dataSet, "VFacture_Detail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDetailDevis,Decimal)
            If (Original_nDevis.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nDevis.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_nLigne.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nLigne.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_NLot Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_NLot,String)
            End If
            If (Original_CodeProduit Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_NbParution.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_NbParution.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Unite1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Unite1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_LibUnite1,String)
            End If
            If (Original_Unite2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Unite2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_LibUnite2,String)
            End If
            If (Original_PrixUHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PrixUHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_TTVA,String)
            End If
            If (Original_TxTva.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_TxTva.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompte Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_NCompte,String)
            End If
            If (Original_NActivite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_NActivite,String)
            End If
            If (Original_PrixUAchatHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nDetailDevis,Decimal)
            If (nDevis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (nLigne.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nLigne.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NLot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NLot,String)
            End If
            If (CodeProduit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Libelle,String)
            End If
            If (NbParution.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NbParution.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Unite1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Unite1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LibUnite1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LibUnite1,String)
            End If
            If (Unite2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Unite2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LibUnite2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LibUnite2,String)
            End If
            If (PrixUHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrixUHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(TTVA,String)
            End If
            If (TxTva.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(TxTva.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrixUTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrixUTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(NActivite,String)
            End If
            If (PrixUAchatHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nDetailDevis,Decimal)
            If (nDevis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (nLigne.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nLigne.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NLot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NLot,String)
            End If
            If (CodeProduit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Libelle,String)
            End If
            If (NbParution.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NbParution.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Unite1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Unite1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LibUnite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(LibUnite1,String)
            End If
            If (Unite2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Unite2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LibUnite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LibUnite2,String)
            End If
            If (PrixUHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PrixUHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(TTVA,String)
            End If
            If (TxTva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(TxTva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrixUTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrixUTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(NActivite,String)
            End If
            If (PrixUAchatHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_nDetailDevis,Decimal)
            If (Original_nDevis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_nDevis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_nLigne.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_nLigne.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_NLot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_NLot,String)
            End If
            If (Original_CodeProduit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_NbParution.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_NbParution.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_Unite1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Unite1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_LibUnite1,String)
            End If
            If (Original_Unite2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Unite2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_LibUnite2,String)
            End If
            If (Original_PrixUHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_PrixUHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_TTVA,String)
            End If
            If (Original_TxTva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_TxTva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_NCompte,String)
            End If
            If (Original_NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_NActivite,String)
            End If
            If (Original_PrixUAchatHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUAchatHT, Original_nDetailDevis, Original_nDevis, Original_nLigne, Original_NLot, Original_CodeProduit, Original_NbParution, Original_Unite1, Original_LibUnite1, Original_Unite2, Original_LibUnite2, Original_PrixUHT, Original_TTVA, Original_TxTva, Original_PrixUTVA, Original_PrixUTTC, Original_Remise, Original_MontantLigneHT, Original_MontantLigneTVA, Original_MontantLigneTTC, Original_NCompte, Original_NActivite, Original_PrixUAchatHT)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMontants(ByVal MontantLigneHT As Global.System.Nullable(Of Decimal), ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal), ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal), ByVal nDetailDevis As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (MontantLigneHT.HasValue = true) Then
                command.Parameters(0).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                command.Parameters(1).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                command.Parameters(2).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            command.Parameters(3).Value = CType(nDetailDevis,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProduitTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Produit"
            tableMapping.ColumnMappings.Add("nProduit", "nProduit")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("LibelleLong", "LibelleLong")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("PrixAHT", "PrixAHT")
            tableMapping.ColumnMappings.Add("PrixATTC", "PrixATTC")
            tableMapping.ColumnMappings.Add("PrixVHT", "PrixVHT")
            tableMapping.ColumnMappings.Add("PrixVTTC", "PrixVTTC")
            tableMapping.ColumnMappings.Add("IsPrixHT", "IsPrixHT")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("Unite2", "Unite2")
            tableMapping.ColumnMappings.Add("ProduitAchat", "ProduitAchat")
            tableMapping.ColumnMappings.Add("ProduitVente", "ProduitVente")
            tableMapping.ColumnMappings.Add("NCompteA", "NCompteA")
            tableMapping.ColumnMappings.Add("NActiviteA", "NActiviteA")
            tableMapping.ColumnMappings.Add("NCompteV", "NCompteV")
            tableMapping.ColumnMappings.Add("NActiviteV", "NActiviteV")
            tableMapping.ColumnMappings.Add("Famille1", "Famille1")
            tableMapping.ColumnMappings.Add("Famille2", "Famille2")
            tableMapping.ColumnMappings.Add("Famille3", "Famille3")
            tableMapping.ColumnMappings.Add("U1U2Independant", "U1U2Independant")
            tableMapping.ColumnMappings.Add("U1xU2", "U1xU2")
            tableMapping.ColumnMappings.Add("CodeBarre", "CodeBarre")
            tableMapping.ColumnMappings.Add("Inactif", "Inactif")
            tableMapping.ColumnMappings.Add("CoefU2", "CoefU2")
            tableMapping.ColumnMappings.Add("TypeFacturation", "TypeFacturation")
            tableMapping.ColumnMappings.Add("CoefAV", "CoefAV")
            tableMapping.ColumnMappings.Add("ProduitCompose", "ProduitCompose")
            tableMapping.ColumnMappings.Add("Image", "Image")
            tableMapping.ColumnMappings.Add("GestionStock", "GestionStock")
            tableMapping.ColumnMappings.Add("DecompteAuto", "DecompteAuto")
            tableMapping.ColumnMappings.Add("RefFournisseur", "RefFournisseur")
            tableMapping.ColumnMappings.Add("nFournisseur", "nFournisseur")
            tableMapping.ColumnMappings.Add("IsSortieImpr", "IsSortieImpr")
            tableMapping.ColumnMappings.Add("IsEnVente", "IsEnVente")
            tableMapping.ColumnMappings.Add("AMM", "AMM")
            tableMapping.ColumnMappings.Add("TAXSM", "TAXSM")
            tableMapping.ColumnMappings.Add("IsAMM", "IsAMM")
            tableMapping.ColumnMappings.Add("DateMaj", "DateMaj")
            tableMapping.ColumnMappings.Add("isComm", "isComm")
            tableMapping.ColumnMappings.Add("Conditionnement", "Conditionnement")
            tableMapping.ColumnMappings.Add("SeuilStock", "SeuilStock")
            tableMapping.ColumnMappings.Add("NCompteX", "NCompteX")
            tableMapping.ColumnMappings.Add("NActiviteX", "NActiviteX")
            tableMapping.ColumnMappings.Add("Ingredients", "Ingredients")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Produit] WHERE (([nProduit] = @Original_nProduit) AND ([CodePr"& _ 
                "oduit] = @Original_CodeProduit) AND ((@IsNull_Libelle = 1 AND [Libelle] IS NULL)"& _ 
                " OR ([Libelle] = @Original_Libelle)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) "& _ 
                "OR ([TTVA] = @Original_TTVA)) AND ((@IsNull_PrixAHT = 1 AND [PrixAHT] IS NULL) O"& _ 
                "R ([PrixAHT] = @Original_PrixAHT)) AND ((@IsNull_PrixATTC = 1 AND [PrixATTC] IS "& _ 
                "NULL) OR ([PrixATTC] = @Original_PrixATTC)) AND ((@IsNull_PrixVHT = 1 AND [PrixV"& _ 
                "HT] IS NULL) OR ([PrixVHT] = @Original_PrixVHT)) AND ((@IsNull_PrixVTTC = 1 AND "& _ 
                "[PrixVTTC] IS NULL) OR ([PrixVTTC] = @Original_PrixVTTC)) AND ([IsPrixHT] = @Ori"& _ 
                "ginal_IsPrixHT) AND ((@IsNull_Unite1 = 1 AND [Unite1] IS NULL) OR ([Unite1] = @O"& _ 
                "riginal_Unite1)) AND ((@IsNull_Unite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @"& _ 
                "Original_Unite2)) AND ([ProduitAchat] = @Original_ProduitAchat) AND ([ProduitVen"& _ 
                "te] = @Original_ProduitVente) AND ((@IsNull_NCompteA = 1 AND [NCompteA] IS NULL)"& _ 
                " OR ([NCompteA] = @Original_NCompteA)) AND ((@IsNull_NActiviteA = 1 AND [NActivi"& _ 
                "teA] IS NULL) OR ([NActiviteA] = @Original_NActiviteA)) AND ((@IsNull_NCompteV ="& _ 
                " 1 AND [NCompteV] IS NULL) OR ([NCompteV] = @Original_NCompteV)) AND ((@IsNull_N"& _ 
                "ActiviteV = 1 AND [NActiviteV] IS NULL) OR ([NActiviteV] = @Original_NActiviteV)"& _ 
                ") AND ((@IsNull_Famille1 = 1 AND [Famille1] IS NULL) OR ([Famille1] = @Original_"& _ 
                "Famille1)) AND ((@IsNull_Famille2 = 1 AND [Famille2] IS NULL) OR ([Famille2] = @"& _ 
                "Original_Famille2)) AND ((@IsNull_Famille3 = 1 AND [Famille3] IS NULL) OR ([Fami"& _ 
                "lle3] = @Original_Famille3)) AND ((@IsNull_U1U2Independant = 1 AND [U1U2Independ"& _ 
                "ant] IS NULL) OR ([U1U2Independant] = @Original_U1U2Independant)) AND ((@IsNull_"& _ 
                "U1xU2 = 1 AND [U1xU2] IS NULL) OR ([U1xU2] = @Original_U1xU2)) AND ((@IsNull_Cod"& _ 
                "eBarre = 1 AND [CodeBarre] IS NULL) OR ([CodeBarre] = @Original_CodeBarre)) AND "& _ 
                "((@IsNull_Inactif = 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_Inactif))"& _ 
                " AND ((@IsNull_CoefU2 = 1 AND [CoefU2] IS NULL) OR ([CoefU2] = @Original_CoefU2)"& _ 
                ") AND ((@IsNull_TypeFacturation = 1 AND [TypeFacturation] IS NULL) OR ([TypeFact"& _ 
                "uration] = @Original_TypeFacturation)) AND ((@IsNull_CoefAV = 1 AND [CoefAV] IS "& _ 
                "NULL) OR ([CoefAV] = @Original_CoefAV)) AND ((@IsNull_ProduitCompose = 1 AND [Pr"& _ 
                "oduitCompose] IS NULL) OR ([ProduitCompose] = @Original_ProduitCompose)) AND ((@"& _ 
                "IsNull_GestionStock = 1 AND [GestionStock] IS NULL) OR ([GestionStock] = @Origin"& _ 
                "al_GestionStock)) AND ((@IsNull_DecompteAuto = 1 AND [DecompteAuto] IS NULL) OR "& _ 
                "([DecompteAuto] = @Original_DecompteAuto)) AND ((@IsNull_RefFournisseur = 1 AND "& _ 
                "[RefFournisseur] IS NULL) OR ([RefFournisseur] = @Original_RefFournisseur)) AND "& _ 
                "((@IsNull_nFournisseur = 1 AND [nFournisseur] IS NULL) OR ([nFournisseur] = @Ori"& _ 
                "ginal_nFournisseur)) AND ([IsSortieImpr] = @Original_IsSortieImpr) AND ([IsEnVen"& _ 
                "te] = @Original_IsEnVente) AND ((@IsNull_AMM = 1 AND [AMM] IS NULL) OR ([AMM] = "& _ 
                "@Original_AMM)) AND ((@IsNull_TAXSM = 1 AND [TAXSM] IS NULL) OR ([TAXSM] = @Orig"& _ 
                "inal_TAXSM)) AND ([IsAMM] = @Original_IsAMM) AND ((@IsNull_DateMaj = 1 AND [Date"& _ 
                "Maj] IS NULL) OR ([DateMaj] = @Original_DateMaj)) AND ((@IsNull_isComm = 1 AND ["& _ 
                "isComm] IS NULL) OR ([isComm] = @Original_isComm)) AND ((@IsNull_Conditionnement"& _ 
                " = 1 AND [Conditionnement] IS NULL) OR ([Conditionnement] = @Original_Conditionn"& _ 
                "ement)) AND ([SeuilStock] = @Original_SeuilStock) AND ((@IsNull_NCompteX = 1 AND"& _ 
                " [NCompteX] IS NULL) OR ([NCompteX] = @Original_NCompteX)) AND ((@IsNull_NActivi"& _ 
                "teX = 1 AND [NActiviteX] IS NULL) OR ([NActiviteX] = @Original_NActiviteX)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Libelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixAHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixAHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixATTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixATTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1U2Independant", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1xU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1xU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeBarre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefAV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefAV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProduitCompose", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GestionStock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DecompteAuto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RefFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXSM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateMaj", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isComm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Produit] ([nProduit], [CodeProduit], [Libelle], [LibelleLong],"& _ 
                " [TTVA], [PrixAHT], [PrixATTC], [PrixVHT], [PrixVTTC], [IsPrixHT], [Unite1], [Un"& _ 
                "ite2], [ProduitAchat], [ProduitVente], [NCompteA], [NActiviteA], [NCompteV], [NA"& _ 
                "ctiviteV], [Famille1], [Famille2], [Famille3], [U1U2Independant], [U1xU2], [Code"& _ 
                "Barre], [Inactif], [CoefU2], [TypeFacturation], [CoefAV], [ProduitCompose], [Ima"& _ 
                "ge], [GestionStock], [DecompteAuto], [RefFournisseur], [nFournisseur], [IsSortie"& _ 
                "Impr], [IsEnVente], [AMM], [TAXSM], [IsAMM], [DateMaj], [isComm], [Conditionneme"& _ 
                "nt], [SeuilStock], [NCompteX], [NActiviteX], [Ingredients]) VALUES (@nProduit, @"& _ 
                "CodeProduit, @Libelle, @LibelleLong, @TTVA, @PrixAHT, @PrixATTC, @PrixVHT, @Prix"& _ 
                "VTTC, @IsPrixHT, @Unite1, @Unite2, @ProduitAchat, @ProduitVente, @NCompteA, @NAc"& _ 
                "tiviteA, @NCompteV, @NActiviteV, @Famille1, @Famille2, @Famille3, @U1U2Independa"& _ 
                "nt, @U1xU2, @CodeBarre, @Inactif, @CoefU2, @TypeFacturation, @CoefAV, @ProduitCo"& _ 
                "mpose, @Image, @GestionStock, @DecompteAuto, @RefFournisseur, @nFournisseur, @Is"& _ 
                "SortieImpr, @IsEnVente, @AMM, @TAXSM, @IsAMM, @DateMaj, @isComm, @Conditionnemen"& _ 
                "t, @SeuilStock, @NCompteX, @NActiviteX, @Ingredients);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nProduit, CodePro"& _ 
                "duit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT"& _ 
                ", Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NA"& _ 
                "ctiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inact"& _ 
                "if, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, Decomp"& _ 
                "teAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM"& _ 
                ", DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredient"& _ 
                "s FROM Produit WHERE (nProduit = @nProduit)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibelleLong", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibelleLong", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Image", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Image", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ingredients", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ingredients", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Produit] SET [nProduit] = @nProduit, [CodeProduit] = @CodeProduit, "& _ 
                "[Libelle] = @Libelle, [LibelleLong] = @LibelleLong, [TTVA] = @TTVA, [PrixAHT] = "& _ 
                "@PrixAHT, [PrixATTC] = @PrixATTC, [PrixVHT] = @PrixVHT, [PrixVTTC] = @PrixVTTC, "& _ 
                "[IsPrixHT] = @IsPrixHT, [Unite1] = @Unite1, [Unite2] = @Unite2, [ProduitAchat] ="& _ 
                " @ProduitAchat, [ProduitVente] = @ProduitVente, [NCompteA] = @NCompteA, [NActivi"& _ 
                "teA] = @NActiviteA, [NCompteV] = @NCompteV, [NActiviteV] = @NActiviteV, [Famille"& _ 
                "1] = @Famille1, [Famille2] = @Famille2, [Famille3] = @Famille3, [U1U2Independant"& _ 
                "] = @U1U2Independant, [U1xU2] = @U1xU2, [CodeBarre] = @CodeBarre, [Inactif] = @I"& _ 
                "nactif, [CoefU2] = @CoefU2, [TypeFacturation] = @TypeFacturation, [CoefAV] = @Co"& _ 
                "efAV, [ProduitCompose] = @ProduitCompose, [Image] = @Image, [GestionStock] = @Ge"& _ 
                "stionStock, [DecompteAuto] = @DecompteAuto, [RefFournisseur] = @RefFournisseur, "& _ 
                "[nFournisseur] = @nFournisseur, [IsSortieImpr] = @IsSortieImpr, [IsEnVente] = @I"& _ 
                "sEnVente, [AMM] = @AMM, [TAXSM] = @TAXSM, [IsAMM] = @IsAMM, [DateMaj] = @DateMaj"& _ 
                ", [isComm] = @isComm, [Conditionnement] = @Conditionnement, [SeuilStock] = @Seui"& _ 
                "lStock, [NCompteX] = @NCompteX, [NActiviteX] = @NActiviteX, [Ingredients] = @Ing"& _ 
                "redients WHERE (([nProduit] = @Original_nProduit) AND ([CodeProduit] = @Original"& _ 
                "_CodeProduit) AND ((@IsNull_Libelle = 1 AND [Libelle] IS NULL) OR ([Libelle] = @"& _ 
                "Original_Libelle)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Orig"& _ 
                "inal_TTVA)) AND ((@IsNull_PrixAHT = 1 AND [PrixAHT] IS NULL) OR ([PrixAHT] = @Or"& _ 
                "iginal_PrixAHT)) AND ((@IsNull_PrixATTC = 1 AND [PrixATTC] IS NULL) OR ([PrixATT"& _ 
                "C] = @Original_PrixATTC)) AND ((@IsNull_PrixVHT = 1 AND [PrixVHT] IS NULL) OR (["& _ 
                "PrixVHT] = @Original_PrixVHT)) AND ((@IsNull_PrixVTTC = 1 AND [PrixVTTC] IS NULL"& _ 
                ") OR ([PrixVTTC] = @Original_PrixVTTC)) AND ([IsPrixHT] = @Original_IsPrixHT) AN"& _ 
                "D ((@IsNull_Unite1 = 1 AND [Unite1] IS NULL) OR ([Unite1] = @Original_Unite1)) A"& _ 
                "ND ((@IsNull_Unite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) "& _ 
                "AND ([ProduitAchat] = @Original_ProduitAchat) AND ([ProduitVente] = @Original_Pr"& _ 
                "oduitVente) AND ((@IsNull_NCompteA = 1 AND [NCompteA] IS NULL) OR ([NCompteA] = "& _ 
                "@Original_NCompteA)) AND ((@IsNull_NActiviteA = 1 AND [NActiviteA] IS NULL) OR ("& _ 
                "[NActiviteA] = @Original_NActiviteA)) AND ((@IsNull_NCompteV = 1 AND [NCompteV] "& _ 
                "IS NULL) OR ([NCompteV] = @Original_NCompteV)) AND ((@IsNull_NActiviteV = 1 AND "& _ 
                "[NActiviteV] IS NULL) OR ([NActiviteV] = @Original_NActiviteV)) AND ((@IsNull_Fa"& _ 
                "mille1 = 1 AND [Famille1] IS NULL) OR ([Famille1] = @Original_Famille1)) AND ((@"& _ 
                "IsNull_Famille2 = 1 AND [Famille2] IS NULL) OR ([Famille2] = @Original_Famille2)"& _ 
                ") AND ((@IsNull_Famille3 = 1 AND [Famille3] IS NULL) OR ([Famille3] = @Original_"& _ 
                "Famille3)) AND ((@IsNull_U1U2Independant = 1 AND [U1U2Independant] IS NULL) OR ("& _ 
                "[U1U2Independant] = @Original_U1U2Independant)) AND ((@IsNull_U1xU2 = 1 AND [U1x"& _ 
                "U2] IS NULL) OR ([U1xU2] = @Original_U1xU2)) AND ((@IsNull_CodeBarre = 1 AND [Co"& _ 
                "deBarre] IS NULL) OR ([CodeBarre] = @Original_CodeBarre)) AND ((@IsNull_Inactif "& _ 
                "= 1 AND [Inactif] IS NULL) OR ([Inactif] = @Original_Inactif)) AND ((@IsNull_Coe"& _ 
                "fU2 = 1 AND [CoefU2] IS NULL) OR ([CoefU2] = @Original_CoefU2)) AND ((@IsNull_Ty"& _ 
                "peFacturation = 1 AND [TypeFacturation] IS NULL) OR ([TypeFacturation] = @Origin"& _ 
                "al_TypeFacturation)) AND ((@IsNull_CoefAV = 1 AND [CoefAV] IS NULL) OR ([CoefAV]"& _ 
                " = @Original_CoefAV)) AND ((@IsNull_ProduitCompose = 1 AND [ProduitCompose] IS N"& _ 
                "ULL) OR ([ProduitCompose] = @Original_ProduitCompose)) AND ((@IsNull_GestionStoc"& _ 
                "k = 1 AND [GestionStock] IS NULL) OR ([GestionStock] = @Original_GestionStock)) "& _ 
                "AND ((@IsNull_DecompteAuto = 1 AND [DecompteAuto] IS NULL) OR ([DecompteAuto] = "& _ 
                "@Original_DecompteAuto)) AND ((@IsNull_RefFournisseur = 1 AND [RefFournisseur] I"& _ 
                "S NULL) OR ([RefFournisseur] = @Original_RefFournisseur)) AND ((@IsNull_nFournis"& _ 
                "seur = 1 AND [nFournisseur] IS NULL) OR ([nFournisseur] = @Original_nFournisseur"& _ 
                ")) AND ([IsSortieImpr] = @Original_IsSortieImpr) AND ([IsEnVente] = @Original_Is"& _ 
                "EnVente) AND ((@IsNull_AMM = 1 AND [AMM] IS NULL) OR ([AMM] = @Original_AMM)) AN"& _ 
                "D ((@IsNull_TAXSM = 1 AND [TAXSM] IS NULL) OR ([TAXSM] = @Original_TAXSM)) AND ("& _ 
                "[IsAMM] = @Original_IsAMM) AND ((@IsNull_DateMaj = 1 AND [DateMaj] IS NULL) OR ("& _ 
                "[DateMaj] = @Original_DateMaj)) AND ((@IsNull_isComm = 1 AND [isComm] IS NULL) O"& _ 
                "R ([isComm] = @Original_isComm)) AND ((@IsNull_Conditionnement = 1 AND [Conditio"& _ 
                "nnement] IS NULL) OR ([Conditionnement] = @Original_Conditionnement)) AND ([Seui"& _ 
                "lStock] = @Original_SeuilStock) AND ((@IsNull_NCompteX = 1 AND [NCompteX] IS NUL"& _ 
                "L) OR ([NCompteX] = @Original_NCompteX)) AND ((@IsNull_NActiviteX = 1 AND [NActi"& _ 
                "viteX] IS NULL) OR ([NActiviteX] = @Original_NActiviteX)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nProduit, Co"& _ 
                "deProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsP"& _ 
                "rixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompte"& _ 
                "V, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, "& _ 
                "Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, D"& _ 
                "ecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, "& _ 
                "IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingre"& _ 
                "dients FROM Produit WHERE (nProduit = @nProduit)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibelleLong", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibelleLong", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Image", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Image", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ingredients", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ingredients", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nProduit", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Libelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Libelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixAHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixAHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixAHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixAHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixATTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixATTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixATTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixATTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixVTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixVTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixVTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixVTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsPrixHT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPrixHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitAchat", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitAchat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteV", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Famille3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famille3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famille3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1U2Independant", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1U2Independant", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1U2Independant", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_U1xU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "U1xU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_U1xU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "U1xU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeBarre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeBarre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeBarre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefU2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefU2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefU2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "CoefU2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeFacturation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoefAV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoefAV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoefAV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CoefAV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProduitCompose", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProduitCompose", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProduitCompose", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GestionStock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GestionStock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GestionStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DecompteAuto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DecompteAuto", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecompteAuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RefFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RefFournisseur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RefFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFournisseur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFournisseur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFournisseur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsSortieImpr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsSortieImpr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsEnVente", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsEnVente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXSM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXSM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "TAXSM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsAMM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAMM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateMaj", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateMaj", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateMaj", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isComm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isComm", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isComm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Conditionnement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Conditionnement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SeuilStock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SeuilStock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActiviteX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActiviteX", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActiviteX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.RecalculPiecesAgrifact.My.MySettings.Default.AgrifactConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, Prix"& _ 
                "VHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, N"& _ 
                "ActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, "& _ 
                "U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Imag"& _ 
                "e, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnV"& _ 
                "ente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX,"& _ 
                " NActiviteX, Ingredients FROM dbo.Produit"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, Prix"& _ 
                "VHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, N"& _ 
                "ActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, "& _ 
                "U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Imag"& _ 
                "e, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnV"& _ 
                "ente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX,"& _ 
                " NActiviteX, Ingredients FROM dbo.Produit WHERE CodeProduit=@CodeProduit"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAgrifact.ProduitDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAgrifact.ProduitDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAgrifact.ProduitDataTable = New DataSetAgrifact.ProduitDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodeProduit(ByVal dataTable As DataSetAgrifact.ProduitDataTable, ByVal CodeProduit As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodeProduit,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodeProduit(ByVal CodeProduit As String) As DataSetAgrifact.ProduitDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodeProduit,String)
            End If
            Dim dataTable As DataSetAgrifact.ProduitDataTable = New DataSetAgrifact.ProduitDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAgrifact.ProduitDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAgrifact) As Integer
            Return Me.Adapter.Update(dataSet, "Produit")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nProduit,Decimal)
            If (Original_CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CodeProduit")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_Libelle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Libelle,String)
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TTVA,String)
            End If
            If (Original_PrixAHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PrixAHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixATTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PrixATTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_PrixVHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_IsPrixHT,Boolean)
            If (Original_Unite1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Unite1,String)
            End If
            If (Original_Unite2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Unite2,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ProduitAchat,Boolean)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_ProduitVente,Boolean)
            If (Original_NCompteA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_NCompteA,String)
            End If
            If (Original_NActiviteA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_NActiviteA,String)
            End If
            If (Original_NCompteV Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_NCompteV,String)
            End If
            If (Original_NActiviteV Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_NActiviteV,String)
            End If
            If (Original_Famille1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Famille1.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Famille2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Famille2,String)
            End If
            If (Original_Famille3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Famille3,String)
            End If
            If (Original_U1U2Independant.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_U1xU2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_U1xU2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_CodeBarre Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_CodeBarre,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_CoefU2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_CoefU2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_TypeFacturation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_TypeFacturation,String)
            End If
            If (Original_CoefAV.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_CoefAV.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_ProduitCompose.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_GestionStock.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_GestionStock.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_DecompteAuto.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_RefFournisseur Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_RefFournisseur,String)
            End If
            If (Original_nFournisseur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_nFournisseur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_IsSortieImpr,Boolean)
            Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_IsEnVente,Boolean)
            If (Original_AMM Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_AMM,String)
            End If
            If (Original_TAXSM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_TAXSM.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_IsAMM,Boolean)
            If (Original_DateMaj.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_DateMaj.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_isComm.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(Original_isComm.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_Conditionnement.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(Original_Conditionnement.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_SeuilStock,Decimal)
            If (Original_NCompteX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_NCompteX,String)
            End If
            If (Original_NActiviteX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_NActiviteX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nProduit,Decimal)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Libelle,String)
            End If
            If (LibelleLong Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LibelleLong,String)
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TTVA,String)
            End If
            If (PrixAHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PrixAHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PrixATTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PrixATTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PrixVHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PrixVHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PrixVTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(IsPrixHT,Boolean)
            If (Unite1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Unite1,String)
            End If
            If (Unite2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Unite2,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(ProduitAchat,Boolean)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(ProduitVente,Boolean)
            If (NCompteA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NCompteA,String)
            End If
            If (NActiviteA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NActiviteA,String)
            End If
            If (NCompteV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NCompteV,String)
            End If
            If (NActiviteV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(NActiviteV,String)
            End If
            If (Famille1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Famille1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Famille2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Famille2,String)
            End If
            If (Famille3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Famille3,String)
            End If
            If (U1U2Independant.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (U1xU2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(U1xU2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CodeBarre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CodeBarre,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (CoefU2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(CoefU2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TypeFacturation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(TypeFacturation,String)
            End If
            If (CoefAV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(CoefAV.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (ProduitCompose.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Image Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Image,String)
            End If
            If (GestionStock.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(GestionStock.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DecompteAuto.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (RefFournisseur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(RefFournisseur,String)
            End If
            If (nFournisseur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(nFournisseur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(IsSortieImpr,Boolean)
            Me.Adapter.InsertCommand.Parameters(35).Value = CType(IsEnVente,Boolean)
            If (AMM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(AMM,String)
            End If
            If (TAXSM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(TAXSM.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(38).Value = CType(IsAMM,Boolean)
            If (DateMaj.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(DateMaj.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (isComm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(isComm.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Conditionnement.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(Conditionnement.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(42).Value = CType(SeuilStock,Decimal)
            If (NCompteX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(NCompteX,String)
            End If
            If (NActiviteX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(NActiviteX,String)
            End If
            If (Ingredients Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Ingredients,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nProduit As Decimal,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String,  _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nProduit,Decimal)
            If (CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodeProduit")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Libelle,String)
            End If
            If (LibelleLong Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LibelleLong,String)
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TTVA,String)
            End If
            If (PrixAHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PrixAHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PrixATTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PrixATTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PrixVHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PrixVHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PrixVTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IsPrixHT,Boolean)
            If (Unite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Unite1,String)
            End If
            If (Unite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Unite2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ProduitAchat,Boolean)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ProduitVente,Boolean)
            If (NCompteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(NCompteA,String)
            End If
            If (NActiviteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(NActiviteA,String)
            End If
            If (NCompteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(NCompteV,String)
            End If
            If (NActiviteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(NActiviteV,String)
            End If
            If (Famille1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Famille1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Famille2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Famille2,String)
            End If
            If (Famille3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Famille3,String)
            End If
            If (U1U2Independant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (U1xU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(U1xU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CodeBarre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(CodeBarre,String)
            End If
            If (Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (CoefU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(CoefU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TypeFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(TypeFacturation,String)
            End If
            If (CoefAV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(CoefAV.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (ProduitCompose.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Image Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Image,String)
            End If
            If (GestionStock.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(GestionStock.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DecompteAuto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (RefFournisseur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(RefFournisseur,String)
            End If
            If (nFournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(nFournisseur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(IsSortieImpr,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(IsEnVente,Boolean)
            If (AMM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(AMM,String)
            End If
            If (TAXSM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(TAXSM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(IsAMM,Boolean)
            If (DateMaj.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(DateMaj.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (isComm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(isComm.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Conditionnement.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Conditionnement.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(SeuilStock,Decimal)
            If (NCompteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(NCompteX,String)
            End If
            If (NActiviteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(NActiviteX,String)
            End If
            If (Ingredients Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Ingredients,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_nProduit,Decimal)
            If (Original_CodeProduit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CodeProduit")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Libelle,String)
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_TTVA,String)
            End If
            If (Original_PrixAHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_PrixAHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixATTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_PrixATTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_PrixVHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixVTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_PrixVTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_IsPrixHT,Boolean)
            If (Original_Unite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_Unite1,String)
            End If
            If (Original_Unite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_Unite2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_ProduitAchat,Boolean)
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_ProduitVente,Boolean)
            If (Original_NCompteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_NCompteA,String)
            End If
            If (Original_NActiviteA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_NActiviteA,String)
            End If
            If (Original_NCompteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_NCompteV,String)
            End If
            If (Original_NActiviteV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_NActiviteV,String)
            End If
            If (Original_Famille1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_Famille1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_Famille2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_Famille2,String)
            End If
            If (Original_Famille3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_Famille3,String)
            End If
            If (Original_U1U2Independant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_U1U2Independant.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_U1xU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_U1xU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_CodeBarre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_CodeBarre,String)
            End If
            If (Original_Inactif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_Inactif.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_CoefU2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_CoefU2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_TypeFacturation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_TypeFacturation,String)
            End If
            If (Original_CoefAV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_CoefAV.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_ProduitCompose.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_ProduitCompose.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_GestionStock.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_GestionStock.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_DecompteAuto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_DecompteAuto.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_RefFournisseur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_RefFournisseur,String)
            End If
            If (Original_nFournisseur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_nFournisseur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_IsSortieImpr,Boolean)
            Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_IsEnVente,Boolean)
            If (Original_AMM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_AMM,String)
            End If
            If (Original_TAXSM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_TAXSM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_IsAMM,Boolean)
            If (Original_DateMaj.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_DateMaj.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            If (Original_isComm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_isComm.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (Original_Conditionnement.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_Conditionnement.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_SeuilStock,Decimal)
            If (Original_NCompteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_NCompteX,String)
            End If
            If (Original_NActiviteX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_NActiviteX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal LibelleLong As String,  _
                    ByVal TTVA As String,  _
                    ByVal PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal IsPrixHT As Boolean,  _
                    ByVal Unite1 As String,  _
                    ByVal Unite2 As String,  _
                    ByVal ProduitAchat As Boolean,  _
                    ByVal ProduitVente As Boolean,  _
                    ByVal NCompteA As String,  _
                    ByVal NActiviteA As String,  _
                    ByVal NCompteV As String,  _
                    ByVal NActiviteV As String,  _
                    ByVal Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Famille2 As String,  _
                    ByVal Famille3 As String,  _
                    ByVal U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal CodeBarre As String,  _
                    ByVal Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal TypeFacturation As String,  _
                    ByVal CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Image As String,  _
                    ByVal GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal RefFournisseur As String,  _
                    ByVal nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal IsSortieImpr As Boolean,  _
                    ByVal IsEnVente As Boolean,  _
                    ByVal AMM As String,  _
                    ByVal TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal IsAMM As Boolean,  _
                    ByVal DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal SeuilStock As Decimal,  _
                    ByVal NCompteX As String,  _
                    ByVal NActiviteX As String,  _
                    ByVal Ingredients As String,  _
                    ByVal Original_nProduit As Decimal,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_Libelle As String,  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_PrixAHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixATTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixVTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsPrixHT As Boolean,  _
                    ByVal Original_Unite1 As String,  _
                    ByVal Original_Unite2 As String,  _
                    ByVal Original_ProduitAchat As Boolean,  _
                    ByVal Original_ProduitVente As Boolean,  _
                    ByVal Original_NCompteA As String,  _
                    ByVal Original_NActiviteA As String,  _
                    ByVal Original_NCompteV As String,  _
                    ByVal Original_NActiviteV As String,  _
                    ByVal Original_Famille1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_Famille2 As String,  _
                    ByVal Original_Famille3 As String,  _
                    ByVal Original_U1U2Independant As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_U1xU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CodeBarre As String,  _
                    ByVal Original_Inactif As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CoefU2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TypeFacturation As String,  _
                    ByVal Original_CoefAV As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProduitCompose As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_GestionStock As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DecompteAuto As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RefFournisseur As String,  _
                    ByVal Original_nFournisseur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsSortieImpr As Boolean,  _
                    ByVal Original_IsEnVente As Boolean,  _
                    ByVal Original_AMM As String,  _
                    ByVal Original_TAXSM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IsAMM As Boolean,  _
                    ByVal Original_DateMaj As Global.System.Nullable(Of Date),  _
                    ByVal Original_isComm As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Conditionnement As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SeuilStock As Decimal,  _
                    ByVal Original_NCompteX As String,  _
                    ByVal Original_NActiviteX As String) As Integer
            Return Me.Update(Original_nProduit, CodeProduit, Libelle, LibelleLong, TTVA, PrixAHT, PrixATTC, PrixVHT, PrixVTTC, IsPrixHT, Unite1, Unite2, ProduitAchat, ProduitVente, NCompteA, NActiviteA, NCompteV, NActiviteV, Famille1, Famille2, Famille3, U1U2Independant, U1xU2, CodeBarre, Inactif, CoefU2, TypeFacturation, CoefAV, ProduitCompose, Image, GestionStock, DecompteAuto, RefFournisseur, nFournisseur, IsSortieImpr, IsEnVente, AMM, TAXSM, IsAMM, DateMaj, isComm, Conditionnement, SeuilStock, NCompteX, NActiviteX, Ingredients, Original_nProduit, Original_CodeProduit, Original_Libelle, Original_TTVA, Original_PrixAHT, Original_PrixATTC, Original_PrixVHT, Original_PrixVTTC, Original_IsPrixHT, Original_Unite1, Original_Unite2, Original_ProduitAchat, Original_ProduitVente, Original_NCompteA, Original_NActiviteA, Original_NCompteV, Original_NActiviteV, Original_Famille1, Original_Famille2, Original_Famille3, Original_U1U2Independant, Original_U1xU2, Original_CodeBarre, Original_Inactif, Original_CoefU2, Original_TypeFacturation, Original_CoefAV, Original_ProduitCompose, Original_GestionStock, Original_DecompteAuto, Original_RefFournisseur, Original_nFournisseur, Original_IsSortieImpr, Original_IsEnVente, Original_AMM, Original_TAXSM, Original_IsAMM, Original_DateMaj, Original_isComm, Original_Conditionnement, Original_SeuilStock, Original_NCompteX, Original_NActiviteX)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TVATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TVA"
            tableMapping.ColumnMappings.Add("nTVA", "nTVA")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("TLibelle", "TLibelle")
            tableMapping.ColumnMappings.Add("TTaux", "TTaux")
            tableMapping.ColumnMappings.Add("TCpt", "TCpt")
            tableMapping.ColumnMappings.Add("TJournal", "TJournal")
            tableMapping.ColumnMappings.Add("TypTVA", "TypTVA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TVA] WHERE (([nTVA] = @Original_nTVA) AND ((@IsNull_TTVA = 1 A"& _ 
                "ND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA)) AND ((@IsNull_TLibelle = 1 AND "& _ 
                "[TLibelle] IS NULL) OR ([TLibelle] = @Original_TLibelle)) AND ((@IsNull_TTaux = "& _ 
                "1 AND [TTaux] IS NULL) OR ([TTaux] = @Original_TTaux)) AND ((@IsNull_TCpt = 1 AN"& _ 
                "D [TCpt] IS NULL) OR ([TCpt] = @Original_TCpt)) AND ((@IsNull_TJournal = 1 AND ["& _ 
                "TJournal] IS NULL) OR ([TJournal] = @Original_TJournal)) AND ((@IsNull_TypTVA = "& _ 
                "1 AND [TypTVA] IS NULL) OR ([TypTVA] = @Original_TypTVA)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TLibelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TLibelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TLibelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TLibelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTaux", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTaux", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTaux", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TTaux", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TCpt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TCpt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TCpt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TCpt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TJournal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TJournal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TJournal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TJournal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TVA] ([nTVA], [TTVA], [TLibelle], [TTaux], [TCpt], [TJournal],"& _ 
                " [TypTVA]) VALUES (@nTVA, @TTVA, @TLibelle, @TTaux, @TCpt, @TJournal, @TypTVA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nTVA, TTVA, TLibelle, TTaux, TCpt, TJournal, TypTVA FROM TVA WHERE (nTVA"& _ 
                " = @nTVA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TLibelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TLibelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTaux", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TTaux", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TCpt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TCpt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TJournal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TJournal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TVA] SET [nTVA] = @nTVA, [TTVA] = @TTVA, [TLibelle] = @TLibelle, [T"& _ 
                "Taux] = @TTaux, [TCpt] = @TCpt, [TJournal] = @TJournal, [TypTVA] = @TypTVA WHERE"& _ 
                " (([nTVA] = @Original_nTVA) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA"& _ 
                "] = @Original_TTVA)) AND ((@IsNull_TLibelle = 1 AND [TLibelle] IS NULL) OR ([TLi"& _ 
                "belle] = @Original_TLibelle)) AND ((@IsNull_TTaux = 1 AND [TTaux] IS NULL) OR (["& _ 
                "TTaux] = @Original_TTaux)) AND ((@IsNull_TCpt = 1 AND [TCpt] IS NULL) OR ([TCpt]"& _ 
                " = @Original_TCpt)) AND ((@IsNull_TJournal = 1 AND [TJournal] IS NULL) OR ([TJou"& _ 
                "rnal] = @Original_TJournal)) AND ((@IsNull_TypTVA = 1 AND [TypTVA] IS NULL) OR ("& _ 
                "[TypTVA] = @Original_TypTVA)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nTVA, TTVA, TLibelle, TTaux, TCpt, TJour"& _ 
                "nal, TypTVA FROM TVA WHERE (nTVA = @nTVA)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TLibelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TLibelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTaux", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TTaux", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TCpt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TCpt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TJournal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TJournal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TLibelle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TLibelle", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TLibelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TLibelle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTaux", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTaux", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTaux", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TTaux", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TCpt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TCpt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TCpt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TCpt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TJournal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TJournal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TJournal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TJournal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.RecalculPiecesAgrifact.My.MySettings.Default.AgrifactConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nTVA, TTVA, TLibelle, TTaux, TCpt, TJournal, TypTVA FROM dbo.TVA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nTVA, TTVA, TLibelle, TTaux, TCpt, TJournal, TypTVA FROM dbo.TVA WHERE TTV"& _ 
                "A=@TTVA"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAgrifact.TVADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAgrifact.TVADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAgrifact.TVADataTable = New DataSetAgrifact.TVADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByTTVA(ByVal dataTable As DataSetAgrifact.TVADataTable, ByVal TTVA As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (TTVA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(TTVA,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByTTVA(ByVal TTVA As String) As DataSetAgrifact.TVADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (TTVA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(TTVA,String)
            End If
            Dim dataTable As DataSetAgrifact.TVADataTable = New DataSetAgrifact.TVADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAgrifact.TVADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAgrifact) As Integer
            Return Me.Adapter.Update(dataSet, "TVA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nTVA As Decimal, ByVal Original_TTVA As String, ByVal Original_TLibelle As String, ByVal Original_TTaux As Global.System.Nullable(Of Decimal), ByVal Original_TCpt As String, ByVal Original_TJournal As String, ByVal Original_TypTVA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nTVA,Decimal)
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TTVA,String)
            End If
            If (Original_TLibelle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TLibelle,String)
            End If
            If (Original_TTaux.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_TTaux.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_TCpt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TCpt,String)
            End If
            If (Original_TJournal Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_TJournal,String)
            End If
            If (Original_TypTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_TypTVA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal nTVA As Decimal, ByVal TTVA As String, ByVal TLibelle As String, ByVal TTaux As Global.System.Nullable(Of Decimal), ByVal TCpt As String, ByVal TJournal As String, ByVal TypTVA As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nTVA,Decimal)
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TTVA,String)
            End If
            If (TLibelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TLibelle,String)
            End If
            If (TTaux.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TTaux.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TCpt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TCpt,String)
            End If
            If (TJournal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TJournal,String)
            End If
            If (TypTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TypTVA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nTVA As Decimal, ByVal TTVA As String, ByVal TLibelle As String, ByVal TTaux As Global.System.Nullable(Of Decimal), ByVal TCpt As String, ByVal TJournal As String, ByVal TypTVA As String, ByVal Original_nTVA As Decimal, ByVal Original_TTVA As String, ByVal Original_TLibelle As String, ByVal Original_TTaux As Global.System.Nullable(Of Decimal), ByVal Original_TCpt As String, ByVal Original_TJournal As String, ByVal Original_TypTVA As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nTVA,Decimal)
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TTVA,String)
            End If
            If (TLibelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TLibelle,String)
            End If
            If (TTaux.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TTaux.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TCpt,String)
            End If
            If (TJournal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TJournal,String)
            End If
            If (TypTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TypTVA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_nTVA,Decimal)
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_TTVA,String)
            End If
            If (Original_TLibelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_TLibelle,String)
            End If
            If (Original_TTaux.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_TTaux.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_TCpt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_TCpt,String)
            End If
            If (Original_TJournal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_TJournal,String)
            End If
            If (Original_TypTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_TypTVA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TTVA As String, ByVal TLibelle As String, ByVal TTaux As Global.System.Nullable(Of Decimal), ByVal TCpt As String, ByVal TJournal As String, ByVal TypTVA As String, ByVal Original_nTVA As Decimal, ByVal Original_TTVA As String, ByVal Original_TLibelle As String, ByVal Original_TTaux As Global.System.Nullable(Of Decimal), ByVal Original_TCpt As String, ByVal Original_TJournal As String, ByVal Original_TypTVA As String) As Integer
            Return Me.Update(Original_nTVA, TTVA, TLibelle, TTaux, TCpt, TJournal, TypTVA, Original_nTVA, Original_TTVA, Original_TLibelle, Original_TTaux, Original_TCpt, Original_TJournal, Original_TypTVA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VBonCommandeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VBonCommande"
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("Origine", "Origine")
            tableMapping.ColumnMappings.Add("nOrigine", "nOrigine")
            tableMapping.ColumnMappings.Add("nClient", "nClient")
            tableMapping.ColumnMappings.Add("AdresseFacture", "AdresseFacture")
            tableMapping.ColumnMappings.Add("nPrescripteur", "nPrescripteur")
            tableMapping.ColumnMappings.Add("nPayeur", "nPayeur")
            tableMapping.ColumnMappings.Add("nContact", "nContact")
            tableMapping.ColumnMappings.Add("nCommercial", "nCommercial")
            tableMapping.ColumnMappings.Add("FacturationPrescripteur", "FacturationPrescripteur")
            tableMapping.ColumnMappings.Add("FacturationClient", "FacturationClient")
            tableMapping.ColumnMappings.Add("nFacture", "nFacture")
            tableMapping.ColumnMappings.Add("DateFacture", "DateFacture")
            tableMapping.ColumnMappings.Add("Paye", "Paye")
            tableMapping.ColumnMappings.Add("ExportCompta", "ExportCompta")
            tableMapping.ColumnMappings.Add("DateExportCompta", "DateExportCompta")
            tableMapping.ColumnMappings.Add("DateEcheance", "DateEcheance")
            tableMapping.ColumnMappings.Add("Observation", "Observation")
            tableMapping.ColumnMappings.Add("DateRelance1", "DateRelance1")
            tableMapping.ColumnMappings.Add("DateRelance2", "DateRelance2")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("MontantHT", "MontantHT")
            tableMapping.ColumnMappings.Add("MontantTVA", "MontantTVA")
            tableMapping.ColumnMappings.Add("MontantTTC", "MontantTTC")
            tableMapping.ColumnMappings.Add("nPreFacturation", "nPreFacturation")
            tableMapping.ColumnMappings.Add("DatePreFacturation", "DatePreFacturation")
            tableMapping.ColumnMappings.Add("FacturationTTC", "FacturationTTC")
            tableMapping.ColumnMappings.Add("nTarif", "nTarif")
            tableMapping.ColumnMappings.Add("Depot", "Depot")
            tableMapping.ColumnMappings.Add("Secteur", "Secteur")
            tableMapping.ColumnMappings.Add("TxCommission", "TxCommission")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VBonCommande] WHERE (([nDevis] = @Original_nDevis) AND ((@IsNu"& _ 
                "ll_nOrigine = 1 AND [nOrigine] IS NULL) OR ([nOrigine] = @Original_nOrigine)) AN"& _ 
                "D ((@IsNull_nClient = 1 AND [nClient] IS NULL) OR ([nClient] = @Original_nClient"& _ 
                ")) AND ((@IsNull_nPrescripteur = 1 AND [nPrescripteur] IS NULL) OR ([nPrescripte"& _ 
                "ur] = @Original_nPrescripteur)) AND ((@IsNull_nPayeur = 1 AND [nPayeur] IS NULL)"& _ 
                " OR ([nPayeur] = @Original_nPayeur)) AND ((@IsNull_nContact = 1 AND [nContact] I"& _ 
                "S NULL) OR ([nContact] = @Original_nContact)) AND ((@IsNull_nCommercial = 1 AND "& _ 
                "[nCommercial] IS NULL) OR ([nCommercial] = @Original_nCommercial)) AND ([Factura"& _ 
                "tionPrescripteur] = @Original_FacturationPrescripteur) AND ([FacturationClient] "& _ 
                "= @Original_FacturationClient) AND ((@IsNull_nFacture = 1 AND [nFacture] IS NULL"& _ 
                ") OR ([nFacture] = @Original_nFacture)) AND ((@IsNull_DateFacture = 1 AND [DateF"& _ 
                "acture] IS NULL) OR ([DateFacture] = @Original_DateFacture)) AND ([Paye] = @Orig"& _ 
                "inal_Paye) AND ([ExportCompta] = @Original_ExportCompta) AND ((@IsNull_DateExpor"& _ 
                "tCompta = 1 AND [DateExportCompta] IS NULL) OR ([DateExportCompta] = @Original_D"& _ 
                "ateExportCompta)) AND ((@IsNull_DateEcheance = 1 AND [DateEcheance] IS NULL) OR "& _ 
                "([DateEcheance] = @Original_DateEcheance)) AND ((@IsNull_DateRelance1 = 1 AND [D"& _ 
                "ateRelance1] IS NULL) OR ([DateRelance1] = @Original_DateRelance1)) AND ((@IsNul"& _ 
                "l_DateRelance2 = 1 AND [DateRelance2] IS NULL) OR ([DateRelance2] = @Original_Da"& _ 
                "teRelance2)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Orig"& _ 
                "inal_Remise)) AND ((@IsNull_MontantHT = 1 AND [MontantHT] IS NULL) OR ([MontantH"& _ 
                "T] = @Original_MontantHT)) AND ((@IsNull_MontantTVA = 1 AND [MontantTVA] IS NULL"& _ 
                ") OR ([MontantTVA] = @Original_MontantTVA)) AND ((@IsNull_MontantTTC = 1 AND [Mo"& _ 
                "ntantTTC] IS NULL) OR ([MontantTTC] = @Original_MontantTTC)) AND ((@IsNull_nPreF"& _ 
                "acturation = 1 AND [nPreFacturation] IS NULL) OR ([nPreFacturation] = @Original_"& _ 
                "nPreFacturation)) AND ((@IsNull_DatePreFacturation = 1 AND [DatePreFacturation] "& _ 
                "IS NULL) OR ([DatePreFacturation] = @Original_DatePreFacturation)) AND ((@IsNull"& _ 
                "_FacturationTTC = 1 AND [FacturationTTC] IS NULL) OR ([FacturationTTC] = @Origin"& _ 
                "al_FacturationTTC)) AND ((@IsNull_nTarif = 1 AND [nTarif] IS NULL) OR ([nTarif] "& _ 
                "= @Original_nTarif)) AND ((@IsNull_Depot = 1 AND [Depot] IS NULL) OR ([Depot] = "& _ 
                "@Original_Depot)) AND ((@IsNull_Secteur = 1 AND [Secteur] IS NULL) OR ([Secteur]"& _ 
                " = @Original_Secteur)) AND ((@IsNull_TxCommission = 1 AND [TxCommission] IS NULL"& _ 
                ") OR ([TxCommission] = @Original_TxCommission)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrigine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPrescripteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPayeur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nContact", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nContact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExportCompta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEcheance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DatePreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Secteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VBonCommande] ([nDevis], [Origine], [nOrigine], [nClient], [Ad"& _ 
                "resseFacture], [nPrescripteur], [nPayeur], [nContact], [nCommercial], [Facturati"& _ 
                "onPrescripteur], [FacturationClient], [nFacture], [DateFacture], [Paye], [Export"& _ 
                "Compta], [DateExportCompta], [DateEcheance], [Observation], [DateRelance1], [Dat"& _ 
                "eRelance2], [Remise], [MontantHT], [MontantTVA], [MontantTTC], [nPreFacturation]"& _ 
                ", [DatePreFacturation], [FacturationTTC], [nTarif], [Depot], [Secteur], [TxCommi"& _ 
                "ssion]) VALUES (@nDevis, @Origine, @nOrigine, @nClient, @AdresseFacture, @nPresc"& _ 
                "ripteur, @nPayeur, @nContact, @nCommercial, @FacturationPrescripteur, @Facturati"& _ 
                "onClient, @nFacture, @DateFacture, @Paye, @ExportCompta, @DateExportCompta, @Dat"& _ 
                "eEcheance, @Observation, @DateRelance1, @DateRelance2, @Remise, @MontantHT, @Mon"& _ 
                "tantTVA, @MontantTTC, @nPreFacturation, @DatePreFacturation, @FacturationTTC, @n"& _ 
                "Tarif, @Depot, @Secteur, @TxCommission);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDevis, Origine, nOrigine, nCli"& _ 
                "ent, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, FacturationP"& _ 
                "rescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateE"& _ 
                "xportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, Mont"& _ 
                "antHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationT"& _ 
                "TC, nTarif, Depot, Secteur, TxCommission FROM VBonCommande WHERE (nDevis = @nDev"& _ 
                "is)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Origine", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Origine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseFacture", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observation", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VBonCommande] SET [nDevis] = @nDevis, [Origine] = @Origine, [nOrigi"& _ 
                "ne] = @nOrigine, [nClient] = @nClient, [AdresseFacture] = @AdresseFacture, [nPre"& _ 
                "scripteur] = @nPrescripteur, [nPayeur] = @nPayeur, [nContact] = @nContact, [nCom"& _ 
                "mercial] = @nCommercial, [FacturationPrescripteur] = @FacturationPrescripteur, ["& _ 
                "FacturationClient] = @FacturationClient, [nFacture] = @nFacture, [DateFacture] ="& _ 
                " @DateFacture, [Paye] = @Paye, [ExportCompta] = @ExportCompta, [DateExportCompta"& _ 
                "] = @DateExportCompta, [DateEcheance] = @DateEcheance, [Observation] = @Observat"& _ 
                "ion, [DateRelance1] = @DateRelance1, [DateRelance2] = @DateRelance2, [Remise] = "& _ 
                "@Remise, [MontantHT] = @MontantHT, [MontantTVA] = @MontantTVA, [MontantTTC] = @M"& _ 
                "ontantTTC, [nPreFacturation] = @nPreFacturation, [DatePreFacturation] = @DatePre"& _ 
                "Facturation, [FacturationTTC] = @FacturationTTC, [nTarif] = @nTarif, [Depot] = @"& _ 
                "Depot, [Secteur] = @Secteur, [TxCommission] = @TxCommission WHERE (([nDevis] = @"& _ 
                "Original_nDevis) AND ((@IsNull_nOrigine = 1 AND [nOrigine] IS NULL) OR ([nOrigin"& _ 
                "e] = @Original_nOrigine)) AND ((@IsNull_nClient = 1 AND [nClient] IS NULL) OR (["& _ 
                "nClient] = @Original_nClient)) AND ((@IsNull_nPrescripteur = 1 AND [nPrescripteu"& _ 
                "r] IS NULL) OR ([nPrescripteur] = @Original_nPrescripteur)) AND ((@IsNull_nPayeu"& _ 
                "r = 1 AND [nPayeur] IS NULL) OR ([nPayeur] = @Original_nPayeur)) AND ((@IsNull_n"& _ 
                "Contact = 1 AND [nContact] IS NULL) OR ([nContact] = @Original_nContact)) AND (("& _ 
                "@IsNull_nCommercial = 1 AND [nCommercial] IS NULL) OR ([nCommercial] = @Original"& _ 
                "_nCommercial)) AND ([FacturationPrescripteur] = @Original_FacturationPrescripteu"& _ 
                "r) AND ([FacturationClient] = @Original_FacturationClient) AND ((@IsNull_nFactur"& _ 
                "e = 1 AND [nFacture] IS NULL) OR ([nFacture] = @Original_nFacture)) AND ((@IsNul"& _ 
                "l_DateFacture = 1 AND [DateFacture] IS NULL) OR ([DateFacture] = @Original_DateF"& _ 
                "acture)) AND ([Paye] = @Original_Paye) AND ([ExportCompta] = @Original_ExportCom"& _ 
                "pta) AND ((@IsNull_DateExportCompta = 1 AND [DateExportCompta] IS NULL) OR ([Dat"& _ 
                "eExportCompta] = @Original_DateExportCompta)) AND ((@IsNull_DateEcheance = 1 AND"& _ 
                " [DateEcheance] IS NULL) OR ([DateEcheance] = @Original_DateEcheance)) AND ((@Is"& _ 
                "Null_DateRelance1 = 1 AND [DateRelance1] IS NULL) OR ([DateRelance1] = @Original"& _ 
                "_DateRelance1)) AND ((@IsNull_DateRelance2 = 1 AND [DateRelance2] IS NULL) OR (["& _ 
                "DateRelance2] = @Original_DateRelance2)) AND ((@IsNull_Remise = 1 AND [Remise] I"& _ 
                "S NULL) OR ([Remise] = @Original_Remise)) AND ((@IsNull_MontantHT = 1 AND [Monta"& _ 
                "ntHT] IS NULL) OR ([MontantHT] = @Original_MontantHT)) AND ((@IsNull_MontantTVA "& _ 
                "= 1 AND [MontantTVA] IS NULL) OR ([MontantTVA] = @Original_MontantTVA)) AND ((@I"& _ 
                "sNull_MontantTTC = 1 AND [MontantTTC] IS NULL) OR ([MontantTTC] = @Original_Mont"& _ 
                "antTTC)) AND ((@IsNull_nPreFacturation = 1 AND [nPreFacturation] IS NULL) OR ([n"& _ 
                "PreFacturation] = @Original_nPreFacturation)) AND ((@IsNull_DatePreFacturation ="& _ 
                " 1 AND [DatePreFacturation] IS NULL) OR ([DatePreFacturation] = @Original_DatePr"& _ 
                "eFacturation)) AND ((@IsNull_FacturationTTC = 1 AND [FacturationTTC] IS NULL) OR"& _ 
                " ([FacturationTTC] = @Original_FacturationTTC)) AND ((@IsNull_nTarif = 1 AND [nT"& _ 
                "arif] IS NULL) OR ([nTarif] = @Original_nTarif)) AND ((@IsNull_Depot = 1 AND [De"& _ 
                "pot] IS NULL) OR ([Depot] = @Original_Depot)) AND ((@IsNull_Secteur = 1 AND [Sec"& _ 
                "teur] IS NULL) OR ([Secteur] = @Original_Secteur)) AND ((@IsNull_TxCommission = "& _ 
                "1 AND [TxCommission] IS NULL) OR ([TxCommission] = @Original_TxCommission)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur"& _ 
                ", nContact, nCommercial, FacturationPrescripteur, FacturationClient, nFacture, D"& _ 
                "ateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, Dat"& _ 
                "eRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturat"& _ 
                "ion, DatePreFacturation, FacturationTTC, nTarif, Depot, Secteur, TxCommission FR"& _ 
                "OM VBonCommande WHERE (nDevis = @nDevis)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Origine", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Origine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseFacture", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observation", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrigine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPrescripteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPayeur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nContact", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nContact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExportCompta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEcheance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DatePreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Secteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.RecalculPiecesAgrifact.My.MySettings.Default.AgrifactConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur"& _ 
                ", nContact, nCommercial, FacturationPrescripteur, FacturationClient, nFacture, D"& _ 
                "ateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, Dat"& _ 
                "eRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturat"& _ 
                "ion, DatePreFacturation, FacturationTTC, nTarif, Depot, Secteur, TxCommission FR"& _ 
                "OM dbo.VBonCommande"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur"& _ 
                ", nContact, nCommercial, FacturationPrescripteur, FacturationClient, nFacture, D"& _ 
                "ateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, Dat"& _ 
                "eRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturat"& _ 
                "ion, DatePreFacturation, FacturationTTC, nTarif, Depot, Secteur, TxCommission FR"& _ 
                "OM dbo.VBonCommande"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (FacturationTTC = @FacturationTTC)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY nDevis D"& _ 
                "ESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur"& _ 
                ", nContact, nCommercial, FacturationPrescripteur, FacturationClient, nFacture, D"& _ 
                "ateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, Dat"& _ 
                "eRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturat"& _ 
                "ion, DatePreFacturation, FacturationTTC, nTarif, Depot, Secteur, TxCommission FR"& _ 
                "OM dbo.VBonCommande WHERE nDevis=@nDevis"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE [dbo].[VBonCommande] SET [MontantHT] = @MontantHT, [MontantTVA] = @Montant"& _ 
                "TVA, [MontantTTC] = @MontantTTC WHERE ([nDevis] = @nDevis)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAgrifact.VBonCommandeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAgrifact.VBonCommandeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAgrifact.VBonCommandeDataTable = New DataSetAgrifact.VBonCommandeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFacturationTTC(ByVal dataTable As DataSetAgrifact.VBonCommandeDataTable, ByVal FacturationTTC As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFacturationTTC(ByVal FacturationTTC As Global.System.Nullable(Of Boolean)) As DataSetAgrifact.VBonCommandeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetAgrifact.VBonCommandeDataTable = New DataSetAgrifact.VBonCommandeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynDevis(ByVal dataTable As DataSetAgrifact.VBonCommandeDataTable, ByVal nDevis As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynDevis(ByVal nDevis As Decimal) As DataSetAgrifact.VBonCommandeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            Dim dataTable As DataSetAgrifact.VBonCommandeDataTable = New DataSetAgrifact.VBonCommandeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAgrifact.VBonCommandeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAgrifact) As Integer
            Return Me.Adapter.Update(dataSet, "VBonCommande")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Depot As String,  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDevis,Decimal)
            If (Original_nOrigine.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nOrigine.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_nClient.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nClient.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_nPrescripteur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_nPayeur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_nPayeur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_nContact.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_nContact.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_nCommercial.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_FacturationPrescripteur,Boolean)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_FacturationClient,Boolean)
            If (Original_nFacture.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_nFacture.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_DateFacture.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_DateFacture.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_Paye,Boolean)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_ExportCompta,Boolean)
            If (Original_DateExportCompta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_DateExportCompta.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEcheance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_DateEcheance.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_DateRelance1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_DateRelance2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_MontantHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_MontantTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MontantTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_nPreFacturation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_DatePreFacturation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_DatePreFacturation.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_Depot Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_Depot,String)
            End If
            If (Original_Secteur Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_Secteur,String)
            End If
            If (Original_TxCommission.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_TxCommission.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Depot As String,  _
                    ByVal Secteur As String,  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Origine Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Origine,String)
            End If
            If (nOrigine.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nOrigine.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (nClient.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(nClient.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AdresseFacture Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AdresseFacture,String)
            End If
            If (nPrescripteur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (nPayeur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(nPayeur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (nContact.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(nContact.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(nCommercial.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(FacturationPrescripteur,Boolean)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(FacturationClient,Boolean)
            If (nFacture.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(nFacture.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DateFacture.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DateFacture.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(Paye,Boolean)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(ExportCompta,Boolean)
            If (DateExportCompta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(DateExportCompta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (DateEcheance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(DateEcheance.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Observation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Observation,String)
            End If
            If (DateRelance1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(DateRelance1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (DateRelance2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(DateRelance2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (MontantHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(MontantHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(MontantTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(MontantTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (nPreFacturation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (DatePreFacturation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(DatePreFacturation.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Depot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Depot,String)
            End If
            If (Secteur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Secteur,String)
            End If
            If (TxCommission.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(TxCommission.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Depot As String,  _
                    ByVal Secteur As String,  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Depot As String,  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Origine Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Origine,String)
            End If
            If (nOrigine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nOrigine.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (nClient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(nClient.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AdresseFacture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AdresseFacture,String)
            End If
            If (nPrescripteur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (nPayeur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(nPayeur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (nContact.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(nContact.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(nCommercial.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(FacturationPrescripteur,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(FacturationClient,Boolean)
            If (nFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(nFacture.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DateFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DateFacture.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Paye,Boolean)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ExportCompta,Boolean)
            If (DateExportCompta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(DateExportCompta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (DateEcheance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(DateEcheance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Observation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Observation,String)
            End If
            If (DateRelance1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(DateRelance1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (DateRelance2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(DateRelance2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (MontantHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(MontantHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(MontantTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(MontantTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (nPreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (DatePreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(DatePreFacturation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Depot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Depot,String)
            End If
            If (Secteur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Secteur,String)
            End If
            If (TxCommission.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(TxCommission.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_nDevis,Decimal)
            If (Original_nOrigine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_nOrigine.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_nClient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_nClient.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_nPrescripteur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_nPayeur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_nPayeur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_nContact.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_nContact.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_nCommercial.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_FacturationPrescripteur,Boolean)
            Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_FacturationClient,Boolean)
            If (Original_nFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_nFacture.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_DateFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_DateFacture.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_Paye,Boolean)
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_ExportCompta,Boolean)
            If (Original_DateExportCompta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_DateExportCompta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEcheance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_DateEcheance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_DateRelance1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_DateRelance2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_MontantHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_MontantTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_MontantTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_nPreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_DatePreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_DatePreFacturation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_Depot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_Depot,String)
            End If
            If (Original_Secteur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_Secteur,String)
            End If
            If (Original_TxCommission.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_TxCommission.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Depot As String,  _
                    ByVal Secteur As String,  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Depot As String,  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, Secteur, TxCommission, Original_nDevis, Original_nOrigine, Original_nClient, Original_nPrescripteur, Original_nPayeur, Original_nContact, Original_nCommercial, Original_FacturationPrescripteur, Original_FacturationClient, Original_nFacture, Original_DateFacture, Original_Paye, Original_ExportCompta, Original_DateExportCompta, Original_DateEcheance, Original_DateRelance1, Original_DateRelance2, Original_Remise, Original_MontantHT, Original_MontantTVA, Original_MontantTTC, Original_nPreFacturation, Original_DatePreFacturation, Original_FacturationTTC, Original_nTarif, Original_Depot, Original_Secteur, Original_TxCommission)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMontants(ByVal MontantHT As Global.System.Nullable(Of Decimal), ByVal MontantTVA As Global.System.Nullable(Of Decimal), ByVal MontantTTC As Global.System.Nullable(Of Decimal), ByVal nDevis As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (MontantHT.HasValue = true) Then
                command.Parameters(0).Value = CType(MontantHT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                command.Parameters(1).Value = CType(MontantTVA.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                command.Parameters(2).Value = CType(MontantTTC.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            command.Parameters(3).Value = CType(nDevis,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VBonCommande_DetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VBonCommande_Detail"
            tableMapping.ColumnMappings.Add("nDetailDevis", "nDetailDevis")
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("nLigne", "nLigne")
            tableMapping.ColumnMappings.Add("NLot", "NLot")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("NbParution", "NbParution")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("LibUnite1", "LibUnite1")
            tableMapping.ColumnMappings.Add("Unite2", "Unite2")
            tableMapping.ColumnMappings.Add("LibUnite2", "LibUnite2")
            tableMapping.ColumnMappings.Add("PrixUHT", "PrixUHT")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("TxTva", "TxTva")
            tableMapping.ColumnMappings.Add("PrixUTVA", "PrixUTVA")
            tableMapping.ColumnMappings.Add("PrixUTTC", "PrixUTTC")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("MontantLigneHT", "MontantLigneHT")
            tableMapping.ColumnMappings.Add("MontantLigneTVA", "MontantLigneTVA")
            tableMapping.ColumnMappings.Add("MontantLigneTTC", "MontantLigneTTC")
            tableMapping.ColumnMappings.Add("NCompte", "NCompte")
            tableMapping.ColumnMappings.Add("NActivite", "NActivite")
            tableMapping.ColumnMappings.Add("PrixUAchatHT", "PrixUAchatHT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VBonCommande_Detail] WHERE (([nDetailDevis] = @Original_nDetai"& _ 
                "lDevis) AND ((@IsNull_nDevis = 1 AND [nDevis] IS NULL) OR ([nDevis] = @Original_"& _ 
                "nDevis)) AND ((@IsNull_nLigne = 1 AND [nLigne] IS NULL) OR ([nLigne] = @Original"& _ 
                "_nLigne)) AND ((@IsNull_NLot = 1 AND [NLot] IS NULL) OR ([NLot] = @Original_NLot"& _ 
                ")) AND ((@IsNull_CodeProduit = 1 AND [CodeProduit] IS NULL) OR ([CodeProduit] = "& _ 
                "@Original_CodeProduit)) AND ((@IsNull_NbParution = 1 AND [NbParution] IS NULL) O"& _ 
                "R ([NbParution] = @Original_NbParution)) AND ((@IsNull_Unite1 = 1 AND [Unite1] I"& _ 
                "S NULL) OR ([Unite1] = @Original_Unite1)) AND ((@IsNull_LibUnite1 = 1 AND [LibUn"& _ 
                "ite1] IS NULL) OR ([LibUnite1] = @Original_LibUnite1)) AND ((@IsNull_Unite2 = 1 "& _ 
                "AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) AND ((@IsNull_LibUnite2 "& _ 
                "= 1 AND [LibUnite2] IS NULL) OR ([LibUnite2] = @Original_LibUnite2)) AND ((@IsNu"& _ 
                "ll_PrixUHT = 1 AND [PrixUHT] IS NULL) OR ([PrixUHT] = @Original_PrixUHT)) AND (("& _ 
                "@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA)) AND ((@IsNull"& _ 
                "_TxTva = 1 AND [TxTva] IS NULL) OR ([TxTva] = @Original_TxTva)) AND ((@IsNull_Pr"& _ 
                "ixUTVA = 1 AND [PrixUTVA] IS NULL) OR ([PrixUTVA] = @Original_PrixUTVA)) AND ((@"& _ 
                "IsNull_PrixUTTC = 1 AND [PrixUTTC] IS NULL) OR ([PrixUTTC] = @Original_PrixUTTC)"& _ 
                ") AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Original_Remise"& _ 
                ")) AND ((@IsNull_MontantLigneHT = 1 AND [MontantLigneHT] IS NULL) OR ([MontantLi"& _ 
                "gneHT] = @Original_MontantLigneHT)) AND ((@IsNull_MontantLigneTVA = 1 AND [Monta"& _ 
                "ntLigneTVA] IS NULL) OR ([MontantLigneTVA] = @Original_MontantLigneTVA)) AND ((@"& _ 
                "IsNull_MontantLigneTTC = 1 AND [MontantLigneTTC] IS NULL) OR ([MontantLigneTTC] "& _ 
                "= @Original_MontantLigneTTC)) AND ((@IsNull_NCompte = 1 AND [NCompte] IS NULL) O"& _ 
                "R ([NCompte] = @Original_NCompte)) AND ((@IsNull_NActivite = 1 AND [NActivite] I"& _ 
                "S NULL) OR ([NActivite] = @Original_NActivite)) AND ((@IsNull_PrixUAchatHT = 1 A"& _ 
                "ND [PrixUAchatHT] IS NULL) OR ([PrixUAchatHT] = @Original_PrixUAchatHT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDevis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeProduit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NbParution", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NbParution", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxTva", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxTva", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActivite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUAchatHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VBonCommande_Detail] ([nDetailDevis], [nDevis], [nLigne], [NLo"& _ 
                "t], [CodeProduit], [Libelle], [NbParution], [Unite1], [LibUnite1], [Unite2], [Li"& _ 
                "bUnite2], [PrixUHT], [TTVA], [TxTva], [PrixUTVA], [PrixUTTC], [Remise], [Montant"& _ 
                "LigneHT], [MontantLigneTVA], [MontantLigneTTC], [NCompte], [NActivite], [PrixUAc"& _ 
                "hatHT]) VALUES (@nDetailDevis, @nDevis, @nLigne, @NLot, @CodeProduit, @Libelle, "& _ 
                "@NbParution, @Unite1, @LibUnite1, @Unite2, @LibUnite2, @PrixUHT, @TTVA, @TxTva, "& _ 
                "@PrixUTVA, @PrixUTTC, @Remise, @MontantLigneHT, @MontantLigneTVA, @MontantLigneT"& _ 
                "TC, @NCompte, @NActivite, @PrixUAchatHT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, "& _ 
                "NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, Pr"& _ 
                "ixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA,"& _ 
                " MontantLigneTTC, NCompte, NActivite, PrixUAchatHT FROM VBonCommande_Detail WHER"& _ 
                "E (nDetailDevis = @nDetailDevis)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VBonCommande_Detail] SET [nDetailDevis] = @nDetailDevis, [nDevis] ="& _ 
                " @nDevis, [nLigne] = @nLigne, [NLot] = @NLot, [CodeProduit] = @CodeProduit, [Lib"& _ 
                "elle] = @Libelle, [NbParution] = @NbParution, [Unite1] = @Unite1, [LibUnite1] = "& _ 
                "@LibUnite1, [Unite2] = @Unite2, [LibUnite2] = @LibUnite2, [PrixUHT] = @PrixUHT, "& _ 
                "[TTVA] = @TTVA, [TxTva] = @TxTva, [PrixUTVA] = @PrixUTVA, [PrixUTTC] = @PrixUTTC"& _ 
                ", [Remise] = @Remise, [MontantLigneHT] = @MontantLigneHT, [MontantLigneTVA] = @M"& _ 
                "ontantLigneTVA, [MontantLigneTTC] = @MontantLigneTTC, [NCompte] = @NCompte, [NAc"& _ 
                "tivite] = @NActivite, [PrixUAchatHT] = @PrixUAchatHT WHERE (([nDetailDevis] = @O"& _ 
                "riginal_nDetailDevis) AND ((@IsNull_nDevis = 1 AND [nDevis] IS NULL) OR ([nDevis"& _ 
                "] = @Original_nDevis)) AND ((@IsNull_nLigne = 1 AND [nLigne] IS NULL) OR ([nLign"& _ 
                "e] = @Original_nLigne)) AND ((@IsNull_NLot = 1 AND [NLot] IS NULL) OR ([NLot] = "& _ 
                "@Original_NLot)) AND ((@IsNull_CodeProduit = 1 AND [CodeProduit] IS NULL) OR ([C"& _ 
                "odeProduit] = @Original_CodeProduit)) AND ((@IsNull_NbParution = 1 AND [NbParuti"& _ 
                "on] IS NULL) OR ([NbParution] = @Original_NbParution)) AND ((@IsNull_Unite1 = 1 "& _ 
                "AND [Unite1] IS NULL) OR ([Unite1] = @Original_Unite1)) AND ((@IsNull_LibUnite1 "& _ 
                "= 1 AND [LibUnite1] IS NULL) OR ([LibUnite1] = @Original_LibUnite1)) AND ((@IsNu"& _ 
                "ll_Unite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) AND ((@IsN"& _ 
                "ull_LibUnite2 = 1 AND [LibUnite2] IS NULL) OR ([LibUnite2] = @Original_LibUnite2"& _ 
                ")) AND ((@IsNull_PrixUHT = 1 AND [PrixUHT] IS NULL) OR ([PrixUHT] = @Original_Pr"& _ 
                "ixUHT)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA))"& _ 
                " AND ((@IsNull_TxTva = 1 AND [TxTva] IS NULL) OR ([TxTva] = @Original_TxTva)) AN"& _ 
                "D ((@IsNull_PrixUTVA = 1 AND [PrixUTVA] IS NULL) OR ([PrixUTVA] = @Original_Prix"& _ 
                "UTVA)) AND ((@IsNull_PrixUTTC = 1 AND [PrixUTTC] IS NULL) OR ([PrixUTTC] = @Orig"& _ 
                "inal_PrixUTTC)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @O"& _ 
                "riginal_Remise)) AND ((@IsNull_MontantLigneHT = 1 AND [MontantLigneHT] IS NULL) "& _ 
                "OR ([MontantLigneHT] = @Original_MontantLigneHT)) AND ((@IsNull_MontantLigneTVA "& _ 
                "= 1 AND [MontantLigneTVA] IS NULL) OR ([MontantLigneTVA] = @Original_MontantLign"& _ 
                "eTVA)) AND ((@IsNull_MontantLigneTTC = 1 AND [MontantLigneTTC] IS NULL) OR ([Mon"& _ 
                "tantLigneTTC] = @Original_MontantLigneTTC)) AND ((@IsNull_NCompte = 1 AND [NComp"& _ 
                "te] IS NULL) OR ([NCompte] = @Original_NCompte)) AND ((@IsNull_NActivite = 1 AND"& _ 
                " [NActivite] IS NULL) OR ([NActivite] = @Original_NActivite)) AND ((@IsNull_Prix"& _ 
                "UAchatHT = 1 AND [PrixUAchatHT] IS NULL) OR ([PrixUAchatHT] = @Original_PrixUAch"& _ 
                "atHT)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbPar"& _ 
                "ution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, Pri"& _ 
                "xUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActiv"& _ 
                "ite, PrixUAchatHT FROM VBonCommande_Detail WHERE (nDetailDevis = @nDetailDevis)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDevis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeProduit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NbParution", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NbParution", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxTva", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxTva", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActivite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUAchatHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.RecalculPiecesAgrifact.My.MySettings.Default.AgrifactConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unit"& _ 
                "e1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remi"& _ 
                "se, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUA"& _ 
                "chatHT FROM dbo.VBonCommande_Detail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unit"& _ 
                "e1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remi"& _ 
                "se, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUA"& _ 
                "chatHT FROM dbo.VBonCommande_Detail WHERE nDevis=@nDevis AND CodeProduit IS NOT "& _ 
                "NULL"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE [dbo].[VBonCommande_Detail] SET [MontantLigneHT] = @MontantLigneHT, [Monta"& _ 
                "ntLigneTVA] = @MontantLigneTVA, [MontantLigneTTC] = @MontantLigneTTC WHERE ([nDe"& _ 
                "tailDevis] = @nDetailDevis)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAgrifact.VBonCommande_DetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAgrifact.VBonCommande_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAgrifact.VBonCommande_DetailDataTable = New DataSetAgrifact.VBonCommande_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynDevis(ByVal dataTable As DataSetAgrifact.VBonCommande_DetailDataTable, ByVal nDevis As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynDevis(ByVal nDevis As Global.System.Nullable(Of Decimal)) As DataSetAgrifact.VBonCommande_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetAgrifact.VBonCommande_DetailDataTable = New DataSetAgrifact.VBonCommande_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAgrifact.VBonCommande_DetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAgrifact) As Integer
            Return Me.Adapter.Update(dataSet, "VBonCommande_Detail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDetailDevis,Decimal)
            If (Original_nDevis.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nDevis.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_nLigne.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nLigne.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_NLot Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_NLot,String)
            End If
            If (Original_CodeProduit Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_NbParution.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_NbParution.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Unite1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Unite1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_LibUnite1,String)
            End If
            If (Original_Unite2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Unite2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_LibUnite2,String)
            End If
            If (Original_PrixUHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PrixUHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_TTVA,String)
            End If
            If (Original_TxTva.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_TxTva.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompte Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_NCompte,String)
            End If
            If (Original_NActivite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_NActivite,String)
            End If
            If (Original_PrixUAchatHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nDetailDevis,Decimal)
            If (nDevis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (nLigne.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nLigne.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NLot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NLot,String)
            End If
            If (CodeProduit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Libelle,String)
            End If
            If (NbParution.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NbParution.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Unite1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Unite1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LibUnite1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LibUnite1,String)
            End If
            If (Unite2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Unite2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LibUnite2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LibUnite2,String)
            End If
            If (PrixUHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrixUHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(TTVA,String)
            End If
            If (TxTva.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(TxTva.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrixUTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrixUTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(NActivite,String)
            End If
            If (PrixUAchatHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nDetailDevis,Decimal)
            If (nDevis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (nLigne.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nLigne.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NLot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NLot,String)
            End If
            If (CodeProduit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Libelle,String)
            End If
            If (NbParution.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NbParution.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Unite1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Unite1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LibUnite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(LibUnite1,String)
            End If
            If (Unite2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Unite2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LibUnite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LibUnite2,String)
            End If
            If (PrixUHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PrixUHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(TTVA,String)
            End If
            If (TxTva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(TxTva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrixUTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrixUTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(NActivite,String)
            End If
            If (PrixUAchatHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_nDetailDevis,Decimal)
            If (Original_nDevis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_nDevis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_nLigne.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_nLigne.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_NLot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_NLot,String)
            End If
            If (Original_CodeProduit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_NbParution.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_NbParution.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_Unite1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Unite1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_LibUnite1,String)
            End If
            If (Original_Unite2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Unite2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_LibUnite2,String)
            End If
            If (Original_PrixUHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_PrixUHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_TTVA,String)
            End If
            If (Original_TxTva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_TxTva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_NCompte,String)
            End If
            If (Original_NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_NActivite,String)
            End If
            If (Original_PrixUAchatHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUAchatHT, Original_nDetailDevis, Original_nDevis, Original_nLigne, Original_NLot, Original_CodeProduit, Original_NbParution, Original_Unite1, Original_LibUnite1, Original_Unite2, Original_LibUnite2, Original_PrixUHT, Original_TTVA, Original_TxTva, Original_PrixUTVA, Original_PrixUTTC, Original_Remise, Original_MontantLigneHT, Original_MontantLigneTVA, Original_MontantLigneTTC, Original_NCompte, Original_NActivite, Original_PrixUAchatHT)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMontants(ByVal MontantLigneHT As Global.System.Nullable(Of Decimal), ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal), ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal), ByVal nDetailDevis As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (MontantLigneHT.HasValue = true) Then
                command.Parameters(0).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                command.Parameters(1).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                command.Parameters(2).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            command.Parameters(3).Value = CType(nDetailDevis,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VBonLivraisonTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VBonLivraison"
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("Origine", "Origine")
            tableMapping.ColumnMappings.Add("nOrigine", "nOrigine")
            tableMapping.ColumnMappings.Add("nClient", "nClient")
            tableMapping.ColumnMappings.Add("AdresseFacture", "AdresseFacture")
            tableMapping.ColumnMappings.Add("nPrescripteur", "nPrescripteur")
            tableMapping.ColumnMappings.Add("nPayeur", "nPayeur")
            tableMapping.ColumnMappings.Add("nContact", "nContact")
            tableMapping.ColumnMappings.Add("nCommercial", "nCommercial")
            tableMapping.ColumnMappings.Add("Secteur", "Secteur")
            tableMapping.ColumnMappings.Add("FacturationPrescripteur", "FacturationPrescripteur")
            tableMapping.ColumnMappings.Add("FacturationClient", "FacturationClient")
            tableMapping.ColumnMappings.Add("nFacture", "nFacture")
            tableMapping.ColumnMappings.Add("DateFacture", "DateFacture")
            tableMapping.ColumnMappings.Add("Paye", "Paye")
            tableMapping.ColumnMappings.Add("ExportCompta", "ExportCompta")
            tableMapping.ColumnMappings.Add("DateExportCompta", "DateExportCompta")
            tableMapping.ColumnMappings.Add("DateEcheance", "DateEcheance")
            tableMapping.ColumnMappings.Add("Observation", "Observation")
            tableMapping.ColumnMappings.Add("DateRelance1", "DateRelance1")
            tableMapping.ColumnMappings.Add("DateRelance2", "DateRelance2")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("MontantHT", "MontantHT")
            tableMapping.ColumnMappings.Add("MontantTVA", "MontantTVA")
            tableMapping.ColumnMappings.Add("MontantTTC", "MontantTTC")
            tableMapping.ColumnMappings.Add("nPreFacturation", "nPreFacturation")
            tableMapping.ColumnMappings.Add("DatePreFacturation", "DatePreFacturation")
            tableMapping.ColumnMappings.Add("FacturationTTC", "FacturationTTC")
            tableMapping.ColumnMappings.Add("nTarif", "nTarif")
            tableMapping.ColumnMappings.Add("Depot", "Depot")
            tableMapping.ColumnMappings.Add("TxCommission", "TxCommission")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VBonLivraison] WHERE (([nDevis] = @Original_nDevis) AND ((@IsN"& _ 
                "ull_nOrigine = 1 AND [nOrigine] IS NULL) OR ([nOrigine] = @Original_nOrigine)) A"& _ 
                "ND ((@IsNull_nClient = 1 AND [nClient] IS NULL) OR ([nClient] = @Original_nClien"& _ 
                "t)) AND ((@IsNull_nPrescripteur = 1 AND [nPrescripteur] IS NULL) OR ([nPrescript"& _ 
                "eur] = @Original_nPrescripteur)) AND ((@IsNull_nPayeur = 1 AND [nPayeur] IS NULL"& _ 
                ") OR ([nPayeur] = @Original_nPayeur)) AND ((@IsNull_nContact = 1 AND [nContact] "& _ 
                "IS NULL) OR ([nContact] = @Original_nContact)) AND ((@IsNull_nCommercial = 1 AND"& _ 
                " [nCommercial] IS NULL) OR ([nCommercial] = @Original_nCommercial)) AND ((@IsNul"& _ 
                "l_Secteur = 1 AND [Secteur] IS NULL) OR ([Secteur] = @Original_Secteur)) AND ([F"& _ 
                "acturationPrescripteur] = @Original_FacturationPrescripteur) AND ([FacturationCl"& _ 
                "ient] = @Original_FacturationClient) AND ((@IsNull_nFacture = 1 AND [nFacture] I"& _ 
                "S NULL) OR ([nFacture] = @Original_nFacture)) AND ((@IsNull_DateFacture = 1 AND "& _ 
                "[DateFacture] IS NULL) OR ([DateFacture] = @Original_DateFacture)) AND ([Paye] ="& _ 
                " @Original_Paye) AND ([ExportCompta] = @Original_ExportCompta) AND ((@IsNull_Dat"& _ 
                "eExportCompta = 1 AND [DateExportCompta] IS NULL) OR ([DateExportCompta] = @Orig"& _ 
                "inal_DateExportCompta)) AND ((@IsNull_DateEcheance = 1 AND [DateEcheance] IS NUL"& _ 
                "L) OR ([DateEcheance] = @Original_DateEcheance)) AND ((@IsNull_DateRelance1 = 1 "& _ 
                "AND [DateRelance1] IS NULL) OR ([DateRelance1] = @Original_DateRelance1)) AND (("& _ 
                "@IsNull_DateRelance2 = 1 AND [DateRelance2] IS NULL) OR ([DateRelance2] = @Origi"& _ 
                "nal_DateRelance2)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] ="& _ 
                " @Original_Remise)) AND ((@IsNull_MontantHT = 1 AND [MontantHT] IS NULL) OR ([Mo"& _ 
                "ntantHT] = @Original_MontantHT)) AND ((@IsNull_MontantTVA = 1 AND [MontantTVA] I"& _ 
                "S NULL) OR ([MontantTVA] = @Original_MontantTVA)) AND ((@IsNull_MontantTTC = 1 A"& _ 
                "ND [MontantTTC] IS NULL) OR ([MontantTTC] = @Original_MontantTTC)) AND ((@IsNull"& _ 
                "_nPreFacturation = 1 AND [nPreFacturation] IS NULL) OR ([nPreFacturation] = @Ori"& _ 
                "ginal_nPreFacturation)) AND ((@IsNull_DatePreFacturation = 1 AND [DatePreFactura"& _ 
                "tion] IS NULL) OR ([DatePreFacturation] = @Original_DatePreFacturation)) AND ((@"& _ 
                "IsNull_FacturationTTC = 1 AND [FacturationTTC] IS NULL) OR ([FacturationTTC] = @"& _ 
                "Original_FacturationTTC)) AND ((@IsNull_nTarif = 1 AND [nTarif] IS NULL) OR ([nT"& _ 
                "arif] = @Original_nTarif)) AND ((@IsNull_Depot = 1 AND [Depot] IS NULL) OR ([Dep"& _ 
                "ot] = @Original_Depot)) AND ((@IsNull_TxCommission = 1 AND [TxCommission] IS NUL"& _ 
                "L) OR ([TxCommission] = @Original_TxCommission)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrigine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPrescripteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPayeur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nContact", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nContact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Secteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExportCompta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEcheance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DatePreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VBonLivraison] ([nDevis], [Origine], [nOrigine], [nClient], [A"& _ 
                "dresseFacture], [nPrescripteur], [nPayeur], [nContact], [nCommercial], [Secteur]"& _ 
                ", [FacturationPrescripteur], [FacturationClient], [nFacture], [DateFacture], [Pa"& _ 
                "ye], [ExportCompta], [DateExportCompta], [DateEcheance], [Observation], [DateRel"& _ 
                "ance1], [DateRelance2], [Remise], [MontantHT], [MontantTVA], [MontantTTC], [nPre"& _ 
                "Facturation], [DatePreFacturation], [FacturationTTC], [nTarif], [Depot], [TxComm"& _ 
                "ission]) VALUES (@nDevis, @Origine, @nOrigine, @nClient, @AdresseFacture, @nPres"& _ 
                "cripteur, @nPayeur, @nContact, @nCommercial, @Secteur, @FacturationPrescripteur,"& _ 
                " @FacturationClient, @nFacture, @DateFacture, @Paye, @ExportCompta, @DateExportC"& _ 
                "ompta, @DateEcheance, @Observation, @DateRelance1, @DateRelance2, @Remise, @Mont"& _ 
                "antHT, @MontantTVA, @MontantTTC, @nPreFacturation, @DatePreFacturation, @Factura"& _ 
                "tionTTC, @nTarif, @Depot, @TxCommission);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDevis, Origine, nOrigine, nCl"& _ 
                "ient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, Fa"& _ 
                "cturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCom"& _ 
                "pta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Re"& _ 
                "mise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, Fa"& _ 
                "cturationTTC, nTarif, Depot, TxCommission FROM VBonLivraison WHERE (nDevis = @nD"& _ 
                "evis)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Origine", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Origine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseFacture", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observation", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VBonLivraison] SET [nDevis] = @nDevis, [Origine] = @Origine, [nOrig"& _ 
                "ine] = @nOrigine, [nClient] = @nClient, [AdresseFacture] = @AdresseFacture, [nPr"& _ 
                "escripteur] = @nPrescripteur, [nPayeur] = @nPayeur, [nContact] = @nContact, [nCo"& _ 
                "mmercial] = @nCommercial, [Secteur] = @Secteur, [FacturationPrescripteur] = @Fac"& _ 
                "turationPrescripteur, [FacturationClient] = @FacturationClient, [nFacture] = @nF"& _ 
                "acture, [DateFacture] = @DateFacture, [Paye] = @Paye, [ExportCompta] = @ExportCo"& _ 
                "mpta, [DateExportCompta] = @DateExportCompta, [DateEcheance] = @DateEcheance, [O"& _ 
                "bservation] = @Observation, [DateRelance1] = @DateRelance1, [DateRelance2] = @Da"& _ 
                "teRelance2, [Remise] = @Remise, [MontantHT] = @MontantHT, [MontantTVA] = @Montan"& _ 
                "tTVA, [MontantTTC] = @MontantTTC, [nPreFacturation] = @nPreFacturation, [DatePre"& _ 
                "Facturation] = @DatePreFacturation, [FacturationTTC] = @FacturationTTC, [nTarif]"& _ 
                " = @nTarif, [Depot] = @Depot, [TxCommission] = @TxCommission WHERE (([nDevis] = "& _ 
                "@Original_nDevis) AND ((@IsNull_nOrigine = 1 AND [nOrigine] IS NULL) OR ([nOrigi"& _ 
                "ne] = @Original_nOrigine)) AND ((@IsNull_nClient = 1 AND [nClient] IS NULL) OR ("& _ 
                "[nClient] = @Original_nClient)) AND ((@IsNull_nPrescripteur = 1 AND [nPrescripte"& _ 
                "ur] IS NULL) OR ([nPrescripteur] = @Original_nPrescripteur)) AND ((@IsNull_nPaye"& _ 
                "ur = 1 AND [nPayeur] IS NULL) OR ([nPayeur] = @Original_nPayeur)) AND ((@IsNull_"& _ 
                "nContact = 1 AND [nContact] IS NULL) OR ([nContact] = @Original_nContact)) AND ("& _ 
                "(@IsNull_nCommercial = 1 AND [nCommercial] IS NULL) OR ([nCommercial] = @Origina"& _ 
                "l_nCommercial)) AND ((@IsNull_Secteur = 1 AND [Secteur] IS NULL) OR ([Secteur] ="& _ 
                " @Original_Secteur)) AND ([FacturationPrescripteur] = @Original_FacturationPresc"& _ 
                "ripteur) AND ([FacturationClient] = @Original_FacturationClient) AND ((@IsNull_n"& _ 
                "Facture = 1 AND [nFacture] IS NULL) OR ([nFacture] = @Original_nFacture)) AND (("& _ 
                "@IsNull_DateFacture = 1 AND [DateFacture] IS NULL) OR ([DateFacture] = @Original"& _ 
                "_DateFacture)) AND ([Paye] = @Original_Paye) AND ([ExportCompta] = @Original_Exp"& _ 
                "ortCompta) AND ((@IsNull_DateExportCompta = 1 AND [DateExportCompta] IS NULL) OR"& _ 
                " ([DateExportCompta] = @Original_DateExportCompta)) AND ((@IsNull_DateEcheance ="& _ 
                " 1 AND [DateEcheance] IS NULL) OR ([DateEcheance] = @Original_DateEcheance)) AND"& _ 
                " ((@IsNull_DateRelance1 = 1 AND [DateRelance1] IS NULL) OR ([DateRelance1] = @Or"& _ 
                "iginal_DateRelance1)) AND ((@IsNull_DateRelance2 = 1 AND [DateRelance2] IS NULL)"& _ 
                " OR ([DateRelance2] = @Original_DateRelance2)) AND ((@IsNull_Remise = 1 AND [Rem"& _ 
                "ise] IS NULL) OR ([Remise] = @Original_Remise)) AND ((@IsNull_MontantHT = 1 AND "& _ 
                "[MontantHT] IS NULL) OR ([MontantHT] = @Original_MontantHT)) AND ((@IsNull_Monta"& _ 
                "ntTVA = 1 AND [MontantTVA] IS NULL) OR ([MontantTVA] = @Original_MontantTVA)) AN"& _ 
                "D ((@IsNull_MontantTTC = 1 AND [MontantTTC] IS NULL) OR ([MontantTTC] = @Origina"& _ 
                "l_MontantTTC)) AND ((@IsNull_nPreFacturation = 1 AND [nPreFacturation] IS NULL) "& _ 
                "OR ([nPreFacturation] = @Original_nPreFacturation)) AND ((@IsNull_DatePreFactura"& _ 
                "tion = 1 AND [DatePreFacturation] IS NULL) OR ([DatePreFacturation] = @Original_"& _ 
                "DatePreFacturation)) AND ((@IsNull_FacturationTTC = 1 AND [FacturationTTC] IS NU"& _ 
                "LL) OR ([FacturationTTC] = @Original_FacturationTTC)) AND ((@IsNull_nTarif = 1 A"& _ 
                "ND [nTarif] IS NULL) OR ([nTarif] = @Original_nTarif)) AND ((@IsNull_Depot = 1 A"& _ 
                "ND [Depot] IS NULL) OR ([Depot] = @Original_Depot)) AND ((@IsNull_TxCommission ="& _ 
                " 1 AND [TxCommission] IS NULL) OR ([TxCommission] = @Original_TxCommission)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeu"& _ 
                "r, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, n"& _ 
                "Facture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observ"& _ 
                "ation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nP"& _ 
                "reFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, TxCommission F"& _ 
                "ROM VBonLivraison WHERE (nDevis = @nDevis)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Origine", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Origine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseFacture", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observation", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrigine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPrescripteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPayeur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nContact", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nContact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Secteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExportCompta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEcheance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DatePreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.RecalculPiecesAgrifact.My.MySettings.Default.AgrifactConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur"& _ 
                ", nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nF"& _ 
                "acture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observa"& _ 
                "tion, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPr"& _ 
                "eFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, TxCommission FR"& _ 
                "OM dbo.VBonLivraison"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, "& _ 
                "nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationCli"& _ 
                "ent, nFacture, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         DateFacture, Paye, ExportCompta, DateE"& _ 
                "xportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, Mont"& _ 
                "antHT, MontantTVA, MontantTTC, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         nPreFacturation, DateP"& _ 
                "reFacturation, FacturationTTC, nTarif, Depot, TxCommission"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VBon"& _ 
                "Livraison"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (FacturationTTC = @FacturationTTC)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY nDevis DESC"& _ 
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur"& _ 
                ", nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nF"& _ 
                "acture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observa"& _ 
                "tion, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPr"& _ 
                "eFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, TxCommission FR"& _ 
                "OM dbo.VBonLivraison WHERE nDevis=@nDevis"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE [dbo].[VBonLivraison] SET [MontantHT] = @MontantHT, [MontantTVA] = @Montan"& _ 
                "tTVA, [MontantTTC] = @MontantTTC WHERE ([nDevis] = @nDevis)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAgrifact.VBonLivraisonDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAgrifact.VBonLivraisonDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAgrifact.VBonLivraisonDataTable = New DataSetAgrifact.VBonLivraisonDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFacturationTTC(ByVal dataTable As DataSetAgrifact.VBonLivraisonDataTable, ByVal FacturationTTC As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFacturationTTC(ByVal FacturationTTC As Global.System.Nullable(Of Boolean)) As DataSetAgrifact.VBonLivraisonDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetAgrifact.VBonLivraisonDataTable = New DataSetAgrifact.VBonLivraisonDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynDevis(ByVal dataTable As DataSetAgrifact.VBonLivraisonDataTable, ByVal nDevis As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynDevis(ByVal nDevis As Decimal) As DataSetAgrifact.VBonLivraisonDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            Dim dataTable As DataSetAgrifact.VBonLivraisonDataTable = New DataSetAgrifact.VBonLivraisonDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAgrifact.VBonLivraisonDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAgrifact) As Integer
            Return Me.Adapter.Update(dataSet, "VBonLivraison")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Depot As String,  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDevis,Decimal)
            If (Original_nOrigine.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nOrigine.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_nClient.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nClient.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_nPrescripteur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_nPayeur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_nPayeur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_nContact.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_nContact.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_nCommercial.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Secteur Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Secteur,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_FacturationPrescripteur,Boolean)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_FacturationClient,Boolean)
            If (Original_nFacture.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_nFacture.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_DateFacture.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_DateFacture.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_Paye,Boolean)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_ExportCompta,Boolean)
            If (Original_DateExportCompta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_DateExportCompta.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEcheance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_DateEcheance.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_DateRelance1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_DateRelance2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_MontantHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MontantTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_MontantTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_nPreFacturation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_DatePreFacturation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_DatePreFacturation.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_Depot Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_Depot,String)
            End If
            If (Original_TxCommission.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_TxCommission.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Depot As String,  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Origine Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Origine,String)
            End If
            If (nOrigine.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nOrigine.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (nClient.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(nClient.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AdresseFacture Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AdresseFacture,String)
            End If
            If (nPrescripteur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (nPayeur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(nPayeur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (nContact.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(nContact.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(nCommercial.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Secteur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Secteur,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(FacturationPrescripteur,Boolean)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(FacturationClient,Boolean)
            If (nFacture.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(nFacture.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (DateFacture.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(DateFacture.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(Paye,Boolean)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(ExportCompta,Boolean)
            If (DateExportCompta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(DateExportCompta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (DateEcheance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(DateEcheance.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Observation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Observation,String)
            End If
            If (DateRelance1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(DateRelance1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (DateRelance2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(DateRelance2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MontantHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(MontantHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(MontantTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(MontantTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (nPreFacturation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (DatePreFacturation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(DatePreFacturation.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Depot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Depot,String)
            End If
            If (TxCommission.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(TxCommission.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Depot As String,  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Depot As String,  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Origine Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Origine,String)
            End If
            If (nOrigine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nOrigine.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (nClient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(nClient.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AdresseFacture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AdresseFacture,String)
            End If
            If (nPrescripteur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (nPayeur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(nPayeur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (nContact.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(nContact.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(nCommercial.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Secteur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Secteur,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(FacturationPrescripteur,Boolean)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(FacturationClient,Boolean)
            If (nFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(nFacture.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (DateFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(DateFacture.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Paye,Boolean)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ExportCompta,Boolean)
            If (DateExportCompta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(DateExportCompta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (DateEcheance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(DateEcheance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Observation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Observation,String)
            End If
            If (DateRelance1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(DateRelance1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (DateRelance2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(DateRelance2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MontantHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(MontantHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(MontantTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(MontantTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (nPreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (DatePreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(DatePreFacturation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Depot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Depot,String)
            End If
            If (TxCommission.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(TxCommission.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_nDevis,Decimal)
            If (Original_nOrigine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_nOrigine.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_nClient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_nClient.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_nPrescripteur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_nPayeur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_nPayeur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_nContact.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_nContact.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_nCommercial.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_Secteur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_Secteur,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_FacturationPrescripteur,Boolean)
            Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_FacturationClient,Boolean)
            If (Original_nFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_nFacture.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_DateFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_DateFacture.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_Paye,Boolean)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_ExportCompta,Boolean)
            If (Original_DateExportCompta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_DateExportCompta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEcheance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_DateEcheance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_DateRelance1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_DateRelance2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_MontantHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_MontantTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_MontantTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_nPreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_DatePreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_DatePreFacturation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_Depot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_Depot,String)
            End If
            If (Original_TxCommission.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_TxCommission.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Depot As String,  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Depot As String,  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, TxCommission, Original_nDevis, Original_nOrigine, Original_nClient, Original_nPrescripteur, Original_nPayeur, Original_nContact, Original_nCommercial, Original_Secteur, Original_FacturationPrescripteur, Original_FacturationClient, Original_nFacture, Original_DateFacture, Original_Paye, Original_ExportCompta, Original_DateExportCompta, Original_DateEcheance, Original_DateRelance1, Original_DateRelance2, Original_Remise, Original_MontantHT, Original_MontantTVA, Original_MontantTTC, Original_nPreFacturation, Original_DatePreFacturation, Original_FacturationTTC, Original_nTarif, Original_Depot, Original_TxCommission)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMontants(ByVal MontantHT As Global.System.Nullable(Of Decimal), ByVal MontantTVA As Global.System.Nullable(Of Decimal), ByVal MontantTTC As Global.System.Nullable(Of Decimal), ByVal nDevis As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (MontantHT.HasValue = true) Then
                command.Parameters(0).Value = CType(MontantHT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                command.Parameters(1).Value = CType(MontantTVA.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                command.Parameters(2).Value = CType(MontantTTC.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            command.Parameters(3).Value = CType(nDevis,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VBonLivraison_DetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VBonLivraison_Detail"
            tableMapping.ColumnMappings.Add("nDetailDevis", "nDetailDevis")
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("nLigne", "nLigne")
            tableMapping.ColumnMappings.Add("NLot", "NLot")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("NbParution", "NbParution")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("LibUnite1", "LibUnite1")
            tableMapping.ColumnMappings.Add("Unite2", "Unite2")
            tableMapping.ColumnMappings.Add("LibUnite2", "LibUnite2")
            tableMapping.ColumnMappings.Add("PrixUHT", "PrixUHT")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("TxTva", "TxTva")
            tableMapping.ColumnMappings.Add("PrixUTVA", "PrixUTVA")
            tableMapping.ColumnMappings.Add("PrixUTTC", "PrixUTTC")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("MontantLigneHT", "MontantLigneHT")
            tableMapping.ColumnMappings.Add("MontantLigneTVA", "MontantLigneTVA")
            tableMapping.ColumnMappings.Add("MontantLigneTTC", "MontantLigneTTC")
            tableMapping.ColumnMappings.Add("NCompte", "NCompte")
            tableMapping.ColumnMappings.Add("NActivite", "NActivite")
            tableMapping.ColumnMappings.Add("PrixUAchatHT", "PrixUAchatHT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VBonLivraison_Detail] WHERE (([nDetailDevis] = @Original_nDeta"& _ 
                "ilDevis) AND ((@IsNull_nDevis = 1 AND [nDevis] IS NULL) OR ([nDevis] = @Original"& _ 
                "_nDevis)) AND ((@IsNull_nLigne = 1 AND [nLigne] IS NULL) OR ([nLigne] = @Origina"& _ 
                "l_nLigne)) AND ((@IsNull_NLot = 1 AND [NLot] IS NULL) OR ([NLot] = @Original_NLo"& _ 
                "t)) AND ((@IsNull_CodeProduit = 1 AND [CodeProduit] IS NULL) OR ([CodeProduit] ="& _ 
                " @Original_CodeProduit)) AND ((@IsNull_NbParution = 1 AND [NbParution] IS NULL) "& _ 
                "OR ([NbParution] = @Original_NbParution)) AND ((@IsNull_Unite1 = 1 AND [Unite1] "& _ 
                "IS NULL) OR ([Unite1] = @Original_Unite1)) AND ((@IsNull_LibUnite1 = 1 AND [LibU"& _ 
                "nite1] IS NULL) OR ([LibUnite1] = @Original_LibUnite1)) AND ((@IsNull_Unite2 = 1"& _ 
                " AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) AND ((@IsNull_LibUnite2"& _ 
                " = 1 AND [LibUnite2] IS NULL) OR ([LibUnite2] = @Original_LibUnite2)) AND ((@IsN"& _ 
                "ull_PrixUHT = 1 AND [PrixUHT] IS NULL) OR ([PrixUHT] = @Original_PrixUHT)) AND ("& _ 
                "(@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA)) AND ((@IsNul"& _ 
                "l_TxTva = 1 AND [TxTva] IS NULL) OR ([TxTva] = @Original_TxTva)) AND ((@IsNull_P"& _ 
                "rixUTVA = 1 AND [PrixUTVA] IS NULL) OR ([PrixUTVA] = @Original_PrixUTVA)) AND (("& _ 
                "@IsNull_PrixUTTC = 1 AND [PrixUTTC] IS NULL) OR ([PrixUTTC] = @Original_PrixUTTC"& _ 
                ")) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Original_Remis"& _ 
                "e)) AND ((@IsNull_MontantLigneHT = 1 AND [MontantLigneHT] IS NULL) OR ([MontantL"& _ 
                "igneHT] = @Original_MontantLigneHT)) AND ((@IsNull_MontantLigneTVA = 1 AND [Mont"& _ 
                "antLigneTVA] IS NULL) OR ([MontantLigneTVA] = @Original_MontantLigneTVA)) AND (("& _ 
                "@IsNull_MontantLigneTTC = 1 AND [MontantLigneTTC] IS NULL) OR ([MontantLigneTTC]"& _ 
                " = @Original_MontantLigneTTC)) AND ((@IsNull_NCompte = 1 AND [NCompte] IS NULL) "& _ 
                "OR ([NCompte] = @Original_NCompte)) AND ((@IsNull_NActivite = 1 AND [NActivite] "& _ 
                "IS NULL) OR ([NActivite] = @Original_NActivite)) AND ((@IsNull_PrixUAchatHT = 1 "& _ 
                "AND [PrixUAchatHT] IS NULL) OR ([PrixUAchatHT] = @Original_PrixUAchatHT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDevis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeProduit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NbParution", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NbParution", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxTva", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxTva", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActivite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUAchatHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VBonLivraison_Detail] ([nDetailDevis], [nDevis], [nLigne], [NL"& _ 
                "ot], [CodeProduit], [Libelle], [NbParution], [Unite1], [LibUnite1], [Unite2], [L"& _ 
                "ibUnite2], [PrixUHT], [TTVA], [TxTva], [PrixUTVA], [PrixUTTC], [Remise], [Montan"& _ 
                "tLigneHT], [MontantLigneTVA], [MontantLigneTTC], [NCompte], [NActivite], [PrixUA"& _ 
                "chatHT]) VALUES (@nDetailDevis, @nDevis, @nLigne, @NLot, @CodeProduit, @Libelle,"& _ 
                " @NbParution, @Unite1, @LibUnite1, @Unite2, @LibUnite2, @PrixUHT, @TTVA, @TxTva,"& _ 
                " @PrixUTVA, @PrixUTTC, @Remise, @MontantLigneHT, @MontantLigneTVA, @MontantLigne"& _ 
                "TTC, @NCompte, @NActivite, @PrixUAchatHT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne,"& _ 
                " NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, P"& _ 
                "rixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA"& _ 
                ", MontantLigneTTC, NCompte, NActivite, PrixUAchatHT FROM VBonLivraison_Detail WH"& _ 
                "ERE (nDetailDevis = @nDetailDevis)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VBonLivraison_Detail] SET [nDetailDevis] = @nDetailDevis, [nDevis] "& _ 
                "= @nDevis, [nLigne] = @nLigne, [NLot] = @NLot, [CodeProduit] = @CodeProduit, [Li"& _ 
                "belle] = @Libelle, [NbParution] = @NbParution, [Unite1] = @Unite1, [LibUnite1] ="& _ 
                " @LibUnite1, [Unite2] = @Unite2, [LibUnite2] = @LibUnite2, [PrixUHT] = @PrixUHT,"& _ 
                " [TTVA] = @TTVA, [TxTva] = @TxTva, [PrixUTVA] = @PrixUTVA, [PrixUTTC] = @PrixUTT"& _ 
                "C, [Remise] = @Remise, [MontantLigneHT] = @MontantLigneHT, [MontantLigneTVA] = @"& _ 
                "MontantLigneTVA, [MontantLigneTTC] = @MontantLigneTTC, [NCompte] = @NCompte, [NA"& _ 
                "ctivite] = @NActivite, [PrixUAchatHT] = @PrixUAchatHT WHERE (([nDetailDevis] = @"& _ 
                "Original_nDetailDevis) AND ((@IsNull_nDevis = 1 AND [nDevis] IS NULL) OR ([nDevi"& _ 
                "s] = @Original_nDevis)) AND ((@IsNull_nLigne = 1 AND [nLigne] IS NULL) OR ([nLig"& _ 
                "ne] = @Original_nLigne)) AND ((@IsNull_NLot = 1 AND [NLot] IS NULL) OR ([NLot] ="& _ 
                " @Original_NLot)) AND ((@IsNull_CodeProduit = 1 AND [CodeProduit] IS NULL) OR (["& _ 
                "CodeProduit] = @Original_CodeProduit)) AND ((@IsNull_NbParution = 1 AND [NbParut"& _ 
                "ion] IS NULL) OR ([NbParution] = @Original_NbParution)) AND ((@IsNull_Unite1 = 1"& _ 
                " AND [Unite1] IS NULL) OR ([Unite1] = @Original_Unite1)) AND ((@IsNull_LibUnite1"& _ 
                " = 1 AND [LibUnite1] IS NULL) OR ([LibUnite1] = @Original_LibUnite1)) AND ((@IsN"& _ 
                "ull_Unite2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) AND ((@Is"& _ 
                "Null_LibUnite2 = 1 AND [LibUnite2] IS NULL) OR ([LibUnite2] = @Original_LibUnite"& _ 
                "2)) AND ((@IsNull_PrixUHT = 1 AND [PrixUHT] IS NULL) OR ([PrixUHT] = @Original_P"& _ 
                "rixUHT)) AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA)"& _ 
                ") AND ((@IsNull_TxTva = 1 AND [TxTva] IS NULL) OR ([TxTva] = @Original_TxTva)) A"& _ 
                "ND ((@IsNull_PrixUTVA = 1 AND [PrixUTVA] IS NULL) OR ([PrixUTVA] = @Original_Pri"& _ 
                "xUTVA)) AND ((@IsNull_PrixUTTC = 1 AND [PrixUTTC] IS NULL) OR ([PrixUTTC] = @Ori"& _ 
                "ginal_PrixUTTC)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @"& _ 
                "Original_Remise)) AND ((@IsNull_MontantLigneHT = 1 AND [MontantLigneHT] IS NULL)"& _ 
                " OR ([MontantLigneHT] = @Original_MontantLigneHT)) AND ((@IsNull_MontantLigneTVA"& _ 
                " = 1 AND [MontantLigneTVA] IS NULL) OR ([MontantLigneTVA] = @Original_MontantLig"& _ 
                "neTVA)) AND ((@IsNull_MontantLigneTTC = 1 AND [MontantLigneTTC] IS NULL) OR ([Mo"& _ 
                "ntantLigneTTC] = @Original_MontantLigneTTC)) AND ((@IsNull_NCompte = 1 AND [NCom"& _ 
                "pte] IS NULL) OR ([NCompte] = @Original_NCompte)) AND ((@IsNull_NActivite = 1 AN"& _ 
                "D [NActivite] IS NULL) OR ([NActivite] = @Original_NActivite)) AND ((@IsNull_Pri"& _ 
                "xUAchatHT = 1 AND [PrixUAchatHT] IS NULL) OR ([PrixUAchatHT] = @Original_PrixUAc"& _ 
                "hatHT)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbPa"& _ 
                "rution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, Pr"& _ 
                "ixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActi"& _ 
                "vite, PrixUAchatHT FROM VBonLivraison_Detail WHERE (nDetailDevis = @nDetailDevis"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDevis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeProduit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NbParution", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NbParution", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxTva", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxTva", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActivite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUAchatHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.RecalculPiecesAgrifact.My.MySettings.Default.AgrifactConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unit"& _ 
                "e1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remi"& _ 
                "se, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUA"& _ 
                "chatHT FROM dbo.VBonLivraison_Detail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unit"& _ 
                "e1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remi"& _ 
                "se, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUA"& _ 
                "chatHT FROM dbo.VBonLivraison_Detail WHERE nDevis=@nDevis AND CodeProduit IS NOT"& _ 
                " NULL"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE [dbo].[VBonLivraison_Detail] SET [MontantLigneHT] = @MontantLigneHT, [Mont"& _ 
                "antLigneTVA] = @MontantLigneTVA, [MontantLigneTTC] = @MontantLigneTTC WHERE ([nD"& _ 
                "etailDevis] = @nDetailDevis)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAgrifact.VBonLivraison_DetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAgrifact.VBonLivraison_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAgrifact.VBonLivraison_DetailDataTable = New DataSetAgrifact.VBonLivraison_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynDevis(ByVal dataTable As DataSetAgrifact.VBonLivraison_DetailDataTable, ByVal nDevis As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynDevis(ByVal nDevis As Global.System.Nullable(Of Decimal)) As DataSetAgrifact.VBonLivraison_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetAgrifact.VBonLivraison_DetailDataTable = New DataSetAgrifact.VBonLivraison_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAgrifact.VBonLivraison_DetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAgrifact) As Integer
            Return Me.Adapter.Update(dataSet, "VBonLivraison_Detail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDetailDevis,Decimal)
            If (Original_nDevis.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nDevis.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_nLigne.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nLigne.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_NLot Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_NLot,String)
            End If
            If (Original_CodeProduit Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_NbParution.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_NbParution.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Unite1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Unite1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_LibUnite1,String)
            End If
            If (Original_Unite2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Unite2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_LibUnite2,String)
            End If
            If (Original_PrixUHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PrixUHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_TTVA,String)
            End If
            If (Original_TxTva.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_TxTva.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompte Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_NCompte,String)
            End If
            If (Original_NActivite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_NActivite,String)
            End If
            If (Original_PrixUAchatHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nDetailDevis,Decimal)
            If (nDevis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (nLigne.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nLigne.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NLot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NLot,String)
            End If
            If (CodeProduit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Libelle,String)
            End If
            If (NbParution.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NbParution.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Unite1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Unite1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LibUnite1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LibUnite1,String)
            End If
            If (Unite2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Unite2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LibUnite2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LibUnite2,String)
            End If
            If (PrixUHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrixUHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(TTVA,String)
            End If
            If (TxTva.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(TxTva.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrixUTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrixUTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(NActivite,String)
            End If
            If (PrixUAchatHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nDetailDevis,Decimal)
            If (nDevis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (nLigne.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nLigne.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NLot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NLot,String)
            End If
            If (CodeProduit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Libelle,String)
            End If
            If (NbParution.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NbParution.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Unite1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Unite1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LibUnite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(LibUnite1,String)
            End If
            If (Unite2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Unite2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LibUnite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LibUnite2,String)
            End If
            If (PrixUHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PrixUHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(TTVA,String)
            End If
            If (TxTva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(TxTva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrixUTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrixUTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(NActivite,String)
            End If
            If (PrixUAchatHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_nDetailDevis,Decimal)
            If (Original_nDevis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_nDevis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_nLigne.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_nLigne.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_NLot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_NLot,String)
            End If
            If (Original_CodeProduit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_NbParution.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_NbParution.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_Unite1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Unite1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_LibUnite1,String)
            End If
            If (Original_Unite2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Unite2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_LibUnite2,String)
            End If
            If (Original_PrixUHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_PrixUHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_TTVA,String)
            End If
            If (Original_TxTva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_TxTva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_NCompte,String)
            End If
            If (Original_NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_NActivite,String)
            End If
            If (Original_PrixUAchatHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUAchatHT, Original_nDetailDevis, Original_nDevis, Original_nLigne, Original_NLot, Original_CodeProduit, Original_NbParution, Original_Unite1, Original_LibUnite1, Original_Unite2, Original_LibUnite2, Original_PrixUHT, Original_TTVA, Original_TxTva, Original_PrixUTVA, Original_PrixUTTC, Original_Remise, Original_MontantLigneHT, Original_MontantLigneTVA, Original_MontantLigneTTC, Original_NCompte, Original_NActivite, Original_PrixUAchatHT)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMontants(ByVal MontantLigneHT As Global.System.Nullable(Of Decimal), ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal), ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal), ByVal nDetailDevis As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (MontantLigneHT.HasValue = true) Then
                command.Parameters(0).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                command.Parameters(1).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                command.Parameters(2).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            command.Parameters(3).Value = CType(nDetailDevis,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VDevisTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VDevis"
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("Origine", "Origine")
            tableMapping.ColumnMappings.Add("nOrigine", "nOrigine")
            tableMapping.ColumnMappings.Add("nClient", "nClient")
            tableMapping.ColumnMappings.Add("AdresseFacture", "AdresseFacture")
            tableMapping.ColumnMappings.Add("nPrescripteur", "nPrescripteur")
            tableMapping.ColumnMappings.Add("nPayeur", "nPayeur")
            tableMapping.ColumnMappings.Add("nContact", "nContact")
            tableMapping.ColumnMappings.Add("nCommercial", "nCommercial")
            tableMapping.ColumnMappings.Add("Secteur", "Secteur")
            tableMapping.ColumnMappings.Add("FacturationPrescripteur", "FacturationPrescripteur")
            tableMapping.ColumnMappings.Add("FacturationClient", "FacturationClient")
            tableMapping.ColumnMappings.Add("nFacture", "nFacture")
            tableMapping.ColumnMappings.Add("DateFacture", "DateFacture")
            tableMapping.ColumnMappings.Add("Paye", "Paye")
            tableMapping.ColumnMappings.Add("ExportCompta", "ExportCompta")
            tableMapping.ColumnMappings.Add("DateExportCompta", "DateExportCompta")
            tableMapping.ColumnMappings.Add("DateEcheance", "DateEcheance")
            tableMapping.ColumnMappings.Add("Observation", "Observation")
            tableMapping.ColumnMappings.Add("DateRelance1", "DateRelance1")
            tableMapping.ColumnMappings.Add("DateRelance2", "DateRelance2")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("MontantHT", "MontantHT")
            tableMapping.ColumnMappings.Add("MontantTVA", "MontantTVA")
            tableMapping.ColumnMappings.Add("MontantTTC", "MontantTTC")
            tableMapping.ColumnMappings.Add("nPreFacturation", "nPreFacturation")
            tableMapping.ColumnMappings.Add("DatePreFacturation", "DatePreFacturation")
            tableMapping.ColumnMappings.Add("FacturationTTC", "FacturationTTC")
            tableMapping.ColumnMappings.Add("nTarif", "nTarif")
            tableMapping.ColumnMappings.Add("Depot", "Depot")
            tableMapping.ColumnMappings.Add("TxCommission", "TxCommission")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VDevis] WHERE (([nDevis] = @Original_nDevis) AND ((@IsNull_nOr"& _ 
                "igine = 1 AND [nOrigine] IS NULL) OR ([nOrigine] = @Original_nOrigine)) AND ((@I"& _ 
                "sNull_nClient = 1 AND [nClient] IS NULL) OR ([nClient] = @Original_nClient)) AND"& _ 
                " ((@IsNull_nPrescripteur = 1 AND [nPrescripteur] IS NULL) OR ([nPrescripteur] = "& _ 
                "@Original_nPrescripteur)) AND ((@IsNull_nPayeur = 1 AND [nPayeur] IS NULL) OR (["& _ 
                "nPayeur] = @Original_nPayeur)) AND ((@IsNull_nContact = 1 AND [nContact] IS NULL"& _ 
                ") OR ([nContact] = @Original_nContact)) AND ((@IsNull_nCommercial = 1 AND [nComm"& _ 
                "ercial] IS NULL) OR ([nCommercial] = @Original_nCommercial)) AND ((@IsNull_Secte"& _ 
                "ur = 1 AND [Secteur] IS NULL) OR ([Secteur] = @Original_Secteur)) AND ([Facturat"& _ 
                "ionPrescripteur] = @Original_FacturationPrescripteur) AND ([FacturationClient] ="& _ 
                " @Original_FacturationClient) AND ((@IsNull_nFacture = 1 AND [nFacture] IS NULL)"& _ 
                " OR ([nFacture] = @Original_nFacture)) AND ((@IsNull_DateFacture = 1 AND [DateFa"& _ 
                "cture] IS NULL) OR ([DateFacture] = @Original_DateFacture)) AND ([Paye] = @Origi"& _ 
                "nal_Paye) AND ([ExportCompta] = @Original_ExportCompta) AND ((@IsNull_DateExport"& _ 
                "Compta = 1 AND [DateExportCompta] IS NULL) OR ([DateExportCompta] = @Original_Da"& _ 
                "teExportCompta)) AND ((@IsNull_DateEcheance = 1 AND [DateEcheance] IS NULL) OR ("& _ 
                "[DateEcheance] = @Original_DateEcheance)) AND ((@IsNull_DateRelance1 = 1 AND [Da"& _ 
                "teRelance1] IS NULL) OR ([DateRelance1] = @Original_DateRelance1)) AND ((@IsNull"& _ 
                "_DateRelance2 = 1 AND [DateRelance2] IS NULL) OR ([DateRelance2] = @Original_Dat"& _ 
                "eRelance2)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Origi"& _ 
                "nal_Remise)) AND ((@IsNull_MontantHT = 1 AND [MontantHT] IS NULL) OR ([MontantHT"& _ 
                "] = @Original_MontantHT)) AND ((@IsNull_MontantTVA = 1 AND [MontantTVA] IS NULL)"& _ 
                " OR ([MontantTVA] = @Original_MontantTVA)) AND ((@IsNull_MontantTTC = 1 AND [Mon"& _ 
                "tantTTC] IS NULL) OR ([MontantTTC] = @Original_MontantTTC)) AND ((@IsNull_nPreFa"& _ 
                "cturation = 1 AND [nPreFacturation] IS NULL) OR ([nPreFacturation] = @Original_n"& _ 
                "PreFacturation)) AND ((@IsNull_DatePreFacturation = 1 AND [DatePreFacturation] I"& _ 
                "S NULL) OR ([DatePreFacturation] = @Original_DatePreFacturation)) AND ((@IsNull_"& _ 
                "FacturationTTC = 1 AND [FacturationTTC] IS NULL) OR ([FacturationTTC] = @Origina"& _ 
                "l_FacturationTTC)) AND ((@IsNull_nTarif = 1 AND [nTarif] IS NULL) OR ([nTarif] ="& _ 
                " @Original_nTarif)) AND ((@IsNull_Depot = 1 AND [Depot] IS NULL) OR ([Depot] = @"& _ 
                "Original_Depot)) AND ((@IsNull_TxCommission = 1 AND [TxCommission] IS NULL) OR ("& _ 
                "[TxCommission] = @Original_TxCommission)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrigine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPrescripteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPayeur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nContact", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nContact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Secteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExportCompta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEcheance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DatePreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VDevis] ([nDevis], [Origine], [nOrigine], [nClient], [AdresseF"& _ 
                "acture], [nPrescripteur], [nPayeur], [nContact], [nCommercial], [Secteur], [Fact"& _ 
                "urationPrescripteur], [FacturationClient], [nFacture], [DateFacture], [Paye], [E"& _ 
                "xportCompta], [DateExportCompta], [DateEcheance], [Observation], [DateRelance1],"& _ 
                " [DateRelance2], [Remise], [MontantHT], [MontantTVA], [MontantTTC], [nPreFactura"& _ 
                "tion], [DatePreFacturation], [FacturationTTC], [nTarif], [Depot], [TxCommission]"& _ 
                ") VALUES (@nDevis, @Origine, @nOrigine, @nClient, @AdresseFacture, @nPrescripteu"& _ 
                "r, @nPayeur, @nContact, @nCommercial, @Secteur, @FacturationPrescripteur, @Factu"& _ 
                "rationClient, @nFacture, @DateFacture, @Paye, @ExportCompta, @DateExportCompta, "& _ 
                "@DateEcheance, @Observation, @DateRelance1, @DateRelance2, @Remise, @MontantHT, "& _ 
                "@MontantTVA, @MontantTTC, @nPreFacturation, @DatePreFacturation, @FacturationTTC"& _ 
                ", @nTarif, @Depot, @TxCommission);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDevis, Origine, nOrigine, nClient, A"& _ 
                "dresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, Facturati"& _ 
                "onPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, Da"& _ 
                "teExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, M"& _ 
                "ontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, Facturati"& _ 
                "onTTC, nTarif, Depot, TxCommission FROM VDevis WHERE (nDevis = @nDevis)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Origine", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Origine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseFacture", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observation", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VDevis] SET [nDevis] = @nDevis, [Origine] = @Origine, [nOrigine] = "& _ 
                "@nOrigine, [nClient] = @nClient, [AdresseFacture] = @AdresseFacture, [nPrescript"& _ 
                "eur] = @nPrescripteur, [nPayeur] = @nPayeur, [nContact] = @nContact, [nCommercia"& _ 
                "l] = @nCommercial, [Secteur] = @Secteur, [FacturationPrescripteur] = @Facturatio"& _ 
                "nPrescripteur, [FacturationClient] = @FacturationClient, [nFacture] = @nFacture,"& _ 
                " [DateFacture] = @DateFacture, [Paye] = @Paye, [ExportCompta] = @ExportCompta, ["& _ 
                "DateExportCompta] = @DateExportCompta, [DateEcheance] = @DateEcheance, [Observat"& _ 
                "ion] = @Observation, [DateRelance1] = @DateRelance1, [DateRelance2] = @DateRelan"& _ 
                "ce2, [Remise] = @Remise, [MontantHT] = @MontantHT, [MontantTVA] = @MontantTVA, ["& _ 
                "MontantTTC] = @MontantTTC, [nPreFacturation] = @nPreFacturation, [DatePreFactura"& _ 
                "tion] = @DatePreFacturation, [FacturationTTC] = @FacturationTTC, [nTarif] = @nTa"& _ 
                "rif, [Depot] = @Depot, [TxCommission] = @TxCommission WHERE (([nDevis] = @Origin"& _ 
                "al_nDevis) AND ((@IsNull_nOrigine = 1 AND [nOrigine] IS NULL) OR ([nOrigine] = @"& _ 
                "Original_nOrigine)) AND ((@IsNull_nClient = 1 AND [nClient] IS NULL) OR ([nClien"& _ 
                "t] = @Original_nClient)) AND ((@IsNull_nPrescripteur = 1 AND [nPrescripteur] IS "& _ 
                "NULL) OR ([nPrescripteur] = @Original_nPrescripteur)) AND ((@IsNull_nPayeur = 1 "& _ 
                "AND [nPayeur] IS NULL) OR ([nPayeur] = @Original_nPayeur)) AND ((@IsNull_nContac"& _ 
                "t = 1 AND [nContact] IS NULL) OR ([nContact] = @Original_nContact)) AND ((@IsNul"& _ 
                "l_nCommercial = 1 AND [nCommercial] IS NULL) OR ([nCommercial] = @Original_nComm"& _ 
                "ercial)) AND ((@IsNull_Secteur = 1 AND [Secteur] IS NULL) OR ([Secteur] = @Origi"& _ 
                "nal_Secteur)) AND ([FacturationPrescripteur] = @Original_FacturationPrescripteur"& _ 
                ") AND ([FacturationClient] = @Original_FacturationClient) AND ((@IsNull_nFacture"& _ 
                " = 1 AND [nFacture] IS NULL) OR ([nFacture] = @Original_nFacture)) AND ((@IsNull"& _ 
                "_DateFacture = 1 AND [DateFacture] IS NULL) OR ([DateFacture] = @Original_DateFa"& _ 
                "cture)) AND ([Paye] = @Original_Paye) AND ([ExportCompta] = @Original_ExportComp"& _ 
                "ta) AND ((@IsNull_DateExportCompta = 1 AND [DateExportCompta] IS NULL) OR ([Date"& _ 
                "ExportCompta] = @Original_DateExportCompta)) AND ((@IsNull_DateEcheance = 1 AND "& _ 
                "[DateEcheance] IS NULL) OR ([DateEcheance] = @Original_DateEcheance)) AND ((@IsN"& _ 
                "ull_DateRelance1 = 1 AND [DateRelance1] IS NULL) OR ([DateRelance1] = @Original_"& _ 
                "DateRelance1)) AND ((@IsNull_DateRelance2 = 1 AND [DateRelance2] IS NULL) OR ([D"& _ 
                "ateRelance2] = @Original_DateRelance2)) AND ((@IsNull_Remise = 1 AND [Remise] IS"& _ 
                " NULL) OR ([Remise] = @Original_Remise)) AND ((@IsNull_MontantHT = 1 AND [Montan"& _ 
                "tHT] IS NULL) OR ([MontantHT] = @Original_MontantHT)) AND ((@IsNull_MontantTVA ="& _ 
                " 1 AND [MontantTVA] IS NULL) OR ([MontantTVA] = @Original_MontantTVA)) AND ((@Is"& _ 
                "Null_MontantTTC = 1 AND [MontantTTC] IS NULL) OR ([MontantTTC] = @Original_Monta"& _ 
                "ntTTC)) AND ((@IsNull_nPreFacturation = 1 AND [nPreFacturation] IS NULL) OR ([nP"& _ 
                "reFacturation] = @Original_nPreFacturation)) AND ((@IsNull_DatePreFacturation = "& _ 
                "1 AND [DatePreFacturation] IS NULL) OR ([DatePreFacturation] = @Original_DatePre"& _ 
                "Facturation)) AND ((@IsNull_FacturationTTC = 1 AND [FacturationTTC] IS NULL) OR "& _ 
                "([FacturationTTC] = @Original_FacturationTTC)) AND ((@IsNull_nTarif = 1 AND [nTa"& _ 
                "rif] IS NULL) OR ([nTarif] = @Original_nTarif)) AND ((@IsNull_Depot = 1 AND [Dep"& _ 
                "ot] IS NULL) OR ([Depot] = @Original_Depot)) AND ((@IsNull_TxCommission = 1 AND "& _ 
                "[TxCommission] IS NULL) OR ([TxCommission] = @Original_TxCommission)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nCon"& _ 
                "tact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture"& _ 
                ", DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, "& _ 
                "DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFactu"& _ 
                "ration, DatePreFacturation, FacturationTTC, nTarif, Depot, TxCommission FROM VDe"& _ 
                "vis WHERE (nDevis = @nDevis)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Origine", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Origine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdresseFacture", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdresseFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observation", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nOrigine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nOrigine", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nOrigine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nClient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nClient", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPrescripteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPrescripteur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPayeur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPayeur", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPayeur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nContact", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nContact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nContact", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nContact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nCommercial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCommercial", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nCommercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Secteur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Secteur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Secteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationPrescripteur", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationPrescripteur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationClient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nFacture", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateFacture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateFacture", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateFacture", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Paye", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paye", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExportCompta", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExportCompta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExportCompta", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExportCompta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEcheance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEcheance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEcheance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRelance2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRelance2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRelance2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nPreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nPreFacturation", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nPreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DatePreFacturation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DatePreFacturation", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePreFacturation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FacturationTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FacturationTTC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nTarif", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nTarif", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nTarif", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "nTarif", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxCommission", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxCommission", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.RecalculPiecesAgrifact.My.MySettings.Default.AgrifactConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur"& _ 
                ", nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nF"& _ 
                "acture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observa"& _ 
                "tion, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPr"& _ 
                "eFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, TxCommission FR"& _ 
                "OM dbo.VDevis"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, "& _ 
                "nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationCli"& _ 
                "ent, nFacture, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         DateFacture, Paye, ExportCompta, DateE"& _ 
                "xportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, Mont"& _ 
                "antHT, MontantTVA, MontantTTC, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         nPreFacturation, DateP"& _ 
                "reFacturation, FacturationTTC, nTarif, Depot, TxCommission"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VDev"& _ 
                "is"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (FacturationTTC = @FacturationTTC)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY nDevis DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FacturationTTC", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "FacturationTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur"& _ 
                ", nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nF"& _ 
                "acture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observa"& _ 
                "tion, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPr"& _ 
                "eFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, TxCommission FR"& _ 
                "OM dbo.VDevis WHERE nDevis=@nDevis"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE [dbo].[VDevis] SET [MontantHT] = @MontantHT, [MontantTVA] = @MontantTVA, ["& _ 
                "MontantTTC] = @MontantTTC WHERE ([nDevis] = @nDevis)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantHT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTVA", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantTTC", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAgrifact.VDevisDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAgrifact.VDevisDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAgrifact.VDevisDataTable = New DataSetAgrifact.VDevisDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFacturationTTC(ByVal dataTable As DataSetAgrifact.VDevisDataTable, ByVal FacturationTTC As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFacturationTTC(ByVal FacturationTTC As Global.System.Nullable(Of Boolean)) As DataSetAgrifact.VDevisDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetAgrifact.VDevisDataTable = New DataSetAgrifact.VDevisDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynDevis(ByVal dataTable As DataSetAgrifact.VDevisDataTable, ByVal nDevis As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynDevis(ByVal nDevis As Decimal) As DataSetAgrifact.VDevisDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis,Decimal)
            Dim dataTable As DataSetAgrifact.VDevisDataTable = New DataSetAgrifact.VDevisDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAgrifact.VDevisDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAgrifact) As Integer
            Return Me.Adapter.Update(dataSet, "VDevis")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Depot As String,  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDevis,Decimal)
            If (Original_nOrigine.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nOrigine.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_nClient.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nClient.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_nPrescripteur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_nPayeur.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_nPayeur.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_nContact.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_nContact.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_nCommercial.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Secteur Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Secteur,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_FacturationPrescripteur,Boolean)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_FacturationClient,Boolean)
            If (Original_nFacture.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_nFacture.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_DateFacture.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_DateFacture.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_Paye,Boolean)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_ExportCompta,Boolean)
            If (Original_DateExportCompta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_DateExportCompta.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEcheance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_DateEcheance.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_DateRelance1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_DateRelance2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_MontantHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MontantTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_MontantTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_nPreFacturation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_DatePreFacturation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_DatePreFacturation.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_Depot Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_Depot,String)
            End If
            If (Original_TxCommission.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_TxCommission.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Depot As String,  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Origine Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Origine,String)
            End If
            If (nOrigine.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nOrigine.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (nClient.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(nClient.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AdresseFacture Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AdresseFacture,String)
            End If
            If (nPrescripteur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (nPayeur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(nPayeur.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (nContact.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(nContact.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(nCommercial.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Secteur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Secteur,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(FacturationPrescripteur,Boolean)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(FacturationClient,Boolean)
            If (nFacture.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(nFacture.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (DateFacture.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(DateFacture.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(Paye,Boolean)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(ExportCompta,Boolean)
            If (DateExportCompta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(DateExportCompta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (DateEcheance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(DateEcheance.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Observation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Observation,String)
            End If
            If (DateRelance1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(DateRelance1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (DateRelance2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(DateRelance2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MontantHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(MontantHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(MontantTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(MontantTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (nPreFacturation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (DatePreFacturation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(DatePreFacturation.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Depot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Depot,String)
            End If
            If (TxCommission.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(TxCommission.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDevis As Decimal,  _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Depot As String,  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Depot As String,  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nDevis,Decimal)
            If (Origine Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Origine,String)
            End If
            If (nOrigine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nOrigine.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (nClient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(nClient.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AdresseFacture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AdresseFacture,String)
            End If
            If (nPrescripteur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (nPayeur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(nPayeur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (nContact.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(nContact.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(nCommercial.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Secteur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Secteur,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(FacturationPrescripteur,Boolean)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(FacturationClient,Boolean)
            If (nFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(nFacture.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (DateFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(DateFacture.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Paye,Boolean)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ExportCompta,Boolean)
            If (DateExportCompta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(DateExportCompta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (DateEcheance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(DateEcheance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Observation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Observation,String)
            End If
            If (DateRelance1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(DateRelance1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (DateRelance2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(DateRelance2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MontantHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(MontantHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(MontantTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(MontantTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (nPreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (DatePreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(DatePreFacturation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Depot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Depot,String)
            End If
            If (TxCommission.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(TxCommission.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_nDevis,Decimal)
            If (Original_nOrigine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_nOrigine.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_nClient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_nClient.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_nPrescripteur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_nPrescripteur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_nPayeur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_nPayeur.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_nContact.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_nContact.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_nCommercial.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_nCommercial.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_Secteur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_Secteur,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_FacturationPrescripteur,Boolean)
            Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_FacturationClient,Boolean)
            If (Original_nFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_nFacture.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_DateFacture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_DateFacture.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_Paye,Boolean)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_ExportCompta,Boolean)
            If (Original_DateExportCompta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_DateExportCompta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEcheance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_DateEcheance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_DateRelance1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRelance2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_DateRelance2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_MontantHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_MontantTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_MontantTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_nPreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_nPreFacturation.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_DatePreFacturation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_DatePreFacturation.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_FacturationTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_FacturationTTC.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_nTarif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_nTarif.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_Depot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_Depot,String)
            End If
            If (Original_TxCommission.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_TxCommission.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Origine As String,  _
                    ByVal nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal AdresseFacture As String,  _
                    ByVal nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Secteur As String,  _
                    ByVal FacturationPrescripteur As Boolean,  _
                    ByVal FacturationClient As Boolean,  _
                    ByVal nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Paye As Boolean,  _
                    ByVal ExportCompta As Boolean,  _
                    ByVal DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Observation As String,  _
                    ByVal DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Depot As String,  _
                    ByVal TxCommission As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nDevis As Decimal,  _
                    ByVal Original_nOrigine As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nClient As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPrescripteur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPayeur As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nContact As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nCommercial As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Secteur As String,  _
                    ByVal Original_FacturationPrescripteur As Boolean,  _
                    ByVal Original_FacturationClient As Boolean,  _
                    ByVal Original_nFacture As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateFacture As Global.System.Nullable(Of Date),  _
                    ByVal Original_Paye As Boolean,  _
                    ByVal Original_ExportCompta As Boolean,  _
                    ByVal Original_DateExportCompta As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateEcheance As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_DateRelance2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nPreFacturation As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DatePreFacturation As Global.System.Nullable(Of Date),  _
                    ByVal Original_FacturationTTC As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_nTarif As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Depot As String,  _
                    ByVal Original_TxCommission As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_nDevis, Origine, nOrigine, nClient, AdresseFacture, nPrescripteur, nPayeur, nContact, nCommercial, Secteur, FacturationPrescripteur, FacturationClient, nFacture, DateFacture, Paye, ExportCompta, DateExportCompta, DateEcheance, Observation, DateRelance1, DateRelance2, Remise, MontantHT, MontantTVA, MontantTTC, nPreFacturation, DatePreFacturation, FacturationTTC, nTarif, Depot, TxCommission, Original_nDevis, Original_nOrigine, Original_nClient, Original_nPrescripteur, Original_nPayeur, Original_nContact, Original_nCommercial, Original_Secteur, Original_FacturationPrescripteur, Original_FacturationClient, Original_nFacture, Original_DateFacture, Original_Paye, Original_ExportCompta, Original_DateExportCompta, Original_DateEcheance, Original_DateRelance1, Original_DateRelance2, Original_Remise, Original_MontantHT, Original_MontantTVA, Original_MontantTTC, Original_nPreFacturation, Original_DatePreFacturation, Original_FacturationTTC, Original_nTarif, Original_Depot, Original_TxCommission)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMontants(ByVal MontantHT As Global.System.Nullable(Of Decimal), ByVal MontantTVA As Global.System.Nullable(Of Decimal), ByVal MontantTTC As Global.System.Nullable(Of Decimal), ByVal nDevis As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (MontantHT.HasValue = true) Then
                command.Parameters(0).Value = CType(MontantHT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MontantTVA.HasValue = true) Then
                command.Parameters(1).Value = CType(MontantTVA.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MontantTTC.HasValue = true) Then
                command.Parameters(2).Value = CType(MontantTTC.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            command.Parameters(3).Value = CType(nDevis,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VDevis_DetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VDevis_Detail"
            tableMapping.ColumnMappings.Add("nDetailDevis", "nDetailDevis")
            tableMapping.ColumnMappings.Add("nDevis", "nDevis")
            tableMapping.ColumnMappings.Add("nLigne", "nLigne")
            tableMapping.ColumnMappings.Add("NLot", "NLot")
            tableMapping.ColumnMappings.Add("CodeProduit", "CodeProduit")
            tableMapping.ColumnMappings.Add("Libelle", "Libelle")
            tableMapping.ColumnMappings.Add("NbParution", "NbParution")
            tableMapping.ColumnMappings.Add("Unite1", "Unite1")
            tableMapping.ColumnMappings.Add("LibUnite1", "LibUnite1")
            tableMapping.ColumnMappings.Add("Unite2", "Unite2")
            tableMapping.ColumnMappings.Add("LibUnite2", "LibUnite2")
            tableMapping.ColumnMappings.Add("PrixUHT", "PrixUHT")
            tableMapping.ColumnMappings.Add("TTVA", "TTVA")
            tableMapping.ColumnMappings.Add("TxTva", "TxTva")
            tableMapping.ColumnMappings.Add("PrixUTVA", "PrixUTVA")
            tableMapping.ColumnMappings.Add("PrixUTTC", "PrixUTTC")
            tableMapping.ColumnMappings.Add("Remise", "Remise")
            tableMapping.ColumnMappings.Add("MontantLigneHT", "MontantLigneHT")
            tableMapping.ColumnMappings.Add("MontantLigneTVA", "MontantLigneTVA")
            tableMapping.ColumnMappings.Add("MontantLigneTTC", "MontantLigneTTC")
            tableMapping.ColumnMappings.Add("NCompte", "NCompte")
            tableMapping.ColumnMappings.Add("NActivite", "NActivite")
            tableMapping.ColumnMappings.Add("PrixUAchatHT", "PrixUAchatHT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VDevis_Detail] WHERE (([nDetailDevis] = @Original_nDetailDevis"& _ 
                ") AND ((@IsNull_nDevis = 1 AND [nDevis] IS NULL) OR ([nDevis] = @Original_nDevis"& _ 
                ")) AND ((@IsNull_nLigne = 1 AND [nLigne] IS NULL) OR ([nLigne] = @Original_nLign"& _ 
                "e)) AND ((@IsNull_NLot = 1 AND [NLot] IS NULL) OR ([NLot] = @Original_NLot)) AND"& _ 
                " ((@IsNull_CodeProduit = 1 AND [CodeProduit] IS NULL) OR ([CodeProduit] = @Origi"& _ 
                "nal_CodeProduit)) AND ((@IsNull_NbParution = 1 AND [NbParution] IS NULL) OR ([Nb"& _ 
                "Parution] = @Original_NbParution)) AND ((@IsNull_Unite1 = 1 AND [Unite1] IS NULL"& _ 
                ") OR ([Unite1] = @Original_Unite1)) AND ((@IsNull_LibUnite1 = 1 AND [LibUnite1] "& _ 
                "IS NULL) OR ([LibUnite1] = @Original_LibUnite1)) AND ((@IsNull_Unite2 = 1 AND [U"& _ 
                "nite2] IS NULL) OR ([Unite2] = @Original_Unite2)) AND ((@IsNull_LibUnite2 = 1 AN"& _ 
                "D [LibUnite2] IS NULL) OR ([LibUnite2] = @Original_LibUnite2)) AND ((@IsNull_Pri"& _ 
                "xUHT = 1 AND [PrixUHT] IS NULL) OR ([PrixUHT] = @Original_PrixUHT)) AND ((@IsNul"& _ 
                "l_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA)) AND ((@IsNull_TxTva"& _ 
                " = 1 AND [TxTva] IS NULL) OR ([TxTva] = @Original_TxTva)) AND ((@IsNull_PrixUTVA"& _ 
                " = 1 AND [PrixUTVA] IS NULL) OR ([PrixUTVA] = @Original_PrixUTVA)) AND ((@IsNull"& _ 
                "_PrixUTTC = 1 AND [PrixUTTC] IS NULL) OR ([PrixUTTC] = @Original_PrixUTTC)) AND "& _ 
                "((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Original_Remise)) AND"& _ 
                " ((@IsNull_MontantLigneHT = 1 AND [MontantLigneHT] IS NULL) OR ([MontantLigneHT]"& _ 
                " = @Original_MontantLigneHT)) AND ((@IsNull_MontantLigneTVA = 1 AND [MontantLign"& _ 
                "eTVA] IS NULL) OR ([MontantLigneTVA] = @Original_MontantLigneTVA)) AND ((@IsNull"& _ 
                "_MontantLigneTTC = 1 AND [MontantLigneTTC] IS NULL) OR ([MontantLigneTTC] = @Ori"& _ 
                "ginal_MontantLigneTTC)) AND ((@IsNull_NCompte = 1 AND [NCompte] IS NULL) OR ([NC"& _ 
                "ompte] = @Original_NCompte)) AND ((@IsNull_NActivite = 1 AND [NActivite] IS NULL"& _ 
                ") OR ([NActivite] = @Original_NActivite)) AND ((@IsNull_PrixUAchatHT = 1 AND [Pr"& _ 
                "ixUAchatHT] IS NULL) OR ([PrixUAchatHT] = @Original_PrixUAchatHT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDevis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeProduit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NbParution", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NbParution", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxTva", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxTva", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActivite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUAchatHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VDevis_Detail] ([nDetailDevis], [nDevis], [nLigne], [NLot], [C"& _ 
                "odeProduit], [Libelle], [NbParution], [Unite1], [LibUnite1], [Unite2], [LibUnite"& _ 
                "2], [PrixUHT], [TTVA], [TxTva], [PrixUTVA], [PrixUTTC], [Remise], [MontantLigneH"& _ 
                "T], [MontantLigneTVA], [MontantLigneTTC], [NCompte], [NActivite], [PrixUAchatHT]"& _ 
                ") VALUES (@nDetailDevis, @nDevis, @nLigne, @NLot, @CodeProduit, @Libelle, @NbPar"& _ 
                "ution, @Unite1, @LibUnite1, @Unite2, @LibUnite2, @PrixUHT, @TTVA, @TxTva, @PrixU"& _ 
                "TVA, @PrixUTTC, @Remise, @MontantLigneHT, @MontantLigneTVA, @MontantLigneTTC, @N"& _ 
                "Compte, @NActivite, @PrixUAchatHT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, NLot, "& _ 
                "CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT,"& _ 
                " TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, Monta"& _ 
                "ntLigneTTC, NCompte, NActivite, PrixUAchatHT FROM VDevis_Detail WHERE (nDetailDe"& _ 
                "vis = @nDetailDevis)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VDevis_Detail] SET [nDetailDevis] = @nDetailDevis, [nDevis] = @nDev"& _ 
                "is, [nLigne] = @nLigne, [NLot] = @NLot, [CodeProduit] = @CodeProduit, [Libelle] "& _ 
                "= @Libelle, [NbParution] = @NbParution, [Unite1] = @Unite1, [LibUnite1] = @LibUn"& _ 
                "ite1, [Unite2] = @Unite2, [LibUnite2] = @LibUnite2, [PrixUHT] = @PrixUHT, [TTVA]"& _ 
                " = @TTVA, [TxTva] = @TxTva, [PrixUTVA] = @PrixUTVA, [PrixUTTC] = @PrixUTTC, [Rem"& _ 
                "ise] = @Remise, [MontantLigneHT] = @MontantLigneHT, [MontantLigneTVA] = @Montant"& _ 
                "LigneTVA, [MontantLigneTTC] = @MontantLigneTTC, [NCompte] = @NCompte, [NActivite"& _ 
                "] = @NActivite, [PrixUAchatHT] = @PrixUAchatHT WHERE (([nDetailDevis] = @Origina"& _ 
                "l_nDetailDevis) AND ((@IsNull_nDevis = 1 AND [nDevis] IS NULL) OR ([nDevis] = @O"& _ 
                "riginal_nDevis)) AND ((@IsNull_nLigne = 1 AND [nLigne] IS NULL) OR ([nLigne] = @"& _ 
                "Original_nLigne)) AND ((@IsNull_NLot = 1 AND [NLot] IS NULL) OR ([NLot] = @Origi"& _ 
                "nal_NLot)) AND ((@IsNull_CodeProduit = 1 AND [CodeProduit] IS NULL) OR ([CodePro"& _ 
                "duit] = @Original_CodeProduit)) AND ((@IsNull_NbParution = 1 AND [NbParution] IS"& _ 
                " NULL) OR ([NbParution] = @Original_NbParution)) AND ((@IsNull_Unite1 = 1 AND [U"& _ 
                "nite1] IS NULL) OR ([Unite1] = @Original_Unite1)) AND ((@IsNull_LibUnite1 = 1 AN"& _ 
                "D [LibUnite1] IS NULL) OR ([LibUnite1] = @Original_LibUnite1)) AND ((@IsNull_Uni"& _ 
                "te2 = 1 AND [Unite2] IS NULL) OR ([Unite2] = @Original_Unite2)) AND ((@IsNull_Li"& _ 
                "bUnite2 = 1 AND [LibUnite2] IS NULL) OR ([LibUnite2] = @Original_LibUnite2)) AND"& _ 
                " ((@IsNull_PrixUHT = 1 AND [PrixUHT] IS NULL) OR ([PrixUHT] = @Original_PrixUHT)"& _ 
                ") AND ((@IsNull_TTVA = 1 AND [TTVA] IS NULL) OR ([TTVA] = @Original_TTVA)) AND ("& _ 
                "(@IsNull_TxTva = 1 AND [TxTva] IS NULL) OR ([TxTva] = @Original_TxTva)) AND ((@I"& _ 
                "sNull_PrixUTVA = 1 AND [PrixUTVA] IS NULL) OR ([PrixUTVA] = @Original_PrixUTVA))"& _ 
                " AND ((@IsNull_PrixUTTC = 1 AND [PrixUTTC] IS NULL) OR ([PrixUTTC] = @Original_P"& _ 
                "rixUTTC)) AND ((@IsNull_Remise = 1 AND [Remise] IS NULL) OR ([Remise] = @Origina"& _ 
                "l_Remise)) AND ((@IsNull_MontantLigneHT = 1 AND [MontantLigneHT] IS NULL) OR ([M"& _ 
                "ontantLigneHT] = @Original_MontantLigneHT)) AND ((@IsNull_MontantLigneTVA = 1 AN"& _ 
                "D [MontantLigneTVA] IS NULL) OR ([MontantLigneTVA] = @Original_MontantLigneTVA))"& _ 
                " AND ((@IsNull_MontantLigneTTC = 1 AND [MontantLigneTTC] IS NULL) OR ([MontantLi"& _ 
                "gneTTC] = @Original_MontantLigneTTC)) AND ((@IsNull_NCompte = 1 AND [NCompte] IS"& _ 
                " NULL) OR ([NCompte] = @Original_NCompte)) AND ((@IsNull_NActivite = 1 AND [NAct"& _ 
                "ivite] IS NULL) OR ([NActivite] = @Original_NActivite)) AND ((@IsNull_PrixUAchat"& _ 
                "HT = 1 AND [PrixUAchatHT] IS NULL) OR ([PrixUAchatHT] = @Original_PrixUAchatHT))"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution,"& _ 
                " Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC,"& _ 
                " Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, P"& _ 
                "rixUAchatHT FROM VDevis_Detail WHERE (nDetailDevis = @nDetailDevis)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Libelle", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Libelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nDevis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDevis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDevis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nLigne", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nLigne", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLot", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodeProduit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodeProduit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeProduit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NbParution", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NbParution", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NbParution", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NbParution", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Unite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Unite2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 3, "Unite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LibUnite2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LibUnite2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LibUnite2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TTVA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TxTva", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TxTva", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TxTva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TxTva", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 5, "PrixUTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remise", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remise", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remise", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Remise", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTVA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MontantLigneTTC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCompte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCompte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCompte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NActivite", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NActivite", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NActivite", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrixUAchatHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrixUAchatHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PrixUAchatHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.RecalculPiecesAgrifact.My.MySettings.Default.AgrifactConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unit"& _ 
                "e1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remi"& _ 
                "se, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUA"& _ 
                "chatHT FROM dbo.VDevis_Detail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unit"& _ 
                "e1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remi"& _ 
                "se, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUA"& _ 
                "chatHT FROM dbo.VDevis_Detail WHERE nDevis=@nDevis AND CodeProduit IS NOT NULL"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDevis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE [dbo].[VDevis_Detail] SET [MontantLigneHT] = @MontantLigneHT, [MontantLign"& _ 
                "eTVA] = @MontantLigneTVA, [MontantLigneTTC] = @MontantLigneTTC WHERE ([nDetailDe"& _ 
                "vis] = @nDetailDevis)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneHT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTVA", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontantLigneTTC", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MontantLigneTTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDetailDevis", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 0, "nDetailDevis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAgrifact.VDevis_DetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAgrifact.VDevis_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAgrifact.VDevis_DetailDataTable = New DataSetAgrifact.VDevis_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBynDevis(ByVal dataTable As DataSetAgrifact.VDevis_DetailDataTable, ByVal nDevis As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBynDevis(ByVal nDevis As Global.System.Nullable(Of Decimal)) As DataSetAgrifact.VDevis_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (nDevis.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetAgrifact.VDevis_DetailDataTable = New DataSetAgrifact.VDevis_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAgrifact.VDevis_DetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAgrifact) As Integer
            Return Me.Adapter.Update(dataSet, "VDevis_Detail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDetailDevis,Decimal)
            If (Original_nDevis.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nDevis.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_nLigne.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nLigne.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_NLot Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_NLot,String)
            End If
            If (Original_CodeProduit Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_NbParution.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_NbParution.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Unite1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Unite1.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_LibUnite1,String)
            End If
            If (Original_Unite2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Unite2.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_LibUnite2,String)
            End If
            If (Original_PrixUHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PrixUHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_TTVA,String)
            End If
            If (Original_TxTva.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_TxTva.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTVA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTTC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompte Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_NCompte,String)
            End If
            If (Original_NActivite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_NActivite,String)
            End If
            If (Original_PrixUAchatHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nDetailDevis,Decimal)
            If (nDevis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (nLigne.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nLigne.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NLot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NLot,String)
            End If
            If (CodeProduit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Libelle,String)
            End If
            If (NbParution.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NbParution.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Unite1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Unite1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LibUnite1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LibUnite1,String)
            End If
            If (Unite2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Unite2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LibUnite2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LibUnite2,String)
            End If
            If (PrixUHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrixUHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(TTVA,String)
            End If
            If (TxTva.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(TxTva.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrixUTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrixUTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(NActivite,String)
            End If
            If (PrixUAchatHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDetailDevis As Decimal,  _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nDetailDevis,Decimal)
            If (nDevis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nDevis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (nLigne.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nLigne.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NLot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NLot,String)
            End If
            If (CodeProduit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CodeProduit,String)
            End If
            If (Libelle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Libelle,String)
            End If
            If (NbParution.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NbParution.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Unite1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Unite1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LibUnite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(LibUnite1,String)
            End If
            If (Unite2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Unite2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LibUnite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LibUnite2,String)
            End If
            If (PrixUHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PrixUHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(TTVA,String)
            End If
            If (TxTva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(TxTva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrixUTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrixUTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(NCompte,String)
            End If
            If (NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(NActivite,String)
            End If
            If (PrixUAchatHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_nDetailDevis,Decimal)
            If (Original_nDevis.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_nDevis.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_nLigne.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_nLigne.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_NLot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_NLot,String)
            End If
            If (Original_CodeProduit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_CodeProduit,String)
            End If
            If (Original_NbParution.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_NbParution.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_Unite1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Unite1.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_LibUnite1,String)
            End If
            If (Original_Unite2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Unite2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_LibUnite2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_LibUnite2,String)
            End If
            If (Original_PrixUHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_PrixUHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_TTVA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_TTVA,String)
            End If
            If (Original_TxTva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_TxTva.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_PrixUTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_PrixUTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_PrixUTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_Remise.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Remise.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_MontantLigneHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTVA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_MontantLigneTVA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_MontantLigneTTC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_MontantLigneTTC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_NCompte Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_NCompte,String)
            End If
            If (Original_NActivite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_NActivite,String)
            End If
            If (Original_PrixUAchatHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_PrixUAchatHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal NLot As String,  _
                    ByVal CodeProduit As String,  _
                    ByVal Libelle As String,  _
                    ByVal NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite1 As String,  _
                    ByVal Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LibUnite2 As String,  _
                    ByVal PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal TTVA As String,  _
                    ByVal TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal NCompte As String,  _
                    ByVal NActivite As String,  _
                    ByVal PrixUAchatHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nDetailDevis As Decimal,  _
                    ByVal Original_nDevis As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_nLigne As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLot As String,  _
                    ByVal Original_CodeProduit As String,  _
                    ByVal Original_NbParution As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Unite1 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite1 As String,  _
                    ByVal Original_Unite2 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LibUnite2 As String,  _
                    ByVal Original_PrixUHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TTVA As String,  _
                    ByVal Original_TxTva As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PrixUTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Remise As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneHT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTVA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MontantLigneTTC As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NCompte As String,  _
                    ByVal Original_NActivite As String,  _
                    ByVal Original_PrixUAchatHT As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_nDetailDevis, nDevis, nLigne, NLot, CodeProduit, Libelle, NbParution, Unite1, LibUnite1, Unite2, LibUnite2, PrixUHT, TTVA, TxTva, PrixUTVA, PrixUTTC, Remise, MontantLigneHT, MontantLigneTVA, MontantLigneTTC, NCompte, NActivite, PrixUAchatHT, Original_nDetailDevis, Original_nDevis, Original_nLigne, Original_NLot, Original_CodeProduit, Original_NbParution, Original_Unite1, Original_LibUnite1, Original_Unite2, Original_LibUnite2, Original_PrixUHT, Original_TTVA, Original_TxTva, Original_PrixUTVA, Original_PrixUTTC, Original_Remise, Original_MontantLigneHT, Original_MontantLigneTVA, Original_MontantLigneTTC, Original_NCompte, Original_NActivite, Original_PrixUAchatHT)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMontants(ByVal MontantLigneHT As Global.System.Nullable(Of Decimal), ByVal MontantLigneTVA As Global.System.Nullable(Of Decimal), ByVal MontantLigneTTC As Global.System.Nullable(Of Decimal), ByVal nDetailDevis As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (MontantLigneHT.HasValue = true) Then
                command.Parameters(0).Value = CType(MontantLigneHT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTVA.HasValue = true) Then
                command.Parameters(1).Value = CType(MontantLigneTVA.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MontantLigneTTC.HasValue = true) Then
                command.Parameters(2).Value = CType(MontantLigneTTC.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            command.Parameters(3).Value = CType(nDetailDevis,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _vFactureTableAdapter As VFactureTableAdapter
        
        Private _vFacture_DetailTableAdapter As VFacture_DetailTableAdapter
        
        Private _produitTableAdapter As ProduitTableAdapter
        
        Private _tVATableAdapter As TVATableAdapter
        
        Private _vBonCommandeTableAdapter As VBonCommandeTableAdapter
        
        Private _vBonCommande_DetailTableAdapter As VBonCommande_DetailTableAdapter
        
        Private _vBonLivraisonTableAdapter As VBonLivraisonTableAdapter
        
        Private _vBonLivraison_DetailTableAdapter As VBonLivraison_DetailTableAdapter
        
        Private _vDevisTableAdapter As VDevisTableAdapter
        
        Private _vDevis_DetailTableAdapter As VDevis_DetailTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VFactureTableAdapter() As VFactureTableAdapter
            Get
                Return Me._vFactureTableAdapter
            End Get
            Set
                Me._vFactureTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VFacture_DetailTableAdapter() As VFacture_DetailTableAdapter
            Get
                Return Me._vFacture_DetailTableAdapter
            End Get
            Set
                Me._vFacture_DetailTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ProduitTableAdapter() As ProduitTableAdapter
            Get
                Return Me._produitTableAdapter
            End Get
            Set
                Me._produitTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TVATableAdapter() As TVATableAdapter
            Get
                Return Me._tVATableAdapter
            End Get
            Set
                Me._tVATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VBonCommandeTableAdapter() As VBonCommandeTableAdapter
            Get
                Return Me._vBonCommandeTableAdapter
            End Get
            Set
                Me._vBonCommandeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VBonCommande_DetailTableAdapter() As VBonCommande_DetailTableAdapter
            Get
                Return Me._vBonCommande_DetailTableAdapter
            End Get
            Set
                Me._vBonCommande_DetailTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VBonLivraisonTableAdapter() As VBonLivraisonTableAdapter
            Get
                Return Me._vBonLivraisonTableAdapter
            End Get
            Set
                Me._vBonLivraisonTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VBonLivraison_DetailTableAdapter() As VBonLivraison_DetailTableAdapter
            Get
                Return Me._vBonLivraison_DetailTableAdapter
            End Get
            Set
                Me._vBonLivraison_DetailTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VDevisTableAdapter() As VDevisTableAdapter
            Get
                Return Me._vDevisTableAdapter
            End Get
            Set
                Me._vDevisTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VDevis_DetailTableAdapter() As VDevis_DetailTableAdapter
            Get
                Return Me._vDevis_DetailTableAdapter
            End Get
            Set
                Me._vDevis_DetailTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._vFactureTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vFactureTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vFactureTableAdapter.Connection
                End If
                If ((Not (Me._vFacture_DetailTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vFacture_DetailTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vFacture_DetailTableAdapter.Connection
                End If
                If ((Not (Me._produitTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._produitTableAdapter.Connection) Is Nothing)) Then
                    Return Me._produitTableAdapter.Connection
                End If
                If ((Not (Me._tVATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tVATableAdapter.Connection) Is Nothing)) Then
                    Return Me._tVATableAdapter.Connection
                End If
                If ((Not (Me._vBonCommandeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vBonCommandeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vBonCommandeTableAdapter.Connection
                End If
                If ((Not (Me._vBonCommande_DetailTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vBonCommande_DetailTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vBonCommande_DetailTableAdapter.Connection
                End If
                If ((Not (Me._vBonLivraisonTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vBonLivraisonTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vBonLivraisonTableAdapter.Connection
                End If
                If ((Not (Me._vBonLivraison_DetailTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vBonLivraison_DetailTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vBonLivraison_DetailTableAdapter.Connection
                End If
                If ((Not (Me._vDevisTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vDevisTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vDevisTableAdapter.Connection
                End If
                If ((Not (Me._vDevis_DetailTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vDevis_DetailTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vDevis_DetailTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._vFactureTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vFacture_DetailTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._produitTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tVATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vBonCommandeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vBonCommande_DetailTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vBonLivraisonTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vBonLivraison_DetailTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vDevisTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vDevis_DetailTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSetAgrifact, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._vBonCommandeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VBonCommande.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vBonCommandeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vBonLivraisonTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VBonLivraison.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vBonLivraisonTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vDevisTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VDevis.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vDevisTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vFactureTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VFacture.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vFactureTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vBonLivraison_DetailTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VBonLivraison_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vBonLivraison_DetailTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vDevis_DetailTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VDevis_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vDevis_DetailTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vFacture_DetailTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VFacture_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vFacture_DetailTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tVATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TVA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tVATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._produitTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Produit.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._produitTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vBonCommande_DetailTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VBonCommande_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vBonCommande_DetailTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSetAgrifact, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._vBonCommandeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VBonCommande.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vBonCommandeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vBonLivraisonTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VBonLivraison.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vBonLivraisonTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vDevisTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VDevis.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vDevisTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vFactureTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VFacture.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vFactureTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vBonLivraison_DetailTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VBonLivraison_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vBonLivraison_DetailTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vDevis_DetailTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VDevis_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vDevis_DetailTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vFacture_DetailTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VFacture_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vFacture_DetailTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tVATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TVA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tVATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._produitTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Produit.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._produitTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vBonCommande_DetailTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VBonCommande_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vBonCommande_DetailTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSetAgrifact, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._vBonCommande_DetailTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VBonCommande_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vBonCommande_DetailTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._produitTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Produit.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._produitTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tVATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TVA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tVATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vFacture_DetailTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VFacture_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vFacture_DetailTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vDevis_DetailTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VDevis_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vDevis_DetailTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vBonLivraison_DetailTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VBonLivraison_Detail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vBonLivraison_DetailTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vFactureTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VFacture.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vFactureTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vDevisTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VDevis.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vDevisTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vBonLivraisonTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VBonLivraison.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vBonLivraisonTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vBonCommandeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VBonCommande.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vBonCommandeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSetAgrifact) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._vFactureTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vFactureTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._vFacture_DetailTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vFacture_DetailTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._produitTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._produitTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._tVATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tVATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._vBonCommandeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vBonCommandeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._vBonCommande_DetailTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vBonCommande_DetailTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._vBonLivraisonTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vBonLivraisonTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._vBonLivraison_DetailTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vBonLivraison_DetailTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._vDevisTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vDevisTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._vDevis_DetailTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vDevis_DetailTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager ne contient pas d'informations de connexion. Définissez chaqu"& _ 
                        "e propriété TableAdapterManager TableAdapter à une instance valide de TableAdapt"& _ 
                        "er.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transaction ne peut pas commencer. La connexion de données actuelle ne prend p"& _ 
                        "as en charge les transactions ou l'état actuel n'autorise pas le début de la tra"& _ 
                        "nsaction.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._vFactureTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vFactureTableAdapter, Me._vFactureTableAdapter.Connection)
                    Me._vFactureTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vFactureTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vFactureTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vFactureTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vFactureTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vFacture_DetailTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vFacture_DetailTableAdapter, Me._vFacture_DetailTableAdapter.Connection)
                    Me._vFacture_DetailTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vFacture_DetailTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vFacture_DetailTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vFacture_DetailTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vFacture_DetailTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._produitTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._produitTableAdapter, Me._produitTableAdapter.Connection)
                    Me._produitTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._produitTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._produitTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._produitTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._produitTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tVATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tVATableAdapter, Me._tVATableAdapter.Connection)
                    Me._tVATableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tVATableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tVATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tVATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tVATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vBonCommandeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vBonCommandeTableAdapter, Me._vBonCommandeTableAdapter.Connection)
                    Me._vBonCommandeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vBonCommandeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vBonCommandeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vBonCommandeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vBonCommandeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vBonCommande_DetailTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vBonCommande_DetailTableAdapter, Me._vBonCommande_DetailTableAdapter.Connection)
                    Me._vBonCommande_DetailTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vBonCommande_DetailTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vBonCommande_DetailTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vBonCommande_DetailTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vBonCommande_DetailTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vBonLivraisonTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vBonLivraisonTableAdapter, Me._vBonLivraisonTableAdapter.Connection)
                    Me._vBonLivraisonTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vBonLivraisonTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vBonLivraisonTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vBonLivraisonTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vBonLivraisonTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vBonLivraison_DetailTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vBonLivraison_DetailTableAdapter, Me._vBonLivraison_DetailTableAdapter.Connection)
                    Me._vBonLivraison_DetailTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vBonLivraison_DetailTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vBonLivraison_DetailTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vBonLivraison_DetailTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vBonLivraison_DetailTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vDevisTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vDevisTableAdapter, Me._vDevisTableAdapter.Connection)
                    Me._vDevisTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vDevisTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vDevisTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vDevisTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vDevisTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vDevis_DetailTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vDevis_DetailTableAdapter, Me._vDevis_DetailTableAdapter.Connection)
                    Me._vDevis_DetailTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vDevis_DetailTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vDevis_DetailTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vDevis_DetailTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vDevis_DetailTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._vFactureTableAdapter) Is Nothing) Then
                    Me._vFactureTableAdapter.Connection = CType(revertConnections(Me._vFactureTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vFactureTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vFacture_DetailTableAdapter) Is Nothing) Then
                    Me._vFacture_DetailTableAdapter.Connection = CType(revertConnections(Me._vFacture_DetailTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vFacture_DetailTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._produitTableAdapter) Is Nothing) Then
                    Me._produitTableAdapter.Connection = CType(revertConnections(Me._produitTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._produitTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tVATableAdapter) Is Nothing) Then
                    Me._tVATableAdapter.Connection = CType(revertConnections(Me._tVATableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tVATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vBonCommandeTableAdapter) Is Nothing) Then
                    Me._vBonCommandeTableAdapter.Connection = CType(revertConnections(Me._vBonCommandeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vBonCommandeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vBonCommande_DetailTableAdapter) Is Nothing) Then
                    Me._vBonCommande_DetailTableAdapter.Connection = CType(revertConnections(Me._vBonCommande_DetailTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vBonCommande_DetailTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vBonLivraisonTableAdapter) Is Nothing) Then
                    Me._vBonLivraisonTableAdapter.Connection = CType(revertConnections(Me._vBonLivraisonTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vBonLivraisonTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vBonLivraison_DetailTableAdapter) Is Nothing) Then
                    Me._vBonLivraison_DetailTableAdapter.Connection = CType(revertConnections(Me._vBonLivraison_DetailTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vBonLivraison_DetailTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vDevisTableAdapter) Is Nothing) Then
                    Me._vDevisTableAdapter.Connection = CType(revertConnections(Me._vDevisTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vDevisTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vDevis_DetailTableAdapter) Is Nothing) Then
                    Me._vDevis_DetailTableAdapter.Connection = CType(revertConnections(Me._vDevis_DetailTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vDevis_DetailTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
