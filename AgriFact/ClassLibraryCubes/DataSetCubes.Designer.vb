'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.5444
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetCubes"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetCubes
    Inherits Global.System.Data.DataSet
    
    Private tableCube As CubeDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Cube")) Is Nothing) Then
                MyBase.Tables.Add(New CubeDataTable(ds.Tables("Cube")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cube() As CubeDataTable
        Get
            Return Me.tableCube
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetCubes = CType(MyBase.Clone,DataSetCubes)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Cube")) Is Nothing) Then
                MyBase.Tables.Add(New CubeDataTable(ds.Tables("Cube")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCube = CType(MyBase.Tables("Cube"),CubeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCube) Is Nothing) Then
                Me.tableCube.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetCubes"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetCubes.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCube = New CubeDataTable
        MyBase.Tables.Add(Me.tableCube)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCube() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetCubes = New DataSetCubes
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CubeRowChangeEventHandler(ByVal sender As Object, ByVal e As CubeRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CubeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodeCube As Global.System.Data.DataColumn
        
        Private columnCodeParent As Global.System.Data.DataColumn
        
        Private columnSql As Global.System.Data.DataColumn
        
        Private columnle_titre As Global.System.Data.DataColumn
        
        Private columnformat_defaut As Global.System.Data.DataColumn
        
        Private columnle_champ_date As Global.System.Data.DataColumn
        
        Private columnle_type_date As Global.System.Data.DataColumn
        
        Private columnles_champs_formules As Global.System.Data.DataColumn
        
        Private columnles_dimensions As Global.System.Data.DataColumn
        
        Private columnles_dimensions_inv As Global.System.Data.DataColumn
        
        Private columnles_formules As Global.System.Data.DataColumn
        
        Private columnles_mesures As Global.System.Data.DataColumn
        
        Private columnles_titres_dim As Global.System.Data.DataColumn
        
        Private columnles_titres_dim_inv As Global.System.Data.DataColumn
        
        Private columnles_titres_mes As Global.System.Data.DataColumn
        
        Private columnles_types_mesures As Global.System.Data.DataColumn
        
        Private columnouvert_h As Global.System.Data.DataColumn
        
        Private columnouvert_v As Global.System.Data.DataColumn
        
        Private columnp_frooze As Global.System.Data.DataColumn
        
        Private columnp_look As Global.System.Data.DataColumn
        
        Private columnp_modale As Global.System.Data.DataColumn
        
        Private columnp_nom_fichier As Global.System.Data.DataColumn
        
        Private columnp_param As Global.System.Data.DataColumn
        
        Private columnp_on_exporte As Global.System.Data.DataColumn
        
        Private columnp_superutilisateur As Global.System.Data.DataColumn
        
        Private columnp_texte_entete As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Cube"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeCubeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeCube
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeParentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeParent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SqlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSql
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property le_titreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnle_titre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property format_defautColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnformat_defaut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property le_champ_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnle_champ_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property le_type_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnle_type_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property les_champs_formulesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnles_champs_formules
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property les_dimensionsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnles_dimensions
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property les_dimensions_invColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnles_dimensions_inv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property les_formulesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnles_formules
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property les_mesuresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnles_mesures
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property les_titres_dimColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnles_titres_dim
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property les_titres_dim_invColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnles_titres_dim_inv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property les_titres_mesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnles_titres_mes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property les_types_mesuresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnles_types_mesures
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ouvert_hColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnouvert_h
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ouvert_vColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnouvert_v
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property p_froozeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnp_frooze
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property p_lookColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnp_look
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property p_modaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnp_modale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property p_nom_fichierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnp_nom_fichier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property p_paramColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnp_param
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property p_on_exporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnp_on_exporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property p_superutilisateurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnp_superutilisateur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property p_texte_enteteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnp_texte_entete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CubeRow
            Get
                Return CType(Me.Rows(index),CubeRow)
            End Get
        End Property
        
        Public Event CubeRowChanging As CubeRowChangeEventHandler
        
        Public Event CubeRowChanged As CubeRowChangeEventHandler
        
        Public Event CubeRowDeleting As CubeRowChangeEventHandler
        
        Public Event CubeRowDeleted As CubeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCubeRow(ByVal row As CubeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCubeRow( _
                    ByVal CodeCube As String,  _
                    ByVal CodeParent As String,  _
                    ByVal Sql As String,  _
                    ByVal le_titre As String,  _
                    ByVal format_defaut As String,  _
                    ByVal le_champ_date As String,  _
                    ByVal le_type_date As String,  _
                    ByVal les_champs_formules As String,  _
                    ByVal les_dimensions As String,  _
                    ByVal les_dimensions_inv As String,  _
                    ByVal les_formules As String,  _
                    ByVal les_mesures As String,  _
                    ByVal les_titres_dim As String,  _
                    ByVal les_titres_dim_inv As String,  _
                    ByVal les_titres_mes As String,  _
                    ByVal les_types_mesures As String,  _
                    ByVal ouvert_h As Short,  _
                    ByVal ouvert_v As Short,  _
                    ByVal p_frooze As String,  _
                    ByVal p_look As String,  _
                    ByVal p_modale As String,  _
                    ByVal p_nom_fichier As String,  _
                    ByVal p_param As String,  _
                    ByVal p_on_exporte As String,  _
                    ByVal p_superutilisateur As String,  _
                    ByVal p_texte_entete As String) As CubeRow
            Dim rowCubeRow As CubeRow = CType(Me.NewRow,CubeRow)
            Dim columnValuesArray() As Object = New Object() {CodeCube, CodeParent, Sql, le_titre, format_defaut, le_champ_date, le_type_date, les_champs_formules, les_dimensions, les_dimensions_inv, les_formules, les_mesures, les_titres_dim, les_titres_dim_inv, les_titres_mes, les_types_mesures, ouvert_h, ouvert_v, p_frooze, p_look, p_modale, p_nom_fichier, p_param, p_on_exporte, p_superutilisateur, p_texte_entete}
            rowCubeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCubeRow)
            Return rowCubeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodeCube(ByVal CodeCube As String) As CubeRow
            Return CType(Me.Rows.Find(New Object() {CodeCube}),CubeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CubeDataTable = CType(MyBase.Clone,CubeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CubeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodeCube = MyBase.Columns("CodeCube")
            Me.columnCodeParent = MyBase.Columns("CodeParent")
            Me.columnSql = MyBase.Columns("Sql")
            Me.columnle_titre = MyBase.Columns("le_titre")
            Me.columnformat_defaut = MyBase.Columns("format_defaut")
            Me.columnle_champ_date = MyBase.Columns("le_champ_date")
            Me.columnle_type_date = MyBase.Columns("le_type_date")
            Me.columnles_champs_formules = MyBase.Columns("les_champs_formules")
            Me.columnles_dimensions = MyBase.Columns("les_dimensions")
            Me.columnles_dimensions_inv = MyBase.Columns("les_dimensions_inv")
            Me.columnles_formules = MyBase.Columns("les_formules")
            Me.columnles_mesures = MyBase.Columns("les_mesures")
            Me.columnles_titres_dim = MyBase.Columns("les_titres_dim")
            Me.columnles_titres_dim_inv = MyBase.Columns("les_titres_dim_inv")
            Me.columnles_titres_mes = MyBase.Columns("les_titres_mes")
            Me.columnles_types_mesures = MyBase.Columns("les_types_mesures")
            Me.columnouvert_h = MyBase.Columns("ouvert_h")
            Me.columnouvert_v = MyBase.Columns("ouvert_v")
            Me.columnp_frooze = MyBase.Columns("p_frooze")
            Me.columnp_look = MyBase.Columns("p_look")
            Me.columnp_modale = MyBase.Columns("p_modale")
            Me.columnp_nom_fichier = MyBase.Columns("p_nom_fichier")
            Me.columnp_param = MyBase.Columns("p_param")
            Me.columnp_on_exporte = MyBase.Columns("p_on_exporte")
            Me.columnp_superutilisateur = MyBase.Columns("p_superutilisateur")
            Me.columnp_texte_entete = MyBase.Columns("p_texte_entete")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodeCube = New Global.System.Data.DataColumn("CodeCube", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeCube)
            Me.columnCodeParent = New Global.System.Data.DataColumn("CodeParent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeParent)
            Me.columnSql = New Global.System.Data.DataColumn("Sql", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSql)
            Me.columnle_titre = New Global.System.Data.DataColumn("le_titre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnle_titre)
            Me.columnformat_defaut = New Global.System.Data.DataColumn("format_defaut", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnformat_defaut)
            Me.columnle_champ_date = New Global.System.Data.DataColumn("le_champ_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnle_champ_date)
            Me.columnle_type_date = New Global.System.Data.DataColumn("le_type_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnle_type_date)
            Me.columnles_champs_formules = New Global.System.Data.DataColumn("les_champs_formules", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnles_champs_formules)
            Me.columnles_dimensions = New Global.System.Data.DataColumn("les_dimensions", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnles_dimensions)
            Me.columnles_dimensions_inv = New Global.System.Data.DataColumn("les_dimensions_inv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnles_dimensions_inv)
            Me.columnles_formules = New Global.System.Data.DataColumn("les_formules", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnles_formules)
            Me.columnles_mesures = New Global.System.Data.DataColumn("les_mesures", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnles_mesures)
            Me.columnles_titres_dim = New Global.System.Data.DataColumn("les_titres_dim", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnles_titres_dim)
            Me.columnles_titres_dim_inv = New Global.System.Data.DataColumn("les_titres_dim_inv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnles_titres_dim_inv)
            Me.columnles_titres_mes = New Global.System.Data.DataColumn("les_titres_mes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnles_titres_mes)
            Me.columnles_types_mesures = New Global.System.Data.DataColumn("les_types_mesures", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnles_types_mesures)
            Me.columnouvert_h = New Global.System.Data.DataColumn("ouvert_h", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnouvert_h)
            Me.columnouvert_v = New Global.System.Data.DataColumn("ouvert_v", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnouvert_v)
            Me.columnp_frooze = New Global.System.Data.DataColumn("p_frooze", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnp_frooze)
            Me.columnp_look = New Global.System.Data.DataColumn("p_look", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnp_look)
            Me.columnp_modale = New Global.System.Data.DataColumn("p_modale", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnp_modale)
            Me.columnp_nom_fichier = New Global.System.Data.DataColumn("p_nom_fichier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnp_nom_fichier)
            Me.columnp_param = New Global.System.Data.DataColumn("p_param", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnp_param)
            Me.columnp_on_exporte = New Global.System.Data.DataColumn("p_on_exporte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnp_on_exporte)
            Me.columnp_superutilisateur = New Global.System.Data.DataColumn("p_superutilisateur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnp_superutilisateur)
            Me.columnp_texte_entete = New Global.System.Data.DataColumn("p_texte_entete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnp_texte_entete)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodeCube}, true))
            Me.columnCodeCube.AllowDBNull = false
            Me.columnCodeCube.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCubeRow() As CubeRow
            Return CType(Me.NewRow,CubeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CubeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CubeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CubeRowChangedEvent) Is Nothing) Then
                RaiseEvent CubeRowChanged(Me, New CubeRowChangeEvent(CType(e.Row,CubeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CubeRowChangingEvent) Is Nothing) Then
                RaiseEvent CubeRowChanging(Me, New CubeRowChangeEvent(CType(e.Row,CubeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CubeRowDeletedEvent) Is Nothing) Then
                RaiseEvent CubeRowDeleted(Me, New CubeRowChangeEvent(CType(e.Row,CubeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CubeRowDeletingEvent) Is Nothing) Then
                RaiseEvent CubeRowDeleting(Me, New CubeRowChangeEvent(CType(e.Row,CubeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCubeRow(ByVal row As CubeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetCubes = New DataSetCubes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CubeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CubeRow
        Inherits Global.System.Data.DataRow
        
        Private tableCube As CubeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCube = CType(Me.Table,CubeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeCube() As String
            Get
                Return CType(Me(Me.tableCube.CodeCubeColumn),String)
            End Get
            Set
                Me(Me.tableCube.CodeCubeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeParent() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.CodeParentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CodeParent' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.CodeParentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sql() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.SqlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Sql' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.SqlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property le_titre() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.le_titreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'le_titre' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.le_titreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property format_defaut() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.format_defautColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'format_defaut' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.format_defautColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property le_champ_date() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.le_champ_dateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'le_champ_date' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.le_champ_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property le_type_date() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.le_type_dateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'le_type_date' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.le_type_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property les_champs_formules() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.les_champs_formulesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'les_champs_formules' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.les_champs_formulesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property les_dimensions() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.les_dimensionsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'les_dimensions' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.les_dimensionsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property les_dimensions_inv() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.les_dimensions_invColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'les_dimensions_inv' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.les_dimensions_invColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property les_formules() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.les_formulesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'les_formules' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.les_formulesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property les_mesures() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.les_mesuresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'les_mesures' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.les_mesuresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property les_titres_dim() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.les_titres_dimColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'les_titres_dim' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.les_titres_dimColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property les_titres_dim_inv() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.les_titres_dim_invColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'les_titres_dim_inv' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.les_titres_dim_invColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property les_titres_mes() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.les_titres_mesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'les_titres_mes' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.les_titres_mesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property les_types_mesures() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.les_types_mesuresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'les_types_mesures' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.les_types_mesuresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ouvert_h() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCube.ouvert_hColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ouvert_h' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.ouvert_hColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ouvert_v() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCube.ouvert_vColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ouvert_v' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.ouvert_vColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property p_frooze() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.p_froozeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'p_frooze' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.p_froozeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property p_look() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.p_lookColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'p_look' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.p_lookColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property p_modale() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.p_modaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'p_modale' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.p_modaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property p_nom_fichier() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.p_nom_fichierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'p_nom_fichier' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.p_nom_fichierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property p_param() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.p_paramColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'p_param' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.p_paramColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property p_on_exporte() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.p_on_exporteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'p_on_exporte' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.p_on_exporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property p_superutilisateur() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.p_superutilisateurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'p_superutilisateur' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.p_superutilisateurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property p_texte_entete() As String
            Get
                Try 
                    Return CType(Me(Me.tableCube.p_texte_enteteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'p_texte_entete' dans la table 'Cube' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCube.p_texte_enteteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeParentNull() As Boolean
            Return Me.IsNull(Me.tableCube.CodeParentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeParentNull()
            Me(Me.tableCube.CodeParentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSqlNull() As Boolean
            Return Me.IsNull(Me.tableCube.SqlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSqlNull()
            Me(Me.tableCube.SqlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isle_titreNull() As Boolean
            Return Me.IsNull(Me.tableCube.le_titreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setle_titreNull()
            Me(Me.tableCube.le_titreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isformat_defautNull() As Boolean
            Return Me.IsNull(Me.tableCube.format_defautColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setformat_defautNull()
            Me(Me.tableCube.format_defautColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isle_champ_dateNull() As Boolean
            Return Me.IsNull(Me.tableCube.le_champ_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setle_champ_dateNull()
            Me(Me.tableCube.le_champ_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isle_type_dateNull() As Boolean
            Return Me.IsNull(Me.tableCube.le_type_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setle_type_dateNull()
            Me(Me.tableCube.le_type_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isles_champs_formulesNull() As Boolean
            Return Me.IsNull(Me.tableCube.les_champs_formulesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setles_champs_formulesNull()
            Me(Me.tableCube.les_champs_formulesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isles_dimensionsNull() As Boolean
            Return Me.IsNull(Me.tableCube.les_dimensionsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setles_dimensionsNull()
            Me(Me.tableCube.les_dimensionsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isles_dimensions_invNull() As Boolean
            Return Me.IsNull(Me.tableCube.les_dimensions_invColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setles_dimensions_invNull()
            Me(Me.tableCube.les_dimensions_invColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isles_formulesNull() As Boolean
            Return Me.IsNull(Me.tableCube.les_formulesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setles_formulesNull()
            Me(Me.tableCube.les_formulesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isles_mesuresNull() As Boolean
            Return Me.IsNull(Me.tableCube.les_mesuresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setles_mesuresNull()
            Me(Me.tableCube.les_mesuresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isles_titres_dimNull() As Boolean
            Return Me.IsNull(Me.tableCube.les_titres_dimColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setles_titres_dimNull()
            Me(Me.tableCube.les_titres_dimColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isles_titres_dim_invNull() As Boolean
            Return Me.IsNull(Me.tableCube.les_titres_dim_invColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setles_titres_dim_invNull()
            Me(Me.tableCube.les_titres_dim_invColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isles_titres_mesNull() As Boolean
            Return Me.IsNull(Me.tableCube.les_titres_mesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setles_titres_mesNull()
            Me(Me.tableCube.les_titres_mesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isles_types_mesuresNull() As Boolean
            Return Me.IsNull(Me.tableCube.les_types_mesuresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setles_types_mesuresNull()
            Me(Me.tableCube.les_types_mesuresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isouvert_hNull() As Boolean
            Return Me.IsNull(Me.tableCube.ouvert_hColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setouvert_hNull()
            Me(Me.tableCube.ouvert_hColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isouvert_vNull() As Boolean
            Return Me.IsNull(Me.tableCube.ouvert_vColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setouvert_vNull()
            Me(Me.tableCube.ouvert_vColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isp_froozeNull() As Boolean
            Return Me.IsNull(Me.tableCube.p_froozeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setp_froozeNull()
            Me(Me.tableCube.p_froozeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isp_lookNull() As Boolean
            Return Me.IsNull(Me.tableCube.p_lookColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setp_lookNull()
            Me(Me.tableCube.p_lookColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isp_modaleNull() As Boolean
            Return Me.IsNull(Me.tableCube.p_modaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setp_modaleNull()
            Me(Me.tableCube.p_modaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isp_nom_fichierNull() As Boolean
            Return Me.IsNull(Me.tableCube.p_nom_fichierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setp_nom_fichierNull()
            Me(Me.tableCube.p_nom_fichierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isp_paramNull() As Boolean
            Return Me.IsNull(Me.tableCube.p_paramColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setp_paramNull()
            Me(Me.tableCube.p_paramColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isp_on_exporteNull() As Boolean
            Return Me.IsNull(Me.tableCube.p_on_exporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setp_on_exporteNull()
            Me(Me.tableCube.p_on_exporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isp_superutilisateurNull() As Boolean
            Return Me.IsNull(Me.tableCube.p_superutilisateurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setp_superutilisateurNull()
            Me(Me.tableCube.p_superutilisateurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isp_texte_enteteNull() As Boolean
            Return Me.IsNull(Me.tableCube.p_texte_enteteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setp_texte_enteteNull()
            Me(Me.tableCube.p_texte_enteteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CubeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CubeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CubeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CubeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
